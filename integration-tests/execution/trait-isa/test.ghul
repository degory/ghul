namespace Test is








    use Std = IO.Std;


    class OTHER_THING: THING is
        init() is si        
    si

    class DERIVED_THING: THING is
        init() is si        
    si

    class THING: DoStuff, SettableProperty is
        value: int public;
        init() is si
        do_stuff(stuff: int) -> int is
            Std.out.write_line("do stuff: " + stuff);

            return stuff;
        si

        write_value(from: string) is
            Std.out.write_line("value {from}: " + value);
        si
    si
    
    class DO_STUFF: DoStuff is
        init() is si
        do_stuff(stuff: int) -> int is
            Std.out.write_line("do stuff: " + stuff);

            return stuff;
        si    
    si    

    trait DoStuff is
        do_stuff(stuff: int) -> int;
    si

    trait ReadableProperty is
        value: int;
    si

    trait SettableProperty: ReadableProperty is
        // FIXME this info message is accurate but not especially helpful.
        // What's being hidden is the read accessor for the value property
        // in the ReadableProperty trait, but as an equivalent accessor
        // is being provided by the SettableProperty trait, and the THING object's
        // read accessor implements the read accessor for both traits, the
        // property is actually still readable through either trait.
        value: int, = value;
    si

    class Main is
        entry() static is
            

            let ds = THING();

            ds.write_value("after init");
            ds.value = 5;
            ds.write_value("after set value via instance property");
            IO.Std.out.write_line("value read via SettableProperty: {cast SettableProperty(ds).value}");
            IO.Std.out.write_line("value read via ReadableProperty: {cast ReadableProperty(ds).value}");

            cast SettableProperty(ds).value = 10;

            ds.write_value("after set value via cast to SettableProperty");

            IO.Std.out.write_line("value read via SettableProperty: {cast SettableProperty(ds).value}");
            IO.Std.out.write_line("value read via ReadableProperty: {cast ReadableProperty(ds).value}");

            Std.out.write_line("have a: " + ds);
            Std.out.write_line("ds isa DO_STUFF: " + isa DO_STUFF(ds));
            Std.out.write_line("ds isa DoStuff: " + isa DoStuff(ds));
            Std.out.write_line("ds isa ReadableProperty: " + isa ReadableProperty(ds));
            Std.out.write_line("ds isa SettableProperty: " + isa SettableProperty(ds));

            let dt = DERIVED_THING();

            Std.out.write_line("have a: " + dt);
            Std.out.write_line("ds isa DO_STUFF: " + isa DO_STUFF(dt));
            Std.out.write_line("ds isa DoStuff: " + isa DoStuff(dt));
            Std.out.write_line("ds isa ReadableProperty: " + isa ReadableProperty(dt));
            Std.out.write_line("ds isa SettableProperty: " + isa SettableProperty(dt));

            let ot = DERIVED_THING();

            Std.out.write_line("have a: " + ot);
            Std.out.write_line("ds isa DO_STUFF: " + isa DO_STUFF(ot));
            Std.out.write_line("ds isa DoStuff: " + isa DoStuff(ot));
            Std.out.write_line("ds isa ReadableProperty: " + isa ReadableProperty(ot));
            Std.out.write_line("ds isa SettableProperty: " + isa SettableProperty(ot));
        si
    si
si