use IO.Std.write_line;

entry() is
    let n: object = null;
    let a = [1, 2, 3];

    let o: object = "hello";
    let p: object = 123;

    write_line("cts object null {cast_to_string(n)}");
    write_line("cts array 1 2 3 {cast_to_string(a)}");
    write_line("cts 123 {cast_to_string(123)}");
    write_line("cts object o {cast_to_string(o)}");
    write_line("cts object p {cast_to_string(p)}");
    write_line("cts thing {cast_to_string(THING())}");

    write_line("cti object null {cast_to_int(n)}");
    write_line("cti array 1 2 3 {cast_to_int(a)}");
    write_line("cti 'hello' {cast_to_int("hello")}");
    write_line("cti object o {cast_to_int(o)}");
    write_line("cti object p {cast_to_int(p)}");
    write_line("cti thing {cast_to_int(THING())}");

    write_line("ctt object null {cast_to_thing(n)}");
    write_line("ctt array 1 2 3 {cast_to_thing(a)}");
    write_line("ctt 'hello' {cast_to_thing("hello")}");
    write_line("ctt object o {cast_to_thing(o)}");
    write_line("ctt object p {cast_to_thing(p)}");
    write_line("ctt thing {cast_to_thing(THING())}");

    write_line("cfo string object null {cast_from_object[string](null)}");
    write_line("cfo string array 1 2 3 {cast_from_object[string](a)}");
    write_line("cfo string 123 {cast_from_object[string](123)}");
    write_line("cfo string object o {cast_from_object[string](o)}");
    write_line("cfo string object p {cast_from_object[string](p)}");
    write_line("cfo string thing {cast_from_object[string](THING())}");

    write_line("cfo int object null {cast_from_object[int](null)}");
    write_line("cfo int array 1 2 3 {cast_from_object[int](a)}");
    write_line("cfo int 'hello' {cast_from_object[int]("hello")}");
    write_line("cfo int object o {cast_from_object[int](o)}");
    write_line("cfo int object p {cast_from_object[int](p)}");
    write_line("cfo int thing {cast_from_object[int](THING())}");

    write_line("cfo THING object null {cast_from_object[THING](null)}");
    write_line("cfo THING array 1 2 3 {cast_from_object[THING](a)}");
    write_line("cfo THING 'hello' {cast_from_object[THING]("hello")}");
    write_line("cfo THING object o {cast_from_object[THING](o)}");
    write_line("cfo THING object p {cast_from_object[THING](p)}");
    write_line("cfo THING thing {cast_from_object[THING](THING())}");

    // this is maybe not very useful, but is orthogonal
    write_line("cfs object hello {cast_from_string[object]("hello")}");
    write_line("cfs int hello {cast_from_string[int]("hello")}");
    write_line("cfs THING hello {cast_from_string[THING]("hello")}");
si

struct THING is
    _not_default: bool;
    _next: int static;

    value: int;

    init() is
        value = _next;
        _next = _next + 1;
        _not_default = true;
    si

    to_string() -> string =>
        "THING #{value} {if _not_default then "initialized" else "default" fi}";
si

cast_to_string[T](value: T) -> string => cast string(value);
cast_to_int[T](value: T) -> int => cast int(value);
cast_to_thing[T](value: T) -> THING => cast THING(value);

cast_from_object[T](value: object) -> T => cast T(value);
cast_from_string[T](value: string) -> T => cast T(value);