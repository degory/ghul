use IO.Std.write_line;

entry() is
    let use t = new TEST("test");

    t.write_value("entry initial value");

    test_interface(t);
    t.write_value("entry after test_interface");

    test_reference(t ref);
    t.write_value("entry after test_reference");
si

test_interface(t: Test) is
    t.increment();
    t.value_blergh = "blah blah blah from interface";
    t.write_value("interface");
si

test_reference(t: TEST ref) is
    t.increment();
    t.value_blergh = "blah blah blah from reference";
    t.write_value("reference");
si

trait Test is
    value_blergh: string, = value;
    write_value(from: string);
    increment();
si

struct TEST: Test, Disposable is
    _count: int;

    value_blergh: string public;

    init(value: string) is
        self.value_blergh = value;

        write_line("TEST.init: value is {value} count is {_count}");
    si

    increment() is
        _count = _count + 1;
    si

    write_value(from: string) is
        write_line("TEST.write_value: called from {from}, value is {value_blergh} count is {_count}");
    si

    dispose() is
        if value_blergh? then
            write_line("TEST.dispose: value is {value_blergh}");
        fi

        write_line("TEST.dispose: count is {_count}");

        value_blergh = null;
    si    
si
