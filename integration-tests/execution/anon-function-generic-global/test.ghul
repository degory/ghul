use IO.Std.write_line;

entry() is
    try_test("test_global_with_closure", () is
        test_global_with_closure("hello");
    si);

    try_test("test_global_generic_no_closure", () is
        test_global_generic_no_closure(1234);
        test_global_generic_no_closure("hello");
    si);

    try_test("test_global_generic_with_closure", () is
        test_global_generic_with_closure(1234);
        test_global_generic_with_closure("hello");
    si);

    try_test("test_global_generic_with_closure_implicit_type_capture_via_variable", () is
        test_global_generic_with_closure_implicit_type_capture_via_variable(1234);
        test_global_generic_with_closure_implicit_type_capture_via_variable("hello");
    si);

    try_test("test_global_generic_with_closure_implicit_type_capture_via_rec", () is
        test_global_generic_with_closure_implicit_type_capture_via_rec(123);
        test_global_generic_with_closure_implicit_type_capture_via_rec("hello");
    si);

    try_test("Test[string].test_static_with_closure", () is
        Test[string].test_static_with_closure("hello");
    si);
si

try_test(test_name: string, test: () -> void) is
    try
        write_line("Running test: {test_name}");
        test();
    catch ex: System.Exception
        write_line("caught: {ex}");
    yrt
si

// global anon function, with closure / frame
// not generic
test_global_with_closure(t: string) is
    let blah = (x: string) => t;

    write_line("blah({t}) => {blah(t)}");
si

// global anon function, no closure / no frame
// captures type T explicitly but no values
test_global_generic_no_closure[T](t: T) is
    let blah = (x: T) => x;

    write_line("global generic no closure blah({t}) => {blah(t)}");
si

// global anon function, with closure / frame
// captures type T explicitly and a value of type T
test_global_generic_with_closure[T](t: T) is
    let blah = (x: T) => t;

    write_line("global generic with closure blah({t}) => {blah(t)}");
si

// global anon function, with closure / frame
// captures type T implicitly by capturing a value of a type T
test_global_generic_with_closure_implicit_type_capture_via_variable[T](t: T) is
    let blah = () => t;

    write_line("global generic with closure implicit capture via variable blah() => {blah()}");
si

// global anon function, with closure / frame
// captures type T implicitly by capturing a value of a type T
// and also by capturing the lambda and its closure with `rec`
test_global_generic_with_closure_implicit_type_capture_via_rec[T](t: T) is
    let blah = 
        (depth: int) rec => 
            if depth > 1 then 
                "{rec(depth - 1)} {t}"
            else 
                "{t}"
            fi;

    write_line("global generic with closure implicit capture via rec blah() => {blah(3)}");
si

class Test[T] is
    test_static_with_closure(t: string) static is
        let blah = (x: string) => t;

        write_line("blah({t}) => {blah(t)}");            
    si
si