use IO.Std.write_line;

// check we can call dispose() on Disposable structs
// both manually and using the let use pattern
// disposable structs not a particularly good idea,
// but they should work if they are used correctly
// i.e. created on the stack and never copied

entry() is
    test_try_finally();
    test_let_use();
    test_dispose_pattern();
si

test_try_finally() is
    write_line("testing try finally");
    let file = IO.File.open_read("file.txt");
    let reader = new IO.StreamReader(file);
    let check = new Check();

    try
        let line = reader.read_line();
        while line? do
            write_line(line);
            line = reader.read_line();
        od
    finally
        check.dispose();
        reader.close();
        file.close();
    yrt        

    write_line("finished try finally");
si

test_let_use() is
    write_line("testing let use");
    let use file = IO.File.open_read("file.txt");
    let use reader = new IO.StreamReader(file);
    let use check = new Check();

    let line = reader.read_line();
    while line? do
        write_line(line);
        line = reader.read_line();
    od    

    write_line("finished let use");
si

test_dispose_pattern() is
    write_line("verify dispose definitely called");
    let use test = new Test();
    let use check = new Check();
    write_line("finished verify dispose definitely called");
si

struct Check: Disposable is
    _disposed: bool;

    init() is
        write_line("Check created");
    si

    dispose() is
        write_line("disposing Check...");

        if _disposed then
            write_line("Check already disposed");
            return;
        fi

        _disposed = true;
        write_line("disposed Check");
    si
si

struct Test: Disposable is
    _disposed: bool;

    _unmanged_resource: int ptr;
    _managed_resource: IO.FileStream;

    init() is
        _managed_resource = IO.File.open_read("file.txt");

        write_line("Test created");
    si

    dispose() is
        write_line("disposing Test...");
        _dispose(true);
        write_line("suppresing finalize...");
        System.GC.suppress_finalize(self);
        write_line("disposed Test");
    si

    finalize() is
        write_line("finalizing Test...");
        _dispose(false);
        write_line("finalized Test");
    si

    _dispose(disposing: bool) is
        write_line("disposing Test: disposing {disposing} disposed {_disposed}...");

        if _disposed then
            write_line("already disposed");
            return;
        fi

        if disposing then
            write_line("disposing managed resource...");
            _managed_resource.close();
        fi

        if _unmanged_resource != null then
            write_line("disposing unmanaged resource...");
            _free_unmanaged_resource(_unmanged_resource);
            _unmanged_resource = null;
        fi

        write_line("mark as disposed done");
        _disposed = true;

        write_line("disposing Test done");
    si

    _free_unmanaged_resource(resource: int ptr) is
        // do nothing
    si
si