use IO.Std.write_line;

entry() is
    test_class_cast_to_interface_does_implement();
    test_class_cast_to_interface_does_not_implement();
    test_struct_cast_to_interface_does_implement();
    test_struct_cast_to_interface_does_not_implement();
    test_class_cast_to_class_is_instance();
    test_class_cast_to_class_is_not_instance();
si

test_class_cast_to_interface_does_implement() is
    write_line("test_class_cast_to_interface_does_implement");

    let o: object = ClassThingDoer();
    let as_thing_doer = cast DoThings(o);
    assert as_thing_doer? else "cast to interface expected non-null result";
    as_thing_doer.do_something();
si

test_class_cast_to_interface_does_not_implement() is
    write_line("test_class_cast_to_interface_doesnt_implement");

    let o: object = LAZY_CLASS();
    let as_thing_doer = cast DoThings(o);
    assert !as_thing_doer? else "cast to interface expected null result";

    write_line("result is null: {as_thing_doer == null}")
si

test_struct_cast_to_interface_does_implement() is
    write_line("test_struct_cast_to_interface_does_implement");

    let o: object = ClassThingDoer();
    let as_thing_doer = cast DoThings(o);
    assert as_thing_doer? else "cast to interface expected non-null result";
    as_thing_doer.do_something();
si

test_struct_cast_to_interface_does_not_implement() is
    write_line("test_struct_cast_to_interface_doesnt_implement");

    let o: object = LAZY_CLASS();
    let as_thing_doer = cast DoThings(o);
    assert !as_thing_doer? else "cast to interface expected null result";

    write_line("result is null: {as_thing_doer == null}")
si

test_class_cast_to_class_is_instance() is
    write_line("test_class_cast_to_class_is_instance");

    let o: object = CLASS_THING_DOER_DERIVED();
    let as_an_instance = cast ClassThingDoer(o);
    assert as_an_instance? else "cast to class expected non-null result";
    as_an_instance.do_something();    
si

test_class_cast_to_class_is_not_instance() is
    write_line("test_class_cast_to_class_is_not_instance");

    let o: object = ClassThingDoer();
    let as_not_an_instance = cast CLASS_THING_DOER_DERIVED(o);
    assert !as_not_an_instance? else "cast to class expected null result";

    write_line("result is null: {as_not_an_instance == null}")
si



trait DoThings is
    do_something();
si

class LAZY_CLASS is
    init() is
    si

    // does nothing
si

class LAZY_STRUCT is
    init() is
    si

    // does nothing    
si

class ClassThingDoer: DoThings is
    init() is        
    si

    do_something() is
        write_line("{get_type()} is doing something");
    si
si

class CLASS_THING_DOER_DERIVED: ClassThingDoer is
    init() is
    si
    
    do_something() is
        write_line("{get_type()} is REALLY doing something");
    si
si

struct STRUCT_THING_DOER: DoThings is
    init() is
    si

    do_something() is
        write_line("{get_type()} is doing something");
    si    
si