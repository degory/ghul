namespace Test is








    use Std = IO.Std;

    
    class Main is
        entry() static is
            

            let base = new BASE(111);

            let derived = new DERIVED(222);

            let base_copy = base.copy();
            Std.out.write_line("base copy: " + base_copy);

            base_copy.value = 333;
            Std.out.write_line("base copy altered: " + base_copy);

            Std.out.write_line("base original: " + base);

            let derived_copy = derived.copy();
            Std.out.write_line("derived copy: " + derived_copy);

            derived_copy.value = 444;
            Std.out.write_line("derived copy altered: " + derived_copy);

            Std.out.write_line("derived original: " + derived);

            base = derived_copy;

            let derived_copy_copy = base.copy();
            Std.out.write_line("derived copy copy: " + derived_copy_copy);

            Std.out.write_line("---------------------------");

            test(1, base, "BASE");
            test(2, base_copy, "BASE");
            test(3, derived, "DEVIVED");
            test(4, derived_copy, "DERIVED");
            test(5, derived_copy_copy, "DERIVED");
        si

        test(value: int, original: BASE, expect_type: string) static is
            Std.out.write_line();
            Std.out.write_line("start test: value: " + value + " type: " + original.get_type().name);
            original.value = value;
            Std.out.write_line("original: " + original + " expect: " + expect_type + " " + value);

            original.value = value + 100;
            Std.out.write_line("original altered: " + original + " expect: " + expect_type + " " + (value + 100));

            let copy = original.copy();
            Std.out.write_line("copy: " + copy + " expect: " + expect_type + " " + value);

            original.value = original.value + 100;
            Std.out.write_line("original altered again: " + original + " expect: " + expect_type + " " + (value + 200));

            Std.out.write_line("copy: " + copy + " expect: " + expect_type + " " + value);

            copy.value = copy.value + 50;
            Std.out.write_line("copy altered: " + copy + " expect: " + (value + 150));

            Std.out.write_line("original: " + original + " expect: " + (value + 200));
        si        
    si

    class BASE is
        value: int public;

        init(value: int) is
            self.value = value;    
        si
        
        copy() -> BASE is
            Std.out.write_line("will copy BASE");

            return cast BASE(self.memberwise_clone());
        si

        to_string() -> string => get_type().name + " " + value;
    si

    class DERIVED: BASE is
        init(value: int) is
            super.value = value;
        si

        // #460 Should error if return type in overridden method is not covariant
        copy() -> DERIVED is
            Std.out.write_line("will copy DERIVED");

            return cast DERIVED(self.memberwise_clone());
        si
    si
si

