use IO.Std.write_line;

entry() is
    try_test("test_static_with_closure", () is
        Test[int].test_static_generic_with_closure("hello")
    si);

    try_test("test_static_with_closure", () is
        Test[int].test_static_with_closure("hello");
    si);

    try_test("test_static_generic_no_closure", () is
        Test[int[]].test_static_generic_no_closure(1234);
        Test[string[]].test_static_generic_no_closure("hello");
    si);

    try_test("test_static_generic_no_closure_outer", () is
        Test[int[]].test_static_generic_no_closure_outer([1, 2, 3], 1234);
        Test[string[]].test_static_generic_no_closure_outer(["a", "b", "c"], "hello");
    si);

    try_test("test_static_generic_with_closure", () is
        Test[string].test_static_generic_with_closure(1234);
        Test[int].test_static_generic_with_closure("hello");
    si);

    try_test("test_static_generic_with_closure_outer", () is
        Test[string].test_static_generic_with_closure_outer("goodbye", 1234);
        Test[int].test_static_generic_with_closure_outer(5678, "hello");
    si);

    try_test("test_static_generic_with_closure_implicit_type_capture_via_variable", () is
        Test[string].test_static_generic_with_closure_implicit_type_capture_via_variable(1234);
        Test[int].test_static_generic_with_closure_implicit_type_capture_via_variable("hello");
    si);

    try_test("test_static_generic_with_closure_implicit_type_capture_via_variable_outer", () is
        Test[string].test_static_generic_with_closure_implicit_type_capture_via_variable_outer("goodbye", 1234);
        Test[int].test_static_generic_with_closure_implicit_type_capture_via_variable_outer(5678, "hello");
    si);

    try_test("test_static_generic_with_closure_implicit_type_capture_via_rec", () is
        Test[string].test_static_generic_with_closure_implicit_type_capture_via_rec(123);
        Test[string].test_static_generic_with_closure_implicit_type_capture_via_rec("hello");
    si);

    /* 
    needs nested mapping/unmapping of type variable names

    try_test("test_static_generic_nested_closure_capture_both", () is
        Test[int].test_static_generic_nested_closure_capture_both(123, "hello");
        Test[string].test_static_generic_nested_closure_capture_both("goodbye", 567);
    si);
    */
 si

try_test(test_name: string, test: () -> void) is
    try
        write_line("Running test: {test_name}");
        test();
    catch ex: System.Exception
        write_line("caught: {ex}");
    yrt
si

class Test[T] is
    test_static_with_closure(t: string) static is
        let blah = (x: string) => t;

        write_line("blah({t}) => {blah(t)}");            
    si

    // static anon function, no closure / no frame
    // captures type U explicitly but no values
    test_static_generic_no_closure[U](t: U) static is
        let blah = (x: U) => x;

        write_line("static generic no closure blah({t}) => {blah(t)}");
    si

    // static anon function, with closure / frame
    // captures type U explicitly and a value of type U
    test_static_generic_with_closure[U](t: U) static is
        let blah = (x: U) => t;

        write_line("static generic with closure blah({t}) => {blah(t)}");
    si

    // static anon function, with closure / frame
    // captures type U implicitly by capturing a value of a type U
    test_static_generic_with_closure_implicit_type_capture_via_variable[U](t: U) static is
        let blah = () => t;

        write_line("static generic with closure implicit capture via variable blah() => {blah()}");
    si

    // static anon function, with closure / frame
    // captures type U implicitly by capturing a value of a type U
    // and also by capturing the lambda and its closure with `rec`
    test_static_generic_with_closure_implicit_type_capture_via_rec[U](t: U) static is
        let blah = 
            (depth: int) rec => 
                if depth > 1 then 
                    "{rec(depth - 1)} {t}"
                else 
                    "{t}"
                fi;

        write_line("static generic with closure implicit capture via rec blah() => {blah(3)}");
    si


    // static anon function, no closure / no frame
    // captures type U explicitly but no values
    test_static_generic_no_closure_outer[U](t: T, u: U) static is
        let blah = (x: U) => x;

        write_line("static generic no closure blah({t}) => {blah(u)}");
    si

    // static anon function, with closure / frame
    // captures type U explicitly and a value of type U
    test_static_generic_with_closure_outer[U](t: T, u: U) static is
        let blah = (x: U) => t;

        write_line("static generic with closure blah({t}) => {blah(u)}");
    si

    // static anon function, with closure / frame
    // captures type U implicitly by capturing a value of a type U
    test_static_generic_with_closure_implicit_type_capture_via_variable_outer[U](t: T, u: U) static is
        let blah = () => t;

        write_line("static generic with closure implicit capture via variable blah() => {blah()}");
    si
    
    test_static_generic_nested_closure_capture_both[U](t: T, u: U) static is
        let outer = () is
            let inner = () => "t is: {t} u is: {u}";

            return inner;
        si;

        write_line("test_static_generic_nested_closure_capture_both: outer()() => {outer()()}");        
    si
si