
use IO.Std.write_line;

entry() is
    write_line("blob_let_a() = {blob_let_a()}");
    write_line("blob_let_b() = {blob_let_b()}");
    write_line("blob_let_c((1, 2, 3, 4)) = {blob_let_c((1, 2, 3, 4))}");
    write_line("blob_let_d() = {blob_let_d()}");
    write_line("blob_let_s() = {blob_let_s()}");
    write_line("blob_assign_a() = {blob_assign_a()}");
    write_line("blob_assign_b() = {blob_assign_b()}");
    write_line("blob_assign_c((1, 2, 3, 4)) = {blob_assign_c((1, 2, 3, 4))}");
    write_line("blob_assign_d() = {blob_assign_d()}");
    write_line("blob_assign_s() = {blob_assign_s()}");
    blob_f();
si

// struct with fields:
struct BLOB_4[T, U, V, W] is
    `0: T field;
    `1: U field;
    `2: V field;
    `3: W field;

    init(a: T, b: U, c: V, d: W) is
        `0 = a;
        `1 = b;
        `2 = c;
        `3 = d;
    si
si

// class with fields
class BLOB_3[T, U, V] is
    `0: T field;
    `1: U field;
    `2: V field;

    init(a: T, b: U, c: V) is
        `0 = a;
        `1 = b;
        `2 = c;
    si
si

// struct with properties:
struct BLOB_2[T, U] is
    `0: T;
    `1: U;

    init(a: T, b: U) is
        `0 = a;
        `1 = b;
    si
si

blob_let_a() -> int is
    let t = new BLOB_4[int,int,int,int](1, 2, 3, 4);

    let (a, b, c, d) = t;

    return a + b + c + d;
si

blob_let_b() -> int is
    let (a, b, c, d) = new BLOB_4[int,int,int,int](1, 2, 3, 4);

    return a + b + c + d;
si

blob_let_c(t: (int, int, int, int)) -> int is
    let (a, b, c, d) = new BLOB_4[int,int,int,int](t.`0, t.`1, t.`2, t.`3);

    return a + b + c + d;
si

blob_let_d() -> int is
    let (a, (b, c), d) =  new BLOB_3[int, BLOB_2[int, int], int](1, new BLOB_2[int, int](2, 3), 4);

    return a + b + c + d;
si

blob_let_s() -> string is
    let (a, b, c, d) = new BLOB_4[int, string, int, string](1, "AA", 3, "BB");

    return "a = {a}, b = {b}, c = {c}, d = {d}";
si

blob_assign_a() -> int is
    let t = new BLOB_4[int,int,int,int](1, 2, 3, 4);

    let a: int, b: int, c: int, d: int;

    (a, b, c, d) = t;

    return a + b + c + d;
si

blob_assign_b() -> int is
    let a: int, b: int, c: int, d: int;

    (a, b, c, d) = new BLOB_4[int,int,int,int](1, 2, 3, 4);

    return a + b + c + d;
si

blob_assign_c(t: (int, int, int, int)) -> int is
    let a: int, b: int, c: int, d: int;

    (a, b, c, d) = new BLOB_4[int,int,int,int](t.`0, t.`1, t.`2, t.`3);

    return a + b + c + d;
si

blob_assign_d() -> int is
    let a: int, b: int, c: int, d: int;

    (a, (b, c), d) = new BLOB_3[int, BLOB_2[int, int], int](1, new BLOB_2[int, int](2, 3), 4);

    return a + b + c + d;
si

blob_assign_s() -> string is
    let a: int, b: string, c: int, d: string;

    (a, b, c, d) = new BLOB_4[int, string, int, string](1, "AA", 3, "BB");

    return "a = {a}, b = {b}, c = {c}, d = {d}";
si

blob_f() is
    let a = new Collections.LIST[BLOB_2[int, int]]();

    for i in 0..10 do
        // a.add((i, i + 1));
        a.add(new BLOB_2[int, int](i, i + 1));
    od

    for (i, j) in a do
        write_line("i = {i}, j = {j}");
    od        
si
