namespace Test is
    use IO.Std.write_line;

    // global function:
    class I is
        value: int;
        
        init(v: int) is value = v; si

        to_string() -> string => "" + value;
    si

    =~(a: I, b: I) -> bool => a.value == b.value; // equals/not-equals
    <>(a: I, b: I) -> int => a.value - b.value; // inequalities

    check(a: object, b: object, operator: string, expected: bool, actual: bool) is
        write_line("{0} {1} {2} result {3} (expected {4} vs actual {5})", [a, operator, b, expected == actual, expected, actual]);
    si
    
    entry() is
        let i_123 = new I(123);
        let j_123 = new I(123);
        let k_456 = new I(456);
        let l_100 = new I(100);

        check(i_123, i_123, "=~", true, i_123 =~ i_123);
        check(i_123, j_123, "=~", true, i_123 =~ j_123);
        check(i_123, k_456, "=~", false, i_123 =~ k_456);

        check(i_123, i_123, "!~", false, i_123 !~ i_123);
        check(i_123, j_123, "!~", false, i_123 !~ j_123);
        check(i_123, k_456, "!~", true, i_123 !~ k_456);

        check(i_123, i_123, ">", false, i_123 > i_123);
        check(i_123, j_123, ">", false, i_123 > j_123);
        check(i_123, k_456, ">", false, i_123 > k_456);
        check(i_123, l_100, ">", true, i_123 > l_100);

        check(i_123, i_123, ">=", true, i_123 >= i_123);
        check(i_123, j_123, ">=", true, i_123 >= j_123);
        check(i_123, k_456, ">=", false, i_123 >= k_456);
        check(i_123, l_100, ">=", true, i_123 >= l_100);

        check(i_123, i_123, "<", false, i_123 < i_123);
        check(i_123, j_123, "<", false, i_123 < j_123);
        check(i_123, k_456, "<", true, i_123 < k_456);
        check(i_123, l_100, "<", false, i_123 < l_100);

        check(i_123, i_123, "<=", true, i_123 <= i_123);
        check(i_123, j_123, "<=", true, i_123 <= j_123);
        check(i_123, k_456, "<=", true, i_123 <= k_456);
        check(i_123, l_100, "<=", false, i_123 <= l_100);
    si
si
