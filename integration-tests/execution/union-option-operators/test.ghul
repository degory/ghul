use IO.Std.write_line;

union Option[T] is
    SOME(value: T);
    NONE;
si

union Result[T,E] is
    OK(value: T);
    ERROR(error: E);
si

entry() is
    test_option();
    test_result();
si

test_option() is
    let s = some(42);
    let n = none[int]();

    write_line(s.has_value);
    write_line(n.has_value);

    write_line(s?);
    write_line(n?);

    write_line(s.value);
    write_line(s!);
si

test_result() is
    let r_ok = ok(123);
    let r_err = error("bad");

    if r_ok.is_ok then
        write_line(r_ok.ok);
    fi;

    if r_err.is_error then
        write_line(r_err.error);
    fi;
si

some[T](value: T) -> Option[T] => Option.SOME[T](value);
none[T]() -> Option[T] => Option.NONE[T]();

ok[T](value: T) -> Result[T,string] => Result.OK[T,string](value);
error[E](value: E) -> Result[int,E] => Result.ERROR[int,E](value);
