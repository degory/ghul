use IO.Std.write_line;

// check we can call dispose() on Disposable structs
// both manually and using the let use pattern
// disposable structs not a particularly good idea,
// but they should work if they are used correctly
// i.e. created on the stack and never copied

entry() is
    test_let_use_in_try();
    test_let_use_in_catch();

    test_let_use_in_finally_no_throw();

    try
        test_let_use_in_finally_with_throw();        
    catch ex: System.Exception
        write_line("expected: caught exception");
    yrt
    
    test_let_use_in_catch_inside_try();
    test_let_use_in_catch_inside_catch();

    try
        test_let_use_in_catch_inside_finally();
    catch ex: System.Exception
        write_line("expected: caught exception");
    yrt

    assert test_return_from_catch_with_let_use() =~ "done";
    assert test_return_from_try_with_let_use() =~ "done";
    assert test_return_from_finally_with_let_use() =~ "done";

    write_line("done");
si

test_let_use_in_try() is
    write_line();
    write_line("testing let use in try");
    try
        let use file = IO.File.open_read("file.txt");
        let use reader = new IO.StreamReader(file);
        let use check = new Check();

        let line = reader.read_line();
        while line? do
            write_line(line);
            line = reader.read_line();
        od
    finally
        write_line("finished let use in try");
    yrt
si

test_let_use_in_catch() is
    write_line();
    write_line("testing let use inside catch clause");
    try
        throw new System.Exception();
    catch ex: System.Exception
        let use file = IO.File.open_read("file.txt");
        let use reader = new IO.StreamReader(file);
        let use check = new Check();

        let line = reader.read_line();

        while line? do
            write_line(line);
            line = reader.read_line();
        od

        write_line("finished let use inside catch clause");
    yrt
si

test_let_use_in_finally_no_throw() is
    write_line();
    write_line("testing let use inside finally clause");
    try
        write_line("no exception");
    finally
        write_line("in finally");

        let use file = IO.File.open_read("file.txt");
        let use reader = new IO.StreamReader(file);
        let use check = new Check();

        let line = reader.read_line();
        while line? do
            write_line(line);
            line = reader.read_line();
        od

        write_line("finished let use inside finally clause");
    yrt
si

test_let_use_in_finally_with_throw() is
    write_line();
    write_line("testing let use inside finally clause with throw");
    try
        throw new System.Exception();
    finally
        write_line("in finally");

        let use file = IO.File.open_read("file.txt");
        let use reader = new IO.StreamReader(file);
        let use check = new Check();

        let line = reader.read_line();
        while line? do
            write_line(line);
            line = reader.read_line();
        od

        write_line("finished let use inside finally clause with throw");
    yrt
si

test_let_use_in_catch_inside_try() is
    write_line();
    write_line("testing let use inside try in catch clause");

    try
        try
            throw new System.Exception();
        catch ex: System.Exception
            let use file = IO.File.open_read("file.txt");
            let use reader = new IO.StreamReader(file);
            let use check = new Check();
    
            let line = reader.read_line();
            while line? do
                write_line(line);
                line = reader.read_line();
            od
    
            write_line("finished let use inside try in catch clause");
        yrt
    finally
        write_line("in outer finally");                
    yrt
si

test_let_use_in_catch_inside_catch() is
    write_line();
    write_line("testing let use inside catch in catch clause");

    try
        throw new System.Exception();
    catch ex: System.Exception
        try
            throw new System.Exception();
        catch ex: System.Exception
            let use file = IO.File.open_read("file.txt");
            let use reader = new IO.StreamReader(file);
            let use check = new Check();
    
            let line = reader.read_line();
            while line? do
                write_line(line);
                line = reader.read_line();
            od
    
            write_line("finished let use inside catch in catch clause");
        yrt
    finally
        write_line("in outer finally");                
    yrt
si

test_let_use_in_catch_inside_finally() is
    write_line();
    write_line("testing let use inside catch in finally clause");

    try
        throw new System.Exception();
    finally
        try
            throw new System.Exception();
        catch ex: System.Exception
            let use file = IO.File.open_read("file.txt");
            let use reader = new IO.StreamReader(file);
            let use check = new Check();
    
            let line = reader.read_line();
            while line? do
                write_line(line);
                line = reader.read_line();
            od
    
            write_line("finished let use inside catch in finally clause");
        yrt
    yrt
si

test_let_use_in_finally_in_finally() is
    write_line();
    write_line("testing let use inside finally in finally clause");

    try
        write_line("no exception");
    finally
        try
            write_line("in inner finally");
        finally
            let use file = IO.File.open_read("file.txt");
            let use reader = new IO.StreamReader(file);
            let use check = new Check();
    
            let line = reader.read_line();
            while line? do
                write_line(line);
                line = reader.read_line();
            od
    
            write_line("finished let use inside finally in finally clause");
        yrt
    yrt
si

test_return_from_try_with_let_use() -> string is
    write_line();
    write_line("testing return from try with let use");

    try
        let use file = IO.File.open_read("file.txt");
        let use reader = new IO.StreamReader(file);
        let use check = new Check();

        let line = reader.read_line();
        while line? do
            write_line(line);
            line = reader.read_line();
        od

        write_line("finished let use inside try");

        return "done";
    catch ex: System.Exception
        write_line("not expected: caught exception");
    finally
        write_line("finished return from try with let use");
    yrt
si

test_return_from_catch_with_let_use() -> string is
    write_line();
    write_line("testing return from catch with let use");

    try
        throw new System.Exception();
    catch ex: System.Exception
        let use file = IO.File.open_read("file.txt");
        let use reader = new IO.StreamReader(file);
        let use check = new Check();

        let line = reader.read_line();
        while line? do
            write_line(line);
            line = reader.read_line();
        od

        write_line("finished let use inside catch");

        return "done";
    finally
        write_line("finished return from catch with let use");
    yrt
si


test_return_from_finally_with_let_use() -> string is
    write_line();
    write_line("testing return from finally with let use");

    try
        write_line("no exception");
    finally
        let use file = IO.File.open_read("file.txt");
        let use reader = new IO.StreamReader(file);
        let use check = new Check();

        let line = reader.read_line();
        while line? do
            write_line(line);
            line = reader.read_line();
        od

        write_line("finished let use inside finally in finally clause");

        return "done";
    yrt    
si


struct Check: Disposable is
    _disposed: bool;

    init() is
        write_line("Check created");
    si

    dispose() is
        write_line("disposing Check...");

        if _disposed then
            write_line("Check already disposed");
            return;
        fi

        _disposed = true;
        write_line("disposed Check");
    si
si

struct Test: Disposable is
    _disposed: bool;

    _unmanged_resource: int ptr;
    _managed_resource: IO.FileStream;

    init() is
        _managed_resource = IO.File.open_read("file.txt");

        write_line("Test created");
    si

    dispose() is
        write_line("disposing Test...");
        _dispose(true);
        write_line("suppresing finalize...");
        System.GC.suppress_finalize(self);
        write_line("disposed Test");
    si

    finalize() is
        write_line("finalizing Test...");
        _dispose(false);
        write_line("finalized Test");
    si

    _dispose(disposing: bool) is
        write_line("disposing Test: disposing {disposing} disposed {_disposed}...");

        if _disposed then
            write_line("already disposed");
            return;
        fi

        if disposing then
            write_line("disposing managed resource...");
            _managed_resource.close();
        fi

        if _unmanged_resource != null then
            write_line("disposing unmanaged resource...");
            _free_unmanaged_resource(_unmanged_resource);
            _unmanged_resource = null;
        fi

        write_line("mark as disposed done");
        _disposed = true;

        write_line("disposing Test done");
    si

    _free_unmanaged_resource(resource: int ptr) is
        // do nothing
    si
si