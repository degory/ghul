use IO.Std.write_line;

entry() is
    write_line("entry...");

    let self_test = SELF_TEST("entry");

    // can we call through the struct at all?
    self_test.test("from entry via SELF_TEST");

    test_self(self_test, "directly from entry");

    // are we calling through self by reference?
    self_test.update_name("entry (updated from entry)");

    test_self(self_test, "directly from entry (after field update)");

    // but when passed as an argument, we expect to be passed
    // by value:
    test_update_name(self_test, "entry");

    // so we don't expect the field to be updated here:
    test_self(self_test, "directly from entry (after field update in test_update_name)");

    write_line("disposing {self_test} in entry");

    // dispose also needs to call through self by reference
    self_test.dispose();

    write_line("expect disposed: {self_test} in entry");

    test_normal();
    test_let_use();
si

test_normal() is
    write_line();
    write_line("normal...");

    let self_test = SELF_TEST("test_normal");

    self_test.test("from test_normal via SELF_TEST");
    test_self(self_test, "directly from test_normal");

    self_test.update_name("test_normal (updated from test_normal)");
    test_self(self_test, "directly from test_normal (after field update)");

    test_update_name(self_test, "entry");
    test_self(self_test, "directly from entry (after field update in test_update_name)");

    write_line("disposing {self_test} in test_normal");

    self_test.dispose();

    write_line("expect disposed: {self_test} in test_normal");
si

test_let_use() is
    write_line();
    write_line("let use...");

    let use self_test = SELF_TEST("test_let_use");

    self_test.test("from test_let_use via SELF_TEST");
    test_self(self_test, "directly from test_let_use");

    self_test.update_name("test_let_use (updated from test_let_use)");
    test_self(self_test, "directly from test_let_use (after field update)");

    test_update_name(self_test, "entry");
    test_self(self_test, "directly from entry (after field update in test_update_name)");

    write_line("auto disposing {self_test} in test_let_use");
si

struct SELF_TEST: Disposable is
    _name: string;
    _is_disposed: bool;

    init(name: string) is
        _name = name;
        // self needs to be passed into the string interpolator
        // by value, or we get an invalid program exception here:
        write_line("creating {self}");

        // but calls through implicit self should be by reference:
        update_name("{_name} (updated)");
        // so we expect the field to be updated here:
        write_line("updated {self}");

        // and calls through explicit self should also be by reference:
        self.update_name(name);
        // so we expect the field to be updated here:
        write_line("re-updated {self}");

        // but when passed as an argument, we expect to be passed
        // by value:
        test_update_name(self, "init");

        // so we don't expect the field to be updated here:
        write_line("after test_update_name {self}");
    si

    update_name(name: string) is
        _name = name;
    si

    test(from: string) is
        write_line("testing {self} from {from} A");

        test_self(self, from);
    si

    to_string() -> string => "SELF_TEST name: {_name} is disposed: {_is_disposed}";

    dispose() is
        if !_is_disposed then
            write_line("disposing {self}");

            _is_disposed = true;
        else
            write_line("already disposed {self}");
        fi
    si
si

test_update_name(value: SELF_TEST, from: string) is
    // we expect to be able to update value's name here
    // but we don't expect those changes to be visible in the caller:
    value.update_name("updated in {from}");

    write_line("updated {value} from {from}");
si

test_self(value: SELF_TEST, from: string) is
    write_line("testing {value} from {from} B");
si