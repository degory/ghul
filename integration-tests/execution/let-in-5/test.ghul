use IO.Std.write_line;

entry() is
    write_line("generator_fibonacci().take(5).to_list() = " + generator_fibonacci() | .take(5)); // [0, 1, 1, 2, 3]
    write_line("generator_factorial().take(5).to_list() = " + generator_factorial() | .take(5)); // [1, 1, 2, 6, 24]
si

generator_fibonacci() -> Collections.Iterable[int] =>
    generate((0, 1), 
        (state: (int, int)) =>
            let 
                (a, b) = state,
                next = (b, a + b)
            in (next, a));

generator_factorial() -> Collections.Iterable[int] =>
    generate((1, 1), 
        (state: (int, int)) =>
            let 
                (i, f) = state,
                next = (i + 1, f * (i + 1))
            in (next, f));


class GENERATOR[T, S]: Collections.Iterator[T], Collections.Iterable[T] is
    current: T;
    iterator: Collections.Iterator[T] => self;

    _initial: S;
    _state: S;
    _generator: S -> (S, T); // given the current state, return the next state and the current value

    init(initial: S, generator: S -> (S, T)) is
        _initial = initial;
        _generator = generator;
        reset();
    si

    init() is
        reset();
    si
        
    move_next() -> bool is
        (_state, current) = _generator(_state);
        return true;
    si

    reset() is
        _state = _initial;
    si

    dispose() is
    si
si

// generator constructor helper so we don't have to specify types
generate[T, S](initial: S, generator: S -> (S, T)) -> GENERATOR[T, S] =>
    new GENERATOR[T, S](initial, generator);