use IO.Std.write_line;

union Option[T] is
    SOME(value: T);
    NONE;
si

union List[T] is
    NIL;
    CONS(head: T, tail: List[T]);
si

union Tree[T] is
    LEAF(value: T);
    NODE(left: Tree[T], right: Tree[T]);
si

entry() is
    test_option();
    test_list();
    test_tree();
si

test_option() is
    let some_int = some(42);
    let none_int = none`[int]();

    let stringify_option = (o: Option[int]) -> string rec =>
        if o.is_some then
            let value = o.some;
            value.to_string()
        else
            "none"
        fi;

    write_line(stringify_option(some_int));
    write_line(stringify_option(none_int));

    let ss: Option[int].SOME;

    let s = some_int.some;
si

test_list() is
    let list = cons(1, cons(2, cons(3, nil`[int]())));

    let stringify_list = (l: List[int]) -> string rec =>
        if l.is_cons then
            let (head, tail) = l.cons in
            "{head}, {rec(tail)}"
        else
            "nil"
        fi;

    write_line(stringify_list(list));
si

test_tree() is
    let tree = node(
        node(
            leaf(1),
            leaf(2)
        ),
        node(
            leaf(3),
            leaf(4)
        )
    );

    let stringify_tree = (t: Tree[int]) -> string rec =>
        if t.is_node then
            let (left, right) = t.node in
            "({rec(left)}, {rec(right)})"
        else
            "{t.leaf}"
        fi;

    write_line(stringify_tree(tree));
si

some[T](value: T) -> Option[T] => new Option.SOME[T](value);
none[T]() -> Option[T] => new Option[T].NONE();

node[T](left: Tree[T], right: Tree[T]) -> Tree[T] => new Tree.NODE[T](left, right);
leaf[T](value: T) -> Tree[T] => new Tree.LEAF[T](value);

cons[T](head: T, tail: List[T]) -> List[T] => new List.CONS[T](head, tail);
nil[T]() -> List[T] => new List.NIL[T]();
