use IO.Std.write_line;

entry() is
    try_test(
        "Calling Test[string](\"hello\").test_instance_with_closure(\"hello\")",
        () is
            Test[string]("hello").test_instance_with_closure("hello")
        si
    );

    try_test(
        "Calling Test[string](\"hello\").test_generic_class_static_method_capture_class_type_argument_indirectly_via_type_expression()",
        () is
            Test[string]("hello").test_generic_class_static_method_capture_class_type_argument_indirectly_via_type_expression()
        si
    );

    try_test(
        "Calling Test[string](\"hello\").test_generic_class_instance_method_capture_class_type_argument_implicitly_via_method_argument(\"hello\")",
        () is
            Test[string]("hello").test_generic_class_instance_method_capture_class_type_argument_implicitly_via_method_argument("hello")
        si
    );

    try_test(
        "Calling Test[string](\"hello\").test_generic_class_instance_method_capture_class_type_argument_implicitly_via_instance_property()",
        () is
            Test[string]("hello").test_generic_class_instance_method_capture_class_type_argument_implicitly_via_instance_property()
        si
    );

    try_test(
        "Calling Test[string](\"hello\").test_generic_class_instance_method_capture_class_type_argument_indirectly_via_type_expression()",
        () is
            Test[string]("hello").test_generic_class_instance_method_capture_class_type_argument_indirectly_via_type_expression()
        si
    );

    try_test(
        "Calling Test[string](\"hello\").test_generic_class_instance_method_capture_class_type_argument_indirectly_via_self()",
        () is
            Test[string]("hello").test_generic_class_instance_method_capture_class_type_argument_indirectly_via_self()
        si
    );

    try_test(
        "Calling Test[string](\"hello\").test_generic_class_instance_method_capture_class_type_argument_indirectly_via_rec()",
        () is
            Test[string]("hello").test_generic_class_instance_method_capture_class_type_argument_indirectly_via_rec()
        si
    );

    try_test(
        "Calling Test[string](\"hello\").test_generic_class_instance_generic_method_capture_class_type_argument_implicitly_via_method_argument(\"hello\", 1234)",
        () is
            Test[string]("hello").test_generic_class_instance_generic_method_capture_class_type_argument_implicitly_via_method_argument("hello", 1234)
        si
    );

    try_test(
        "Calling Test[string](\"hello\").test_generic_class_instance_generic_method_capture_method_type_argument_implicitly_via_method_argument(\"hello\", 1234)",
        () is
            Test[string]("hello").test_generic_class_instance_generic_method_capture_method_type_argument_implicitly_via_method_argument("hello", 1234)
        si
    );
si

try_test(test_name: string, test: () -> void) is
    try
        write_line("Running test: {test_name}");
        test();
    catch ex: System.Exception
        write_line("caught: {ex}");
    yrt
si

class Test[T] is
    tt: T;

    init(tt: T) is
        self.tt = tt;
    si    

    test_instance_with_closure(t: string) is
        let blah = (x: string) => t;

        write_line("test_instance_with_closure blah({t}) => {blah(t)}");            
    si

    test_generic_class_static_method_capture_class_type_argument_indirectly_via_type_expression() is
        let blah = () => Collections.LIST[T]();

        write_line("test_generic_class_static_method_capture_class_type_argument_indirectly_via_type_expression blah() => {blah()}");
    si

    test_generic_class_instance_method_capture_class_type_argument_implicitly_via_method_argument(t: T) is
        let blah = () => t;

        write_line("test_generic_class_instance_method_capture_class_type_argument_implicitly_via_method_argument t = {t}; blah() => {blah()}");
    si

    test_generic_class_instance_method_capture_class_type_argument_implicitly_via_instance_property() is
        let blah = () => tt;

        write_line("test_generic_class_instance_method_capture_class_type_argument_implicitly_via_instance_property tt = {tt}; blah() => {blah()}");
    si

    test_generic_class_instance_method_capture_class_type_argument_indirectly_via_type_expression() is
        let blah = () => Collections.LIST[T]();

        write_line("test_generic_class_instance_method_capture_class_type_argument_indirectly_via_type_expression blah() => {blah()}");
    si

    test_generic_class_instance_method_capture_class_type_argument_indirectly_via_self() is
        let blah = () => self;
        write_line("test_generic_class_instance_method_capture_class_type_argument_indirectly_via_self self = {self}; blah() => {blah()}");
    si

    test_generic_class_instance_method_capture_class_type_argument_indirectly_via_rec() is
        let blah = (depth: int) rec => if depth > 0 then rec(depth - 1) else 0 fi;
        write_line("test_generic_class_instance_method_capture_class_type_argument_indirectly_via_self blah() => {blah(5)}");
    si

    test_generic_class_instance_method_capture_class_type_argument_via_lambda_argument_of_constructed_type(t: T) is
        let blah = (list: Collections.List[T]) => list;

        let list = [t, t, t];
        write_line("test_generic_class_static_method_capture_class_type_argument_via_lambda_argument_of_constructed_type t = {t}; blah() => {blah(list)}");
    si
    
    test_generic_class_instance_generic_method_capture_class_type_argument_implicitly_via_method_argument[U](t: T, u: U) is
        let blah = () => t;

        write_line("test_generic_class_instance_generic_method_capture_class_type_argument_implicitly_via_method_argument t = {t}, u = {u}; blah() => {blah()}");
    si

    test_generic_class_instance_generic_method_capture_method_type_argument_implicitly_via_method_argument[U](t: T, u: U) is
        let blah = () => u;

        write_line("test_generic_class_instance_generic_method_capture_method_type_argument_implicitly_via_method_argument t = {t}, u = {u}; blah() => {blah()}");
    si

    to_string() -> string => "{get_type()}(tt = {tt})";
si
