namespace Test is
    use IO.Std;

    use System.Exception;

    class Main is
        entry() static is
            let v1 = finally_should_run_after_return_value(123);
            Std.out.write_line("result 1 is: " + v1);
            assert v1 == 246;

            let v2 = finally_should_run_after_return_default_value(123);
            Std.out.write_line("result 2 is: " + v2);
            assert v2 == 456;

            let v3 = return_from_finally_should_override_return_from_try_body(123);
            Std.out.write_line("result 3 is: " + v3);
            assert v3 == 369;

            finally_should_run_after_return_void(123);

            let v5 = return_value_should_pass_through_nested_trys();
            Std.out.write_line("result 5 is: " + v5);
            assert v5 == 123;

            let v6 = return_from_catch(333);
            Std.out.write_line("result 6 is: " + v6);
            assert v6 == 666;

            let v7 = return_from_finally_should_override_return_from_catch(333);
            Std.out.write_line("result 7 is: " + v7);
            assert v7 == 999;

            let v8 = return_from_finally_with_no_prior_return_should_return_supplied_value(123);
            Std.out.write_line("result 8 is: " + v8);
            assert v8 == 123;

            let v9 = return_from_finally_with_catch_but_no_prior_return_should_return_supplied_value(123);
            Std.out.write_line("result 9 is: " + v9);
            assert v9 == 123;
        si

        finally_should_run_after_return_value(value: int) -> int static is
            try
                Std.out.write_line("will return: " + value * 2);
                return value * 2;
            finally
                Std.out.write_line("finally: " + value);
            yrt

            throw new System.Exception("should not be reachable"); // not reachable
        si
        
        finally_should_run_after_return_default_value(value: int) -> int static is
            try
                Std.out.write_line("will return: " + value * 2);
                return 456;
            finally
                Std.out.write_line("finally: " + value);
            yrt

            throw new System.Exception("should not be reachable"); // not reachable
        si

        return_from_finally_with_no_prior_return_should_return_supplied_value(value: int) -> int static is
            try
                Std.out.write_line("will return: " + value);
            finally
                return value;
            yrt

            throw new System.Exception("should not be reachable"); // not reachable
        si

        return_from_finally_with_catch_but_no_prior_return_should_return_supplied_value(value: int) -> int static is
            try
                throw new Exception("oops");
            catch ex: Exception
                Std.out.write_line("caught: " + ex.message);
            finally
                return value;
            yrt

            throw new System.Exception("should not be reachable"); // not reachable
        si

        return_from_finally_should_override_return_from_try_body(value: int) -> int static is
            try
                Std.out.write_line("will return: " + value * 2);
                return value * 2;
            finally
                Std.out.write_line("finally: " + value);
                return value * 3;
            yrt

            throw new System.Exception("should not be reachable"); // not reachable            
        si        

        finally_should_run_after_return_void(value: int) static is
            try
                Std.out.write_line("will return: " + value * 2);
                return;
            finally
                Std.out.write_line("finally: " + value);
            yrt

            throw new System.Exception("should not be reachable"); // not reachable
        si

        return_value_should_pass_through_nested_trys() -> int static is
            try
                try
                    return 123;
                catch ex: Exception
                finally
                    Std.out.write_line("finally 1");
                yrt
                
            catch ex: Exception

            finally
                Std.out.write_line("finally 2");
            yrt
            
            throw new System.Exception("should not be reachable"); // not reachable
        si
        
        return_from_catch(value: int) -> int static is
            try
                throw new Exception("oops");
            catch ex: Exception
                return value * 2;
            yrt            

            throw new System.Exception("should not be reachable"); // not reachable
        si

        return_from_finally_should_override_return_from_catch(value: int) -> int static is
            try
                throw new Exception("oops");
            catch ex: Exception
                return value * 2;
            finally
                return value * 3;
            yrt
            
            throw new System.Exception("should not be reachable"); // not reachable
        si
    si
si