namespace Test is
    use IO.Std;

    use System.Exception;

    class Main is
        entry() static is
            let finally_should_run_after_return_value_result = 
                finally_should_run_after_return_value(123);

            Std.out.write_line(
                "finally should return after return value: {finally_should_run_after_return_value_result}");
            assert finally_should_run_after_return_value_result == 246;


            let finally_should_run_after_return_default_value_result = 
                finally_should_run_after_return_default_value(123);

            Std.out.write_line(
                "finally should run after return default value: {finally_should_run_after_return_default_value_result}");
            assert finally_should_run_after_return_default_value_result == 456;


            let return_from_finally_should_override_return_from_try_body_result = 
                return_from_finally_should_override_return_from_try_body(123);

            Std.out.write_line(
                "return from finally should override return from try body: {return_from_finally_should_override_return_from_try_body_result}");
            assert return_from_finally_should_override_return_from_try_body_result == 369;


            finally_should_run_after_return_void(123);


            let return_value_should_pass_through_nested_trys_result = 
                return_value_should_pass_through_nested_trys();

            Std.out.write_line(
                "return value should pass through nested trys: {return_value_should_pass_through_nested_trys_result}");
            assert return_value_should_pass_through_nested_trys_result == 123;


            let return_from_catch_result = 
                return_from_catch(333);
            Std.out.write_line(
                "return from catch: {return_from_catch_result}");
            assert return_from_catch_result == 666;


            let return_from_finally_should_override_return_from_catch_result = 
                return_from_finally_should_override_return_from_catch(333);

            Std.out.write_line(
                "return from finally should override return from catch: {return_from_finally_should_override_return_from_catch_result}");
            assert return_from_finally_should_override_return_from_catch_result == 999;


            let return_from_finally_with_no_prior_return_should_return_supplied_value_result = 
                return_from_finally_with_no_prior_return_should_return_supplied_value(123);

            Std.out.write_line(
                "return from finally with no prior return should return supplied value: {return_from_finally_with_no_prior_return_should_return_supplied_value_result}");
            assert return_from_finally_with_no_prior_return_should_return_supplied_value_result == 123;


            let return_from_finally_with_catch_but_no_prior_return_should_return_supplied_value_result = 
                return_from_finally_with_catch_but_no_prior_return_should_return_supplied_value(123);

            Std.out.write_line(
                "return from finally with catch but no prior return should return supplied value: {return_from_finally_with_catch_but_no_prior_return_should_return_supplied_value_result}");
            assert return_from_finally_with_catch_but_no_prior_return_should_return_supplied_value_result == 123;
        si

        finally_should_run_after_return_value(value: int) -> int static is
            try
                Std.out.write_line("finally_should_run_after_return_value will return: {value * 2}");
                return value * 2;
            finally
                Std.out.write_line("finally_should_run_after_return_value finally: {value}");
            yrt

            throw System.Exception("finally_should_run_after_return_value should not be reachable"); // not reachable
        si
        
        finally_should_run_after_return_default_value(value: int) -> int static is
            try
                Std.out.write_line("finally_should_run_after_return_default_value will return: {value * 2}");
                return 456;
            finally
                Std.out.write_line("finally_should_run_after_return_default_value finally: {value}");
            yrt

            throw System.Exception("finally_should_run_after_return_default_value should not be reachable"); // not reachable
        si

        return_from_finally_with_no_prior_return_should_return_supplied_value(value: int) -> int static is
            try
                Std.out.write_line("return_from_finally_with_no_prior_return_should_return_supplied_value will return: {value}");
            finally
                return value;
            yrt

            throw System.Exception("return_from_finally_with_no_prior_return_should_return_supplied_value should not be reachable"); // not reachable
        si

        return_from_finally_with_catch_but_no_prior_return_should_return_supplied_value(value: int) -> int static is
            try
                throw Exception("oops: {value} from return_from_finally_with_catch_but_no_prior_return_should_return_supplied_value");
            catch ex: Exception
                Std.out.write_line("return_from_finally_with_catch_but_no_prior_return_should_return_supplied_value caught: {ex.message}");
            finally
                return value;
            yrt

            throw System.Exception("return_from_finally_with_catch_but_no_prior_return_should_return_supplied_value should not be reachable"); // not reachable
        si

        return_from_finally_should_override_return_from_try_body(value: int) -> int static is
            try
                Std.out.write_line("return_from_finally_should_override_return_from_try_body will return: {value * 2}");
                return value * 2;
            finally
                Std.out.write_line("return_from_finally_should_override_return_from_try_body finally: {value}");
                return value * 3;
            yrt

            throw System.Exception("return_from_finally_should_override_return_from_try_body should not be reachable"); // not reachable            
        si        

        finally_should_run_after_return_void(value: int) static is
            try
                Std.out.write_line("finally_should_run_after_return_void value is {value * 2} will return void");
                return;
            finally
                Std.out.write_line("finally_should_run_after_return_void finally: {value}");
            yrt

            throw System.Exception("finally_should_run_after_return_void should not be reachable"); // not reachable
        si

        return_value_should_pass_through_nested_trys() -> int static is
            try
                try
                    return 123;
                catch ex: Exception
                    Std.out.write_line("return_value_should_pass_through_nested_trys caught: {ex.message} A");
                finally
                    Std.out.write_line("return_value_should_pass_through_nested_trys finally A");
                yrt

                Std.out.write_line("return_value_should_pass_through_nested_trys should not be reachable A");
            catch ex: Exception
                Std.out.write_line("return_value_should_pass_through_nested_trys caught: {ex.message} B");
            finally
                Std.out.write_line("return_value_should_pass_through_nested_trys finally B");
            yrt

            Std.out.write_line("return_value_should_pass_through_nested_trys should not be reachable B");            
            throw System.Exception("return_value_should_pass_through_nested_trys should not be reachable B"); // not reachable
        si
        
        return_from_catch(value: int) -> int static is
            try
                throw Exception("oops: {value} from return_from_catch");
            catch ex: Exception
                return value * 2;
            yrt            

            throw System.Exception("return_from_catch should not be reachable"); // not reachable
        si

        return_from_finally_should_override_return_from_catch(value: int) -> int static is
            try
                throw Exception("oops: {value} from return_from_finally_should_override_return_from_catch");
            catch ex: Exception
                return value * 2;
            finally
                return value * 3;
            yrt
            
            throw System.Exception("return_from_finally_should_override_return_from_catch should not be reachable"); // not reachable
        si
    si
si