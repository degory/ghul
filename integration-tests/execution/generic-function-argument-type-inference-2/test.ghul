namespace Test.GenericFunctionTypeInference is
    use Collections;

    use IO.Std.write_line;

    class Type is
        is_object: bool;

        init(is_object: bool) is
            self.is_object = is_object;
        si
    si
    
    struct Thing is
        name: string;
        arguments: Iterable[Type];

        init(name: string, arguments: Iterable[Type]) is
            self.name = name;
            self.arguments = arguments;
        si
    si

    entry() is
        let non_generic_matches = [
            Thing("A: true", [Type(true)]),
            Thing("B: false", [Type(false)]),
            Thing("C: true, false", [Type(true), Type(false)]),
            Thing("D: false, true", [Type(false), Type(true)]),
            Thing("E: true, true", [Type(true), Type(true)]),
            Thing("F: false, false", [Type(false), Type(false)]),
            Thing("G: true, false, true", [Type(true), Type(false), Type(true)]),
            Thing("H: false, true, false", [Type(false), Type(true), Type(false)]),
            Thing("I: true, true, false", [Type(true), Type(true), Type(false)]),
            Thing("J: false, false, true", [Type(false), Type(false), Type(true)]),
            Thing("K: true, false, false", [Type(true), Type(false), Type(false)]),
            Thing("L: false, true, true", [Type(false), Type(true), Type(true)]),
            Thing("M: true, true, true", [Type(true), Type(true), Type(true)]),
            Thing("N: false, false, false", [Type(false), Type(false), Type(false)])
        ];

        write_line(
            non_generic_matches |
                .filter(f => f.arguments | .find(a => a.is_object).has_value) | .map(f => f.name) | .to_string("\n")
        );
    si
si