use IO.Std.write_line;

entry() is
    let some_i = some_thing(42);
    let none_i = none_thing`[int]();    

    let b: bool;
    let i: int;

    b = some_i?;
    i = some_i!;

    b = none_i?;
    i = none_i!; // could be a run time error but it's semantically valid

    let some_o = new WITH_VALUE(42);
    let none_o: WITH_VALUE = null;

    let o: WITH_VALUE;

    // these should succeed: unwrapping a reference type is the identity
    o = some_o!;
    o = none_o!; // could be a run time error but it's semantically valid

    // these should error: ! should not unwrap WITH_VALUE to value: int
    i = some_o!;
    i = none_o!; // could be a run time error but it's semantically valid
si

some_thing[T](value: T) -> THING[T] => new THING[T](value);
none_thing[T]() -> THING[T] => new THING[T]();

struct THING[T] is
    value: T;
    has_value: bool;

    init(value: T) is
        has_value = true;
        self.value = value;
    si

    init() is
    si

    to_string() -> string => 
        if self? then
            "some THING {value}"
        else
            "none THING"
        fi;   
si

class WITH_VALUE is
    value: int;
    init(value: int) is
        self.value = value;
    si
si

