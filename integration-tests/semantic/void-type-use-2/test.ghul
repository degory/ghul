/*

https://github.com/degory/ghul/issues/915

Errors should result from:

1. traits that attempt to inherit from a generic trait with any void parameter type
2. traits that attempt to inherit from a generic trait with any parameter type constructed from void
3. structs that attempt to implement a generic trait with any void parameter type
4. structs that attempt to implement a generic trait with any parameter type constructed from void
5. classes that attempt to implement a generic trait with any void parameter type
6. classes that attempt to implement a generic trait with any parameter type constructed from void
7. classes that attempt to inherit from a generic super class with any void parameter type
8. classes that attempt to inherit from generic super class any parameter type constructed from void

*/

namespace Test is
    use Std = IO.Std;

    trait Trait[T] is
    si

    trait Trait`2[T,U] is
    si

    class Class[T] is        
    si

    class Class`2[T,U] is        
    si

    // 1. traits that attempt to inherit from a generic trait with any void parameter type
    trait Trait1: Trait[void] is
    si

    trait Trait2: Trait`2[void,int] is
    si

    // 2. traits that attempt to inherit from a generic trait with any parameter type constructed from void
    trait Trait3: Trait[void[]] is
    si

    trait Trait4: Trait[(void, void)] is        
    si

    trait Trait5: Trait[(void, void) -> int] is        
    si

    trait Trait6: Trait[Collections.Bag[void]] is        
    si

    // but function types returning void are OK, provided they have non-void parameters: 
    trait Trait7: Trait[(int, int) -> void] is        
    si

    
    // structs that attempt to implement a generic trait with any void parameter type
    struct STRUCT_1: Trait[void] is
    si

    struct STRUCT_2: Trait`2[int, void] is
    si

    // structs that attempt to implement a generic trait with any parameter type constructed from void
    struct STRUCT_3: Trait[void[]] is
    si

    struct STRUCT_4: Trait[(void, void)] is        
    si

    struct STRUCT_5: Trait[(void, void) -> int] is        
    si

    struct STRUCT_6: Trait[Collections.Bag[void]] is        
    si

    // but function types returning void are OK, provided they have non-void parameters: 
    struct STRUCT_7: Trait[(int, int) -> void] is        
    si


    // classes that attempt to implement a generic trait with any void parameter type
    class CLASS_1: Trait[void] is
    si

    class CLASS_2: Trait`2[void,string] is
    si

    // classes that attempt to implement a generic trait with any parameter type constructed from void
    class CLASS_3: Trait[void[]] is
    si

    class CLASS_4: Trait[(void, void)] is        
    si

    class CLASS_5: Trait[(void, void) -> int] is        
    si

    class CLASS_6: Trait[Collections.Bag[void]] is        
    si

    // but function types returning void are OK, provided they have non-void parameters: 
    class CLASS_7: Trait[(int, int) -> void] is
    si


    // classes that attempt to inherit from a generic super class with any void parameter type
    class CLASS_8: Class[void] is
    si

    class CLASS_9: Class`2[string,void] is
    si

    // classes that attempt to implement a generic trait with any parameter type constructed from void
    class CLASS_10: Class[void[]] is
    si

    class CLASS_11: Class[(void, void)] is        
    si

    class CLASS_12: Class[(void, void) -> int] is        
    si

    class CLASS_13: Class[Collections.Bag[void]] is        
    si

    // classes that attempt to inherit from generic super class any parameter type constructed from void
    class CLASS_14: Class[(int, int) -> void] is        
    si
si