namespace Test.ParseLetIn is
    use Collections;

    class Test is
        test_simple() -> int =>
            let 
                x = new D()
            in
                x.value;

        test_if_conditions() is
            if 
                let x = new D(), y = new D()
                in x.value < y.value
            then
                let x = new D(), y = new D()
            else
                let x = new D(), y = new D()
            fi

            if 
                let x = new D()
                in x.value != 0
            then
                let x = new D(), y = new D()
            elif
                let x = new D(), y = new D(), z = new D()
                in x.value < y.value /\ y.value < z.value
            then
                let x = new D(), y = new D()
            else
                let x = new D(), y = new D()
            fi
        si
        
        test_if_body_1() -> int =>
            if true then
                let x = new D(), y = new D()
                in x.value + y.value
            else
                0
            fi;

        test_if_body_2() -> int =>
            if true then
                let x = new D()
                in x.value
            elif true then
                let x = new D(), y = new D()
                in x.value + y.value
            else
                let x = new D(), y = new D(), z = new D()
                in x.value + y.value + z.value
            fi;

        test_for() is
            for i in
                let x = [1, 2, 3], y = [4, 5, 6] in x | .cat(y)
            do
                let x = new D(), y = new D();
            od
        si
        
        test_while() is
            while
                let x = new D(), y = new D()
                in x.value < y.value
            do
                let x = new D(), y = new D();
            od
        si
        
        test_case() is
            case
                let x = new D(), y = new D()
                in x.value + y.value

            when 1: let x = new D(), y = new D();
            when 2: let x = new D(), y = new D();
            default let x = new D(), y = new D();
            esac
        si

        entry() is
            let expect_int: int;

            expect_int = test_simple();
            test_if_conditions();
            expect_int = test_if_body_1();
            expect_int = test_if_body_2();

            test_for();
            test_while();
            test_case();
        si
        
        test_error() is
            // result of let in must be consumed by something
            let x = new D() in x.value;
        si
    si

    class D is
        value: int => 1234;
        init() is
        si
    si
si