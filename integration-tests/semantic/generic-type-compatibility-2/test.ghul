namespace Test.GenericInheritance is
    use Collections;

    class OtherInt is
        init() is si

        test_both(p: (int) -> int, tokens: Iterable[Test]);  

        test_function(p: (int) -> int);
        test_iterable(t: Iterable[Test]);
    si

    class Thing[Q] is
        init() is si
        
        test_both(p: (int) -> Q, tokens: Iterable[Test]);  

        test_function(p: (int) -> Q);

        // FIXME: Thing's Q is getting mixed up with Iterable's Q here:
        test_iterable(t: Iterable[Test]);  
    si

    class ThingInt: Thing[int] is
        init() is si

        function(a: int) is
            
        si
    si
        
    enum Test is
        RED,
        BLACK
    si
    
    class Main is
        check_function(f: (int)->int);
        check_iterable_enum(f: (int)->int, it: Iterable[Test]);
        check_iterable_int(f: (int)->int, it: Iterable[int]);

        test_generic() is
            let ti = Thing[int]();

            let c = (i: int) -> int => 123;

            let x = c;

            let i = c(123);

            check_function(c);
            check_function(x);

            ti.test_function((i: int) -> int => 123);
            ti.test_iterable([Test.RED, Test.BLACK]);

            ti.test_both((i: int) -> int => 123, [Test.RED, Test.BLACK]);
            ti.test_both(c, [Test.RED, Test.BLACK]);

            check_iterable_enum(
                (i: int) -> int is
                    return i * 2;
                si,
                [Test.RED, Test.BLACK]
            );

            check_iterable_int(
                (i: int) -> int is
                    return i * 2;
                si,
                [1, 2, 3]
            );            
        si

        test_int() is
            let ti = ThingInt();

            let c = (i: int) -> int => 123;

            let x = c;

            let i = c(123);

            check_function(c);
            check_function(x);

            ti.test_function((i: int) -> int => 123);
            ti.test_iterable([Test.RED, Test.BLACK]);

            ti.test_both((i: int) -> int => 123, [Test.RED, Test.BLACK]);
            ti.test_both(c, [Test.RED, Test.BLACK]);

            check_iterable_enum(
                (i: int) -> int is
                    return i * 2;
                si,
                [Test.RED, Test.BLACK]
            );

            check_iterable_int(
                (i: int) -> int is
                    return i * 2;
                si,
                [1, 2, 3]
            );            
        si

        test_other() is
            let ti = OtherInt();

            let c = (i: int) -> int => 123;

            let x = c;

            let i = c(123);

            check_function(c);
            check_function(x);

            ti.test_function((i: int) -> int => 123);
            ti.test_iterable([Test.RED, Test.BLACK]);

            ti.test_both((i: int) -> int => 123, [Test.RED, Test.BLACK]);
            ti.test_both(c, [Test.RED, Test.BLACK]);

            check_iterable_enum(
                (i: int) -> int is
                    return i * 2;
                si,
                [Test.RED, Test.BLACK]
            );

            check_function((j: int) -> int => j / 2);

            check_iterable_int(
                (i: int) -> int is
                    return i * 2;
                si,
                [1, 2, 3]
            );            
        si
    si
si