namespace Test is
    test() static is
        let object_object: (object,object);
        let int_object: (int,object);
        let int_int: (int, int);

        let base_base: (Base,Base);
        let derived_base: (Derived,Base);
        let derived_derived: (Derived,Derived);

        let oo: object;
        let ii: int;
        let bb: Base;
        let dd: Derived;

        // OK: exact types
        object_object = (oo, oo);
        object_object = object_object;

        // OK: more derived:
        object_object = (ii, ii);
        object_object = int_int;

        // OK: one element is more derived:
        object_object = (oo, ii);
        object_object = int_object;

        // Expect error: less derived:
        int_int = (oo, oo);
        int_int = object_object;

        // Expect error: one element is less derived:
        int_int = (oo, ii);
        int_int = int_object;

        // OK: exact types
        int_object = (ii, oo);
        int_object = int_object;

        // OK: one element is more derived:
        int_object = (ii, ii);
        int_object = int_int;

        // OK: exact types:
        base_base = (bb, bb);
        base_base = base_base;

        // OK: more derived:
        base_base = (dd, dd);
        base_base = derived_derived;

        // OK: one element is more derived:
        base_base = (bb, dd);
        base_base = derived_base;

        // Expect error: less derived:
        derived_derived = (bb, bb);
        derived_derived = base_base;

        // Expect error: one element is less derived:
        derived_derived = (bb, dd);
        derived_derived = derived_base;

        // Expect error: one element is more derived, but the other is less derived:
        base_base = (oo, dd);

        // OK: exact types
        derived_base = (dd, bb);
        derived_base = derived_base;

        // OK: one element is more derived:
        derived_base = (dd, dd);
        derived_base = derived_derived;
    si

    class Base is
        init() is si
    si

    class Derived: Base is
        init() is si
    si
si