/*

https://github.com/degory/ghul/issues/921

It should not be possible to consume values of void type.

Need to check at least the following for void values:

 Elements when constructing array literals
 Elements when constructing tuple literals
 Actual arguments when calling functions
 Actual arguments when calling operators
 Actual arguments when calling constructors
 Creation of references (may not be needed - references to void types should already be blocked by No error when declaring symbols of void type #914)
 Assignment
 Local variable initialisation

*/

namespace Test is
    use Std = IO.Std;

    class Main is
        entry() static is
            // Elements when constructing array literals
            let la1 = [v(), v()];
            let la2 = [123, v()];
            let la3 = [v(), 123];

            // Elements when constructing tuple literals
            let lt1 = (v(), v());
            let lt2 = (123, v());
            let lt3 = (v(), 123);

            let lt4 = (a = v(), b = v());
            let lt5 = (a = 123, b = v());
            let lt6 = (a = v(), b = 123);

            // Actual arguments when calling functions
            test(v(),v());
            test(123, v());
            test(v(), 123);

            // Actual arguments when calling operators
            v() % v();
            123 % v();
            v() % 123;

            //  Actual arguments when calling constructors
            Main(v(), v());
            Main(123, v());
            Main(v(), 123);

            // Creation of references (note, only possible in conjunction with invalid function definition test(o: void ref))
            test(v() ref);

            // Local variable initialisation
            let x = v1();
        si

        v() static is si   
        
        test(o: object, p: object) static is si

        test(o: void ref) static is si

        %(o: object, p: object) -> object static is si

        init(o: object, p: object) is
            
        si  
    si
si