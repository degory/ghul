@precedence("##", "10")
@precedence("$$", "10")
namespace Test is
    use Std = IO.Std;

    two[T](a: T, b: T) -> T;
    three[T](a: T, b: T, c: T) -> T;

    structured[T](element: T, iterable: Collections.Iterable[T]) -> Collections.LIST[T];

    ##[T,U](a: T, b: U) -> T;
    $$[T](a: T, b: T) -> T;
    
    class Main is
        test() is
            let o: object;
            let base: Base;
            let derived: Derived;
            let `trait: Trait;
            let derived_trait: DerivedTrait;

            // verify expect functions work: expect errors:
            expect_base([o]);
            expect_derived([base]);
            expect_trait([o]);
            expect_string([base]);
            expect_int_list(["hello"]);

            // expect error: most specific common base type does not appear:
            three(base, derived, "hello");

            expect_object([three(o, base, derived)]);
            expect_object([three(base, o, derived)]);

            expect_base([three(base, base, derived)]);
            expect_base([three(base, derived, base)]);
            expect_base([three(derived, base, base)]);

            expect_derived([three(derived, derived, derived)]);

            expect_object([three(cast object(base), cast object(derived), "hello")]);
            expect_object([three(base, cast object(derived), "hello")]);

            expect_trait([three(base, derived, `trait)]);

            expect_int([two(10, 20)]);

            expect_int([10 ## "hello"]);
            expect_string(["hello" ## 10]);

            // expect error: common subtype does not appear:
            "hello" $$ base;

            expect_trait([`trait $$ derived_trait]);
            expect_trait([derived_trait $$ `trait]);

            expect_base([derived $$ base]);
            expect_base([base $$ derived]);

            expect_derived([derived $$ derived]);

            base $$ derived;

            let m: Main;
            
            expect_int([m ## 1234]);
            expect_string([m ## "hello"]);

            expect_int_list(structured(1, [123]));
            expect_int_list(structured(1, new Collections.LIST[int]()));

            // string implements Iterable[char]
            expect_char_list(structured('c', "hello"));

            // expect error:
            structured(1, base);

            // expect error:
            structured(1, "hello");

            return;
        si

        ##[Q](other: Q) -> Q;

        // arrays are not covariant, so by wrapping in an array type
        // we avoid false negatives where a derived type is wrongly accepted 
        expect_object(o: object[]);
        expect_base(b: Base[]);
        expect_derived(d: Derived[]);
        expect_trait(t: Trait[]);
        expect_bool(b: bool[]);
        expect_int(i: int[]);
        expect_string(s: string[]);

        // doesn't need wrapping in an array to defeat type variance - we don't have covariant generic types yet:
        expect_int_list(l: Collections.LIST[int]);
        expect_char_list(l: Collections.LIST[char]);
    si

    class Base: Trait is        
    si

    class Derived: Base is
    si

    trait Trait is        
    si

    trait DerivedTrait: Trait is
    si
    
si