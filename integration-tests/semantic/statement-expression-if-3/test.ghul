namespace Test is
    use IO.Std.write_line;

    class Base is
    si

    class DerivedA: Base is
        init() is si
    si
   
    class DerivedB: Base is
        init() is si
    si

    entry() is
        let no_else_let_1_elif: Base =
            if true then
                new DerivedA()
            elif false then
                new DerivedB()
            fi;

        let no_else_let_2_elif: Base =
            if true then
                new DerivedA()
            elif true then
                new DerivedB()
            elif false then
                new DerivedA()
            fi;

        let no_else_let_1_elif_compatible_types_1: Base = 
            if true then
                new object()
            elif false then
                new DerivedA()
            fi;

        let no_else_let_1_elif_compatible_types_2: Base =
            if true then
                new DerivedA()
            elif false then
                new object()
            fi;

        let no_else_let_1_elif_incompatible_types_1 =
            if true then
                new DerivedA()
            elif false then
                new DerivedB()
            fi;

        let no_else_let_1_elif_incompatible_types_2 =
            if true then
                new DerivedA()
            elif true then
                new DerivedB()
            elif false then
                new DerivedA()
            fi;
    si

    return_statement_1_elif_compatible_types() -> int is
        return
            if true then
                1
            elif false then
                2
            fi;
    si

    return_statement_1_elif_incompatible_types_1() -> int is
        return
            if true then
                "a"
            elif false then
                123
            fi;
    si

    return_statement_1_elif_incompatible_types_2() -> int is
        return
            if true then
                123
            elif false then
                "a"
            fi;
    si

    return_statement_3_elif_incompatible_types_1() -> int is
        return
            if true then
                123
            elif true then
                "a"
            elif false then
                123
            elif true then
                456
            fi;
    si

    return_statement_1_elif_infered_compatible_types_1() -> object is
        return
            if true then
                new DerivedA()
            elif false then
                new DerivedB()
            fi;
    si

    return_statement_2_elif_incompatible_types_1() -> Base is
        return
            if true then
                new DerivedA()
            elif false then
                new DerivedB()
            elif true then
                12345;
            fi;
    si

    expression_bodied_function_1_elif_compatible_types_1() -> int =>
        if true then 1 elif false then 2 fi;

        expression_bodied_function_2_elif_compatible_types_1() -> object =>
        if true then new DerivedA() elif false then new DerivedB() elif false then new DerivedA() fi;

        expression_bodied_function_2_elif_inferred_compatible_types_1() -> Base =>
        if true then new DerivedA() elif false then new DerivedB() elif false then new DerivedA() fi;
si