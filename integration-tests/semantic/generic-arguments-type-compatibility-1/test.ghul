
function[T, U](t: T, u: U) -> T is
    let x = t;
    let y = u;

    x = null; // should error

    x = y; // should error, not the same types

    return x; // OK - return type is T
    return u; // should error, not the same types

    x.to_string(); // OK everything has to_string()

    let o: object = x; // OK everything is an object
si

class THING[T, U] is
    tt: T;
    uu: U;

    function(t: T, u: U) -> T static is
        let x = t;
        let y = u;

        x = null; // should error, we don't know if T is nullable

        x = y; // should error, not the same types

        return x; // OK - return type is T
        return y; // should error, not the same types

        return null; // should error, we don't know if T is nullable

        x.to_string(); // OK everything has to_string()

        let o: object = x; // OK everything is an object
    si

    function() -> T is
        let x = tt;
        let y = uu;

        x = null; // should error, we don't know if T can be null

        x = y; // should error, not the same types

        return x; // OK - return type is T
        return y; // should error, not the same types

        return null; // should error, we don't know if T can be null

        x.to_string(); // OK everything has to_string()

        let o: object = x; // OK everything is an object

        tt = x; // OK
        uu = x; // should error, not the same types

        tt = y; // should error, not the same types

        tt.to_string(); // OK everything has to_string()

        tt = null; // should error, we don't know if T can be null
        uu = null; // should error, we don't know if U can be null
    si
si

entry() is
    function(null, null); // error, can't infer types
    function`[int,int](null, null); // error, int can't be null
    function`[int,string](null, null); // error, int can't be null
    function`[string,int]("hello", null); // error, int can't be null

    function`[int,string](1234, null); // OK
    function`[string,string]("hello", "world"); // OK
    function`[string,string](null, "world"); // OK
    function`[string,string]("hello", null); // OK

    THING`[int,int].function(1234, 5678); // OK
    THING`[int,string].function(1234, "hello"); // OK
    THING`[string,int].function("hello", 1234); // OK
    THING`[string,string].function("hello", "world"); 

    THING`[int,int].function(null, null); // error int can't be null
    THING`[int,string].function(null, null); // error int can't be null
    THING`[string,int].function(null, null); // error int can't be null

    THING`[int,int].function(1234, "hello"); // error not the same types
    THING`[int,string].function(1234, 5678); // error not the same types
    THING`[string,int].function("hello", "world"); // error not the same types
    THING`[string,string].function("hello", 1234); // error not the same types
    THING`[string,string].function(null, "world"); // OK, string can be null
    THING`[string,string].function("hello", null); // OK, string can be null
si
