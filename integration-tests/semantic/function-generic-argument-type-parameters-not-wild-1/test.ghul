/*

https://github.com/degory/ghul/issues/803

Function generic argument types should only be wildcards when binding

Function generic argument types should only be wildcards for purposes of 
function overload resolution, but they're currently wildcards for all type 
comparisons, including for code within the method.

the following should result in compile time errors, as the assignments of t and u to i and s involve incompatible types:

function[T,U](t: T, u: U) -> (T,U) is
    let i: int = t;
    let s: string = u;
si        

*/

namespace Test is
    use Std = IO.Std;

    class Main[X,Y] is
        entry() static is
            let t = function(123, "hello");

            let u = function([123,456], ["aaa", "bbb"]);
        si

        function[T,U](t: T, u: U) -> (t: T,u: U) static is
            let i: int;
            let j: string;

            let x: X;
            let y: Y;

            i = t; // expect error T is not an int
            j = u; // expect error U is not a string

            t.to_string();
            x.to_string();

            i = x; // expect error X is not an int
            j = y; // expect error Y is not a string

            t = new object(); // expect error object is not a T
            u = new object(); // expect error object is not a U

            x = new object(); // expect error object is not a X
            y = new object(); // expect error object is not a Y

            i = new object(); // expect error object is not an int
            j = new object(); // expect error object is not a string

            t = 10; // expect error int is not a T
            y = "hello"; // expect error string is not a Y

            let o: object;
            let p: object;

            o = x; // OK X is an object
            p = y; // OK Y is an object

            o = t; // OK T is an object
            p = u; // OK U is an object
            
            let w: T = o; // expect error object is not a T
            let z: U = p; // expect error object is not a U
        si
    si
si