/*

https://github.com/degory/ghul/issues/914

It should not be possible to:

 Declare local variables of void type or of a type constructed from void
 Declare function parameters of void type or of a type constructed from void
 Declare properties of void type or of a type constructed from void

*/

namespace Test is
    use Std = IO.Std;

    class Main is
        entry() static is
            //  Declare local variables of void type or of a type constructed from void
            let local_void: void;
            let local_constructed_void_1: void[];
            let local_constructed_void_2: Collections.MAP[void,int];
            let local_constructed_void_3: Collections.MAP[Collections.List[void],int];
            let local_constructed_void_4: (a: int, b: void, c: int);
            let local_constructed_void_5: (a: int, b: int, c: void[]);

            // void return type is OK:
            let local_constructed_void_6: (a: int, b: int, c: int) -> void;
            let local_constructed_void_7: (a: int, b: int, c: int) -> void;

            // but void parameters should error:
            let local_constructed_void_8: (a: int, b: void, c: int) -> void;
            let local_constructed_void_9: (a: int, b: Collections.Map[int,void], c: int) -> void;
        si

        // Declare function parameters of void type or of a type constructed from void
        function_void(param: void);
        function_constructed_void_1(param: void[]);

        function_constructed_void_2(param: Collections.MAP[void,int]);
        function_constructed_void_3(param: Collections.MAP[Collections.List[void],int]);
        function_constructed_void_4(param: (a: int, b: void, c: int));
        function_constructed_void_5(param: (a: int, b: int, c: void[]));

        // void return type is OK:
        function_constructed_void_6(param: (a: int, b: int, c: int) -> void);
        function_constructed_void_7(param: (a: int, b: int, c: int) -> void);

        // but void parameters should error:
        function_constructed_void_8(param: (a: int, b: void, c: int) -> void);
        function_constructed_void_9(param: (a: int, b: Collections.Map[int,void], c: int) -> void);

        // Declare properties of void type or of a type constructed from void
        property_void: void;
        property_constructed_void_1: void[];
        property_constructed_void_2: Collections.MAP[void,int];
        property_constructed_void_3: Collections.MAP[Collections.List[void],int];
        property_constructed_void_4: (a: int, b: void, c: int);
        property_constructed_void_5: (a: int, b: int, c: void[]);

        // void return type is OK:
        property_constructed_void_6: (a: int, b: int, c: int) -> void;
        property_constructed_void_7: (a: int, b: int, c: int) -> void;

        // but void parameters should error:
        property_constructed_void_8: (a: int, b: void, c: int) -> void;
        property_constructed_void_9: (a: int, b: Collections.Map[int,void], c: int) -> void;
    si
si