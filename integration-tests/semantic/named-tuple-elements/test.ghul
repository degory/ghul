namespace Test is
    use Std = IO.Std;

    class Main is
        entry() static is
            

            let iii = create_3_tuple(1, 2, 3);

            let a = iii.i;
            let b = iii.j;
            let c = iii.k;

            // expect error:
            let d = iii.l;

            iii = (1, 2, 3);

            let i: Collections.Iterable[(index: int, value: string)];

            i = [(1, "hello"), (2, "world")];

            for j in i do
                let index = j.index;
                let value = j.value;
            od
            
            let k = [(index = 1, name = "hello"), (2, "world")];
            i = k;

            let xyz = (xx: int = 1, yy: int = 2, zz: int = 3);

            let f = (a: int, b: int) => a + b;

            let xyz2 = xyz;

            let rst = (r = 1, s = 2, t = 3);

            iii = xyz;
            let rst2 = rst;

            let sss = create_3_tuple("a", "b", "c");

            let x = sss.a;

            sss = ("x", "y", "z");

            // expect error
            sss = (1, 2, 3);

            // expect error
            sss = (a = 111, b = 222, c = 333);

            sss = (x = "x", y = "y", z = "z");

            let nested = create_3_tuple((a1 = 1, a2 = 2), (b1 = "one", b2 = "two"), (c1 = '1', c2 = '2'));

            let a1: int = nested.a.a1;
            let b2: string = nested.b.b2;
            let c1: char = nested.c.c1;

            // expect error:
            a1 = nested.d;

            // expect error:
            a1 = nested.a.d;

            // expect error:
            a1 = nested.b.b1;
            
            return;
        si

        create_3_tuple(a: int, b: int, c: int) -> (i: int, j: int, k: int) static => (a, b, c);

        create_3_tuple[TA,TB,TC](x: TA, y: TB, z: TC) -> (a: TA, b: TB, c: TC) static => (x, y, z);

        create_3_tuple_broken[TA,TB,TC](x: TA, y: TB, z: TC) -> (a: TA, b: TB, c: TC) static => (z, y, x); // expect error: values in wrong order for types
    si
si