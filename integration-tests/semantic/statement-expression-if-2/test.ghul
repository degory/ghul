namespace Test is
    use IO.Std.write_line;

    class Base is
    si

    class DerivedA: Base is
        init() is si
    si
   
    class DerivedB: Base is
        init() is si
    si

    entry() is
        let imply_base: Base =
            if true then
                DerivedA()
            else
                DerivedB()
            fi;

        let imply_base_elif: Base =
            if true then
                DerivedA()
            elif true then
                DerivedB()
            else
                DerivedA()
            fi;

        let imply_base_but_get_object_if: Base = 
            if true then
                object()
            else
                DerivedA()
            fi;

        let imply_base_but_get_object_else: Base =
            if true then
                DerivedA()
            else
                object()
            fi;

        // expect error: can't infer type from if branches
        let cannot_infer_base =
            if true then
                DerivedA()
            else
                DerivedB()
            fi;

        let cannot_infer_base_elif =
            if true then
                DerivedA()
            elif true then
                DerivedB()
            else
                DerivedA()
            fi;
    si

    correctly_returns_int_block_body() -> int is
        return
            if true then
                1
            else
                2
            fi;
    si

    cannot_return_string_block_body_if() -> int is
        return
            if true then
                "a"
            else
                123
            fi;
    si

    cannot_return_string_block_body_else() -> int is
        return
            if true then
                123
            else
                "a"
            fi;
    si

    cannot_return_string_block_body_elif() -> int is
        return
            if true then
                123
            elif true then
                "a"
            else
                123
            fi;
    si

    correctly_returns_object_block_body() -> object is
        return
            if true then
                DerivedA()
            else
                DerivedB()
            fi;
    si

    correctly_returns_base_block_body() -> Base is
        return
            if true then
                DerivedA()
            else
                DerivedB()
            fi;
    si

    correctly_returns_int_expression_body() -> int =>
        if true then 1 else 2 fi;

    correctly_returns_object_expression_body() -> object =>
        if true then DerivedA() else DerivedB() fi;

    correctly_returns_base_expression_body() -> Base =>
        if true then DerivedA() else DerivedB() fi;

si