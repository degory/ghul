
union Option[T] is
    SOME(value: T);
    NONE;
si

union Result[T, E] is
    OK(value: T);
    ERROR(error: E);
si

entry() is
    let i: int;
    let s: string;

    let any_result: Result[int, string];
    let ok_result = Result.OK[int,string](42);
    let error_result = Result.ERROR[int,string]("error");

    ok_result = Result.OK[int,string](50); // OK
    error_result = Result.ERROR[int,string]("fatal"); // OK

    // different variants not assignable
    ok_result = error_result; // expect error variable type mismatch
    error_result = ok_result; // expect error variable type mismatch

    // any_result is a base class of ok_result and error_result
    any_result = ok_result; // OK base class assignable from derived class
    any_result = error_result; // OK base class assignable from derived class

    i = ok_result.value; // OK
    i = error_result.error; // expect error ok is int not string

    s = ok_result.value; // expect error ok is int not string
    s = error_result.error; // OK

    // error is not a member of OK, value is not a member of ERROR
    ok_result.error; // expect error - error is not a member of OK
    error_result.value; // expect error - ok is not a member of ERROR

    let any_option: Option[int];
    let some_option = Option.SOME[int](42);
    let none_option = Option.NONE[int]();

    some_option = Option.SOME[int](50); // OK
    none_option = Option.NONE[int](); // OK

    some_option = none_option; // expect error variable type mismatch
    none_option = some_option; // expect error variable type mismatch

    any_option = some_option; // OK base class assignable from derived class
    any_option = none_option; // OK base class assignable from derived class

    i = some_option.value; // OK
    i = any_option.value; // OK
    
    s = any_option.value; // expect error value is int not string
    s = some_option.value; // expect error value is int not string

    any_option.value; // OK value is a member of Option
    none_option.value; // expect error value is not a member of NONE
si