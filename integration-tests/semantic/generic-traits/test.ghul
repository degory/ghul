
use Std = IO.Std;

class Main is
    init() is
        let l = VECTOR[int]();

        l[0] = 0;
        l[1] = 111;
        l[2] = 222;
        l[3] = 333;
        l[4] = l[0] + l[1] + l[2] + l[3];

        let i = l.elements;

        let hme = i.has_more_elements;
        let ne = i.next_element();

        let cl = l.copy();

        cl[5] = cl[4];
    si
si

trait Iterator[T] is
    has_more_elements: bool;
    next_element() -> T;
si

trait Iterable[T] is
    elements: Iterator[T];
si

trait List[T]: Iterable[T] is
    copy() -> List[T];

    [index: int]: T = value;
si

class VECTOR[T]: object, List[T] is
    length: int;

    init() is
    si

    [index: int]: T
        is return null; si,
        = value is            
        si

    elements: Iterator[T] is 
        let self_ = self;

        return VECTOR_ITERATOR[T](self);
    si

    copy() -> List[T] => VECTOR[T]();
si

class VECTOR_ITERATOR[T]: object, Iterator[T] is
    index: int;

    vector: VECTOR[T];

    init(vector: VECTOR[T]) is
        self.vector = vector;
    si

    has_more_elements: bool => index < vector.length;
    next_element() -> T is let result = vector[index]; index = index + 1; return result; si
si
