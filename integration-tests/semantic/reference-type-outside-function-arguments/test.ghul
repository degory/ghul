namespace Test is
    use Std = IO.Std;

    class Main is
        _field_bare: int ref;
        _field_structured: int ref[];
        _field_structured_and_ref: int ref ref;

        auto_property_structured: string ref ptr;
        auto_property_bare: int ref;

        read_property_structured: string ref ptr => null;
        read_property_bare: int ref => null;

        read_assign_property_structured: string ref[] => null, = value is si
        read_assgin_property_bare: int ref => null, = value is si

        ref_return_bare() -> int ref;
        ref_return_structured() -> int ref[];

        ref_argument() -> (int ref) -> string;

        entry() static is
            let local_bare: int ref;
            let local_structured: int ref[];

            let cast_bare = cast int ref(null);
            let cast_structured = cast int ref ptr(null);

            let anon_func_type_no_parens_ref_arguments: int ref -> int;
            let anon_func_type_no_parens_bare: int ref -> int ref;
            let anon_func_type_no_parens_structured: int ref -> int ref ptr;
            
            let anon_func_type_ref_arguments: (int ref, int ref) -> int;
            let anon_func_type_bare: (int ref, int ref) -> int ref;
            let anon_func_type_structured: (int ref, int ref) -> int ref ptr;

            let anon_func_literal_arguments = (a: int ref, b: int ref) -> int => 123;

            anon_func_type_ref_arguments = (a: int ref, b: int ref) => 123;

            let anon_func_literal_return_explicit = (a: int ref) -> int ref => a;
            let anon_func_literal_return_implicit = (a: int ref) => a;

            let tuple = (a: int ref = null, b: int ref = null);
        si
    si

    generic_function_ref_arguments[T](i: T, o: T ref);

    generic_function_ref_result[T](i: T) -> T ref;

    // expect error: 
    class BAD_CONSTRAINT_TYPES[T: int ref, U: char ref] is
    si

    class BAD_ANCESTOR_TYPES: Collections.MAP[int ref, string ref] is
        
    si
    
si