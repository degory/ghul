namespace Test is
    use Std = IO.Std;

    use Collections;

    // FIXME: 
    structured_ei[S,T](element: T, iterable: Iterable[T]) -> T;
    structured_ie[S,T](iterable: Iterable[T], element: T) -> T;

    structured_el[S,T](element: T, list: List[T]) -> T;
    structured_le[S,T](list: List[T], element: T) -> T;
    structured_aai[S,T](list: T[][], iterable: Iterable[T]) -> T;
    structured_lai[S,T](list: List[T[]], iterable: Iterable[T]) -> T;

    structured_li[S,T](list: List[T], iterable: Iterable[T]) -> T;

    class Main is
        test() is
            let t: Test[int];

            structured_el('c', ['a', 'b', 'c']);

            structured_el('c', null); 
            structured_el(t, null);

            structured_el('c', null);
            structured_el(t, null);

            structured_le(['a', 'b', 'c'], 'x');
            structured_le([t, t, t], t);

            structured_le(['a', 'b', 'c'], null);
            structured_le([t, t, t], null);

            structured_le(null, 'x');
            structured_le(null, t);

            structured_ie("hello", 'x');
            structured_ie([1, 2, 3], 1);

            structured_aai([['a'], ['b'], ['x']], ['c']);
            structured_aai([[t], [t], [t]], [t]);

            structured_lai([['a'], ['b'], ['x']], "hello");

            structured_li(['a', 'b', 'x'], "hello");

            structured_el(t, new LIST[Test[int]]());

            structured_el('c', new LIST[char]());

            structured_le(new LIST[char](), 'x');
            structured_le(new LIST[Test[int]](), t);

            structured_le(new LIST[char](), null);
            structured_le(new LIST[Test[int]](), null);

            structured_ie(new LIST[char](), 'x');
            structured_ie(new LIST[int](), 1);

            structured_lai(new LIST[char[]](), "hello");

            // // expect errors:
            structured_el(1, ['a', 'b', 'c']);
            structured_el(1, [t, t, t]);

            structured_le([1, 2, 3], 'x');
            structured_le(['a', 'b', 'c'], t);

            structured_ie("hello", 1);
        si        
    si

    // arrays are not covariant, so by wrapping in an array type
    // we avoid false negatives where a derived type is wrongly accepted 
    expect_char(c: char[]);
    expect_bool(b: bool[]);
    expect_int(i: int[]);
    expect_string(s: string[]);
    expect_test_int(t: Test[int][]);

    // doesn't need wrapping in an array to defeat type variance - we don't have covariant generic types yet:
    expect_int_list(l: Collections.LIST[int]);
    expect_char_list(l: Collections.LIST[char]);


    class Test[T] is
    si
si