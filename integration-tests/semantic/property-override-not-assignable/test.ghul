class Base is
    auto_property: int; // assignable
    readonly_property: int => 1234; // not assignable
    assignable_property: int => 1234, = value is si
    
    entry() is
        let x: int;
    si
si

class DERIVED_A: Base is
    auto_property: int; // OK
    readonly_property: int => 1234; // OK
    assignable_property: int => 1234, = value is si // OK
si

class DERIVED_B: Base is
    // expect error: should be assignable:
    auto_property: int => 1234;

    readonly_property: int => 4567, = value is si // OK

    // expect error: should be assignable:
    assignable_property: int => 1234;
si


class BasePublic is
    auto_property: int public; // assignable
    readonly_property: int public => 1234; // not assignable
    assignable_property: int public => 1234, = value is si
    
    entry() is
        let x: int;
    si
si

class DERIVED_PUBLIC_A: BasePublic is
    auto_property: int; // error: is assignable but assign accessor is not public
    readonly_property: int => 1234; // OK
    assignable_property: int => 1234, = value is si // error: is assignable but assign accessor is not public
si

class DERIVED_PUBLIC_B: BasePublic is
    // expect error: should be assignable:
    auto_property: int => 1234;

    readonly_property: int => 4567, = value is si // OK

    // expect error: should be assignable:
    assignable_property: int => 1234;
si

class DERIVED_PUBLIC_C: BasePublic is
    auto_property: int public; // OK
    readonly_property: int public => 1234; // OK
    assignable_property: int public => 1234, = value is si // OK
si
