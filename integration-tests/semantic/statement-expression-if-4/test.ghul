namespace Test is
    use IO.Std.write_line;

    class Base is
    si

    class DerivedA: Base is
        init() is si
    si
   
    class DerivedB: Base is
        init() is si
    si

    entry() is
        let valid_if_branch_empty_else = if true then 1 else fi;
        let empty_if_branch_valid_else = if true then else 2 fi;

        let empty_both_branches = if true then else fi;
    si

    correctly_returns_int_block_body() -> int is
        return
            if true then
                1
            else
                2
            fi;
    si

    cannot_return_string_block_body_if() -> int is
        return
            if true then
                "a"
            else
                123
            fi;
    si

    cannot_return_string_block_body_else() -> int is
        return
            if true then
                123
            else
                "a"
            fi;
    si

    cannot_return_string_block_body_elif() -> int is
        return
            if true then
                123
            elif true then
                "a"
            else
                123
            fi;
    si

    correctly_returns_object_block_body() -> object is
        return
            if true then
                new DerivedA()
            else
                new DerivedB()
            fi;
    si

    correctly_returns_base_block_body() -> Base is
        return
            if true then
                new DerivedA()
            else
                new DerivedB()
            fi;
    si

    correctly_returns_int_expression_body() -> int =>
        if true then 1 else 2 fi;

    correctly_returns_object_expression_body() -> object =>
        if true then new DerivedA() else new DerivedB() fi;

    correctly_returns_base_expression_body() -> Base =>
        if true then new DerivedA() else new DerivedB() fi;

si