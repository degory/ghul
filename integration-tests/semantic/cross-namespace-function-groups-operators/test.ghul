namespace Test is








    use Std = IO.Std;

    class Main is
        entry() static is
            

            return;
        si
    si
si

namespace TestA is








    use Std = IO.Std;

    class A is
        init() is si
    si

    %(left: A, right: A) -> A => null;
si

namespace TestB is








    use Std = IO.Std;

    class B is
        init() is si

        %(other: B) -> B => null;
    si
si

namespace TestC is








    use Std = IO.Std;

    use TestA;

    class DerivedB: TestB.B is
        %(a: string, b: string) -> string => null;

        test() is
            let a = A();
            let b = TestB.B();

            let should_be_a: A = a % a;

            let should_be_b: TestB.B = b % b;

            let should_also_be_b: TestB.B = self % b;

            let should_error_1 = a % b;
            let should_error_2 = b % a;
            let should_error_3 = self % a;
        si
    si

    class DerivedC: TestB.B is
        %(a: A, b: TestB.B) -> DerivedC => null;
        %(c: DerivedC, a: A) -> DerivedC => null;

        test() is
            let a = A();
            let b = TestB.B();

            let should_be_a: A = a % a;

            let should_be_b: TestB.B = b % b;

            let should_also_be_b: TestB.B = self % b;

            let should_be_c: DerivedC = a % b;
            let should_error = b % a;
            let should_also_be_c: DerivedC = self % a;
        si
    si
si


