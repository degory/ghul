namespace Test is
    use Std = IO.Std;

    class Main[T] is
        property: T static;

        function(t: T) -> T static;
        function() -> T static;

        init() is 
        si
    si
si

namespace Other is
    entry() static is
        // `[ only means explicit specialization if the backquote
        // and the open square bracket are not separated by spaces
        // otherwise the ` is part of the preceding identifier, if any

        // the following code is syntically valid, but it's indexer
        // expressions, not application of actual type arguments

        let a: int = Test.Main` [int].property;

        let b: int = Test.Main`   [int].function();
        let c: (int, int) = Test.Main`
            [(int, int)].function((1, 2));

        let list` = [1, 2, 3, 4];

        // this is both syntactically and semantically valid
        let element = list` [3];

        // as is this new-less constructor
        let t = Test.Main`[int]();

        // and this static property access
        a = Test.Main`[int].property;

        return;
    si
si
