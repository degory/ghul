namespace Test is
    @IF.not.v3()
    use Std = System.Console;
    @IF.not.v3()
    use object = System.Object;
    @IF.not.v3()
    use string = System.String;

    @IF.v3()
    use Std = IO.Std;

    class Main is
        entry() static is
            

            return;
        si
    si
si

namespace ConcreteMethodInDerivedClassOverridesIdenticalMethodInBase is   
    
    class BASE is
        test(base: int) is  
        si        
    si

    class DERIVED: BASE is
        test(derived: int) is
            // should override BASE.test(int)
        si
    si

    class TEST is
        init() is
            let b: BASE;
            b.test(1234);

            let d: DERIVED;
            d.test(1234);
        si
    si    
si

namespace DifferentMethodInDerivedClassDoesNotOverrideDifferentMethodInBase is
    @IF.not.v3()
    use Std = System.Console;
    @IF.not.v3()
    use object = System.Object;
    @IF.not.v3()
    use string = System.String;

    @IF.v3()
    use Std = IO.Std;

    
    class BASE is
        test(base: int) is  
        si        
    si

    class DERIVED: BASE is
        test(derived: string) is
            // does not override BASE.test(int)
        si
    si

    class TEST is
        init() is
            let b: BASE;
            b.test(1234);

            b.test("hello"); // b does not define test(String)

            let d: DERIVED;
            d.test(1234); // d should inherit BASE.test(int)
            d.test("hello"); // d adds BASE.test(String) overload

            d.test('x'); // d does not define test(char)
        si
    si
si


namespace DifferentMethodInDerivedClassDoesNotPreventInheritanceOfMethodInBase is
    @IF.not.v3()
    use Std = System.Console;
    @IF.not.v3()
    use object = System.Object;
    @IF.not.v3()
    use string = System.String;

    @IF.v3()
    use Std = IO.Std;

    
    class BASE is
        test(i: int) is  
        si        
    si

    class DERIVED is
        test(s: string) is
        si
        
        // test(int) still visible here
    si
si


namespace DifferentMethodInDerivedDoesNotPreventOverrideOfIdenticalMethodInBase is
    @IF.not.v3()
    use Std = System.Console;
    @IF.not.v3()
    use object = System.Object;
    @IF.not.v3()
    use string = System.String;

    @IF.v3()
    use Std = IO.Std;

    
    class BASE is
        test(i: int) is  
        si        
    si

    class DERIVED is
        test(i: int) is
            // should override BASE.test(int)
        si

        test(s: string) is
            // does not override BASE.test(int)
        si
    si
si
