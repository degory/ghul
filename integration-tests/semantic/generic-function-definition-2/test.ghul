namespace Test is
    use Std = IO.Std;

    use Collections;

    structured_ei[T](element: T, iterable: Iterable[T]) -> T;
    structured_ie[T](iterable: Iterable[T], element: T) -> T;

    structured_el[T](element: T, list: List[T]) -> T;
    structured_le[T](list: List[T], element: T) -> T;
    structured_aai[T](list: T[][], iterable: Iterable[T]) -> T;
    structured_lai[T](list: List[T[]], iterable: Iterable[T]) -> T;

    structured_li[T](list: List[T], iterable: Iterable[T]) -> T;

    class Main is
        test() is
            let t: Test[int];

            // expect no errors:
            expect_char([structured_el('c', ['a', 'b', 'c'])]);
            expect_test_int([structured_el(t, [t, t, t])]);

            expect_char([structured_el('c', null)]);
            expect_test_int([structured_el(t, null)]);

            expect_char([structured_el('c', null)]);
            expect_test_int([structured_el(t, null)]);

            expect_char([structured_le(['a', 'b', 'c'], 'x')]);
            expect_test_int([structured_le([t, t, t], t)]);

            expect_char([structured_le(['a', 'b', 'c'], null)]);
            expect_test_int([structured_le([t, t, t], null)]);

            expect_char([structured_le(null, 'x')]);
            expect_test_int([structured_le(null, t)]);

            expect_char([structured_ie("hello", 'x')]);
            expect_int([structured_ie([1, 2, 3], 1)]);

            expect_char([structured_aai([['a'], ['b'], ['x']], ['c'])]);
            expect_test_int([structured_aai([[t], [t], [t]], [t])]);

            expect_char([structured_lai([['a'], ['b'], ['x']], "hello")]);

            expect_char([structured_li(['a', 'b', 'x'], "hello")]);


            expect_test_int([structured_el(t, new LIST[Test[int]]())]);

            expect_char([structured_el('c', new LIST[char]())]);

            expect_char([structured_le(new LIST[char](), 'x')]);
            expect_test_int([structured_le(new LIST[Test[int]](), t)]);

            expect_char([structured_le(new LIST[char](), null)]);
            expect_test_int([structured_le(new LIST[Test[int]](), null)]);

            expect_char([structured_ie(new LIST[char](), 'x')]);
            expect_int([structured_ie(new LIST[int](), 1)]);

            expect_char([structured_lai(new LIST[char[]](), "hello")]);

            // // expect errors:
            structured_el(1, ['a', 'b', 'c']);
            structured_el(1, [t, t, t]);

            structured_le([1, 2, 3], 'x');
            structured_le(['a', 'b', 'c'], t);

            structured_ie("hello", 1);

            return;
        si        
    si

    // arrays are not covariant, so by wrapping in an array type
    // we avoid false negatives where a derived type is wrongly accepted 
    expect_char(c: char[]);
    expect_bool(b: bool[]);
    expect_int(i: int[]);
    expect_string(s: string[]);
    expect_test_int(t: Test[int][]);

    // doesn't need wrapping in an array to defeat type variance - we don't have covariant generic types yet:
    expect_int_list(l: Collections.LIST[int]);
    expect_char_list(l: Collections.LIST[char]);


    class Test[T] is
    si
si