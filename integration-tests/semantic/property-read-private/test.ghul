class Base is    
    _static_field: int static;
    static_auto: int static;
    static_auto_public: int public static;

    _instance_field: int;
    instance_auto: int;
    instance_auto_public: int public;

    // All OK: accessed from within declaring class:
    test_unqualified_instance() is
        _static_field;
        static_auto;
        static_auto_public;

        _instance_field;
        instance_auto;
        instance_auto_public;
    si

    // All OK: accessed from within declaring class:
    test_unqualified_static() static is
        _static_field;
        static_auto;
        static_auto_public;
    si

    // All OK: accessed from within declaring class:
    test_self_qualified_instance() is
        let i: int;
        i = self._static_field;
        i = self.static_auto;
        i = self.static_auto_public;

        i = self._instance_field;
        i = self.instance_auto;
        i = self.instance_auto_public;        
    si
    
    // All OK: accessed from within declaring class:
    test_class_qualified_base_static() static is
        let i: int;

        i = Base._static_field;
        i = Base.static_auto;
        i = Base.static_auto_public;
    si

    // All OK: accessed from within derived class:
    test_class_qualified_derived_static() static is
        let i: int;

        i = Derived._static_field;
        i = Derived.static_auto;
        i = Derived.static_auto_public;
    si

    // All OK: accessed from within declaring class:
    test_expression_base_qualified_instance() is
        let from: Base;

        let i: int;

        i = from._static_field;
        i = from.static_auto;
        i = from.static_auto_public;

        i = from._instance_field;
        i = from.instance_auto;
        i = from.instance_auto_public;        
    si

    // All OK: accessed through derived class from declaring class:
    test_expression_derived_qualified_instance() is
        let from: Derived;

        let i: int;

        i = from._static_field;
        i = from.static_auto;
        i = from.static_auto_public;

        i = from._instance_field;
        i = from.instance_auto;
        i = from.instance_auto_public;        
    si

si

class Derived: Base is
    test_class_qualified_base_static() static is
        let i: int;

        // Expect error: not accessible through base class from derived class:
        i = Base._static_field;
        // OK: publicly readable
        i = Base.static_auto;
        // OK: publicly readable
        Base.static_auto_public;
    si

    test_class_qualified_derived_static() static is
        let i: int;

        // OK: accessible through derived class from that derived class:
        i = Derived._static_field;
        // OK: publicly readable
        i = Derived.static_auto;
        // OK: publicly readable
        i = Derived.static_auto_public;
    si

    test_expression_base_qualified_instance() is
        let from: Base;
        let i: int;

        // Expect error: not accessible through base class from derived class:
        i = from._static_field;
        // OK: publicly readable
        i = from.static_auto;
        // OK: publicly readable
        i = from.static_auto_public;

        // Expect error: not accessible through base class from derived class:
        i = from._instance_field;
        // OK: publicly readable
        i = from.instance_auto;
        // OK: publicly readable
        i = from.instance_auto_public;        
    si

    test_expression_derived_qualified_instance() is
        let from: Derived;
        let i: int;

        // OK: accessible through derived class from that derived class:
        i = from._static_field;
        // OK: publicly readable
        i = from.static_auto;
        // OK: publicly readable
        i = from.static_auto_public;

        // OK: accessible through derived class from that derived class:
        i = from._instance_field;
        // OK: publicly readable
        i = from.instance_auto;
        // OK: publicly readable
        i = from.instance_auto_public;        
    si
si


class Other is        
    test_class_qualified_static() static is
        let i: int;

        // Expect error: not accessible through base class from unrelated class:
        i = Base._static_field;
        // OK: publicly readable
        i = Base.static_auto;
        // OK: publicly readable
        i = Base.static_auto_public;
    si

    test_expression_qualified_instance() is
        let from: Base;
        let i: int;

        // Expect error: not accessible through base class from unrelated class:
        i = from._static_field;
        // OK: publicly readable
        i = from.static_auto;
        // OK: publicly readable
        i = from.static_auto_public;

        // Expect error: not accessible through base class from unrelated class:
        i = from._instance_field;
        // OK: publicly readable
        i = from.instance_auto;
        // OK: publicly readable
        i = from.instance_auto_public;        
    si
si

test_class_qualified_static() static is
    let i: int;

    // Expect error: not accessible through base class from global scope:
    i = Base._static_field;
    // OK: publicly readable
    i = Base.static_auto;
    // OK: publicly readable
    i = Base.static_auto_public;
si

test_expression_base_qualified_instance() is
    let from: Base;
    let i: int;

    // Expect error: not accessible through base class from global scope:
    i = from._static_field;
    // Expect error: not accessible through base class from global scope:
    i = from.static_auto;
    // OK: publicly assignable
    i = from.static_auto_public;

    // Expect error: not accessible through base class from global scope:
    i = from._instance_field;
    // OK: publicly readable
    i = from.instance_auto;
    // OK: publicly readable
    i = from.instance_auto_public;        
si

test_expression_derived_qualified_instance() is
    let from: Derived;
    let i: int;

    // Expect error: not accessible through derived class from global scope:
    i = from._static_field;
    // OK: publicly readable
    i = from.static_auto;
    // OK: publicly readable
    i = from.static_auto_public;

    // Expect error: not accessible through derived class from global scope:
    i = from._instance_field;
    // OK: publicly readable
    i = from.instance_auto;
    // OK: publicly readable
    i = from.instance_auto_public;        
si
