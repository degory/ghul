namespace Test is
    use Std = IO.Std;

    class Main[T] is
        property: T static;

        function(t: T) -> T static;
        function() -> T static;
    si
si

namespace Other is
    entry() static is
        // syntax error:
        let a: int = Main.function` [](123); // FIXME everything after this fails to parse

        // this should parse, although it's not sematically valid because
        // 1) Main` is an undefined symbol
        // 2) ` and [ separated by whitespace is not the same as the `[ token,
        // and so we're attempting to call an indexer with the type 'int' as the paramter

        let a: int = Other.Main` [int].property;

        let b: int = Other.Main` [int].function();
        
    si
    
    other() static is
        // FIXME: this is syntatically valid, but results in error if placed after
        // let: b in previous function
        let c: (int, int) = Other.Main` [(int, int)].function((1, 2));

        return;
    si
si
