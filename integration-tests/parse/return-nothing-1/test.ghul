namespace Test.ReturnExpression is

    // these are all valid return expression initial tokens
    /*
        Lexical.TOKEN.IDENTIFIER,
        Lexical.TOKEN.SQUARE_OPEN,
        Lexical.TOKEN.PAREN_OPEN,
        Lexical.TOKEN.NEW,
        Lexical.TOKEN.CAST,
        Lexical.TOKEN.ISA,
        Lexical.TOKEN.TYPEOF,
        Lexical.TOKEN.INT_LITERAL,
        Lexical.TOKEN.FLOAT_LITERAL,
        Lexical.TOKEN.STRING_LITERAL,
        Lexical.TOKEN.CHAR_LITERAL,
        Lexical.TOKEN.TRUE,
        Lexical.TOKEN.FALSE,
        Lexical.TOKEN.NULL,
        Lexical.TOKEN.SELF,
        Lexical.TOKEN.SUPER,
        Lexical.TOKEN.IF,
        Lexical.TOKEN.OPERATOR
    */

    blah: int;

    test_identifier() is
        return ; blah
    si

    test_square_open() is
        return ; [1, 2, 3]
    si

    test_paren_open() is
        return ; (1 + 2)
    si

    test_new() is
        return ; new object()
    si

    test_cast() is
        return ; cast int(1.0)
    si

    test_isa() is
        return ; isa int(1.0)
    si

    test_typeof() is
        return ; typeof int
    si

    test_int_literal() is
        return ; 1
    si

    test_float_literal() is
        return ; 1.0
    si

    test_string_literal() is
        return ; "hello"
    si

    test_char_literal() is
        return ; 'a'
    si

    test_true() is
        return ; true
    si

    test_false() is
        return ; false
    si

    test_null() is
        return ; null
    si

    class Test is
        test_self() is
            return ; self
        si            
    si
    
    class Test2 is
        test_super() is
            return ; super
        si
    si

    test_if() is
        return ;
            if true then
                1
            else
                2
            fi
    si

    test_operator_1() is
        return ; !true
    si

    test_operator_2() is
        return ; -1234
    si

    test_return_return() is
        return ; return
    si
    
    test_return() is
        return
    si

    test_fail() is
        return return // have at least one failure so we know the test compiled at all
    si
si