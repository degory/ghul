use IO.Std.write_line;

test_first(a: int) is
    write_line("test_first");
si

test_before(b: string) is
    write_line("test_before");
si

test_incomplete(a: int, b: int) -> Collections.LIST[  // FIXME: error cascade 

test_after(c: int) is
    write_line("test_after");

si

test_last() is
    write_line("test_last");
si

entry() is
    test_first(1);
    test_before("a");

    // test_incomplete() should be definedd
    // it should have two arguments, both
    // of which are of type int
    test_incomplete(123, 456);

    test_incomplete("abc", "abc"); // expect error 

    // ideally test_incomplete() would have a return type
    // of error (compatible with any type) but we
    // can't represent that as a type expression, only
    // as an actual type, so the error we get here is
    // not that helpful

    let a: int = test_incomplete(123, 456); // expect error

    test_after(2);
    test_last();
si

