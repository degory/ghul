namespace Test is
    use Collections;
    use Std = IO.Std;

    class Main is
        entry() static is
            

            return;
        si
    si

    class DIAGNOSTIC_MESSAGE is
        init() is
        si
    si
    
    class DIAGNOSTICS_LIST is
        is_poisoned: bool;
        count: int;
        any_errors: bool;
        any_warnings: bool;

        clear(analysis_only: bool) is
        si

        init(source_path: string) is  
        si
        
        add(message: DIAGNOSTIC_MESSAGE) is
        si

        poison() is
        si
    si
    
    class DIAGNOST
    ICS_STATE is
        x: int;
        y: int;
        _diagnostics_by_source_path: MutableMap[string, DIAGNOSTICS_LIST];

        init() is
            _diagnostics_by_source_path = new MAP[string, DIAGNOSTICS_LIST]();
        si

        clear() is
            for i in _diagnostics_by_source_path.values do
                i.clear(false);
            od

            init();
        si

        clear(source_path: string, analysis_only: bool) is
            get_diagnostics_list(source_path).clear(analysis_only);
        si

        get_diagnostics_list(source_path: string) -> DIAGNOSTICS_LIST is
            let diagnostics_for_path: DIAGNOSTICS_LIST;

            // FIXME: looks like _diagnostics_by_source_path never gets a type, which
            // causes this follow on error. Weirdly other properties in this class
            // do get a type.
            if !_diagnostics_by_source_path.try_get_value(source_path, diagnostics_for_path ref) then
                diagnostics_for_path = new DIAGNOSTICS_LIST(source_path);

                _diagnostics_by_source_path.add(source_path, diagnostics_for_path);
            fi

            return diagnostics_for_path;
        si
    si

    class CHECK is

    si
si