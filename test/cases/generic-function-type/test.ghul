namespace Test.Function is
    use Ghul;

    class Main is
        init() is
            var ti: Test[int];
            ti = new Test[int]();

            var vi: int;
            vi = ti.get_value();

            let ci = ti.get_closure();
            let ci_result = ci(123);


            var tc: Test[char];
            tc = new Test[char]();

            var vc: char;
            vc = tc.get_value();

            let cc = tc.get_closure();
            let cc_result = cc(cast char(123));


            let qi = ti.get_tuple();
            let qi0 = qi.item_0;
            let qi1 = qi.item_1;
            let qi2 = qi.item_2;
        si
    si

    class Test[Q] is
        init() is
        si

        get_value() -> Q => cast Q(null);

        get_closure() -> (Q) -> Q => (q: Q) -> Q => q;

        get_tuple() -> (Q,Q,Q) => (cast Q(null), cast Q(null), cast Q(null));
    si


    trait Iterator[T] is
        has_more_elements: bool;
        next_element() -> T;
    si

    trait Iterable[T] is
        elements: Iterator[T];
    si
    
    trait List[T]: Iterable[T] is
        copy() -> List[T];

        [index: int]: T = value;
    si

    class VECTOR[T]: Object, List[T] is
        length: int;

        init() is
        si

        [index: int]: T
            is return null; si,
            = value is            
            si

        elements: Iterator[T] => new VECTOR_ITERATOR(self);
    si

    class VECTOR_ITERATOR[T]: Object, Iterator[T] is
        index: int;

        vector: VECTOR[T];

        init(vector: VECTOR[T]) is
            self.vector = vector;
        si

        has_more_elements: bool => index < vector.length;
        next_element() -> T is let result = vector[index]; index = index + 1; return result; si
    si    
si
