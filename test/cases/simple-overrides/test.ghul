namespace Test.GenericInheritance is
    use System; 
    use Generic;

    class Base is
        test(c: char) -> char => c;
        test(i: int) -> int => i;
        test(s: short) -> short => s;
    si

    class OverrideInt: Base is
        test(i: int) -> int => i * 2;
    si

    class OverrideShort: Base is
        test(s: short) -> short => s * cast short(2);
    si

    class TestOverrideInt is
        test() is
            var t: OverrideInt;

            t.test(cast char(1));
            t.test(1234);
            t.test(cast short(1234));
        si
    si

    class TestOverrideShort is
        test() is
            var t: OverrideShort;

            t.test(cast char(1));
            t.test(1234);
            t.test(cast short(1234));
        si
    si
    
    class OverrideSecondDifferentInt: OverrideShort is
        test(i: int) -> int => i * 3;
    si

    class OverrideSecondDifferentShort: OverrideInt is
        test(s: short) -> short => s * cast short(3);
    si

    class TestOverrideSecondDifferentInt is
        test() is
            var t: OverrideSecondDifferentInt;

            t.test(cast char(1));
            t.test(1234);
            t.test(cast short(1234));
        si
    si

    class TestOverrideSecondDifferentShort is
        test() is
            var t: OverrideSecondDifferentShort;

            t.test(cast char(1));
            t.test(1234);
            t.test(cast short(1234));
        si
    si

    class OverrideNoneInt: OverrideShort is
    si

    class OverrideNoneShort: OverrideInt is
    si

    class TestOverrideNoneInt is
        test() is
            var t: OverrideNoneInt;

            t.test(cast char(1));
            t.test(1234);
            t.test(cast short(1234));
        si
    si

    class TestOverrideNoneShort is
        test() is
            var t: OverrideSecondDifferentShort;

            t.test(cast char(1));
            t.test(1234);
            t.test(cast short(1234));
        si
    si

    class OverrideIndirectInt: OverrideNoneShort is
        test(i: int) -> int => i * 3;
    si

    class OverrideIndirectShort: OverrideNoneInt is
        test(s: short) -> short => s * cast short(3);
    si

    class TestOverrideIndirectInt is
        test() is
            var t: OverrideIndirectInt;

            t.test(cast char(1));
            t.test(1234);
            t.test(cast short(1234));
        si
    si

    class TestOverrideIndirectShort is
        test() is
            var t: OverrideIndirectShort;

            t.test(cast char(1));
            t.test(1234);
            t.test(cast short(1234));
        si
    si
si