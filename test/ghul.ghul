namespace Ghul is
    // no type_expression
    class void is
    si

    // Boolean/bit
    class bool is
    si

    // 8 bit bytes
    class byte is
    si

    class ubyte is
    si

    // 16 bit shorts
    class short is
    si 

    class ushort is
    si

    // 32 bit integers
    class int is
    si

    class uint is
    si

    // 64 bit longs
    class long is
    si

    class ulong is
    si

    // natural machine words (pointer sized, 32 or 64 bit):
    class word is
    si

    class uword is
    si

    // unicode character (probably 32 bit unsigned opaque):
    class char is
    si

    class REFERENCE[E] is
        value: E => null, = value is si
    si

    class ARRAY[E] is
        length: int => null;

        [index: int]: E
            => null,
            = value is si
    si

    class POINTER[E] is
        value: E => null, = value is si
    si
    
    class TUPLE_1[T0] is
        item_0: T0;
    si

    class TUPLE_2[T0,T1] is
        item_0: T0;
        item_1: T1;
    si

    class TUPLE_3[T0,T1,T2] is
        item_0: T0;
        item_1: T1;
        item_2: T2;
    si    

    class FUNCTION_0[TR] is
        call() -> TR => null;
    si

    class FUNCTION_1[T0,TR] is
        call(a0: T0) -> TR => null;
    si
    
    class FUNCTION_2[T0,T1,TR] is
        call(
            a0: T0,
            a1: T1
        ) -> TR => null;
    si

    class FUNCTION_3[T0,T1,T2,TR] is
        call(
            a0: T0,
            a1: T1,
            a2: T2
        ) -> TR => null;
    si    

    class String is
    si

    class Object is
    si

    -(a: byte) -> byte;
    +(a: byte, b: byte) -> byte;
    -(a: byte, b: byte) -> byte;
    *(a: byte, b: byte) -> byte;
    /(a: byte, b: byte) -> byte;

    +(a: ubyte, b: ubyte) -> ubyte;
    -(a: ubyte, b: ubyte) -> ubyte;
    *(a: ubyte, b: ubyte) -> ubyte;
    /(a: ubyte, b: ubyte) -> ubyte;

    -(a: short) -> short;
    +(a: short, b: short) -> short;
    -(a: short, b: short) -> short;
    *(a: short, b: short) -> short;
    /(a: short, b: short) -> short;

    +(a: ushort, b: ushort) -> ushort;
    -(a: ushort, b: ushort) -> ushort;
    *(a: ushort, b: ushort) -> ushort;
    /(a: ushort, b: ushort) -> ushort;

    -(a: int) -> int;
    +(a: int, b: int) -> int;
    -(a: int, b: int) -> int;
    *(a: int, b: int) -> int;
    /(a: int, b: int) -> int;

    // FIXME: need to map all relational operations to >
    >(a: int, b: int) -> bool;
    <(a: int, b: int) -> bool;
    =~(a: int, b: int) -> bool;
    !~(a: int, b: int) -> bool;

    +(a: uint, b: uint) -> uint;
    -(a: uint, b: uint) -> uint;
    *(a: uint, b: uint) -> uint;
    /(a: uint, b: uint) -> uint;

    -(a: long) -> long;
    +(a: long, b: long) -> long;
    -(a: long, b: long) -> long;
    *(a: long, b: long) -> long;
    /(a: long, b: long) -> long;
    
    +(a: ulong, b: ulong) -> ulong;
    -(a: ulong, b: ulong) -> ulong;
    *(a: ulong, b: ulong) -> ulong;
    /(a: ulong, b: ulong) -> ulong;

    -(a: word) -> word;
    +(a: word, b: word) -> word;
    -(a: word, b: word) -> word;
    *(a: word, b: word) -> word;
    /(a: word, b: word) -> word;

    +(a: uword, b: uword) -> uword;
    -(a: uword, b: uword) -> uword;
    *(a: uword, b: uword) -> uword;
    /(a: uword, b: uword) -> uword;    
si

namespace System is
    class Object is
    si
    class String is
    si
si

namespace Generic is
    class Vector[E] is
    si
si

namespace IO is
    use System;

    namespace Std is
       class err is
           println(s: String);
       si
    si
si