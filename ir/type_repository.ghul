namespace IR is
    use System;
    use Generic;

    class Type is
        name: String;

        init(name: String) is
            self.name = name;
        si
    si
    

    class TYPE_REPOSITORY is
        _type_map: Dict[Semantic.Type.BASE,IR.Type];
        _named_map: Dict[String,IR.Type];

        init(
        ) is
            _type_map = new Map[Semantic.Type.BASE,IR.Type]();
            _named_map = new Map[String,IR.Type]();
        si

        get_type(type: Semantic.Type.BASE) -> IR.Type is
            var result = _type_map[type];

            if result? then
                return result;
            fi

            result = type.get_ir_type(self);

            if result? then
                _type_map[type] = result;
            else
                IO.Std.err.println("null result mapping semantic type " + type + " to IR type");
            fi

            return result;
        si

        get_int_type(bits: int) -> IR.Type =>
            new Type("int" + bits);

        get_pointer_type(type: Semantic.Type.BASE) -> IR.Type =>
            new Type("" + get_type(type) + "-ptr");

        get_array_type(type: Semantic.Type.BASE) -> IR.Type =>
            new Type("" + get_type(type) + "-vec");

        get_array_type(type: Semantic.Type.BASE, length: int) -> IR.Type =>
            new Type("" + get_type(type) + "-vec");

        get_struct_type(types: List[Semantic.Type.BASE]) -> IR.Type is
            let result = new StringBuffer();

            result.append("{");

            for i in 0..types.Length do
                result.append(i);
                result.append(',');
            od

            result.append("}");

            return new Type(result);
        si

        get_function_type(arguments: List[Semantic.Type.BASE], result: Semantic.Type.BASE) -> IR.Type is
        si

        get_function_type(types: List[Semantic.Type.BASE]) -> IR.Type is
        si

        get_named_type(name: String) -> IR.Type is
            var result = _named_map[name];

            if !result? then
                result = new Type(name);
                _named_map[name] = result;
            fi

            return result;
        si

        get_pointer_to_named_type(name: String) -> IR.Type is
            return new Type("" + name + "-ptr");
        si
    si
si
