namespace IR is
    use System;
    use Generic;

    use LLVM;

    class TYPE_REPOSITORY is
        _context: LLVM.Context;
        _type_map: Dict[Semantic.Type.BASE,LLVM.Type];

        init(
            context: LLVM.Context
        ) is
            _context = context;
            _type_map = new Map[Semantic.Type.BASE,LLVM.Type]();
        si

        get_type(type: Semantic.Type.BASE) -> LLVM.Type is
            var result = _type_map[type];

            if result? then
                return result;
            fi

            result = type.get_ir_type(self);

            if result? then
                _type_map[type] = result;
            fi

            return result;
        si

        get_int_type(bits: int) -> LLVM.Type =>
            LLVM.CORE.LLVMIntTypeInContext(_context, bits);

        get_pointer_type(type: Semantic.Type.BASE) -> LLVM.Type =>
            LLVM.CORE.LLVMPointerType(get_type(type), 0);

        get_array_type(type: Semantic.Type.BASE) -> LLVM.Type =>
            LLVM.CORE.LLVMArrayType(get_type(type), 0);

        get_array_type(type: Semantic.Type.BASE, length: int) -> LLVM.Type =>
            LLVM.CORE.LLVMArrayType(get_type(type), length);

        get_struct_type(types: List[Semantic.Type.BASE]) -> LLVM.Type is
            let llvm_types = new LLVM.Type[](types.Length);

            for i in 0..types.Length do
                llvm_types.add(get_type(types[i]));
            od

            return LLVM.CORE.LLVMStructTypeInContext(_context, llvm_types.address, llvm_types.length, cast LLVM.Bool(false));
        si

        get_function_type(types: List[Semantic.Type.BASE]) -> LLVM.Type is
            let llvm_types = new LLVM.Type[](types.Length);

            for i in 0..types.Length-1 do
                llvm_types.add(get_type(types[i]));
            od

            return LLVM.CORE.LLVMFunctionType(
                get_type(types[types.Length-1]),
                llvm_types.address,
                llvm_types.Length-1,
                cast LLVM.Bool(false)
            );
        si
    si
si
