namespace IR is
    use System;
    use Generic;

    class Frame is
        enclosing: Frame => null;
    si

    class INSTANCE_FRAME: Frame is
        
    si

    class HEAP_FRAME is
        enclosing: Frame;
        types: List[LLVM.Type];

        init(enclosing: Frame) is
            self.enclosing = enclosing;

            types = new Vector[LLVM.Type]();
        si

        alloc_variable(builder: LLVM.Builder, type: LLVM.Type) is
            types.add(type);
        si

        complete_alloc(context: LLVM.Context, builder: LLVM.Builder) is
            let type = LLVM.CORE.LLVMStructTypeInContext(context, elements, length, cast LLVM.Bool(false));
            enclosing.alloc_variable(builder, type);
        si
    si
                                                                                                       
    class STACK_FRAME: Frame is        
        enclosing: Frame;
        captured: Frame;

        variables: List[LLVM.Value];

        init(enclosing: Frame, captured: Frame) is
            self.enclosing = enclosing;
            self.captured = captured;

            variables = new Vector[LLVM.Value]();
        si

        alloc_variable(builder: LLVM.Builder, type: LLVM.Type) -> int is
            variables.add(
                LLVM.CORE.LLVMBuildAlloca(builder, type, "".toCString())
            );

            return variables.Length - 1;

        si

        get_address(base: LLVM.Value, frame: Frame, index: index) -> LLVM.Value is
            if frame == self then
                return get_address(base, index);
            elif frame == captured then
                return captured.get_address(captured_base(base), index);
            elif enclosing? then
                return enclosing.get_address(frame, index);
            else
                throw new Exception("frame not found: " + frame);
            fi
        si
    si
si
