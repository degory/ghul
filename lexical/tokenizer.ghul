namespace Lexical is
    use System;
    use Generic;
    use Source;

    class TOKEN_BUFFER  is
        values: Vector[TOKEN_PAIR];

        init() is
            values = new Vector[TOKEN_PAIR](10);
        si

        reset() is
            init();
        si

        avail: bool => values.Length > 0;

        write(t: TOKEN_PAIR) is
            values.add(t);
        si

        write(t: Iterable[TOKEN_PAIR]) is
            values.add(t);
        si

        read() -> TOKEN_PAIR is
            return values.pull();
        si
    si

    class TOKENIZER_EXCEPTION: Exception  is
        init(s: String) is
            super.init(s);
        si
    si

    class TOKEN_MAP  is
        map: Generic.Map[String,TOKEN];

        init() is
            super.init();
            map = new Generic.Map[String,TOKEN](223);
        si

        [s: String]: TOKEN public
            is
                var t = map[s];
                if t != cast TOKEN(0) then
                    return t;
                else
                    return TOKEN.IDENTIFIER;
                fi
            si,
            = t is
                map[s] = t;
            si

    si

    class TOKEN_PAIR  is
        token: TOKEN;
        location: LOCATION;
        string: String;

        name: String => TOKEN_NAMES[_token];

        toString() -> String => 
            "" + _location + ": " + TOKEN_NAMES[_token] + ": " + string;

        init(token: TOKEN, location: LOCATION, string: String) is
            super.init();
            _token = token;
            _location = location;
            _string = string;
        si
    si

    class TOKENIZER  is
        logger: Logging.LOGGER;
        _token_pair: TOKEN_PAIR;
        symbol_tokens: TOKEN_MAP static;
        operator_chars: Set[char] static;
        operator_tokens: Map[String,TOKEN] static;
        buffer: TOKEN_BUFFER;
        input: IO.Reader;
        end_of_file: bool;
        _prev_char: char;
        cursor: LOCATION_CURSOR;
        _token_name: String[];

        static_init() static is 
            if symbol_tokens == null then
                operator_chars = new Set[char]([
                    '!', '$', '%', '^', '&', '*', '-', '+', '=', '|', ':', '@', '~', '#', '\\', '<', '>', '.', '?', '/'
                ]: char );

                operator_tokens = new Map[String,TOKEN]();
                operator_tokens["="] = TOKEN.ASSIGN;
                operator_tokens[":"] = TOKEN.COLON;
                operator_tokens["."] = TOKEN.DOT;
                operator_tokens["->"] = TOKEN.ARROW_THIN;
                operator_tokens["=>"] = TOKEN.ARROW_FAT;
                operator_tokens["?"] = TOKEN.QUESTION;
                symbol_tokens = new TOKEN_MAP();
                symbol_tokens["import"] = TOKEN.IMPORT;
                symbol_tokens["namespace"] = TOKEN.NAMESPACE;
                symbol_tokens["class"] = TOKEN.CLASS;
                symbol_tokens["struct"] = TOKEN.STRUCT;
                symbol_tokens["enum"] = TOKEN.ENUM;
                symbol_tokens["public"] = TOKEN.PUBLIC;
                symbol_tokens["protected"] = TOKEN.PROTECTED;
                symbol_tokens["private"] = TOKEN.PRIVATE;
                symbol_tokens["const"] = TOKEN.CONST;
                symbol_tokens["static"] = TOKEN.STATIC;
                symbol_tokens["if"] = TOKEN.IF;
                symbol_tokens["else"] = TOKEN.ELSE;
                symbol_tokens["while"] = TOKEN.WHILE;
                symbol_tokens["do"] = TOKEN.DO;
                symbol_tokens["for"] = TOKEN.FOR;
                symbol_tokens["in"] = TOKEN.IN;
                symbol_tokens["case"] = TOKEN.CASE;
                symbol_tokens["when"] = TOKEN.WHEN;
                symbol_tokens["default"] = TOKEN.DEFAULT;
                symbol_tokens["break"] = TOKEN.BREAK;
                symbol_tokens["continue"] = TOKEN.CONTINUE;
                symbol_tokens["ref"] = TOKEN.REF;
                symbol_tokens["ptr"] = TOKEN.PTR;
                symbol_tokens["new"] = TOKEN.NEW;
                symbol_tokens["throw"] = TOKEN.THROW;
                symbol_tokens["return"] = TOKEN.RETURN;
                symbol_tokens["cast"] = TOKEN.CAST;
                symbol_tokens["var"] = TOKEN.VAR;
                symbol_tokens["try"] = TOKEN.TRY;
                symbol_tokens["let"] = TOKEN.LET;
                symbol_tokens["catch"] = TOKEN.CATCH;
                symbol_tokens["finally"] = TOKEN.FINALLY;
                symbol_tokens["self"] = TOKEN.SELF;
                symbol_tokens["super"] = TOKEN.SUPER;
                symbol_tokens["null"] = TOKEN.NULL;
                symbol_tokens["use"] = TOKEN.USE;
                symbol_tokens["pragma"] = TOKEN.PRAGMA;
                symbol_tokens["get"] = TOKEN.GET;
                symbol_tokens["set"] = TOKEN.SET;
                symbol_tokens["trait"] = TOKEN.TRAIT;
                symbol_tokens["proc"] = TOKEN.PROC;
                symbol_tokens["isa"] = TOKEN.ISA;
                symbol_tokens["operator"] = TOKEN.OPERATOR;
                symbol_tokens["is"] = TOKEN.IS;
                symbol_tokens["si"] = TOKEN.SI;
                symbol_tokens["then"] = TOKEN.THEN;
                symbol_tokens["elif"] = TOKEN.ELIF;
                symbol_tokens["fi"] = TOKEN.FI;
                symbol_tokens["esac"] = TOKEN.ESAC;
                symbol_tokens["od"] = TOKEN.OD;
                symbol_tokens["yrt"] = TOKEN.YRT;
            fi
        si

        init(file_name: String, i: IO.Reader) is
            super.init();

            buffer = new TOKEN_BUFFER();
            end_of_file = false;
            input = i;
            static_init();
            cursor = new LOCATION_CURSOR(file_name);
            _token_pair = new TOKEN_PAIR(TOKEN.UNKNOWN, location, null);
        si

        is_end_of_file: bool => end_of_file;

        location: LOCATION => cursor.location;

        advance_cursor(c: char) is
            cursor.next_column();

            if c == '\n' then
                cursor.next_line();
            fi
        si

        next_char() -> char is
            var c: char;

            if _prev_char != cast char(0) then
                c = _prev_char;
                advance_cursor(c);
                _prev_char = cast char(0);
                return c;
            fi

            var c0: int = input.read();

            if c0 == -1 then
                end_of_file = true;
                return ' ';
            fi

            c = cast char(c0);

            cursor.save();
            advance_cursor(c);

            return c;
        si

        prev_char(c: char) is
            cursor.restore();
            _prev_char = c;
        si

        current_string: String is
            return _token_pair.string;
        si

        token_name[t: TOKEN]: String is
            return _token_name[cast int(t)];
        si

        read_escape() -> char is
            var c: char = next_char();
            var result: int = 0;
            if c == 't' then
                return cast char(9);
            elif c == 'n' then
                return '\n';
            elif c == 'r' then
                return cast char(13);
            elif c == '\\' then
                return '\\';
            elif c>='0' && c<='7' then
                while c>='0' && c<='7' do
                    result = 8*result + cast int(c);
                    c = next_char();
                od
                prev_char(c);
                return cast char(result);
            else
                return c;
            fi
        si

        current: TOKEN_PAIR => _token_pair;

        next() -> bool is
            _token_pair = read_token();
            return current.token != TOKEN.END_OF_INPUT;
        si

        skip_white_space() -> char is
            var c: char;
            do
                c = next_char();
                if !(!end_of_file&&(
                c==' '||c==cast char(9)||c=='\n')) then
                    break;
                fi
            od
            return c;
        si

        write_token(token: TOKEN_PAIR) is
            buffer.write(token);
        si

        write_tokens(tokens: Iterable[TOKEN_PAIR]) is
            buffer.write(tokens);
        si

        read_token() -> TOKEN_PAIR is
            if buffer.avail then
                return buffer.read();
            fi

            return read_token_2(false);
        si

        read_operator(c: char) -> TOKEN_PAIR is
            var buffer = new StringBuffer();

            while operator_chars.contains(c) do
                buffer.append(c);
                c = next_char();
            od

            prev_char(c);

            if buffer.Length < 1 then
                return new TOKEN_PAIR(TOKEN.FIRST, location, null);
            fi

            var r = operator_tokens[buffer];

            if r == TOKEN.FIRST then
                r = TOKEN.OPERATOR;
            fi

            return new TOKEN_PAIR(r, location, buffer);
        si

        read_token_2(for_comment: bool) -> TOKEN_PAIR is
            var r: TOKEN;

            var c = skip_white_space();

            if end_of_file then
                return new TOKEN_PAIR(TOKEN.END_OF_INPUT, location, null);
            fi

            cursor.start();

            var buffer: StringBuffer = null;

            if c>='0' && c<='9' then
                buffer = new StringBuffer();
                buffer.append(c);
                c = next_char();

                if c=='x' || c=='X' then
                    buffer.append(c);
                    c = next_char();
                    while 
                    (c>='0'&&c<='9') || (c>='A'&&c<='F') || (c>='a'&&c<='f') || c=='x' || c=='w' || c=='W' || c=='l' || c=='L' do
                        buffer.append(c);
                        c = next_char();
                    od
                else
                    while 
                    (c>='0'&&c<='9') || c=='x' || c=='w' || c=='W' || c=='l' || c=='L' || c=='c' || c=='C' do
                        buffer.append(c);
                        c = next_char();
                    od
                fi

                prev_char(c);
                return new TOKEN_PAIR(TOKEN.INT_LITERAL, location, buffer);
            elif (c>='a'&&c<='z') || (c>='A'&&c<='Z') || c=='_' then
                buffer = new StringBuffer();

                while (c>='a'&&c<='z') || (c>='A'&&c<='Z') || (c>='0'&&c<='9') || c=='_' do
                    buffer.append(c);
                    c = next_char();
                od

                prev_char(c);
                r = symbol_tokens[buffer];
                return new TOKEN_PAIR(r, location, buffer);
            elif c == '/' then
                c = next_char();
                if c == '/' then
                    buffer = new StringBuffer("//");
                    do
                        c = next_char();
                        if c != '\n' then
                            buffer.append(c);
                        fi
                        if !(!end_of_file&&c!='\n') then
                            break;
                        fi
                    od

                    if buffer.startsWith("///") then
                        buffer.append("\n");
                        return read_token_2(true);
                    else
                        return read_token_2(false);
                    fi
                elif c == '*' then
                    buffer = new StringBuffer("/*");
                    do
                        c = next_char();
                        if c == '*' then
                            c = next_char();
                            if c == '/' then
                                break;
                            fi
                            buffer.append('*');
                        fi

                        buffer.append(c);

                        if end_of_file then
                            break;
                        fi
                    od

                    if buffer.startsWith("/**") then
                        buffer.append("*/");
                        return read_token_2(true);
                    else
                        return read_token_2(false);
                    fi
                else
                    prev_char(c);
                    return read_operator('/');
                fi
            elif operator_chars.contains(c) then
                return read_operator(c);
            fi

            case c
            when cast char(34):
                buffer = new StringBuffer();
                c = next_char();
                while c != cast char(34) do
                    if c == cast char(92) then
                        c = read_escape();
                        buffer.append(c);
                        c = next_char();
                    else
                        buffer.append(c);
                        c = next_char();
                    fi
                    if end_of_file then
                        logger.error(location, "end of file in string literal");
                        break;
                    fi
                od
                return new TOKEN_PAIR(TOKEN.STRING_LITERAL, location, buffer);
                
            when cast char(39):
                buffer = new StringBuffer();
                c = next_char();
                while c != cast char(39) do
                    if c == cast char(92) then
                        c = read_escape();
                        buffer.append(c);
                        c = next_char();
                    else
                        buffer.append(c);
                        c = next_char();
                    fi
                    if end_of_file then
                        logger.error(location, "end of file in character literal");
                        break;
                    fi
                od

                if buffer.Length < 1 then
                    logger.error(location, "zero length character literal");
                elif buffer.Length > 1 then
                    logger.error(location, "character literal is too long");
                fi
                return new TOKEN_PAIR(TOKEN.CHAR_LITERAL, location, buffer);

            when '`':
                buffer = new StringBuffer();
                c = next_char();
                while c != '`' do
                    if c == cast char(92) then
                        c = read_escape();
                        buffer.append(c);
                        c = next_char();
                    else
                        buffer.append(c);
                        c = next_char();
                    fi
                    if end_of_file then
                        logger.error(location, "end of file in char ptr literal");
                        break;
                    fi
                od
                return new TOKEN_PAIR(TOKEN.CSTRING_LITERAL, location, buffer);

            when '=':
                c = next_char();
                if c == '=' then
                    return new TOKEN_PAIR(TOKEN.EQ, location, null);
                elif c == '~' then
                    return new TOKEN_PAIR(TOKEN.EQ_OBJ, location, null);
                elif c == '>' then
                    return new TOKEN_PAIR(TOKEN.ARROW_FAT, location, null);
                else
                    prev_char(c);
                    return new TOKEN_PAIR(TOKEN.ASSIGN, location, null);
                fi

            when '>':
                c = next_char();
                if c == '=' then
                    return new TOKEN_PAIR(TOKEN.GE, location, null);
                elif c == '>' then
                    return new TOKEN_PAIR(TOKEN.SHIFT_RIGHT, location, null);
                else
                    prev_char(c);
                    return new TOKEN_PAIR(TOKEN.GT, location, null);
                fi

            when '<':
                c = next_char();
                if c == '=' then
                    return new TOKEN_PAIR(TOKEN.LE, location, null);
                elif c == '<' then
                    return new TOKEN_PAIR(TOKEN.SHIFT_LEFT, location, null);
                else
                    prev_char(c);
                    return new TOKEN_PAIR(TOKEN.LT, location, null);
                fi

            when '!':
                c = next_char();
                if c == '=' then
                    return new TOKEN_PAIR(TOKEN.NE, location, null);
                elif c == '~' then
                    return new TOKEN_PAIR(TOKEN.NE_OBJ, location, null);
                else
                    prev_char(c);
                    return new TOKEN_PAIR(TOKEN.BANG, location, null);
                fi

            when '&':
                c = next_char();
                if c == '&' then
                    return new TOKEN_PAIR(TOKEN.AND_THEN, location, null);
                else
                    prev_char(c);
                    return new TOKEN_PAIR(TOKEN.AND, location, null);
                fi

            when '|':
                c = next_char();
                if c == '|' then
                    return new TOKEN_PAIR(TOKEN.OR_ELSE, location, null);
                else
                    prev_char(c);
                    return new TOKEN_PAIR(TOKEN.OR, location, null);
                fi

            when '~':
                return new TOKEN_PAIR(TOKEN.TILDE, location, null);

            when '^':
                return new TOKEN_PAIR(TOKEN.HAT, location, null);

            when '(':
                return new TOKEN_PAIR(TOKEN.PAREN_OPEN, location, null);

            when ')':
                return new TOKEN_PAIR(TOKEN.PAREN_CLOSE, location, null);

            when '[':
                c = skip_white_space();
                if end_of_file then
                    return new TOKEN_PAIR(TOKEN.SQUARE_OPEN, location, null);
                elif c == ']' then
                    return new TOKEN_PAIR(TOKEN.ARRAY_DEF, location, null);
                else
                    prev_char(c);
                    return new TOKEN_PAIR(TOKEN.SQUARE_OPEN, location, null);
                fi

            when ']':
                return new TOKEN_PAIR(TOKEN.SQUARE_CLOSE, location, null);

            when '+':
                return new TOKEN_PAIR(TOKEN.PLUS, location, null);

            when '-':
                c = next_char();
                if c == '>' then
                    return new TOKEN_PAIR(TOKEN.ARROW_THIN, location, null);
                else
                    prev_char(c);
                    return new TOKEN_PAIR(TOKEN.MINUS, location, null);
                fi

            when '*':
                return new TOKEN_PAIR(TOKEN.STAR, location, null);

            when '%':
                return new TOKEN_PAIR(TOKEN.PERCENT, location, null);

            when '.':
                c = next_char();
                if c == '.' then
                    return new TOKEN_PAIR(TOKEN.RANGE, location, null);
                else
                    prev_char(c);
                    return new TOKEN_PAIR(TOKEN.DOT, location, null);
                fi

            when ',':
                return new TOKEN_PAIR(TOKEN.COMMA, location, null);

            when ':':
                return new TOKEN_PAIR(TOKEN.COLON, location, null);

            when ';':
                return new TOKEN_PAIR(TOKEN.SEMICOLON, location, null);

            when '@':
                return new TOKEN_PAIR(TOKEN.PRAGMA, location, null);

            when '?':
                return new TOKEN_PAIR(TOKEN.QUESTION, location, null);

            when '#':
                buffer = new StringBuffer();
                do
                    c = next_char();
                    if c<'0' || c>'9' then
                        prev_char(c);
                        break;
                    fi
                    buffer.append(c);
                od
                cursor.jump(buffer.parseInt(), 1);
                return read_token_2(false);
            esac
            
            return new TOKEN_PAIR(TOKEN.UNKNOWN, location, "" + c);
        si
    si
si
