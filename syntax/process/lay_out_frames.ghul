namespace Syntax.Process is
    use System;
    use Generic;

    use Logging;

    class LAY_OUT_FRAMES: ScopedVisitor is
        _logger: Logger;
        _symbol_table: Semantic.SYMBOL_TABLE;
        _frame_factory: IR.FRAME_FACTORY;
        _type_repository: IR.TYPE_REPOSITORY;
        _builder: LLVM.Builder;

        init(
            logger: Logger,
            symbol_table: Semantic.SYMBOL_TABLE,
            namespaces: Semantic.NAMESPACES,
            frame_factory: IR.FRAME_FACTORY,
            type_repository: IR.TYPE_REPOSITORY
        )
        is
            super.init(logger, symbol_table, namespaces);

            _symbol_table = symbol_table;
            _logger = logger;
            _frame_factory = frame_factory;
            _type_repository = type_repository;
        si

        apply(root: Tree.NODE) is
            root.walk(self);
        si

        pre(function: Tree.Definition.TRAIT) -> bool is
            super.pre(function);

            let symbol = _symbol_table.current_instance_context;

            if symbol? then
                symbol.create_frame(_frame_factory);
            fi
        si

        pre(function: Tree.Definition.CLASS) -> bool is
            super.pre(function);

            let symbol = _symbol_table.current_instance_context;

            if symbol? then
                symbol.create_frame(_frame_factory);
            fi
        si

        pre(function: Tree.Definition.STRUCT) -> bool is
            super.pre(function);

            let symbol = _symbol_table.current_instance_context;

            if symbol? then
                symbol.create_frame(_frame_factory);
            fi
        si

        pre(function: Tree.Definition.FUNCTION) -> bool is
            super.pre(function);

            let symbol = _symbol_table.current_instance_context;

            if symbol? then
                symbol.allocate(_builder, _type_repository);

                symbol.create_frame(_frame_factory);                
            fi
        si

        // FIXME: think we're doing this twice:
        visit(variable: Tree.Variable.NODE) is
            if variable.name == null then
                return;
            fi

            var symbol = find(variable.name);

            if symbol? then
                let context = symbol.owner;

                symbol.allocate(_builder, _type_repository);
            fi
        si

        visit(variable: Tree.Expression.VARIABLE) is
            if variable.name == null then
                return;
            fi

            var symbol = find(variable.name);

            if symbol? then
                symbol.allocate(_builder, _type_repository);
            fi
        si
    si
si
