namespace Syntax.Process is
    use System;
    use Generic;

    use Logging;
    use Source;
    use Tree;

    class DECLARE_SYMBOLS: ScopeVisitorBase  is
        init(logger: LOGGER, symbol_table: SYMBOL_TABLE, namespaces: NAMESPACES) is
            super.init(logger, symbol_table, namespaces);
        si

        apply(node: NODE) is
            node.walk(self);
        si

        pre(namespace_: Definition.NAMESPACE) -> bool is
            declare_and_enter_namespace(namespace_.name);

            for u in namespace_.body.uses do
                LOGGER.trace("namespace", "about to create use scope for: " + u);
                var use_scope = new USE_SCOPE(current_scope);
                LOGGER.trace("namespace", "create use scope for: " + u + ", top scope before: " + current_scope);
                associate_and_enter_scope(u, use_scope);
                LOGGER.trace("namespace", "top scope now: " + current_scope);
            od
        si

        visit(namespace_: Definition.NAMESPACE) is
            leave_uses(namespace_);
            leave_namespace(namespace_.name);
        si

        pre(class_: Definition.CLASS) -> bool is
            associate_and_enter_scope(class_, current_declaration_context.declare_class(class_.location, class_.name.name, current_scope));
        si

        visit(class_: Definition.CLASS) is
            leave_scope(class_);
        si

        pre(interface_: Definition.INTERFACE) -> bool is
            associate_and_enter_scope(interface_, current_declaration_context.declare_trait(interface_.location, interface_.name.name, current_scope));
        si

        visit(interface_: Definition.INTERFACE) is
            leave_scope(interface_);
        si

        pre(enum_: Definition.ENUM) -> bool is
            associate_and_enter_scope(enum_, current_declaration_context.declare_enum(enum_.location, enum_.name.name));
        si

        visit(enum_: Definition.ENUM) is
            leave_scope(enum_);
        si

        pre(enum_member: Definition.ENUM_MEMBER) -> bool is
            current_declaration_context.declare_enum_member(enum_member.location, enum_member.name.name);
        si

        pre(function: Definition.FUNCTION) -> bool is
            associate_and_enter_scope(function, current_declaration_context.declare_function(function.location, function.name.name, current_scope));
        si

        visit(function: Definition.FUNCTION) is
            leave_scope(function);
        si

        visit(variable: Variable.NODE) is
            current_declaration_context.declare_variable(variable.location, variable.name.name);
        si

        visit(variable: Expression.VARIABLE) is
        si

        visit(function: Syntax.Tree.Expression.FUNCTION) is
        si

        pre(if_branch: Statement.IF_BRANCH) -> bool is
            create_and_enter_block_scope(if_branch);
        si

        visit(if_branch: Statement.IF_BRANCH) is
            leave_scope(if_branch);
        si

        pre(case_: Statement.CASE) -> bool is
            create_and_enter_block_scope(case_);
        si

        visit(case_: Statement.CASE) is
            leave_scope(case_);
        si

        pre(case_match: Statement.CASE_MATCH) -> bool is
            create_and_enter_block_scope(case_match);
        si

        visit(case_match: Statement.CASE_MATCH) is
            leave_scope(case_match);
        si

        pre(try_: Statement.TRY) -> bool is
            create_and_enter_block_scope(try_);
        si

        visit(try_: Statement.TRY) is
            leave_scope(try_);
        si

        pre(catch_: Statement.CATCH) -> bool is
            create_and_enter_block_scope(catch_);
        si

        visit(catch_: Statement.CATCH) is
            leave_scope(catch_);
        si

        pre(do_: Statement.DO) -> bool is
            create_and_enter_block_scope(do_);
        si

        visit(do_: Statement.DO) is
            leave_scope(do_);
        si

        pre(for_: Statement.FOR) -> bool is
            create_and_enter_block_scope(for_);
        si

        visit(for_: Statement.FOR) is
            leave_scope(for_);
        si

        pre(labelled: Statement.LABELLED) -> bool is
            current_declaration_context.declare_label(labelled.location, labelled.label.name);
        si

        visit(labelled: Statement.LABELLED) is
        si

        pre(body: Body.NODE) -> bool is
            create_and_enter_block_scope(body);
        si

        visit(body: Body.NODE) is
            leave_scope(body);
        si

        pre(expression: Body.EXPRESSION) -> bool is
            create_and_enter_block_scope(expression);
        si

        visit(expression: Body.EXPRESSION) is
            leave_scope(expression);
        si

        pre(block: Body.BLOCK) -> bool is
            create_and_enter_block_scope(block);
        si

        visit(block: Body.BLOCK) is
            leave_scope(block);
        si
    si
si