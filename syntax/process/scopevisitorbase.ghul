namespace Syntax is
    use System;
    use Generic;

    use Logging;
    use Source;
    use Tree;

    class ScopeVisitorBase: Visitor  is
        _symbol_table: Semantic.SYMBOL_TABLE;
        _namespaces: Semantic.NAMESPACES;

        current_scope: Semantic.Scope is
            return _symbol_table.current_scope;
        si

        current_namespace_context: Semantic.NamespaceContext is
            return _symbol_table.current_namespace_context;
        si

        current_declaration_context: Semantic.DeclarationContext is
            return _symbol_table.current_declaration_context;
        si

        init(
            symbol_table: Semantic.SYMBOL_TABLE,
            namespaces: Semantic.NAMESPACES
        ) 
        is
            super.init();
            _symbol_table = symbol_table;
            _namespaces = namespaces;            
        si

        scope_for(node: NODE) -> Semantic.Scope is
            return _symbol_table.scope_for(node);
        si

        symbol_for(node: NODE) -> Semantic.Symbol.BASE is
            return cast Semantic.Symbol.BASE(_symbol_table.scope_for(node));
        si

        class_or_trait_for(node: NODE) -> Semantic.Symbol.ScopedWithInheritance is
            return cast Semantic.Symbol.ScopedWithInheritance(_symbol_table.scope_for(node));
        si        

        find_member(identifier: Identifier.NODE) -> Semantic.Symbol.BASE is
            var qualifier = identifier.qualifier;

            if qualifier != null then
                var qualifier_symbol = find_member(qualifier);

                if qualifier_symbol != null then
                    return qualifier_symbol.find_member(identifier.name);
                else
                    return null;
                fi
            else
                var result = current_scope.find_member(identifier.name);

                return result;
            fi
        si

        find_enclosing(identifier: Identifier.NODE) -> Semantic.Symbol.BASE is
            var qualifier = identifier.qualifier;

            if qualifier != null then
                var qualifier_symbol = find_enclosing(qualifier);

                if qualifier_symbol != null then
                    return qualifier_symbol.find_enclosing(identifier.name);
                else
                    return null;
                fi
            else
                var result = current_scope.find_enclosing(identifier.name);

                return result;
            fi
        si

        create_and_enter_block_scope(node: NODE) is
            var scope = new Semantic.BLOCK_SCOPE(current_scope);
            associate_and_enter_scope(node, scope);
        si

        associate_and_enter_scope(node: NODE, scope: Semantic.Scope) is
            associate_node_with_scope(node, scope);
            enter_scope(scope);
        si

        associate_node_with_scope(node: NODE, scope: Semantic.Scope) is
            _symbol_table.associate_node_with_scope(node, scope);
        si

        mark_scope_stack() -> int is
            return _symbol_table.mark_scope_stack();
        si

        release_scope_stack(mark: int) is
            _symbol_table.release_scope_stack(mark);
        si

        enter_scope(node: NODE) is
            _symbol_table.enter_scope(node);
        si

        enter_scope(scope: Semantic.Scope) is
            _symbol_table.enter_scope(scope);
        si

        leave_scope(node: NODE) is
            _symbol_table.leave_scope(node);
        si

        leave_scope(scope: Semantic.Scope) is
            _symbol_table.leave_scope(scope);
        si

        declare_and_enter_namespace(identifier: Identifier.NODE, symbol_definition_listener: Semantic.SymbolDefinitionListener) is
            _namespaces.declare_and_enter_namespace(identifier.location, identifier.name, symbol_definition_listener);
        si

        enter_namespace(identifier: Identifier.NODE) is
            _namespaces.enter_namespace(identifier.location, identifier.name);
        si

        leave_namespace(identifier: Identifier.NODE) is
            _namespaces.leave_namespace(identifier.location, identifier.name);
        si

        enter_uses(namespace_: Definition.NAMESPACE) is
            for u in namespace_.body.uses do
                enter_scope(u);
            od
        si

        leave_uses(namespace_: Definition.NAMESPACE) is
            for u in namespace_.body.uses.ReverseIterator do
                leave_scope(u);
            od
        si
    si
si
