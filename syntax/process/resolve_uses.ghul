namespace Syntax is
    namespace Process is
        use System;
        use Generic;
        use Logging;
        use Source;
        use Tree;
        class RESOLVE_USES : ScopeVisitorBase  is
            _logger: LOGGER;
            _symbol_table: SYMBOL_TABLE;
            init(logger: LOGGER, symbol_table: SYMBOL_TABLE, namespaces: NAMESPACES) -> void is
                super.init(logger, symbol_table, namespaces);
                self._logger = logger;
                self._symbol_table = symbol_table;
            si

            apply(node: NODE) -> void public is
                node.walk(self);
            si

            pre(namespace_: Definition.NAMESPACE) -> bool is
                enter_namespace(namespace_.name);
                for u in namespace_.body.uses do
                    _logger._trace("use", "existing use scope for " + u + ": " + scope_for(u));
                    var use_scope = cast USE_SCOPE(scope_for(u));
                    for i in u do
                        _logger._trace("use", "used identifier is " + i);
                        var used_symbol = find_enclosing(i);
                        if used_symbol == null then
                            _logger._trace("use", "used identifier " + i + " is not defined in " + _symbol_table);
                            _logger.error(i.location, "used identifier " + i + " is not defined ");
                        elif isa Symbol.NAMESPACE(used_symbol) then
                            use_scope.add_scope(cast Symbol.NAMESPACE(used_symbol));
                            _logger._trace("use", "used namespace for " + i + " is: " + used_symbol);
                        else
                            _logger._trace("use", "used symbol for " + i + " is: " + used_symbol);
                            use_scope.add_symbol(used_symbol);
                        fi
                    od
                    enter_scope(use_scope);
                od
            si

            visit(namespace_: Definition.NAMESPACE) -> void is
                leave_uses(namespace_);
                leave_namespace(namespace_.name);
            si

        si

    si
si
