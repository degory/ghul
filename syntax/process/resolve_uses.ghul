namespace Syntax.Process is
    use System;
    use Generic;
    use Logging;
    use Source;
    use Tree;
    
    class RESOLVE_USES: ScopeVisitorBase is
        _logger: Logger;
        _symbol_table: Semantic.SYMBOL_TABLE;
        
        init(logger: Logger, symbol_table: Semantic.SYMBOL_TABLE, namespaces: Semantic.NAMESPACES) is
            super.init(symbol_table, namespaces);
            self._logger = logger;
            self._symbol_table = symbol_table;
        si

        apply(node: NODE) is
            node.walk(self);
        si

        pre(namespace_: Definition.NAMESPACE) -> bool is
            enter_namespace(namespace_.name);

            for u in namespace_.body.uses do
                var use_scope = cast Semantic.USE_SCOPE(scope_for(u));

                for i in u do
                    var used_symbol = find_enclosing(i);
                    
                    if used_symbol == null then
                        _logger.error(i.location, "used identifier " + i + " is not defined ");
                    elif isa Semantic.Symbol.NAMESPACE(used_symbol) then
                        use_scope.add_scope(cast Semantic.Symbol.NAMESPACE(used_symbol));
                    else
                        use_scope.add_symbol(used_symbol);
                    fi
                od

                enter_scope(use_scope);
            od
        si

        visit(namespace_: Definition.NAMESPACE) is
            leave_uses(namespace_);
            leave_namespace(namespace_.name);
        si
    si
si
