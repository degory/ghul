namespace Syntax.Process is
    use System;
    use Generic;

    use Tree;

    class SET_PARENTS: Visitor is
        init() is
            super.init();
        si

        apply(root: Tree.NODE) is
            root.walk(self);
        si

        set_parent(node: NODE) is
            var seen_any = false;

            for c in node.children do
                if c != null then
                    c.parent = node;

                    seen_any = true;
                else
                    IO.Std.err.println("null child in " + Object.dump(node));
                fi
            od

            /*
            if seen_any then
                IO.Std.err.println("set parent " + Object.dump(node) + " had effect");
            fi
            */
        si

        visit(node: NODE) is
            set_parent(node);
        si

        visit(identifier: Identifier.NODE) is
            set_parent(identifier);
        si

        visit(identifier: Identifier.QUALIFIED) is
            set_parent(identifier);
        si

        visit(modifier: Modifier.NODE) is
            set_parent(modifier);
        si

        visit(modifiers: Modifier.LIST) is
            set_parent(modifiers);
        si

        visit(definition: Definition.NODE) is
            set_parent(definition);
        si

        visit(definitions: Definition.LIST) is
            set_parent(definitions);
        si

        visit(import_: Definition.IMPORT) is
            set_parent(import_);
        si

        visit(namespace_: Definition.NAMESPACE) is
            set_parent(namespace_);        
        si

        visit(use_: Definition.USE) is
            set_parent(use_);        
        si

        visit(class_: Definition.CLASS) is
            set_parent(class_);
        si

        visit(interface_: Definition.INTERFACE) is
            set_parent(interface_);        
        si

        visit(enum_: Definition.ENUM) is
            set_parent(enum_);        
        si

        visit(enum_member: Definition.ENUM_MEMBER) is
            set_parent(enum_member);        
        si

        visit(function: Definition.FUNCTION) is
            set_parent(function);        
        si

        visit(property: Definition.PROPERTY) is
            set_parent(property);        
        si

        visit(indexer: Definition.INDEXER) is
            set_parent(indexer);
        si

        visit(variable: Variable.NODE) is
            set_parent(variable);        
        si

        visit(variables: Variable.LIST) is
            set_parent(variables);        
        si

        visit(type_expression: TypeExpression.NODE) is
            set_parent(type_expression);        
        si

        visit(type_expression: TypeExpression.INFER) is
            set_parent(type_expression);        
        si

        visit(built_in: TypeExpression.BUILT_IN) is
            set_parent(built_in);        
        si

        visit(structured: TypeExpression.STRUCTURED) is
            set_parent(structured);        
        si

        visit(array: TypeExpression.ARRAY) is
            set_parent(array);                
        si

        visit(pointer: TypeExpression.POINTER) is
            set_parent(pointer);
        si

        visit(reference: TypeExpression.REFERENCE) is
            set_parent(reference);
        si

        visit(named: TypeExpression.NAMED) is
            set_parent(named);
        si

        visit(types: TypeExpression.LIST) is
            set_parent(types);
        si

        visit(generic: TypeExpression.GENERIC) is
            set_parent(generic);
        si

        visit(function: TypeExpression.FUNCTION) is
            set_parent(function);
        si

        visit(tuple: TypeExpression.TUPLE) is
            set_parent(tuple);
        si

        visit(element: TypeExpression.NAMED_TUPLE_ELEMENT) is
            set_parent(element);
        si

        visit(expression: Expression.NODE) is
            set_parent(expression);
        si

        visit(identifier: Expression.IDENTIFIER) is
            set_parent(identifier);
        si

        visit(literal: Expression.Literal.NODE) is
            set_parent(literal);
        si

        visit(string: Expression.Literal.STRING) is
            set_parent(string);
        si

        visit(integer: Expression.Literal.INTEGER) is
            set_parent(integer);
        si

        visit(character: Expression.Literal.CHARACTER) is
            set_parent(character);
        si

        visit(variable: Expression.VARIABLE) is
            set_parent(variable);
        si

        visit(none: Expression.Literal.NONE) is
            set_parent(none);
        si

        visit(null_: Expression.NULL) is
            set_parent(null);
        si

        visit(self_: Expression.SELF) is
            set_parent(self_);
        si

        visit(super_: Expression.SUPER) is
            set_parent(super_);
        si

        visit(new_: Expression.NEW) is
            set_parent(new_);
        si

        visit(cast_: Expression.CAST) is
            set_parent(cast_);
        si

        visit(isa_: Expression.ISA) is
            set_parent(isa_);
        si

        visit(function: Syntax.Tree.Expression.FUNCTION) is
            set_parent(function);
        si

        visit(tuple: Expression.TUPLE) is
            set_parent(tuple);
        si

        visit(sequence: Expression.SEQUENCE) is
            set_parent(sequence);
        si

        visit(list: Expression.LIST) is
            set_parent(list);
        si

        visit(call: Expression.CALL) is
            set_parent(call);
        si

        visit(member: Expression.MEMBER) is
            set_parent(member);
        si

        visit(index: Expression.INDEX) is
            set_parent(index);
        si

        visit(has_value: Expression.HAS_VALUE) is
            set_parent(has_value);
        si

        visit(unary: Expression.UNARY) is
            set_parent(unary);
        si

        visit(binary: Expression.BINARY) is
            set_parent(binary);
        si

        visit(statement: Statement.NODE) is
            set_parent(statement);
        si

        visit(statements: Statement.LIST) is
            set_parent(statements);
        si

        visit(l: Statement.LET) is
            set_parent(l);
        si

        visit(v: Statement.VAR) is
            set_parent(v);
        si

        visit(assign: Statement.ASSIGNMENT) is
            set_parent(assign);
        si

        visit(expression: Statement.EXPRESSION) is
            set_parent(expression);
        si

        visit(return_: Statement.RETURN) is
            set_parent(return_);
        si

        visit(throw_: Statement.THROW) is
            set_parent(throw_);
        si

        visit(if_: Statement.IF) is
            set_parent(if_);
        si

        visit(if_branch: Statement.IF_BRANCH) is
            set_parent(if_branch);
        si

        visit(case_: Statement.CASE) is
            set_parent(case_);
        si

        visit(case_match: Statement.CASE_MATCH) is
            set_parent(case_match);
        si

        visit(try_: Statement.TRY) is
            set_parent(try_);
        si

        visit(catch_: Statement.CATCH) is
            set_parent(catch_);
        si

        visit(do_: Statement.DO) is
            set_parent(do_);
        si

        visit(for_: Statement.FOR) is
            set_parent(for_);
        si

        visit(labelled: Statement.LABELLED) is
            set_parent(labelled);
        si

        visit(break_: Statement.BREAK) is
            set_parent(break_);
        si

        visit(continue_: Statement.CONTINUE) is
            set_parent(continue_);
        si

        visit(body: Body.NODE) is
            set_parent(body);
        si

        visit(expression: Body.EXPRESSION) is
            set_parent(expression);
        si

        visit(block: Body.BLOCK) is
            set_parent(block);
        si
    si
si
