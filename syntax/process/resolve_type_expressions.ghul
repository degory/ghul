namespace Syntax.Process is
    use System;
    use Generic;

    use Logging;

    class RESOLVE_TYPE_EXPRESSIONS: ScopedVisitor is
        _logger: Logger;
        _symbol_table: Semantic.SYMBOL_TABLE;

        _symbol_use_locations: Semantic.SYMBOL_USE_LOCATIONS;

        init(
            logger: Logger,
            symbol_table: Semantic.SYMBOL_TABLE,
            namespaces: Semantic.NAMESPACES,
            symbol_use_locations: Semantic.SYMBOL_USE_LOCATIONS
        )
        is
            super.init(logger, symbol_table, namespaces);

            _logger = logger;
            _symbol_table = symbol_table;
            _symbol_use_locations = symbol_use_locations;
        si

        apply(root: Tree.NODE) is
            root.walk(self);
        si

        visit(named: Tree.TypeExpression.NAMED) is
            named.type = null;

            let symbol = find(named.name);

            if symbol? then
                if isa Semantic.Type.Typed(symbol) then
                    _symbol_use_locations.add_symbol_use(named.name.location, symbol);

                    let typed_symbol = cast Semantic.Type.Typed(symbol);

                    named.type = typed_symbol.type;
                else
                    _logger.error(named.name.location, "not a type: " + named);
                fi
            fi
        si

        visit(generic: Tree.TypeExpression.GENERIC) is
            generic.type = null;

            let symbol = find(generic.name);

            if symbol? then
                _symbol_use_locations.add_symbol_use(generic.name.location, symbol);

                if !isa Semantic.Symbol.ScopedWithInheritance(symbol) then
                    _logger.error(generic.location, "cannot supply type arguments here");
                    return;
                fi

                let arguments = new Vector[Semantic.Type.BASE]();

                for a in generic.arguments do
                    if a.type? then
                        arguments.add(a.type);
                    else
                        arguments.add(new Semantic.Type.ANY());
                    fi
                od

                generic.type = new Semantic.Type.GENERIC(
                    generic.location,
                    cast Semantic.Symbol.ScopedWithInheritance(symbol),
                    arguments);
            fi
        si

        visit(structured: Tree.TypeExpression.STRUCTURED) is
            IO.Std.err.println("visit TypeExpression.STRUCTURED called");
        si

        get_type_or_any(element: Semantic.Type.BASE) -> Semantic.Type.BASE is
            if element? then
                return element;
            else
                return new Semantic.Type.ANY();
            fi
        si
        
        visit(array: Tree.TypeExpression.ARRAY_) is
            array.type =
                IoC.CONTAINER.instance.ghul_symbol_lookup.get_array_type(
                    get_type_or_any(array.element.type));                        
        si

        visit(pointer: Tree.TypeExpression.POINTER) is
            pointer.type =
                IoC.CONTAINER.instance.ghul_symbol_lookup.get_pointer_type(
                    get_type_or_any(pointer.element.type));                        
        si

        visit(reference: Tree.TypeExpression.REFERENCE) is
            reference.type =
                IoC.CONTAINER.instance.ghul_symbol_lookup.get_reference_type(
                    get_type_or_any(reference.element.type));                        
        si

        visit(function: Tree.TypeExpression.FUNCTION) is
            let types = new Generic.Vector[Semantic.Type.BASE]();

            for a in function.arguments do
                types.add(get_type_or_any(a.type));
            od
            
            types.add(get_type_or_any(function.result.type));

            function.type =
                IoC.CONTAINER.instance.ghul_symbol_lookup.get_function_type(types);
        si

        visit(tuple: Tree.TypeExpression.TUPLE) is
            let types = new Generic.Vector[Semantic.Type.BASE]();

            for a in tuple.elements do
                types.add(get_type_or_any(a.type));
            od

            tuple.type =
                IoC.CONTAINER.instance.ghul_symbol_lookup.get_tuple_type(types);
        si

        visit(element: Tree.TypeExpression.NAMED_TUPLE_ELEMENT) is
            IO.Std.err.println("visit TypeExpression.NAMED_TUPLE_ELEMENT called");
        si
    si
si
