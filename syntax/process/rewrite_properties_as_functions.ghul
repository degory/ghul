namespace Syntax.Process is
    use System;
    use Generic;

    use Source;
    use Tree;

    class REWRITE_PROPERTIES_AS_FUNCTIONS: Visitor  is
        _map: MAP;

        _stack: Vector[Definition.LIST];

        enclosing_definition: Definition.LIST => _stack.Top;

        init() is
            super.init();

            _map = new MAP();
            _stack = new Vector[Definition.LIST]();
        si

        apply(root: NODE) is
            root.walk(self);
            var rewriter = new REWRITER(_map);
            rewriter.apply(root);
        si

        pre(property: Definition.PROPERTY) -> bool is
            /*
            type: Type.NODE;
            name: Identifier.NODE;
            read_body: Body.NODE;
            assign_argument: Identifier.NODE;
            assign_body: Body.NODE;
            */

            if property.read_body != null then
                enclosing_definition.add(
                    new Definition.FUNCTION(
                        property.location,
                        property.name,
                        new Variable.LIST(LOCATION.dummy, new Variable.NODE[](0)),
                        property.type,
                        property.modifiers,
                        property.read_body
                    )
                );
            fi

            if property.assign_body != null then
                enclosing_definition.add(
                    new Definition.FUNCTION(
                        property.location,
                        property.name,
                        new Variable.LIST(LOCATION.dummy, [
                            new Variable.NODE(
                                property.assign_argument.location,
                                property.assign_argument,
                                property.type,
                                null
                            )
                        ]),
                        property.type,
                        property.modifiers,
                        property.assign_body
                    )
                );
            fi

            enclosing_definition.remove(property);
                       
            return false;
        si

        visit(property: Definition.PROPERTY) is
        si

        pre(class_: Definition.CLASS) -> bool is
            _stack.add(class_.body);

            return false;
        si

        visit(class_: Definition.CLASS) is
            _stack.pop();
        si

        pre(interface_: Definition.INTERFACE) -> bool is
            _stack.add(interface_.body);

            return false;
        si

        visit(interface_: Definition.INTERFACE) is
            _stack.pop();
        si

        pre(namespace_: Definition.NAMESPACE) -> bool is
            _stack.add(namespace_.body);

            return false;
        si

        visit(namespace_: Definition.NAMESPACE) is
            _stack.pop();
        si        
    si
si
