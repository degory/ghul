namespace Syntax.Process is
    use System;
    use Generic;
    
    use Logging;
    use Source;

    class COMPLETER: ScopedVisitor is
        _target_line: int;
        _target_column: int;

        _results: Map[String,Semantic.Symbol.BASE];

        _have_hit: bool;

        init(
            logger: Logger,
            symbol_table: Semantic.SYMBOL_TABLE,
            namespaces: Semantic.NAMESPACES
        )
        is
            super.init(logger, symbol_table, namespaces);
        si

        find_completions(root: Tree.NODE, target_line: int, target_column: int) -> Iterable[Semantic.Symbol.BASE] is
            IO.Std.err.println("find_completions...");                        

            _have_hit = false;

            _target_line = target_line;
            _target_column = target_column;

            _results = new Map[String,Semantic.Symbol.BASE]();

            root.walk(self);

            return _results;
        si

        leave_scope(node: Tree.NODE) is            
            if !_have_hit && node.location.contains(_target_line, _target_column) then
                find_matches("", _results);
 
                IO.Std.err.println("completion hit in " + node.ClassName + " at location " + node.location);

                _have_hit = true;
            fi

            super.leave_scope(node);
        si

        visit_literal(location: LOCATION) is
            if
                location.contains(_target_line, _target_column) ||
                location.contains(_target_line, _target_column - 1)
            then
                _have_hit = true;
            fi
        si

        visit(literal: Tree.Expression.Literal.INTEGER) is
            visit_literal(literal.location);
        si

        visit(literal: Tree.Expression.Literal.STRING) is
            visit_literal(literal.location);
        si
        
        visit(literal: Tree.Expression.Literal.CHARACTER) is
            visit_literal(literal.location);
        si

        visit(qualified: Tree.Identifier.QUALIFIED) is
            if !qualified.completion_target.contains(_target_line, _target_column-1) then
                return;
            fi            

            IO.Std.err.println("member completion hit");

            let symbol = find(qualified.qualifier);

            if symbol == null then
                return;
            fi

            if !isa Semantic.Symbol.Scoped(symbol) then
                return;
            fi

            cast Semantic.Symbol.Scoped(symbol).find_member_matches("", _results);

            _have_hit = true;            
        si

        visit(member: Tree.Expression.MEMBER) is
            if !member.completion_target.contains(_target_line, _target_column-1) then
                return;
            fi            

            IO.Std.err.println("member completion hit");

            if member.left == null || member.left.value == null || member.left.value.type == null then
                IO.Std.err.println("member left too fubared to offer completion");
                return;
            fi

            var type: Semantic.Type.NAMED;

            if isa Semantic.Type.NAMED(member.left.value.type) then
                type = cast Semantic.Type.NAMED(member.left.value.type);
            elif isa Semantic.Type.GENERIC(member.left.value.type) then
                IO.Std.err.println("oops: expected type to be specialized by now: " + member.left.value.type);
                return;
            else
                IO.Std.err.println("oops: not sure how to complete member of type: " + member.left.value.type);
                return;
            fi

            /*
            if member.identifier? then
                type.symbol.find_member_matches(member.identifier.name, _results);
            else
                type.symbol.find_member_matches("", _results);
            fi
            */

            type.symbol.find_member_matches("", _results);

            _have_hit = true;
        si

        /*
        visit(identifier: Tree.Expression.IDENTIFIER) is
            if
                !identifier.location.contains(_target_line, _target_column-1)
            then
                IO.Std.err.println("complete identifier: " + identifier + " @ " + identifier.location + " does not contain " + _target_line + "," + _target_column);

                return;
            fi

            IO.Std.err.println("complete identifier: " + identifier + ", location match");

            var name: String;

            if identifier.identifier? && identifier.identifier.name? then
                name = identifier.identifier.name;
            else
                name = "";
            fi

            IO.Std.err.println("find matches for: '" + name + "'");

            find_matches(name, _results);

            IO.Std.err.println("completion suggestions now: " + _results);            
        si
        */
    si
si
