namespace Syntax is
    use System;
    use Generic;
    use Tree;
    class All : Visitor  is
        init() -> void is
            super.init();
            _log = new Map[NODE,String](65521);
        si

        _log: Map[NODE,String];
        log(name: String, node: NODE) -> void private is
            _log[node] = 
                "visitor % visit % %" % [self, name, Object.dump(node)]: Object 
            ;
        si

        result: String is
            return _log.toString();
        si

        visit(node: NODE) -> void is
            log("node", node);
        si

        visit(identifier: Identifier.NODE) -> void is
            log("identifier", identifier);
        si

        visit(identifier: Identifier.QUALIFIED) -> void is
            log("qualified identifier", identifier);
        si

        visit(modifier: Modifier.NODE) -> void is
            log("modifier", modifier);
        si

        visit(modifiers: Modifier.LIST) -> void is
            log("modifiers", modifiers);
        si

        visit(definition: Definition.NODE) -> void is
            log("definition", definition);
        si

        visit(definitions: Definition.LIST) -> void is
            log("definition list", definitions);
        si

        visit(import_: Definition.IMPORT) -> void is
            log("import", import_);
        si

        visit(namespace_: Definition.NAMESPACE) -> void is
            log("namespace", namespace_);
        si

        visit(use_: Definition.USE) -> void is
            log("use", use_);
        si

        visit(class_: Definition.CLASS) -> void is
            log("class", class_);
        si

        visit(interface_: Definition.INTERFACE) -> void is
            log("interface", interface_);
        si

        visit(enum_: Definition.ENUM) -> void is
            log("enum", enum_);
        si

        visit(enum_member: Definition.ENUM_MEMBER) -> void is
            log("enum member", enum_member);
        si

        visit(function: Definition.FUNCTION) -> void is
            log("function", function);
        si

        visit(property: Definition.PROPERTY) -> void is
            log("property", property);
        si

        visit(indexer: Definition.INDEXER) -> void is
            log("indexer", indexer);
        si

        visit(variable: Variable.NODE) -> void is
            log("variable", variable);
        si

        visit(variables: Variable.LIST) -> void is
            log("variable list", variables);
        si

        visit(type: Type.NODE) -> void is
            log("type", type);
        si

        visit(type: Type.INFER) -> void is
            log("infer", type);
        si

        visit(built_in: Type.BUILT_IN) -> void is
            log("built id", built_in);
        si

        visit(structured: Type.STRUCTURED) -> void is
            log("structured", structured);
        si

        visit(array: Type.ARRAY) -> void is
            log("array", array);
        si

        visit(pointer: Type.POINTER) -> void is
            log("pointer", pointer);
        si

        visit(reference: Type.REFERENCE) -> void is
            log("reference", reference);
        si

        visit(named: Type.NAMED) -> void is
            log("named", named);
        si

        visit(types: Type.LIST) -> void is
            log("type list", types);
        si

        visit(generic: Type.GENERIC) -> void is
            log("generic", generic);
        si

        visit(function: Type.FUNCTION) -> void is
            log("function", function);
        si

        visit(tuple: Type.TUPLE) -> void is
            log("tuple", tuple);
        si

        visit(element: Type.NAMED_TUPLE_ELEMENT) -> void is
            log("name tuple element", element);
        si

        visit(expression: Expression.NODE) -> void is
            log("expression", expression);
        si

        visit(identifier: Expression.IDENTIFIER) -> void is
            log("identifier", identifier);
        si

        visit(literal: Expression.Literal.NODE) -> void is
            log("literal", literal);
        si

        visit(string: Expression.Literal.STRING) -> void is
            log("string literal", string);
        si

        visit(character: Expression.Literal.CHARACTER) -> void is
            log("character literal", character);
        si

        visit(variable: Expression.VARIABLE) -> void is
            log("variable", variable);
        si

        visit(none: Expression.Literal.NONE) -> void is
            log("none", none);
        si

        visit(null_: Expression.NULL) -> void is
            log("self", null_);
        si

        visit(self_: Expression.SELF) -> void is
            log("self", self_);
        si

        visit(super_: Expression.SUPER) -> void is
            log("super", super_);
        si

        visit(new_: Expression.NEW) -> void is
            log("new", new_);
        si

        visit(cast_: Expression.CAST) -> void is
            log("cast", cast_);
        si

        visit(isa_: Expression.ISA) -> void is
            log("isa", isa_);
        si

        visit(function: Syntax.Tree.Expression.FUNCTION) -> void is
            log("function", function);
        si

        visit(tuple: Expression.TUPLE) -> void is
            log("tuple", tuple);
        si

        visit(sequence: Expression.SEQUENCE) -> void is
            log("sequence", sequence);
        si

        visit(list: Expression.LIST) -> void is
            log("list", list);
        si

        visit(call: Expression.CALL) -> void is
            log("call", call);
        si

        visit(member: Expression.MEMBER) -> void is
            log("member", member);
        si

        visit(index: Expression.INDEX) -> void is
            log("index", index);
        si

        visit(has_value: Expression.HAS_VALUE) -> void is
            log("has value", has_value);
        si

        visit(unary: Expression.UNARY) -> void is
            log("unary", unary);
        si

        visit(binary: Expression.BINARY) -> void is
            log("binary", binary);
        si

        visit(statement: Statement.NODE) -> void is
            log("statement", statement);
        si

        visit(statements: Statement.LIST) -> void is
            log("statement list", statements);
        si

        visit(l: Statement.LET) -> void is
            log("let", l);
        si

        visit(v: Statement.VAR) -> void is
            log("var", v);
        si

        visit(assign: Statement.ASSIGNMENT) -> void is
            log("assignment", assign);
        si

        visit(expression: Statement.EXPRESSION) -> void is
            log("expression", expression);
        si

        visit(return_: Statement.RETURN) -> void is
            log("return", return_);
        si

        visit(throw_: Statement.THROW) -> void is
            log("throw", throw_);
        si

        visit(if_: Statement.IF) -> void is
            log("if", if_);
        si

        visit(if_branch: Statement.IF_BRANCH) -> void is
            log("if branch", if_branch);
        si

        visit(case_: Statement.CASE) -> void is
            log("case", case_);
        si

        visit(case_match: Statement.CASE_MATCH) -> void is
            log("case match", case_match);
        si

        visit(try_: Statement.TRY) -> void is
            log("try", try_);
        si

        visit(catch_: Statement.CATCH) -> void is
            log("catch", catch_);
        si

        visit(do_: Statement.DO) -> void is
            log("do", do_);
        si

        visit(for_: Statement.FOR) -> void is
            log("for", for_);
        si

        visit(labelled: Statement.LABELLED) -> void is
            log("labelled", labelled);
        si

        visit(break_: Statement.BREAK) -> void is
            log("break", break_);
        si

        visit(continue_: Statement.CONTINUE) -> void is
            log("continue", continue_);
        si

        visit(body: Body.NODE) -> void is
            log("body", body);
        si

        visit(expression: Body.EXPRESSION) -> void is
            log("expression body", expression);
        si

        visit(block: Body.BLOCK) -> void is
            log("block body", block);
        si

    si

si
