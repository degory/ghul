namespace Syntax is
    use System;
    use Generic;

    use Tree;

    class All: Visitor  is
        init() is
            super.init();
            _log = new Map[NODE,String](65521);
        si

        _log: Map[NODE,String];
        log(name: String, node: NODE) -> void private is
            _log[node] = 
                "visitor % visit % %" % [self, name, Object.dump(node)]: Object 
            ;
        si

        result: String is
            return _log.toString();
        si

        visit(node: NODE) is
            log("node", node);
        si

        visit(identifier: Identifier.NODE) is
            log("identifier", identifier);
        si

        visit(identifier: Identifier.QUALIFIED) is
            log("qualified identifier", identifier);
        si

        visit(modifier: Modifier.NODE) is
            log("modifier", modifier);
        si

        visit(modifiers: Modifier.LIST) is
            log("modifiers", modifiers);
        si

        visit(definition: Definition.NODE) is
            log("definition", definition);
        si

        visit(definitions: Definition.LIST) is
            log("definition list", definitions);
        si

        visit(import_: Definition.IMPORT) is
            log("import", import_);
        si

        visit(namespace_: Definition.NAMESPACE) is
            log("namespace", namespace_);
        si

        visit(use_: Definition.USE) is
            log("use", use_);
        si

        visit(class_: Definition.CLASS) is
            log("class", class_);
        si

        visit(trait_: Definition.TRAIT) is
            log("trait", trait_);
        si

        visit(enum_: Definition.ENUM) is
            log("enum", enum_);
        si

        visit(enum_member: Definition.ENUM_MEMBER) is
            log("enum member", enum_member);
        si

        visit(function: Definition.FUNCTION) is
            log("function", function);
        si

        visit(property: Definition.PROPERTY) is
            log("property", property);
        si

        visit(indexer: Definition.INDEXER) is
            log("indexer", indexer);
        si

        visit(variable: Variable.NODE) is
            log("variable", variable);
        si

        visit(variables: Variable.LIST) is
            log("variable list", variables);
        si

        visit(type_expression: TypeExpression.NODE) is
            log("type_expression", type_expression);
        si

        visit(type_expression: TypeExpression.INFER) is
            log("infer", type_expression);
        si

        visit(built_in: TypeExpression.BUILT_IN) is
            log("built id", built_in);
        si

        visit(structured: TypeExpression.STRUCTURED) is
            log("structured", structured);
        si

        visit(array: TypeExpression.ARRAY) is
            log("array", array);
        si

        visit(pointer: TypeExpression.POINTER) is
            log("pointer", pointer);
        si

        visit(reference: TypeExpression.REFERENCE) is
            log("reference", reference);
        si

        visit(named: TypeExpression.NAMED) is
            log("named", named);
        si

        visit(types: TypeExpression.LIST) is
            log("type_expression list", types);
        si

        visit(generic: TypeExpression.GENERIC) is
            log("generic", generic);
        si

        visit(function: TypeExpression.FUNCTION) is
            log("function", function);
        si

        visit(tuple: TypeExpression.TUPLE) is
            log("tuple", tuple);
        si

        visit(element: TypeExpression.NAMED_TUPLE_ELEMENT) is
            log("name tuple element", element);
        si

        visit(expression: Expression.NODE) is
            log("expression", expression);
        si

        visit(identifier: Expression.IDENTIFIER) is
            log("identifier", identifier);
        si

        visit(literal: Expression.Literal.NODE) is
            log("literal", literal);
        si

        visit(string: Expression.Literal.STRING) is
            log("string literal", string);
        si

        visit(string: Expression.Literal.INTEGER) is
            log("integer literal", string);
        si

        visit(character: Expression.Literal.CHARACTER) is
            log("character literal", character);
        si

        visit(variable: Expression.VARIABLE) is
            log("variable", variable);
        si

        visit(none: Expression.Literal.NONE) is
            log("none", none);
        si

        visit(null_: Expression.NULL) is
            log("self", null_);
        si

        visit(self_: Expression.SELF) is
            log("self", self_);
        si

        visit(super_: Expression.SUPER) is
            log("super", super_);
        si

        visit(new_: Expression.NEW) is
            log("new", new_);
        si

        visit(cast_: Expression.CAST) is
            log("cast", cast_);
        si

        visit(isa_: Expression.ISA) is
            log("isa", isa_);
        si

        visit(function: Syntax.Tree.Expression.FUNCTION) is
            log("function", function);
        si

        visit(tuple: Expression.TUPLE) is
            log("tuple", tuple);
        si

        visit(sequence: Expression.SEQUENCE) is
            log("sequence", sequence);
        si

        visit(list: Expression.LIST) is
            log("list", list);
        si

        visit(call: Expression.CALL) is
            log("call", call);
        si

        visit(member: Expression.MEMBER) is
            log("member", member);
        si

        visit(index: Expression.INDEX) is
            log("index", index);
        si

        visit(has_value: Expression.HAS_VALUE) is
            log("has value", has_value);
        si

        visit(unary: Expression.UNARY) is
            log("unary", unary);
        si

        visit(binary: Expression.BINARY) is
            log("binary", binary);
        si

        visit(statement: Statement.NODE) is
            log("statement", statement);
        si

        visit(statements: Statement.LIST) is
            log("statement list", statements);
        si

        visit(l: Statement.LET) is
            log("let", l);
        si

        visit(v: Statement.VAR) is
            log("var", v);
        si

        visit(assign: Statement.ASSIGNMENT) is
            log("assignment", assign);
        si

        visit(expression: Statement.EXPRESSION) is
            log("expression", expression);
        si

        visit(return_: Statement.RETURN) is
            log("return", return_);
        si

        visit(throw_: Statement.THROW) is
            log("throw", throw_);
        si

        visit(if_: Statement.IF) is
            log("if", if_);
        si

        visit(if_branch: Statement.IF_BRANCH) is
            log("if branch", if_branch);
        si

        visit(case_: Statement.CASE) is
            log("case", case_);
        si

        visit(case_match: Statement.CASE_MATCH) is
            log("case match", case_match);
        si

        visit(try_: Statement.TRY) is
            log("try", try_);
        si

        visit(catch_: Statement.CATCH) is
            log("catch", catch_);
        si

        visit(do_: Statement.DO) is
            log("do", do_);
        si

        visit(for_: Statement.FOR) is
            log("for", for_);
        si

        visit(labelled: Statement.LABELLED) is
            log("labelled", labelled);
        si

        visit(break_: Statement.BREAK) is
            log("break", break_);
        si

        visit(continue_: Statement.CONTINUE) is
            log("continue", continue_);
        si

        visit(body: Body.NODE) is
            log("body", body);
        si

        visit(expression: Body.EXPRESSION) is
            log("expression body", expression);
        si

        visit(block: Body.BLOCK) is
            log("block body", block);
        si

    si

si
