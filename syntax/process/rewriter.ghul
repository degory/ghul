namespace Syntax is
    use System;
    use Generic;
    use Tree;
    class REWRITER : Visitor  is
        _map: Dict[NODE,NODE];
        init(map: Dict[NODE,NODE]) -> void is
            super.init();
            self._map = map;
        si

        apply(node: NODE) -> void is
            node.walk(self);
        si

        pre(node: NODE) -> bool is
            return false;
        si

        visit(node: NODE) -> void is
        si

        pre(identifier: Identifier.NODE) -> bool is
            identifier.rewrite(_map);
            return false;
        si

        visit(identifier: Identifier.NODE) -> void is
        si

        pre(identifier: Identifier.QUALIFIED) -> bool is
            identifier.rewrite(_map);
            return false;
        si

        visit(identifier: Identifier.QUALIFIED) -> void is
        si

        pre(modifier: Modifier.NODE) -> bool is
            modifier.rewrite(_map);
            return false;
        si

        visit(modifier: Modifier.NODE) -> void is
        si

        pre(modifiers: Modifier.LIST) -> bool is
            modifiers.rewrite(_map);
            return false;
        si

        visit(modifiers: Modifier.LIST) -> void is
        si

        pre(definition: Definition.NODE) -> bool is
            definition.rewrite(_map);
            return false;
        si

        visit(definition: Definition.NODE) -> void is
        si

        pre(definitions: Definition.LIST) -> bool is
            definitions.rewrite(_map);
            return false;
        si

        visit(definitions: Definition.LIST) -> void is
        si

        pre(import_: Definition.IMPORT) -> bool is
            import_.rewrite(_map);
            return false;
        si

        visit(import_: Definition.IMPORT) -> void is
        si

        pre(namespace_: Definition.NAMESPACE) -> bool is
            namespace_.rewrite(_map);
            return false;
        si

        visit(namespace_: Definition.NAMESPACE) -> void is
        si

        pre(use_: Definition.USE) -> bool is
            use_.rewrite(_map);
            return false;
        si

        visit(use_: Definition.USE) -> void is
        si

        pre(class_: Definition.CLASS) -> bool is
            class_.rewrite(_map);
            return false;
        si

        visit(class_: Definition.CLASS) -> void is
        si

        pre(interface_: Definition.INTERFACE) -> bool is
            interface_.rewrite(_map);
            return false;
        si

        visit(interface_: Definition.INTERFACE) -> void is
        si

        pre(enum_: Definition.ENUM) -> bool is
            enum_.rewrite(_map);
            return false;
        si

        visit(enum_: Definition.ENUM) -> void is
        si

        pre(enum_member: Definition.ENUM_MEMBER) -> bool is
            enum_member.rewrite(_map);
            return false;
        si

        visit(enum_member: Definition.ENUM_MEMBER) -> void is
        si

        pre(function: Definition.FUNCTION) -> bool is
            function.rewrite(_map);
            return false;
        si

        visit(function: Definition.FUNCTION) -> void is
        si

        pre(functions: Definition.FUNCTION_GROUP) -> bool is
            functions.rewrite(_map);
            return false;
        si

        visit(functions: Definition.FUNCTION_GROUP) -> void is
        si

        pre(property: Definition.PROPERTY) -> bool is
            property.rewrite(_map);
            return false;
        si

        visit(property: Definition.PROPERTY) -> void is
        si

        pre(indexer: Definition.INDEXER) -> bool is
            indexer.rewrite(_map);
            return false;
        si

        visit(indexer: Definition.INDEXER) -> void is
        si

        pre(variable: Variable.NODE) -> bool is
            variable.rewrite(_map);
            return false;
        si

        visit(variable: Variable.NODE) -> void is
        si

        pre(variables: Variable.LIST) -> bool is
            variables.rewrite(_map);
            return false;
        si

        visit(variables: Variable.LIST) -> void is
        si

        pre(type: Type.NODE) -> bool is
            type.rewrite(_map);
            return false;
        si

        visit(type: Type.NODE) -> void is
        si

        pre(infer: Type.INFER) -> bool is
            infer.rewrite(_map);
            return false;
        si

        visit(type: Type.INFER) -> void is
        si

        pre(built_in: Type.BUILT_IN) -> bool is
            built_in.rewrite(_map);
            return false;
        si

        visit(built_in: Type.BUILT_IN) -> void is
        si

        pre(structured: Type.STRUCTURED) -> bool is
            structured.rewrite(_map);
            return false;
        si

        visit(structured: Type.STRUCTURED) -> void is
        si

        pre(array: Type.ARRAY) -> bool is
            array.rewrite(_map);
            return false;
        si

        visit(array: Type.ARRAY) -> void is
        si

        pre(pointer: Type.POINTER) -> bool is
            pointer.rewrite(_map);
            return false;
        si

        visit(pointer: Type.POINTER) -> void is
        si

        pre(reference: Type.REFERENCE) -> bool is
            reference.rewrite(_map);
            return false;
        si

        visit(reference: Type.REFERENCE) -> void is
        si

        pre(named: Type.NAMED) -> bool is
            named.rewrite(_map);
            return false;
        si

        visit(named: Type.NAMED) -> void is
        si

        pre(types: Type.LIST) -> bool is
            types.rewrite(_map);
            return false;
        si

        visit(types: Type.LIST) -> void is
        si

        pre(generic: Type.GENERIC) -> bool is
            generic.rewrite(_map);
            return false;
        si

        visit(generic: Type.GENERIC) -> void is
        si

        pre(function: Type.FUNCTION) -> bool is
            function.rewrite(_map);
            return false;
        si

        visit(function: Type.FUNCTION) -> void is
        si

        pre(functions: Type.FUNCTION_GROUP) -> bool is
            functions.rewrite(_map);
            return false;
        si

        visit(functions: Type.FUNCTION_GROUP) -> void is
        si

        pre(tuple: Type.TUPLE) -> bool is
            tuple.rewrite(_map);
            return false;
        si

        visit(tuple: Type.TUPLE) -> void is
        si

        pre(element: Type.NAMED_TUPLE_ELEMENT) -> bool is
            element.rewrite(_map);
            return false;
        si

        visit(element: Type.NAMED_TUPLE_ELEMENT) -> void is
        si

        pre(expression: Expression.NODE) -> bool is
            expression.rewrite(_map);
            return false;
        si

        visit(expression: Expression.NODE) -> void is
        si

        pre(identifier: Expression.IDENTIFIER) -> bool is
            identifier.rewrite(_map);
            return false;
        si

        visit(identifier: Expression.IDENTIFIER) -> void is
        si

        pre(literal: Expression.Literal.NODE) -> bool is
            literal.rewrite(_map);
            return false;
        si

        visit(literal: Expression.Literal.NODE) -> void is
        si

        pre(string: Expression.Literal.STRING) -> bool is
            string.rewrite(_map);
            return false;
        si

        visit(string: Expression.Literal.STRING) -> void is
        si

        pre(character: Expression.Literal.CHARACTER) -> bool is
            character.rewrite(_map);
            return false;
        si

        visit(character: Expression.Literal.CHARACTER) -> void is
        si

        pre(variable: Expression.VARIABLE) -> bool is
            variable.rewrite(_map);
            return false;
        si

        visit(variable: Expression.VARIABLE) -> void is
        si

        pre(none: Expression.Literal.NONE) -> bool is
            none.rewrite(_map);
            return false;
        si

        visit(none: Expression.Literal.NONE) -> void is
        si

        pre(new_: Expression.NEW) -> bool is
            new_.rewrite(_map);
            return false;
        si

        visit(new_: Expression.NEW) -> void is
        si

        pre(cast_: Expression.CAST) -> bool is
            cast_.rewrite(_map);
            return false;
        si

        visit(cast_: Expression.CAST) -> void is
        si

        pre(isa_: Expression.ISA) -> bool is
            isa_.rewrite(_map);
            return false;
        si

        visit(isa_: Expression.ISA) -> void is
        si

        pre(function: Syntax.Tree.Expression.FUNCTION) -> bool is
            function.rewrite(_map);
            return false;
        si

        visit(function: Syntax.Tree.Expression.FUNCTION) -> void is
        si

        pre(tuple: Expression.TUPLE) -> bool is
            tuple.rewrite(_map);
            return false;
        si

        visit(tuple: Expression.TUPLE) -> void is
        si

        pre(sequence: Expression.SEQUENCE) -> bool is
            sequence.rewrite(_map);
            return false;
        si

        visit(sequence: Expression.SEQUENCE) -> void is
        si

        pre(list: Expression.LIST) -> bool is
            list.rewrite(_map);
            return false;
        si

        visit(list: Expression.LIST) -> void is
        si

        pre(call: Expression.CALL) -> bool is
            call.rewrite(_map);
            return false;
        si

        visit(call: Expression.CALL) -> void is
        si

        pre(member: Expression.MEMBER) -> bool is
            member.rewrite(_map);
            return false;
        si

        visit(member: Expression.MEMBER) -> void is
        si

        pre(index: Expression.INDEX) -> bool is
            index.rewrite(_map);
            return false;
        si

        visit(index: Expression.INDEX) -> void is
        si

        pre(has_value: Expression.HAS_VALUE) -> bool is
            has_value.rewrite(_map);
            return false;
        si

        visit(has_value: Expression.HAS_VALUE) -> void is
        si

        pre(unary: Expression.UNARY) -> bool is
            unary.rewrite(_map);
            return false;
        si

        visit(unary: Expression.UNARY) -> void is
        si

        pre(binary: Expression.BINARY) -> bool is
            binary.rewrite(_map);
            return false;
        si

        visit(binary: Expression.BINARY) -> void is
        si

        pre(statement: Statement.NODE) -> bool is
            return false;
        si

        visit(statement: Statement.NODE) -> void is
        si

        pre(statements: Statement.LIST) -> bool is
            return false;
        si

        visit(statements: Statement.LIST) -> void is
        si

        pre(l: Statement.LET) -> bool is
            return false;
        si

        visit(l: Statement.LET) -> void is
        si

        pre(v: Statement.VAR) -> bool is
            return false;
        si

        visit(v: Statement.VAR) -> void is
        si

        pre(assign: Statement.ASSIGNMENT) -> bool is
            return false;
        si

        visit(assign: Statement.ASSIGNMENT) -> void is
        si

        pre(expression: Statement.EXPRESSION) -> bool is
            return false;
        si

        visit(expression: Statement.EXPRESSION) -> void is
        si

        pre(return_: Statement.RETURN) -> bool is
            return false;
        si

        visit(return_: Statement.RETURN) -> void is
        si

        pre(throw_: Statement.THROW) -> bool is
            return false;
        si

        visit(throw_: Statement.THROW) -> void is
        si

        pre(if_: Statement.IF) -> bool is
            return false;
        si

        visit(if_: Statement.IF) -> void is
        si

        pre(case_: Statement.CASE) -> bool is
            return false;
        si

        visit(case_: Statement.CASE) -> void is
        si

        pre(case_match: Statement.CASE_MATCH) -> bool is
            return false;
        si

        visit(case_match: Statement.CASE_MATCH) -> void is
        si

        pre(try_: Statement.TRY) -> bool is
            return false;
        si

        visit(try_: Statement.TRY) -> void is
        si

        pre(catch_: Statement.CATCH) -> bool is
            return false;
        si

        visit(catch_: Statement.CATCH) -> void is
        si

        pre(do_: Statement.DO) -> bool is
            return false;
        si

        visit(do_: Statement.DO) -> void is
        si

        pre(for_: Statement.FOR) -> bool is
            return false;
        si

        visit(for_: Statement.FOR) -> void is
        si

        pre(labelled: Statement.LABELLED) -> bool is
            return false;
        si

        visit(labelled: Statement.LABELLED) -> void is
        si

        pre(break_: Statement.BREAK) -> bool is
            return false;
        si

        visit(break_: Statement.BREAK) -> void is
        si

        pre(continue_: Statement.CONTINUE) -> bool is
            return false;
        si

        visit(continue_: Statement.CONTINUE) -> void is
        si

        pre(body: Body.NODE) -> bool is
            return false;
        si

        visit(body: Body.NODE) -> void is
        si

        pre(expression: Body.EXPRESSION) -> bool is
            return false;
        si

        visit(expression: Body.EXPRESSION) -> void is
        si

        pre(block: Body.BLOCK) -> bool is
            return false;
        si

        visit(block: Body.BLOCK) -> void is
        si

    si

si
