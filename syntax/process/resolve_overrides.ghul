namespace Syntax.Process is
    use System;
    use Generic;
    
    use Logging;

    class RESOLVE_OVERRIDES: ScopedVisitor is
        _logger: Logger;
        _symbol_table: Semantic.SYMBOL_TABLE;

        init(
            logger: Logger,
            symbol_table: Semantic.SYMBOL_TABLE,
            namespaces: Semantic.NAMESPACES
        )
        is
            super.init(logger, symbol_table, namespaces);

            _symbol_table = symbol_table;
            
            _logger = logger;
        si

        apply(root: Tree.NODE) is
            root.walk(self);
        si

        visit(property: Tree.Definition.PROPERTY) is
            let symbol = find(property.name);

            if symbol? && isa Semantic.Type.SettableTyped(symbol) then
                cast Semantic.Type.SettableTyped(symbol).type = property.type_expression.type;
            else
                IO.Std.err.println("cannot set type for property " + property + " beacuse symbol is weird: " + symbol);
            fi
        si

        visit(class_: Tree.Definition.CLASS) is
            let class_symbol = cast Semantic.Symbol.CLASS(_symbol_table.current_instance_context);

            class_symbol.resolve_overrides();

            super.visit(class_);
        si

        visit(trait_: Tree.Definition.TRAIT) is
            let trait_symbol = cast Semantic.Symbol.TRAIT(_symbol_table.current_instance_context);

            trait_symbol.resolve_overrides();

            super.visit(trait_);
        si
    si
si
