namespace Syntax.Process is
    use System;
    use Generic;
    
    use Logging;

    class RESOLVE_OVERRIDES: ScopedVisitor is
        _logger: Logger;
        _symbol_table: Semantic.SYMBOL_TABLE;

        init(
            logger: Logger,
            symbol_table: Semantic.SYMBOL_TABLE,
            namespaces: Semantic.NAMESPACES
        )
        is
            super.init(logger, symbol_table, namespaces);

            _symbol_table = symbol_table;
            
            _logger = logger;
        si

        apply(root: Tree.NODE) is
            root.walk(self);
        si

        visit(class_: Tree.Definition.CLASS) is
            let class_symbol = cast Semantic.Symbol.CLASS(_symbol_table.current_instance_context);

            if class_symbol? && !class_symbol.blah then
                let type_map = new Map[String,Semantic.Type.BASE]();

                if class_.arguments? then
                    for a in class_.arguments do
                        assert(isa Tree.TypeExpression.NAMED(a), "expected a named argument");

                        if a.type? && a.type.type? then
                            let named = cast Semantic.Type.NAMED(a.type.type);

                            type_map[named.name] = named;
                        fi
                    od
                fi

                class_symbol.specialize_ancestors(IoC.CONTAINER.instance.generic_specializer, type_map);
                
                class_symbol.blah = true;
            fi

            super.visit(class_);
        si

        visit(trait_: Tree.Definition.TRAIT) is
            let trait_symbol = cast Semantic.Symbol.TRAIT(_symbol_table.current_instance_context);

            if trait_symbol? && !trait_symbol.blah then
                let type_map = new Map[String,Semantic.Type.BASE]();

                if trait_.arguments? then
                    for a in trait_.arguments do
                        assert(isa Tree.TypeExpression.NAMED(a), "expected a named argument");

                        if a.type? && a.type.type? then
                            let named = cast Semantic.Type.NAMED(a.type.type);

                            type_map[named.name] = named;
                        fi
                    od
                fi

                trait_symbol.specialize_ancestors(IoC.CONTAINER.instance.generic_specializer, type_map);
                
                trait_symbol.blah = true;
            fi

            super.visit(trait_);
        si
        

        /*
        visit(trait_: Tree.Definition.TRAIT) is
            let symbol = cast Semantic.Symbol.TRAIT(_symbol_table.current_instance_context);

            if symbol? then
                trait_symbol.specialize_ancestors();
            fi
            
            super.visit(trait_);
        si
        */
    si
si
