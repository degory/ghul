namespace Syntax is
    namespace Process is
        namespace Printer is
            use System;
            use Tree;
            class GHUL : BASE  is
                init() -> void is
                    super.init(false);
                si

                visit(variable: Variable.NODE) -> void is
                    variable.name.accept(self);
                    if !isa TypeExpression.INFER(variable.type) then
                        print(": ");
                        variable.type.accept(self);
                    fi
                    if variable.initializer != null then
                        print(" = ");
                        variable.initializer.accept(self);
                    fi
                si

                visit(import_: Definition.IMPORT) -> void is
                    print("import ");
                    var seen_any = false;
                    for i in import_.imports do
                        if seen_any then
                            print(", ");
                        fi
                        i.accept(self);
                        seen_any = true;
                    od
                    println(";");
                si

                visit(namespace_: Definition.NAMESPACE) -> void is
                    print("namespace ");
                    namespace_.name.accept(self);
                    println(" is");
                    indent();
                    namespace_.body.accept(self);
                    outdent();
                    println("si");
                si

                visit(use_: Definition.USE) -> void is
                    print("use ");
                    var seen_any = false;
                    for u in use_.uses do
                        if seen_any then
                            print(", ");
                        fi
                        u.accept(self);
                        seen_any = true;
                    od
                    println(";");
                si

                visit(class_: Definition.CLASS) -> void is
                    print("class ");
                    class_.name.accept(self);
                    if class_.arguments != null then
                        print("[");
                        class_.arguments.accept(self);
                        print("]");
                    fi
                    if class_.ancestors != null then
                        print(": ");
                        class_.ancestors.accept(self);
                    fi
                    class_.modifiers.accept(self);
                    println(" is");
                    indent();
                    class_.body.accept(self);
                    outdent();
                    println("si");
                si

                visit(interface_: Definition.INTERFACE) -> void is
                    print("interface ");
                    interface_.name.accept(self);
                    if interface_.arguments != null then
                        print("[");
                        interface_.arguments.accept(self);
                        print("]");
                    fi
                    if interface_.ancestors != null then
                        print(": ");
                        interface_.ancestors.accept(self);
                    fi
                    interface_.modifiers.accept(self);
                    println(" is");
                    indent();
                    interface_.body.accept(self);
                    outdent();
                    println("si");
                si

                after_body(node: Body.NODE) -> void is
                    if node==null || !node.is_block then
                        print(";");
                    fi
                    println();
                si

                visit(function: Definition.FUNCTION) -> void is
                    function.name.accept(self);
                    print("(");
                    function.arguments.accept(self);
                    print(")");
                    if !isa TypeExpression.INFER(function.type) then
                        print(" -> ");
                        function.type.accept(self);
                        function.modifiers.accept(self);
                    elif !function.modifiers.is_empty then
                        function.modifiers.accept(self);
                    fi
                    if function.body != null then
                        print(" ");
                        function.body.accept(self);
                    fi
                    after_body(function.body);
                si

                print_member_type_and_modifiers(type: TypeExpression.NODE, modifiers: Modifier.LIST) -> void is
                    if !isa TypeExpression.INFER(type) then
                        print(": ");
                        type.accept(self);
                        print(" ");
                        modifiers.accept(self);
                    elif !modifiers.is_empty then
                        modifiers.accept(self);
                    fi
                si

                indent_property(has_getter: bool, has_setter: bool) -> bool is
                    if has_getter && has_setter!=null then
                        println();
                        indent();
                        return true;
                    elif has_getter || has_setter!=null then
                        print(" ");
                    fi
                    return false;
                si

                visit(property: Definition.PROPERTY) -> void is
                    property.name.accept(self);
                    print_member_type_and_modifiers(property.type, property.modifiers);
                    var out_again = indent_property(property.read_body != null, property.assign_body != null);
                    if property.read_body != null then
                        property.read_body.accept(self);
                        if property.assign_body != null then
                            println(",");
                        else
                            after_body(property.read_body);
                        fi
                    else
                        print(" ");
                    fi
                    if property.assign_body != null then
                        print("= ");
                        property.assign_argument.accept(self);
                        property.assign_body.accept(self);
                        after_body(property.assign_body);
                    fi
                    if out_again then
                        outdent();
                    fi
                si

                visit(indexer: Definition.INDEXER) -> void is
                    if indexer.name != null then
                        indexer.name.accept(self);
                    fi
                    print("[");
                    indexer.index_argument.accept(self);
                    print("]");
                    print_member_type_and_modifiers(indexer.type, indexer.modifiers);
                    var out_again = indent_property(indexer.read_body != null, indexer.assign_body != null);
                    if indexer.read_body != null then
                        indexer.read_body.accept(self);
                        if indexer.assign_body != null then
                            println(",");
                        else
                            after_body(indexer.read_body);
                        fi
                    else
                        print(' ');
                    fi
                    if indexer.assign_body != null then
                        print("= ");
                        indexer.assign_argument.accept(self);
                        print(' ');
                        indexer.assign_body.accept(self);
                        after_body(indexer.assign_body);
                    fi
                    if out_again then
                        outdent();
                    fi
                si

                visit(generic: TypeExpression.GENERIC) -> void is
                    generic.name.accept(self);
                    print('[');
                    generic.arguments.accept(self);
                    print(']');
                si

                visit(function: TypeExpression.FUNCTION) -> void is
                    print("(");
                    function.arguments.accept(self);
                    print(")");
                    if !isa TypeExpression.INFER(function.result) then
                        print(" -> ");
                        function.result.accept(self);
                    fi
                si

                visit(tuple: TypeExpression.TUPLE) -> void is
                    print("(");
                    tuple.elements.accept(self);
                    print(")");
                si

                visit(element: TypeExpression.NAMED_TUPLE_ELEMENT) -> void is
                    element.name.accept(self);
                    print(": ");
                    element.type.accept(self);
                si

                visit(null_: Expression.NULL) -> void is
                    print("null");
                si

                visit(self_: Expression.SELF) -> void is
                    print("self");
                si

                visit(variable: Expression.VARIABLE) -> void is
                    variable.identifier.accept(self);
                    if !isa TypeExpression.INFER(variable.type) then
                        print(": ");
                        variable.type.accept(self);
                    fi
                    if variable.initializer != null then
                        print(" = ");
                        variable.initializer.accept(self);
                    fi
                si

                visit(function: Syntax.Tree.Expression.FUNCTION) -> void is
                    function.arguments.accept(self);
                    if !isa TypeExpression.INFER(function.type) then
                        print(" -> ");
                        function.type.accept(self);
                    fi
                    function.body.accept(self);
                si

                visit(sequence: Expression.SEQUENCE) -> void is
                    print('[');
                    sequence.elements.accept(self);
                    print(']');
                    if !isa Tree.TypeExpression.INFER(sequence.type) then
                        print(": ");
                        sequence.type.accept(self);
                    fi
                si

                visit(has_value: Expression.HAS_VALUE) -> void is
                    has_value.left.accept(self);
                    print("?");
                si

                visit(l: Statement.LET) -> void is
                    print("let ");
                    l.variables.accept(self);
                    println(";");
                si

                visit(for_: Statement.FOR) -> void is
                    println("for ");
                    for_.variable.accept(self);
                    print(" in ");
                    for_.expression.accept(self);
                    println(" do");
                    indent();
                    for_.body.accept(self);
                    outdent();
                    println("od");
                si

                visit(expression: Body.EXPRESSION) -> void is
                    print("=> ");
                    expression.expression.accept(self);
                si

                visit(block: Body.BLOCK) -> void is
                    println("is");
                    indent();
                    block.statements.accept(self);
                    outdent();
                    print("si");
                si

            si

        si
    si
si
