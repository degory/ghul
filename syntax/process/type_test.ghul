namespace Syntax is
    namespace Process is
        use System;
        use Generic;
        use Logging;
        use Tree;
        class TYPE_TEST : ScopedVisitor  is
            _logger: LOGGER;
            _symbol_table: SYMBOL_TABLE;
            init(logger: LOGGER, symbol_table: SYMBOL_TABLE, namespaces: NAMESPACES) -> void is
                super.init(logger, symbol_table, namespaces);
                _logger = logger;
                _symbol_table = symbol_table;
                _logger._trace("experiment", "initialized: " + self);
            si

            apply(node: NODE) -> void is
                node.walk(self);
            si

            pre(class_: Definition.CLASS) -> bool is
                super.pre(class_);
                _logger._trace("experiment", 
                "enter class " + class_.name + ", symbol table is " + _symbol_table.dump_stack());
                _logger._trace("experiment", 
                    "top scope stack is\n" + _symbol_table.current_scope.dump_stack()
                );
            si

            pre(named: Type.NAMED) -> bool is
                return false;
            si

            visit(named: Type.NAMED) -> void is
                var symbol = find_enclosing(named.name);
                if symbol != null then
                    _logger._trace("experiment", "type " + named + " => " + symbol);
                else
                    _logger.warn(named.location, "named type " + named.name + " not found");
                    _logger._trace("experiment", "" + _symbol_table);
                fi
            si

            pre(types: Type.LIST) -> bool is
                return false;
            si

            visit(types: Type.LIST) -> void is
            si

            pre(generic: Type.GENERIC) -> bool is
                return false;
            si

            visit(generic: Type.GENERIC) -> void is
                var symbol = find_enclosing(generic.name);
                if symbol != null then
                    _logger._trace("experiment", "type " + generic + " => " + symbol);
                else
                    _logger.warn(generic.location, "named type " + generic.name + " not found");
                fi
            si

            pre(element: Type.NAMED_TUPLE_ELEMENT) -> bool is
                return false;
            si

            visit(element: Type.NAMED_TUPLE_ELEMENT) -> void is
            si

        si

    si
si
