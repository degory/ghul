namespace Syntax.Process is
    use System;
    use Generic;
    
    use Logging;

    class RESOLVE_EXPLICIT_VARIABLE_TYPES: ScopedVisitor is
        _logger: LOGGER;
        _symbol_table: Semantic.SYMBOL_TABLE;

        init(
            logger: LOGGER,
            symbol_table: Semantic.SYMBOL_TABLE,
            namespaces: Semantic.NAMESPACES
        )
        is
            super.init(logger, symbol_table, namespaces);

            _symbol_table = symbol_table;
            
            _logger = logger;
        si

        apply(root: Tree.NODE) is
            root.walk(self);
        si

        // FIXME: think we're doing this twice:
        visit(variable: Tree.Variable.NODE) is
            var symbol = find(variable.name);

            if symbol != null && isa Semantic.Type.SettableTyped(symbol) then
                var typed_symbol = cast Semantic.Type.SettableTyped(symbol);

                if typed_symbol.type == null && variable.type_expression != null && !isa Tree.TypeExpression.INFER(variable.type_expression) then                    
                    typed_symbol.type = variable.type_expression.type;
                else
                    _logger.error(variable.location, "something went wrong with variable type");
                fi
            else
                _logger.error(variable.name.location, "cannot locate typed symbol for variable");
            fi        
        si

        // FIXME: think we're doing this twice:
        visit(function: Tree.Definition.FUNCTION) is
            let symbol = _symbol_table.current_function;            

            let types = new Vector[Semantic.Type.BASE]();

            for argument in function.arguments do
                let argument_symbol = find(argument.name);

                types.add(cast Semantic.Type.Typed(argument_symbol).type);
            od

            symbol.arguments = types;

            super.visit(function);
        si        
    si
si
