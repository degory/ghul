namespace Syntax is
    namespace Process is
        use System;
        use Generic;
        
        use Logging;
        use Tree;

        class ScopedVisitor : ScopeVisitorBase is
            _logger: LOGGER;
            init(logger: LOGGER, symbol_table: SYMBOL_TABLE, namespaces: NAMESPACES) is
                super.init(logger, symbol_table, namespaces);
                self._logger = logger;
            si

            pre(namespace_: Definition.NAMESPACE) -> bool is
                _logger._trace("namespace", "pre enter namespace " + namespace_.name);
                enter_namespace(namespace_.name);
                enter_uses(namespace_);
            si

            visit(namespace_: Definition.NAMESPACE) is
                _logger._trace("namespace", "pre leave namespace " + namespace_.name);
                leave_uses(namespace_);
                leave_namespace(namespace_.name);
            si

            pre(class_: Definition.CLASS) -> bool is
                enter_scope(class_);
            si

            visit(class_: Definition.CLASS) is
                leave_scope(class_);
            si

            pre(interface_: Definition.INTERFACE) -> bool is
                enter_scope(interface_);
            si

            visit(interface_: Definition.INTERFACE) is
                leave_scope(interface_);
            si

            pre(enum_: Definition.ENUM) -> bool is
                enter_scope(enum_);
            si

            visit(enum_: Definition.ENUM) is
                leave_scope(enum_);
            si

            pre(function: Definition.FUNCTION) -> bool is
                enter_scope(function);
            si

            visit(function: Definition.FUNCTION) is
                leave_scope(function);
            si

            pre(property: Definition.PROPERTY) -> bool is
                enter_scope(property);
            si

            visit(property: Definition.PROPERTY) is
                leave_scope(property);
            si

            pre(indexer: Definition.INDEXER) -> bool is
                enter_scope(indexer);
            si

            visit(indexer: Definition.INDEXER) is
                leave_scope(indexer);
            si

            pre(if_: Statement.IF) -> bool is
                enter_scope(if_);
            si

            visit(if_: Statement.IF) is
                leave_scope(if_);
            si

            pre(case_: Statement.CASE) -> bool is
                enter_scope(case_);
            si

            visit(case_: Statement.CASE) is
                leave_scope(case_);
            si

            pre(case_match: Statement.CASE_MATCH) -> bool is
                enter_scope(case_match);
            si

            visit(case_match: Statement.CASE_MATCH) is
                leave_scope(case_match);
            si

            pre(try_: Statement.TRY) -> bool is
                enter_scope(try_);
            si

            visit(try_: Statement.TRY) is
                leave_scope(try_);
            si

            pre(catch_: Statement.CATCH) -> bool is
                enter_scope(catch_);
            si

            visit(catch_: Statement.CATCH) is
                leave_scope(catch_);
            si

            pre(do_: Statement.DO) -> bool is
                enter_scope(do_);
            si

            visit(do_: Statement.DO) is
                leave_scope(do_);
            si

            pre(for_: Statement.FOR) -> bool is
                enter_scope(for_);
            si

            visit(for_: Statement.FOR) is
                leave_scope(for_);
            si

            pre(labelled: Statement.LABELLED) -> bool is
                enter_scope(labelled);
            si

            visit(labelled: Statement.LABELLED) is
                leave_scope(labelled);
            si

            pre(body: Body.NODE) -> bool is
                enter_scope(body);
            si

            visit(body: Body.NODE) is
                leave_scope(body);
            si

            pre(expression: Body.EXPRESSION) -> bool is
                enter_scope(expression);
            si

            visit(expression: Body.EXPRESSION) is
                leave_scope(expression);
            si

            pre(block: Body.BLOCK) -> bool is
                enter_scope(block);
            si

            visit(block: Body.BLOCK) is
                leave_scope(block);
            si

        si

    si
si
