namespace Syntax.Process is
    use System;
    use Generic;

    use Logging;
    use Tree;

    class REWRITE_STRUCTURED_TYPES_AS_CLASSES : Visitor  is
        _map: MAP;
        init() is
            super.init();
            _map = new MAP();
        si

        apply(root: NODE) is
            root.walk(self);
            var rewriter = new REWRITER(_map);
            rewriter.apply(root);
        si

        replace(node: NODE, name: String, element: Type.NODE) is
            var n = new Type.GENERIC(node.location, new Identifier.NODE(node.location, name), new Type.LIST(node.location, [element]: Type.NODE ));
            _map[node] = n;
        si

        replace(node: NODE, name: String, elements: Iterable[Type.NODE]) is
            var n = new Type.GENERIC(node.location, new Identifier.NODE(node.location, name), new Type.LIST(node.location, elements));
            _map[node] = n;
        si

        visit(array: Type.ARRAY) is
            replace(array, "array", array.element);
        si

        visit(pointer: Type.POINTER) is
            replace(pointer, "pointer", pointer.element);
        si

        visit(reference: Type.REFERENCE) is
            replace(reference, "reference", reference.element);
        si

        visit(function: Type.FUNCTION) is
            var elements = new Vector[Type.NODE]();
            for t in function.arguments do
                elements.add(t);
            od
            elements.add(function.result);
            replace(function, "function", elements);
        si

        visit(tuple: Type.TUPLE) is
            var elements = new Vector[Type.NODE]();
            for t in tuple.elements do
                elements.add(t);
            od
            replace(tuple, "tuple", elements);
        si
    si
si
