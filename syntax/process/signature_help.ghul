namespace Syntax.Process is
    use System;
    use Generic;
    
    use Logging;
    use Source;

    class SIGNATURE_HELP: ScopedVisitor is
        _overload_resolver: Semantic.OVERLOAD_RESOLVER;

        _target_line: int;
        _target_column: int;

        _results: Semantic.OVERLOAD_MATCHES_RESULT;

        init(
            logger: Logger,
            symbol_table: Semantic.SYMBOL_TABLE,
            namespaces: Semantic.NAMESPACES,
            overload_resolver: Semantic.OVERLOAD_RESOLVER
        )
        is
            super.init(logger, symbol_table, namespaces);

            self._overload_resolver = overload_resolver;
        si

        find_signatures(root: Tree.NODE, target_line: int, target_column: int) -> Semantic.OVERLOAD_MATCHES_RESULT is
            _results = null;

            _target_line = target_line;
            _target_column = target_column;

            root.walk(self);

            return _results;
        si

        visit(call: Tree.Expression.CALL) is
            if call.arguments == null then
                return;
            fi

            if !call.location.contains(_target_line, _target_column) then
                return;
            fi
            
            if help_for(call) then
                let arguments = new Vector[Tree.Expression.NODE](call.arguments);

                for i in 0..arguments.Length do
                    if arguments[i].location.contains(_target_line, _target_column-1) then
                        _results.current_parameter_index = i;
                    fi
                od
            fi
        si

        help_for(call: Tree.Expression.CALL) -> bool is
            if _results? then
                return false;
            fi

            if call.function.value == null then
                return false;
            fi

            let argument_types = new Vector[Semantic.Type.BASE]();

            for a in call.arguments do
                if a? && a.value? && a.value.type? then
                    argument_types.add(a.value.type);                    
                else
                    argument_types.add(new Semantic.Type.ANY());
                fi
            od

            if isa Semantic.Graph.Value.Load.SYMBOL(call.function.value) then
                let load = cast Semantic.Graph.Value.Load.SYMBOL(call.function.value);

                if load.symbol? && isa Semantic.Symbol.FUNCTION_GROUP(load.symbol) then
                    let function_group = cast Semantic.Symbol.FUNCTION_GROUP(load.symbol);
                    let overload_results = _overload_resolver.find_matches(function_group, argument_types);

                    if overload_results.results.Length == 0 then
                        return false;
                    fi

                    _results = overload_results;

                    return true;
                fi
            fi

            return false;

            /*
            argument_types.add(new Semantic.Type.ANY());
            let expected_type = _ghul_symbol_lookup.get_function_type(argument_types);

            if expected_type == null then
                _logger.error(call.location, "no innate function type found");
                return;
            fi

            if call.function.value.type == null then
                IO.Std.err.println("call.function.value.type is null: " + call);
                return;
            fi

            let function_type = call.function.value.type;            

            if function_type? && isa Semantic.Type.GENERIC(function_type) then
                let function_generic_type = cast Semantic.Type.GENERIC(function_type);

                let function_type_arguments = function_generic_type.arguments;

                var ok = true;

                if function_type_arguments.Length != arguments.Length + 1 then
                    _logger.error(call.arguments.location, "expected % arguments but % supplied" % [function_type_arguments.Length, arguments.Length]: Object);
                    
                    return;
                elif function_generic_type.name =~ "FUNCTION_" + arguments.Length then
                    for i in 0..arguments.Length do
                        if function_generic_type.arguments[i]
                            .compare(argument_types[i])
                                > Semantic.Type.MATCH.CONVERTABLE
                        then
                            ok = false;

                            _logger.error(call.arguments.location, "expected argument of type % but % supplied" % [function_type_arguments[i], argument_types[i]]: Object);
                        fi
                    od

                    if ok then
                        let result_type = function_generic_type.arguments[function_type_arguments.Length-1];

                        call.value =
                            new Semantic.Graph.Value.Call.CLOSURE(
                                call.function.value,
                                result_type,
                                arguments
                            );

                        show(call.location, "" + call.value);
                    fi

                    return;
                fi
            fi

            _logger.error(call.arguments.location, "cannot call through value of type " + call.function.value.type);
            */
        si

        visit(new_: Tree.Expression.NEW) is
            if new_.arguments == null then
                return;
            fi

            if !new_.location.contains(_target_line, _target_column) then
                return;
            fi

            IO.Std.err.println("new signature hit: " + new_ + " @ " + new_.location + " vs " + _target_line + "," + _target_column);
            
            if help_for(new_) then
                let arguments = new Vector[Tree.Expression.NODE](new_.arguments);

                for i in 0..arguments.Length do
                    if arguments[i].location.contains(_target_line, _target_column-1) then
                        _results.current_parameter_index = i;
                    fi
                od
            fi
        si
        
        help_for(new_: Tree.Expression.NEW) -> bool is
            if _results? then
                return false;
            fi

            let type = new_.type_expression.type;

            if type == null then
                return false;
            fi

            if !isa Semantic.Type.NAMED(type) then
                return false;
            fi

            let named_type = cast Semantic.Type.NAMED(type);

            let symbol = named_type.scope.find_member("init");

            let function_group = cast Semantic.Symbol.FUNCTION_GROUP(symbol);

            let argument_types = new Vector[Semantic.Type.BASE]();

            for a in new_.arguments do
                if a? && a.value? && a.value.type? then
                    argument_types.add(a.value.type);                    
                else
                    argument_types.add(new Semantic.Type.ANY());
                fi
            od

            let overload_results = _overload_resolver.find_matches(function_group, argument_types);

            if overload_results.results.Length == 0 then
                return false;
            fi

            _results = overload_results;

            return true;
        si                
    si
si
