namespace Syntax.Process is
    use System;
    use Generic;
    
    use Logging;

    class RESOLVE_ANCESTORS: ScopedVisitor is
        _logger: Logger;
        _symbol_table: Semantic.SYMBOL_TABLE;
        _ghul_symbol_lookup: Semantic.GHUL_SYMBOL_LOOKUP;
        _system_symbol_lookup: Semantic.SYSTEM_SYMBOL_LOOKUP;

        init(
            logger: Logger,
            symbol_table: Semantic.SYMBOL_TABLE,
            namespaces: Semantic.NAMESPACES,
            ghul_symbol_lookup: Semantic.GHUL_SYMBOL_LOOKUP,
            system_symbol_lookup: Semantic.SYSTEM_SYMBOL_LOOKUP
        )
        is
            super.init(logger, symbol_table, namespaces);

            _logger = logger;
            _symbol_table = symbol_table;
            _ghul_symbol_lookup = ghul_symbol_lookup;
            _system_symbol_lookup = system_symbol_lookup;
        si

        apply(root: Tree.NODE) is
            root.walk(self);
        si

        // FIXME: think I'm doing this twice. This one is probably the correct one:
        visit(function: Tree.Definition.FUNCTION) is
            let symbol = _symbol_table.current_function;            

            let types = new Vector[Semantic.Type.BASE]();

            for argument in function.arguments do
                let type = argument.type_expression.type;

                types.add(type);
            od

            // FIXME: this should be a structured function type
            // encompassing arguments and return type:
            if !isa Tree.TypeExpression.INFER(function.type_expression) then
                symbol.type = function.type_expression.type;
            else
                symbol.type = _ghul_symbol_lookup.get_void_type();
            fi

            symbol.arguments = types;

            super.visit(function);
        si

        visit(property: Tree.Definition.PROPERTY) is
            let symbol = cast Semantic.Type.SettableTyped(find(property.name));

            if !isa Tree.TypeExpression.INFER(property.type_expression) then
                symbol.type = property.type_expression.type;
            fi

            super.visit(property);
        si

        visit(class_: Tree.Definition.CLASS) is
            let class_symbol = cast Semantic.Symbol.CLASS(_symbol_table.current_instance_context);

            // exit class scope before looking up ancestors:
            super.visit(class_);

            var seen_class_ancestor = false;

            // FIXME: implicit ancestor Ghul.Object
            if class_.ancestors? then
                for a in class_.ancestors do
                    var ancestor_type = a.type; 

                    if ancestor_type? then
                        if isa Semantic.Type.NAMED(ancestor_type) then
                            let ancestor_named_type = cast Semantic.Type.NAMED(ancestor_type);

                            if ancestor_named_type.symbol? && isa Semantic.Symbol.CLASS(ancestor_named_type.symbol) then
                                seen_class_ancestor = true;
                            fi

                            class_symbol.add_ancestor(ancestor_named_type);
                        else
                            _logger.error(a.location, "cannot inherit from this");
                        fi
                    fi
                od
            fi

            if !seen_class_ancestor then
                let object_type = _system_symbol_lookup.get_object_type();

                if class_symbol != object_type.symbol then
                    class_symbol.push_ancestor(_system_symbol_lookup.get_object_type());
                fi
            fi
        si

        visit(trait_: Tree.Definition.TRAIT) is
            let trait_symbol = cast Semantic.Symbol.TRAIT(_symbol_table.current_instance_context);

            // exit class scope before looking up ancestors:
            super.visit(trait_);

            var seen_valid_ancestor = false;

            if trait_.ancestors? then
                for a in trait_.ancestors do
                    var ancestor_type = a.type;

                    if ancestor_type? then
                        if isa Semantic.Type.NAMED(ancestor_type) then
                            let ancestor_named_type = cast Semantic.Type.NAMED(ancestor_type);

                            if ancestor_named_type.symbol? && ancestor_named_type.symbol.is_trait then
                                trait_symbol.add_ancestor(ancestor_named_type);
                                seen_valid_ancestor = true;
                            else
                                _logger.error(a.location, "trait cannot inherit from class");
                            fi
                        else
                            _logger.error(a.location, "cannot inherit from this");
                        fi
                    else
                        IO.Std.err.println("refusing to add ancestor with null type: " + a);
                    fi
                od
            else
                IO.Std.err.flush();
            fi

            if !seen_valid_ancestor then
                let root_type = _system_symbol_lookup.get_root_type();

                if trait_symbol != root_type.symbol then
                    trait_symbol.add_ancestor(_system_symbol_lookup.get_root_type());
                fi
            fi
        si
    si
si
