namespace Syntax.Parser.Modifier is
    use System;
    use Generic;

    use Source;
    
    class LIST: BASE[Tree.Modifier.LIST] is
        modifier_parser: Parser[Tree.Modifier.NODE];

        init(modifier_parser: Parser[Tree.Modifier.NODE]) is
            super.init();
            self.modifier_parser = modifier_parser;
        si

        parse(context: CONTEXT) -> Tree.Modifier.LIST is
            var start = context.location;
            var end = context.location;
            var modifier = modifier_parser.parse(context);
            var access_modifier: Tree.Modifier.ACCESS_MODIFIER;
            var storage_class: Tree.Modifier.STORAGE_CLASS;

            if modifier!=null && isa Tree.Modifier.ACCESS_MODIFIER(modifier) then
                access_modifier = cast Tree.Modifier.ACCESS_MODIFIER(modifier);
                modifier = modifier_parser.parse(context);
                if modifier? then
                    end = modifier.location;
                fi
            fi

            if modifier? then
                if isa Tree.Modifier.STORAGE_CLASS(modifier) then
                    storage_class = cast Tree.Modifier.STORAGE_CLASS(modifier);
                    end = modifier.location;
                else
                    context.error(modifier.location, "unexpected modifier");
                fi
            fi

            return new Tree.Modifier.LIST(start::end, access_modifier, storage_class);
        si
    si
si
