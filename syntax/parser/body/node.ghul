namespace Syntax.Parser.Body is
    use System;

    class NODE: BASE[Tree.Body.NODE] is
        expression_parser: Parser[Tree.Expression.NODE];
        statement_parser: Parser[Tree.Statement.NODE];
        statement_list_parser: Parser[Tree.Statement.LIST];

        description: String => "function body";

        init(
            expression_parser: Parser[Tree.Expression.NODE],
            statement_parser: Parser[Tree.Statement.NODE],
            statement_list_parser: Parser[Tree.Statement.LIST]
        )
        is
            super.init();

            self.expression_parser = expression_parser;
            self.statement_parser = statement_parser;
            self.statement_list_parser = statement_list_parser;

            add_parser(
                (context: CONTEXT) -> Tree.Body.NODE is
                    context.next_token(Lexical.TOKEN.ARROW_FAT);
                    var expression = expression_parser.parse(context);
                    return new Tree.Body.EXPRESSION(expression.location, expression);
                si,
                Lexical.TOKEN.ARROW_FAT
            );

            add_parser(
                (context: CONTEXT) -> Tree.Body.NODE is
                    var start = context.location;
                    context.next_token(Lexical.TOKEN.IS);
                    var statement_list = statement_list_parser.parse(context);
                    var end = context.location;
                    context.next_token(Lexical.TOKEN.SI);
                    return new Tree.Body.BLOCK(start..end, statement_list);
                si,
                Lexical.TOKEN.IS
            );
        si

        other_token(context: CONTEXT) -> Tree.Body.NODE is
            return new Tree.Body.NULL(context.location);
        si
    si
si
