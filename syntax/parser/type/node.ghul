namespace Syntax.Parser.TypeExpression is
    use System;
    use Generic;

    use Source;

    class NODE: BASE[Tree.TypeExpression.NODE] is
        identifier_qualified_parser: Parser[Tree.Identifier.NODE];
        type_list_parser: Parser[Tree.TypeExpression.LIST];
        description: String => "type";

        init(
            identifier_qualified_parser: Parser[Tree.Identifier.NODE],
            type_list_parser: Parser[Tree.TypeExpression.LIST]
        )
        is
            super.init();

            self.identifier_qualified_parser = identifier_qualified_parser;
            self.type_list_parser = type_list_parser;

            add_parser(
                (context: CONTEXT) -> Tree.TypeExpression.NODE is
                    var start = context.location;
                    var identifier = identifier_qualified_parser.parse(context);
                    if 
                        !isa Tree.Identifier.QUALIFIED(identifier) && context.current.token==Lexical.TOKEN.COLON
                        then
                        context.next_token();
                        var type = parse(context);
                        return new Tree.TypeExpression.NAMED_TUPLE_ELEMENT(start..type.location, identifier, type);
                    fi
                    if context.current.token == Lexical.TOKEN.SQUARE_OPEN then
                        context.next_token();
                        var types = type_list_parser.parse(context);
                        var result = new Tree.TypeExpression.GENERIC(start..context.location, identifier, types);
                        context.next_token(Lexical.TOKEN.SQUARE_CLOSE, syntax_error_message);
                        return result;
                    else
                        return new Tree.TypeExpression.NAMED(identifier.location, identifier);
                    fi
                si,
                Lexical.TOKEN.IDENTIFIER
            );

            add_parser(
                (context: CONTEXT) -> Tree.TypeExpression.NODE is
                    var start = context.location;
                    context.next_token();
                    var types: Tree.TypeExpression.LIST;
                    if context.current.token != Lexical.TOKEN.PAREN_CLOSE then
                        types = type_list_parser.parse(context);
                    else
                        types = new Tree.TypeExpression.LIST(start, new Tree.TypeExpression.NODE[](0));
                    fi
                    var end = context.location;
                    context.next_token(Lexical.TOKEN.PAREN_CLOSE, syntax_error_message);
                    if context.current.token == Lexical.TOKEN.ARROW_THIN then
                        context.next_token();
                        var result = parse(context);
                        end = result.location;
                        return new Tree.TypeExpression.FUNCTION(start..end, types, result);
                    else
                        if 
                            !types.Iterator.hasMoreElements()
                            then
                            context.error(start..end, "tuple has no elements");
                            return new Tree.TypeExpression.UNDEFINED(start..end);
                        else
                            return new Tree.TypeExpression.TUPLE(start..end, types);
                        fi
                    fi
                si,
                Lexical.TOKEN.PAREN_OPEN
            );
        si

        parse(context: CONTEXT) -> Tree.TypeExpression.NODE is
            var result = super.parse(context);

            return parse_structured(context, result);
        si

        parse_structured(
            context: CONTEXT,
            element: Tree.TypeExpression.NODE
        ) -> Tree.TypeExpression.NODE
        is
            var result = element;

            do
                case context.current.token
                when Lexical.TOKEN.ARRAY_DEF:
                    result = new Tree.TypeExpression.ARRAY(result.location..context.location, result);
                    context.next_token();

                when Lexical.TOKEN.REF:
                    result = new Tree.TypeExpression.REFERENCE(result.location..context.location, result);
                    context.next_token();

                when Lexical.TOKEN.PTR:
                    result = new Tree.TypeExpression.POINTER(result.location..context.location, result);
                    context.next_token();

                when Lexical.TOKEN.ARROW_THIN:
                    context.next_token();

                    var return_type = parse(context);
                    var arguments = new Tree.TypeExpression.LIST(element.location, [element]: Tree.TypeExpression.NODE );
                    result = new Tree.TypeExpression.FUNCTION(result.location..return_type.location, arguments, return_type);

                default
                    return result;

                esac
            od
        si

        other_token(context: CONTEXT) -> Tree.TypeExpression.NODE is
            super.other_token(context);
            return new Tree.TypeExpression.UNDEFINED(context.location);
        si
    si
si
