namespace Syntax is
    namespace Parser is
        namespace Definition is
            use System;
            use Source;
            class PROPERTY : BASE[Tree.Definition.PROPERTY]  is
                identifier_parser: Parser[Tree.Identifier.NODE];
                type_parser: Parser[Tree.Type.NODE];
                modifier_list_parser: Parser[Tree.Modifier.LIST];
                definition_list_parser: Parser[Tree.Definition.LIST];
                body_parser: Parser[Tree.Body.NODE];
                init(identifier_parser: Parser[Tree.Identifier.NODE], type_parser: Parser[Tree.Type.NODE], modifier_list_parser: Parser[Tree.Modifier.LIST], definition_list_parser: Parser[Tree.Definition.LIST], body_parser: Parser[Tree.Body.NODE]) -> void is
                    super.init();
                    self.identifier_parser = identifier_parser;
                    self.type_parser = type_parser;
                    self.modifier_list_parser = modifier_list_parser;
                    self.definition_list_parser = definition_list_parser;
                    self.body_parser = body_parser;
                si

                parse(context: CONTEXT) -> Tree.Definition.PROPERTY is
                    var start = context.location;
                    var name = identifier_parser.parse(context);
                    var type: Tree.Type.NODE;
                    if context.current.token == Lexical.TOKEN.COLON then
                        context.next_token();
                        type = type_parser.parse(context);
                    else
                        type = new Tree.Type.INFER(context.location);
                    fi
                    var modifiers = modifier_list_parser.parse(context);
                    var getter_body: Tree.Body.NODE;
                    var setter_body: Tree.Body.NODE;
                    var setter_argument_name: Tree.Identifier.NODE;
                    var expect_semicolon = true;
                    do
                        if context.current.token == Lexical.TOKEN.ASSIGN then
                            if setter_argument_name != null then
                                context.error(context.location, "replacing assign");
                            fi
                            context.next_token();
                            setter_argument_name = identifier_parser.parse(context);
                            expect_semicolon = context.current.token == Lexical.TOKEN.ARROW_FAT;
                            setter_body = body_parser.parse(context);
                            if context.current.token == Lexical.TOKEN.COMMA then
                                context.next_token();
                            else
                                break;
                            fi
                        elif [Lexical.TOKEN.IS, Lexical.TOKEN.ARROW_FAT].contains(context.current.token) then
                            expect_semicolon = context.current.token == Lexical.TOKEN.ARROW_FAT;
                            if getter_body != null then
                                context.error(context.location, "replacing read");
                            fi
                            getter_body = body_parser.parse(context);
                            if context.current.token == Lexical.TOKEN.COMMA then
                                context.next_token();
                            else
                                break;
                            fi
                        else
                            break;
                        fi
                    od
                    var result = new Tree.Definition.PROPERTY(
                        start .. context.location, 
                        type, 
                        name, 
                        modifiers, 
                        getter_body, 
                        setter_argument_name, 
                        setter_body
                    );
                    if expect_semicolon then
                        context.next_token(Lexical.TOKEN.SEMICOLON);
                    fi
                    return result;
                si

            si

        si
    si
si
