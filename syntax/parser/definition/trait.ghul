namespace Syntax.Parser.Definition is
    use System;
    use Source;

    class TRAIT: BASE[Tree.Definition.TRAIT] is
        identifier_parser: Parser[Tree.Identifier.NODE];
        type_parser: Parser[Tree.TypeExpression.NODE];
        type_list_parser: Parser[Tree.TypeExpression.LIST];
        modifier_list_parser: Parser[Tree.Modifier.LIST];
        definition_list_parser: Parser[Tree.Definition.LIST];

        init(
            identifier_parser: Parser[Tree.Identifier.NODE],
            type_parser: Parser[Tree.TypeExpression.NODE],
            type_list_parser: Parser[Tree.TypeExpression.LIST],
            modifier_list_parser: Parser[Tree.Modifier.LIST],
            definition_list_parser: Parser[Tree.Definition.LIST]
        )
        is
            super.init();

            self.identifier_parser = identifier_parser;
            self.type_parser = type_parser;
            self.type_list_parser = type_list_parser;
            self.modifier_list_parser = modifier_list_parser;
            self.definition_list_parser = definition_list_parser;
        si

        parse(context: CONTEXT) -> Tree.Definition.TRAIT is
            var start = context.location;
            context.next_token(Lexical.TOKEN.TRAIT);
            var identifier = identifier_parser.parse(context);
            var arguments: Tree.TypeExpression.LIST;
            var ancestors: Tree.TypeExpression.LIST;

            if context.current.token == Lexical.TOKEN.SQUARE_OPEN then
                context.next_token();
                arguments = type_list_parser.parse(context);
                context.next_token(Lexical.TOKEN.SQUARE_CLOSE);
            fi

            if context.current.token == Lexical.TOKEN.COLON then
                context.next_token();
                ancestors = type_list_parser.parse(context);
            fi

            var modifiers = modifier_list_parser.parse(context);
            
            context.next_token(Lexical.TOKEN.IS);

            var body = definition_list_parser.parse(context);

            var result =
                new Tree.Definition.TRAIT(
                    start..context.location, 
                    identifier, 
                    arguments, 
                    ancestors, 
                    modifiers, 
                    body
                );

            context.next_token(Lexical.TOKEN.SI);

            return result;
        si
    si
si
