namespace Syntax.Parser.Definition is
    use System;
    use Generic;

    use Source;

    class LIST: BASE[Tree.Definition.LIST] is
        definition_parser: Parser[Tree.Definition.NODE];
        description: String => "definition list";

        init(definition_parser: Parser[Tree.Definition.NODE]) is
            super.init();
            self.definition_parser = definition_parser;
        si

        parse(context: CONTEXT) -> Tree.Definition.LIST is
            let start = context.location;
            let end = context.location;
            let definitions = new Vector[Tree.Definition.NODE]();

            while !context.is_end_of_file && context.current.token != Lexical.TOKEN.SI do
                try                        
                    let definition = definition_parser.parse(context);
                    if definition != null then
                        end = definition.location;
                        definitions.add(definition);
                    fi
                catch e: Exception
                    IO.Std.err.println("caught exception parsing definition: " + e);

                    while !context.is_end_of_file && !([Lexical.TOKEN.SI, Lexical.TOKEN.SEMICOLON].contains(context.current.token)) do
                        context.next_token();
                    od

                    if context.is_end_of_file then
                        break;
                    fi
                yrt
            od

            return new Tree.Definition.LIST(start::end, definitions);
        si
    si
si
