namespace Syntax.Parser.Definition is
    use System;
    use Generic;

    use Source;

    class USE: BASE[Tree.Definition.USE] is
        identifier_qualified_parser: Parser[Tree.Identifier.NODE];

        init(identifier_qualified_parser: Parser[Tree.Identifier.NODE]) is
            super.init();
            
            self.identifier_qualified_parser = identifier_qualified_parser;
        si

        parse(context: CONTEXT) -> Tree.Definition.USE is
            var start = context.location;

            context.next_token(Lexical.TOKEN.USE);

            var uses = new Vector[Tree.Identifier.NODE]();

            do
                var use_ = identifier_qualified_parser.parse(context);
                uses.add(use_);
                if context.current.token == Lexical.TOKEN.COMMA then
                    context.next_token();
                else
                    break;
                fi
            od

            var result = new Tree.Definition.USE(start::context.location, uses);

            context.next_token(Lexical.TOKEN.SEMICOLON);

            return result;
        si
    si
si
