namespace Syntax.Parser.Definition is
    use System;
    use Generic;

    use Source;

    class ENUM : BASE[Tree.Definition.ENUM] is
        identifier_parser: Parser[Tree.Identifier.NODE];
        modifier_list_parser: Parser[Tree.Modifier.LIST];
        expression_parser: Parser[Tree.Expression.NODE];

        init(
            identifier_parser: Parser[Tree.Identifier.NODE],
            modifier_list_parser: Parser[Tree.Modifier.LIST],
            expression_parser: Parser[Tree.Expression.NODE]
        )
        is
            super.init();
            self.identifier_parser = identifier_parser;
            self.modifier_list_parser = modifier_list_parser;
            self.expression_parser = expression_parser;
        si

        parse(context: CONTEXT) -> Tree.Definition.ENUM is
            context.next_token(Lexical.TOKEN.ENUM);
            var start = context.location;
            var name = identifier_parser.parse(context);
            var modifiers = modifier_list_parser.parse(context);
            context.next_token(Lexical.TOKEN.IS);
            var members = new Vector[Tree.Definition.ENUM_MEMBER]();

            while context.current.token != Lexical.TOKEN.SI do
                var member_name = identifier_parser.parse(context);
                var member_end = member_name.location;
                var member_initializer: Tree.Expression.NODE;
                if context.current.token == Lexical.TOKEN.ASSIGN then
                    context.next_token();
                    member_initializer = expression_parser.parse(context);
                    member_end = member_initializer.location;
                fi

                if context.current.token != Lexical.TOKEN.SI then
                    context.next_token(Lexical.TOKEN.COMMA);
                fi

                members.add(new Tree.Definition.ENUM_MEMBER(member_name.location::member_end, member_name, member_initializer));
            od

            var result = new Tree.Definition.ENUM(start::context.location, name, modifiers, members);
            context.next_token(Lexical.TOKEN.SI);
            return result;
        si
    si
si
