namespace Syntax is
    namespace Parser is
        namespace Variable is
            class NODE : BASE[Tree.Variable.NODE]  is
                identifier_parser: Parser[Tree.Identifier.NODE];
                type_parser: Parser[Tree.Type.NODE];
                expression_parser: Parser[Tree.Expression.NODE];
                init(identifier_parser: Parser[Tree.Identifier.NODE], type_parser: Parser[Tree.Type.NODE], expression_parser: Parser[Tree.Expression.NODE]) -> void is
                    super.init();
                    self.identifier_parser = identifier_parser;
                    self.type_parser = type_parser;
                    self.expression_parser = expression_parser;
                si

                parse(context: CONTEXT) -> Tree.Variable.NODE is
                    var start = context.location;
                    if context.expect_token(Lexical.TOKEN.IDENTIFIER, syntax_error_message) then
                        var identifier = identifier_parser.parse(context);
                        var end = identifier.location;
                        var type: Tree.Type.NODE = new Tree.Type.INFER(start..context.location);
                        var initializer: Tree.Expression.NODE;
                        if context.current.token == Lexical.TOKEN.COLON then
                            context.next_token();
                            type = type_parser.parse(context);
                            end = type.location;
                        fi
                        if context.current.token == Lexical.TOKEN.ASSIGN then
                            context.next_token();
                            initializer = expression_parser.parse(context);
                            end = initializer.location;
                        fi
                        return new Tree.Variable.NODE(start..end, identifier, type, initializer);
                    fi
                si

            si

        si
    si
si
