namespace Syntax.Parser.Statement is
    use System;
    use Generic;
    use Source;
    class LIST : BASE[Tree.Statement.LIST]  is
        terminators: List[Lexical.TOKEN];
        statement_parser: Parser[Tree.Statement.NODE];
        description: String => "statement list";

        init(terminators: List[Lexical.TOKEN], statement_parser: Parser[Tree.Statement.NODE]) is
            super.init();
            
            self.terminators = terminators;
            self.statement_parser = statement_parser;
        si

        parse(context: CONTEXT) -> Tree.Statement.LIST is
            self.terminators = terminators;

            var start = context.location;
            var end = context.location;
            var statements = new Vector[Tree.Statement.NODE]();

            while !at_terminator(context) do
                if context.current.token == Lexical.TOKEN.SEMICOLON then
                    IoC.CONTAINER.instance.logger.warn(context.current.location, "empty statement");
                    context.next_token();
                else
                    var statement = statement_parser.parse(context);
                    if statement != null then
                        statements.add(statement);
                    fi
                fi
            od

            return new Tree.Statement.LIST(start..end, statements);
        si

        at_terminator(context: CONTEXT) -> bool => terminators.contains(context.current.token);
    si
si
