namespace Syntax is
    use System;
    use Generic;
    use Logging;
    use Source;
    use Tree;
    class SYMBOL_TABLE  is
        _logger: LOGGER;
        _scopes: Map[NODE,Scope];
        _stack: Vector[Scope];
        current_scope: Scope is
            if _stack.Length > 0 then
                return _stack.Top;
            else
                return null;
            fi
        si

        current_namespace_context: NamespaceContext is
            for scope in _stack.ReverseIterator do
                if isa NamespaceContext(scope) then
                    return cast NamespaceContext(scope);
                fi
            od
            assert(false, "no current namespace");
        si

        current_declaration_context: DeclarationContext is
            for scope in _stack.ReverseIterator do
                if isa DeclarationContext(scope) then
                    return cast DeclarationContext(scope);
                fi
            od
        si

        init(logger: LOGGER) -> void is
            _logger = logger;
            _stack = new Vector[Scope](50);
            _scopes = new Map[NODE,Scope](65521);
            enter_scope(new Symbol.NAMESPACE(LOCATION.dummy, "", null, ""));
        si

        scope_for(node: NODE) -> Scope is
            return _scopes[node];
        si

        associate_node_with_scope(node: NODE, scope: Scope) -> void is
            _scopes[node] = scope;
        si

        enter_scope(node: Tree.NODE) -> void is
            var scope = _scopes[node];
            if scope == null then
                _logger.fatal(node.location, "no scope found for " + node);
            fi
            enter_scope(scope);
        si

        enter_scope(scope: Scope) -> void is
            _stack.add(scope);
        si

        leave_scope(node: Tree.NODE) -> void is
            var scope = _scopes[node];
            if scope == null then
                _logger.fatal(node.location, "no scope found for " + node);
            fi
            leave_scope(scope);
        si

        leave_scope(scope: Scope) -> void is
            if current_scope != scope then
                _logger._trace("find-symbol", "current scope: " + current_scope);
                _logger._trace("find-symbol", "scope to pop:  " + scope);
            fi
            assert(current_scope == scope, "scope stack corrupt");
            _stack.pop();
        si

        toString() -> String is
            var result = new StringBuffer();
            result.append("symbol table:\n");
            for scope in _stack.ReverseIterator do
                result.append(scope).append("\n");
            od
            result.append("\n");
            return result;
        si

        dump_stack() -> String is
            var result = new StringBuffer();
            result.append("scope stack:\n");
            for scope in _stack.ReverseIterator do
                result.append(Object.dump(scope) + "\n");
            od
            result.append("\n");
            return result;
        si

    si

si
