namespace Syntax is
    use System;
    use Generic;
    use IoC;
    use Logging;
    use Source;

    interface Scope is
        find_direct(name: String) -> Symbol.BASE;
        find_member(name: String) -> Symbol.BASE;
        find_enclosing(name: String) -> Symbol.BASE;
        dump_stack() -> String;
    si

    interface DeclarationContext is
        declare_class(location: LOCATION, name: String, enclosing: Scope) -> Scope;
        declare_trait(location: LOCATION, name: String, enclosing: Scope) -> Scope;
        declare_enum(location: LOCATION, name: String) -> Scope;
        declare_enum_member(location: LOCATION, name: String) -> void;
        declare_function(location: LOCATION, name: String, enclosing: Scope) -> Scope;
        declare_variable(location: LOCATION, name: String) -> void;
        declare_label(location: LOCATION, name: String) -> void;
    si

    interface NamespaceContext is
        add_namespace(location: LOCATION, name: String, namespace_: Symbol.NAMESPACE) -> void;
    si

    class USE_SCOPE : Object, Scope  is
        _enclosing: Scope;
        _used_symbols: SortedMap[String,Symbol.BASE];
        _used_scopes: Vector[Scope];

        init(enclosing: Scope) -> void is
            _enclosing = enclosing;
            _used_symbols = new SortedMap[String,Symbol.BASE]();
            _used_scopes = new Vector[Scope]();
        si

        _find_direct(name: String) -> Symbol.BASE is
            LOGGER.trace("find-symbol", Object.dump(self) + " _ find direct: " + name);

            var result = _used_symbols[name];
            if result != null then
                LOGGER.trace("find-symbol", Object.dump(self) + " _ find direct: " + name + ": result is " + result);
                return result;
            fi

            LOGGER.trace("find-symbol", 

            Object.dump(self) + " _ find direct: " + name + ": not in used symbols, trying namespaces...");
            for scope in _used_scopes do
                result = scope.find_direct(name);
                if result != null then
                    LOGGER.trace("find-symbol", Object.dump(self) + " _ find direct: " + name + ": found in namespace, result is " + result);
                    return result;
                fi
            od

            LOGGER.trace("find-symbol", Object.dump(self) + " _ find direct: " + name + ": not found");
            return null;
        si

        find_member(name: String) -> Symbol.BASE is
            LOGGER.trace("find-symbol", 
            Object.dump(self) + " find member: " + name);
            throw new NotImplementedException("cannot search for member " + name + " in use scope");
        si

        find_direct(name: String) -> Symbol.BASE is
            LOGGER.trace("find-symbol", ClassName + " find direct: " + name + "...");

            var result = _find_direct(name);
            LOGGER.trace("find-symbol", ClassName + " find direct: " + name + ": direct result " + result);
            if result==null && _enclosing!=null then
                result = _enclosing.find_direct(name);
                LOGGER.trace("find-symbol", ClassName + " find direct: " + name + ": enclosing result " + result);
            fi
            LOGGER.trace("find-symbol", 
            ClassName + " find direct: " + name + ": final result " + result);
            return result;
        si

        find_enclosing(name: String) -> Symbol.BASE is
            LOGGER.trace("find-symbol", ClassName + " find enclosing: " + name + "...");
            var result = _find_direct(name);
            LOGGER.trace("find-symbol", ClassName + " find enclosing: " + name + ": direct result " + result);
            if result==null && _enclosing!=null then
                result = _enclosing.find_enclosing(name);
                LOGGER.trace("find-symbol", ClassName + " find enclosing: " + name + ": enclosing result " + result);
            fi
            LOGGER.trace("find-symbol", ClassName + " find enclosing: " + name + ": final result " + result);
            return result;
        si

        add_scope(scope: Scope) -> void is
            _used_scopes.add(scope);
        si

        add_symbol(symbol: Symbol.BASE) -> void is
            _used_symbols[symbol.name] = symbol;
        si

        toString() -> String is
            return 
            ClassName + "\n" + _used_symbols + "\n" + _used_scopes;
        si

        dump_stack() -> String is
            var result: String = ClassName + "\n";
            if _enclosing != null then
                result = result + _enclosing.dump_stack();
            fi
            return result;
        si
    si

    class BLOCK_SCOPE : Object , /* implements */ Scope, DeclarationContext  is
        _enclosing: Scope;
        _symbols: Dict[String,Symbol.BASE];
        init() -> void is
            init(null);
        si

        init(enclosing: Scope) -> void is
            self._enclosing = enclosing;
            _symbols = new SortedMap[String,Symbol.BASE]();
        si

        find_direct(name: String) -> Symbol.BASE is
            return _symbols[name];
        si

        find_member(name: String) -> Symbol.BASE is
            LOGGER.trace("find-symbol", Object.dump(self) + " find member: " + name);

            throw new NotImplementedException("cannot search for member " + name + " in block scope");
        si

        find_enclosing(name: String) -> Symbol.BASE is
            LOGGER.trace("find-symbol", Object.dump(self) + " find enclosing: " + name);

            var result = find_direct(name);

            if result != null then
                LOGGER.trace("find-symbol", Object.dump(self) + " find enclosing: " + name + " success");
                return result;
            elif _enclosing != null then
                LOGGER.trace("find-symbol", Object.dump(self) + " find enclosing: " + name + " try enclosing...");
                return _enclosing.find_enclosing(name);
            else
                LOGGER.trace("find-symbol", Object.dump(self) + " find enclosing: " + name + " no result...");
                return null;
            fi
        si

        declare_undefined(location: LOCATION, kind: String, name: String) -> Scope is
            CONTAINER.instance.logger.error(location, "cannot declare " + kind + " here");
            return new Symbol.UNDEFINED(location, name);
        si

        declare_class(location: LOCATION, name: String, enclosing: Scope) -> Scope is
            return declare_undefined(location, "class", name);
        si

        declare_trait(location: LOCATION, name: String, enclosing: Scope) -> Scope is
            return declare_undefined(location, "trait", name);
        si

        declare_enum(location: LOCATION, name: String) -> Scope is
            return declare_undefined(location, "enum", name);
        si

        declare_enum_member(location: LOCATION, name: String) -> void is
            declare_undefined(location, "enum member", name);
        si

        declare_function(location: LOCATION, name: String, enclosing: Scope) -> Scope is
            declare_undefined(location, "function", name);
        si

        add_namespace(location: LOCATION, name: String, namespace_: Symbol.NAMESPACE) -> void is
            declare_undefined(location, "namespace", name);
        si

        declare_label(location: LOCATION, name: String) -> void is
            var label = new Symbol.LABEL(location, name);
            declare(location, label);
        si

        declare_variable(location: LOCATION, name: String) -> void is
            var variable = new Symbol.LOCAL_VARIABLE(location, name);
            declare(location, variable);
        si

        declare(location: LOCATION, symbol: Symbol.BASE) -> void is
            var name = symbol.name;
            var existing = find_direct(symbol.name);
            if existing != null then
                CONTAINER.instance.logger.error(location, "redefining symbol " + name + " originally defined at " + existing.location);
                CONTAINER.instance.logger.error(existing.location, "symbol " + name + " is redefined at " + location);
            fi
            _symbols[name] = symbol;
        si

        toString() -> String is
            return self.ClassName + " " + _symbols;
        si

        dump_stack() -> String is
            var result: String = ClassName + "\n";
            if _enclosing != null then
                result = result + _enclosing.dump_stack();
            fi
            return result;
        si
    si
si
