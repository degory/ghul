namespace Syntax.Tree.Identifier is
    use System;
    use Generic;

    use Source;

    class NODE: Tree.NODE, Iterable[String] is
        name: String;

        parent: NODE is
            return null;
        si

        parent_names: List[String] is
            return new String[](0);
        si

        names: List[String] is
            return [name]: String ;
        si

        Iterator: Iterator[String] is
            return ([name]: String).Iterator;
        si

        init(location: LOCATION, name: String) is
            super.init(location);

            self.name = name;
        si

        copy() -> NODE is
            return cast NODE(clone());
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si
    si

    class QUALIFIED: NODE is
        _parent: NODE;

        parent: NODE is
            return _parent;
        si

        parent_names: List[String] is
            var result = new Vector[String]();
            var p = parent;

            while p != null do
                result.add(p.name);
                p = p.parent;
            od

            return result;
        si

        names: List[String] is
            var result = new Vector[String]();

            result.add(name);

            var p = parent;

            while p != null do
                result.add(p.name);
                p = p.parent;
            od

            return result;
        si

        Iterator: Iterator[String] is
            var result = new Vector[String]();

            result.add(name);

            var p = parent;

            while p != null do
                result.add(p.name);
                p = p.parent;
            od

            return result.Iterator;
        si        

        init(location: LOCATION, parent: NODE, name: String) is
            super.init(location, name);

            self._parent = parent;
        si

        copy() -> QUALIFIED is
            var np: NODE;

            if parent != null then
                np = parent.copy();
            fi

            return new QUALIFIED(
                location,
                np,
                name
            );
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                if parent != null then
                    parent.walk(visitor);
                fi
            fi

            accept(visitor);
        si
    si
si
