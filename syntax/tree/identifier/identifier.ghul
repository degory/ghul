namespace Syntax.Tree.Identifier is
    use System;
    use Generic;

    use Source;

    class NODE: Tree.NODE, Iterable[String] is
        name: String;

        qualifier: NODE is
            return null;
        si

        qualifier_names: List[String] is
            return new String[](0);
        si

        names: List[String] is
            return [name]: String ;
        si

        Iterator: Generic.Iterator[String] is
            return ([name]: String).Iterator;
        si

        init(location: LOCATION, name: String) is
            super.init(location);

            self.name = name;
        si

        copy() -> NODE =>
            new NODE(location, name);

        accept(visitor: Visitor) is
            visitor.visit(self);
        si
    si

    class QUALIFIED: NODE is
        _qualifier: NODE;

        completion_target: LOCATION;        

        qualifier: NODE is
            return _qualifier;
        si

        children: Iterable[Tree.NODE] is
            var result = new Vector[Tree.NODE](1);

            if _qualifier != null then
                result.add(_qualifier);
            fi

            return result;
        si

        qualifier_names: List[String] is
            var result = new Vector[String]();
            var p = qualifier;

            while p != null do
                result.add(p.name);
                p = p.qualifier;
            od

            return result;
        si

        names: List[String] is
            var result = new Vector[String]();

            result.add(name);

            var p = qualifier;

            while p != null do
                result.add(p.name);
                p = p.qualifier;
            od

            return result;
        si

        Iterator: Generic.Iterator[String] is
            var result = new Vector[String]();

            result.add(name);

            var p = qualifier;

            while p != null do
                result.add(p.name);
                p = p.qualifier;
            od

            return result.Iterator;
        si        

        init(location: LOCATION, qualifier: NODE, name: String, completion_target: LOCATION) is
            super.init(location, name);

            self._qualifier = qualifier;
            self.completion_target = completion_target;
        si

        copy() -> QUALIFIED is
            var np: NODE;

            if qualifier != null then
                np = qualifier.copy();
            fi

            return new QUALIFIED(
                location,
                np,
                name,
                completion_target
            );
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                if qualifier != null then
                    qualifier.walk(visitor);
                fi
            fi

            accept(visitor);
        si
    si
si
