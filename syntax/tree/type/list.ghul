namespace Syntax.Tree.Type is
    use Generic;

    use Source;

    class LIST: Tree.NODE, Iterable[NODE] is
        elements: Iterable[NODE];
        Iterator: Iterator[NODE] => elements.Iterator;

        init(location: LOCATION, elements: Iterable[NODE]) is
            super.init(location);

            self.elements = new Vector[NODE](elements);
        si

        copy() -> LIST is
            let ne = new Vector[NODE]();
            for e in elements do
                ne.add(e);
            od

            return
                new LIST(
                    location,
                    ne
                );
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                for t in elements do
                    t.walk(visitor);
                od
            fi

            accept(visitor);
        si

        rewrite(m: Dict[Tree.NODE,Tree.NODE]) is
            var ne = new Vector[NODE]();

            for e in elements do
                ne.add(cast NODE(m[e]));
            od
            
            elements = ne;
        si
    si
si
