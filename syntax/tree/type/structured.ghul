namespace Syntax.Tree.TypeExpression is
    use Generic;

    use Source;

    class STRUCTURED: NODE  is
        element: NODE;

        children: Iterable[Tree.NODE] =>
            [element]: Tree.NODE;        

        size: int => 8;

        init(location: LOCATION, element: NODE) is
            super.init(location);
            self.element = element;
        si

        copy() -> STRUCTURED is
            let result = cast STRUCTURED(clone());

            result.element = element.copy();

            return result;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                element.walk(visitor);
            fi
            accept(visitor);
        si

        rewrite(m: Dict[Tree.NODE,Tree.NODE]) is
            element = cast NODE(m[element]);
        si
    si
si
