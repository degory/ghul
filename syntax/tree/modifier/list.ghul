namespace Syntax.Tree.Modifier is
    use Generic;
    use Source;

    class LIST: Tree.NODE is
        access_modifier: ACCESS_MODIFIER;
        storage_class: STORAGE_CLASS;

        init(location: LOCATION, access_modifier: ACCESS_MODIFIER, storage_class: STORAGE_CLASS) is
            super.init(location);

            self.access_modifier = access_modifier;
            self.storage_class = storage_class;
        si

        is_empty: bool is
            return access_modifier==null && storage_class==null;
        si

        is_static: bool is
            return storage_class!=null && isa STATIC(storage_class);
        si

        is_public: bool is
            return access_modifier!=null && isa PUBLIC(access_modifier);
        si

        is_private: bool is
            return access_modifier!=null && isa PRIVATE(access_modifier);
        si

        is_explicit_access: bool is
            return access_modifier != null;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                if access_modifier != null then
                    access_modifier.walk(visitor);
                fi
                
                if storage_class != null then
                    storage_class.walk(visitor);
                fi
            fi

            accept(visitor);
        si
    si
si
