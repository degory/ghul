// import glist;
namespace Syntax is
    use System;
    use Generic;
    use Source;
    namespace Tree is
        class NODE  is
            _next_id: int static;
            _id: int;
            location: LOCATION;
            id: int public is
                return _id;
            si

            next_id: int static is
                var result = _next_id;
                _next_id = _next_id + 1;
                return result;
            si

            init(location: LOCATION) -> void is
                _id = next_id;
                self.location = location;
            si

            hash() -> int is
                return id;
            si

            invalidate(from: Iterable[Deletable[NODE]]) -> void is
                for d in from do
                    d.delete(self);
                od
                _id = next_id;
            si

            opEquals(other: NODE) -> bool is
                return _id == other._id;
            si

            opCompare(other: NODE) -> int is
                return _id - other._id;
            si

            accept(visitor: Visitor) -> void is
                visitor.visit(self);
            si

            walk(visitor: Visitor) -> void is
                accept(visitor);
            si

            rewrite(m: Dict[NODE,NODE]) -> void is
            si

            toString() -> String is
                var printer = new Process.Printer.GHUL();
                accept(printer);
                return printer.result;
            si

        si

    si
si
