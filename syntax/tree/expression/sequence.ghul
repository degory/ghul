namespace Syntax.Tree.Expression is
    use Generic;

    use Source;

    class SEQUENCE : NODE  is
        elements: LIST;
        type_expression: TypeExpression.NODE;

        children: Iterable[Tree.NODE] is
            var result = new Vector[Tree.NODE]();

            for e in elements do
                result.add(e);
            od

            result.add(type_expression);

            return result;
        si        
        
        init(location: LOCATION, elements: LIST, type_expression: TypeExpression.NODE) is
            super.init(location);
            
            self.elements = elements;
            self.type_expression = type_expression;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                elements.walk(visitor);
                type_expression.walk(visitor);
            fi

            accept(visitor);
        si

        rewrite(m: Dict[Tree.NODE,Tree.NODE]) is
            type_expression = cast TypeExpression.NODE(m[type_expression]);
            elements = cast LIST(m[elements]);
        si
    si
si
