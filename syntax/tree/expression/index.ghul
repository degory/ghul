namespace Syntax.Tree.Expression is
    use Generic;

    use Source;
    
    class INDEX: NODE is
        left: NODE;
        index: NODE;

        children: Iterable[Tree.NODE] =>
            [left, index]: Tree.NODE;        

        init(location: LOCATION, left: NODE, index: NODE) is
            super.init(location);
            
            self.left = left;
            self.index = index;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                left.walk(visitor);
                index.walk(visitor);
            fi
            
            accept(visitor);
        si

        rewrite(m: Dict[Tree.NODE,Tree.NODE]) is
            left = cast NODE(m[left]);
            index = cast NODE(m[index]);
        si
    si
si
