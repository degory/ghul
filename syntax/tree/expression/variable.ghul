namespace Syntax.Tree.Expression is
    use Generic;

    use Source;
    
    class VARIABLE: NODE is
        name: Identifier.NODE;
        initializer: NODE;
        type_expression: TypeExpression.NODE;

        children: Iterable[Tree.NODE] is
            var result = new Vector[Tree.NODE]();

            result.add(name);
            result.add(type_expression);

            if initializer? then
                result.add(initializer);
            fi

            return result;
        si

        init(
            location: LOCATION,
            name: Identifier.NODE,
            type_expression: TypeExpression.NODE,
            initializer: NODE
        )
        is
            super.init(location);
            
            self.name = name;
            self.type_expression = type_expression;
            self.initializer = initializer;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                name.walk(visitor);
                type_expression.walk(visitor);

                if initializer? then
                    initializer.walk(visitor);
                fi
            fi

            accept(visitor);
        si

        rewrite(m: Dict[Tree.NODE,Tree.NODE]) is
            name = cast Identifier.NODE(m[name]);
            type_expression = cast TypeExpression.NODE(m[type_expression]);
            initializer = cast NODE(m[initializer]);
        si
    si
si
