namespace Syntax.Tree.Expression is
    use Generic;

    use Source;
    
    class MEMBER: NODE  is
        left: NODE;
        identifier: Identifier.NODE;

        children: Iterable[Tree.NODE] =>
            [left, identifier]: Tree.NODE;        

        init(location: LOCATION, left: NODE, identifier: Identifier.NODE) is
            super.init(location);

            self.left = left;
            self.identifier = identifier;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                left.walk(visitor);
                identifier.walk(visitor);
            fi
            accept(visitor);
        si

        rewrite(m: Dict[Tree.NODE,Tree.NODE]) is
            left = cast NODE(m[left]);
            identifier = cast Identifier.NODE(m[identifier]);
        si
    si
si
