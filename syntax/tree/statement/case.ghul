namespace Syntax is
    namespace Tree is
        namespace Statement is
            use Source;
            use Generic;
            class CASE : NODE  is
                expression: Expression.NODE;
                matches: List[CASE_MATCH];
                init(location: LOCATION, expression: Expression.NODE, matches: List[CASE_MATCH]) -> void is
                    super.init(location);
                    self.expression = expression;
                    self.matches = matches;
                si

                accept(visitor: Visitor) -> void is
                    visitor.visit(self);
                si

                walk(visitor: Visitor) -> void is
                    if !visitor.pre(self) then
                        expression.walk(visitor);
                        for m in matches do
                            m.walk(visitor);
                        od
                    fi
                    accept(visitor);
                si

            si

            class CASE_MATCH : NODE  is
                expressions: Expression.LIST;
                statements: LIST;
                init(location: LOCATION, expressions: Expression.LIST, statements: LIST) -> void is
                    super.init(location);
                    self.expressions = expressions;
                    self.statements = statements;
                si

                accept(visitor: Visitor) -> void is
                    visitor.visit(self);
                si

                walk(visitor: Visitor) -> void is
                    if !visitor.pre(self) then
                        if expressions != null then
                            expressions.walk(visitor);
                        fi
                        statements.walk(visitor);
                    fi
                    accept(visitor);
                si

            si

        si
    si
si
