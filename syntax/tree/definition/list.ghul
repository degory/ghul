namespace Syntax.Tree.Definition is
    use System;
    use Generic;

    use Source;

    class LIST: NODE, Iterable[NODE]  is
        definitions: List[NODE];

        children: Iterable[Tree.NODE] is
            var result = new Vector[Tree.NODE]();

            for m in definitions do
                result.add(m);
            od         

            return result;
        si                

        Iterator: Iterator[NODE] is
            return definitions.Iterator;
        si

        uses: Vector[Definition.USE] is
            var result: Vector[Definition.USE] = new Vector[USE](definitions.Length);

            for d in definitions do
                if isa Definition.USE(d) then
                    result.add(cast Definition.USE(d));
                fi
            od
            
            return result;
        si
        
        init(location: LOCATION, definitions: Iterable[NODE]) is
            super.init(location);

            self.definitions = new Vector[NODE](definitions);
        si

        add(definition: NODE) is
            definitions.add(definition);
        si

        push(definition: NODE) is
            let nd = new Vector[NODE](definitions.Length + 1);

            nd.add(definition);
            nd.add(definitions);

            definitions = nd;
        si

        remove(definition: NODE) is
            definitions.remove(definition);
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                for d in definitions do
                    d.walk(visitor);
                od
            fi

            accept(visitor);
        si
    si
si
