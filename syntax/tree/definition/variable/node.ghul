namespace Syntax.Tree.Variable is
    use Generic;

    use Source;

    class NODE: Tree.Definition.NODE is
        name: Identifier.NODE;
        type_expression: TypeExpression.NODE;
        initializer: Expression.NODE;

        children: Iterable[Tree.NODE] => [name, type_expression, initializer]: Tree.NODE;         
        
        init(location: LOCATION, name: Identifier.NODE, type_expression: TypeExpression.NODE, initializer: Expression.NODE) is
            super.init(location);
            self.name = name;
            self.type_expression = type_expression;
            self.initializer = initializer;
        si

        copy() -> NODE is
            assert(initializer == null, "cannot copy a variable node with non null initializer: " + location + ": " + self);

            return new NODE(
                location,
                name.copy(),
                type_expression.copy(),
                null
            );
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                name.walk(visitor);
                type_expression.walk(visitor);
                if initializer != null then
                    initializer.walk(visitor);
                fi
            fi
            accept(visitor);
        si

        rewrite(m: Dict[Tree.NODE,Tree.NODE]) is
            name = cast Identifier.NODE(m[name]);
            type_expression = cast TypeExpression.NODE(m[type_expression]);
            initializer = cast Expression.NODE(m[initializer]);
        si
    si
si
