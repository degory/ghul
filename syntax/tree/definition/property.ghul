namespace Syntax.Tree.Definition is
    use Source;
    
    use Generic;

    class PROPERTY: MODIFIABLE is
        type_expression: TypeExpression.NODE;
        name: Identifier.NODE;
        read_body: Body.NODE;
        assign_argument: Identifier.NODE;
        assign_body: Body.NODE;

        children: Iterable[Tree.NODE] is
            var result = new Vector[Tree.NODE](6);

            result.add(modifiers);
            
            if type_expression? then
                result.add(type_expression);
            fi

            if name? then
                result.add(name);
            fi

            if read_body? then
                result.add(read_body);
            fi

            if assign_argument? then
                result.add(assign_argument);
            fi
            
            if assign_body? then
                result.add(assign_body);
            fi
        
            return result;
        si

        init(
            location: LOCATION,
            type_expression: TypeExpression.NODE,
            name: Identifier.NODE,
            modifiers: Modifier.LIST,
            read_body: Body.NODE,
            assign_argument: Identifier.NODE,
            assign_body: Body.NODE
        ) is
            super.init(location, modifiers);

            assert_not_null(type_expression, "type_expression");

            self.type_expression = type_expression;
            self.name = name;
            self.read_body = read_body;
            self.assign_argument = assign_argument;
            self.assign_body = assign_body;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                modifiers.walk(visitor);
                if type_expression? then
                    type_expression.walk(visitor);
                fi
                
                if name? then
                    name.walk(visitor);
                fi

                if read_body? then
                    read_body.walk(visitor);
                fi

                if assign_argument? then
                    assign_argument.walk(visitor);
                fi
                
                if assign_body? then
                    assign_body.walk(visitor);
                fi
            fi
            accept(visitor);
        si

        rewrite(m: Dict[Tree.NODE,Tree.NODE]) is
            modifiers = cast Modifier.LIST(m[modifiers]);
            type_expression = cast TypeExpression.NODE(m[type_expression]);

            name = cast Identifier.NODE(m[name]);
            read_body = cast Body.NODE(m[read_body]);
            assign_argument = cast Identifier.NODE(m[assign_argument]);
            assign_body = cast Body.NODE(m[assign_body]);
        si
    si
si
