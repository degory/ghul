namespace Syntax.Tree.Definition is
    use Source;

    use Generic;

    class CLASS: MODIFIABLE  is
        name: Identifier.NODE;
        arguments: TypeExpression.LIST;
        ancestors: TypeExpression.LIST;
        body: LIST;

        children: Iterable[Tree.NODE] =>
            [name, arguments, ancestors, body]: Tree.NODE;                 

        init(
            location: LOCATION,
            name: Identifier.NODE,
            arguments: TypeExpression.LIST,
            ancestors: TypeExpression.LIST,
            modifiers: Modifier.LIST,
            body: Definition.LIST
        )
        is
            super.init(location, modifiers);

            self.name = name;
            self.arguments = arguments;
            self.ancestors = ancestors;
            self.body = body;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                name.walk(visitor);

                if arguments != null then
                    arguments.walk(visitor);
                fi

                if ancestors != null then
                    ancestors.walk(visitor);
                fi

                modifiers.walk(visitor);
                body.walk(visitor);
            fi
            
            accept(visitor);
        si
    si
si
