namespace Semantic.DotNet.UnitTests is
    use Collections;

    use Microsoft.VisualStudio.TestTools.UnitTesting.Assert;
    use Mock = Moq.Mock`1;

    use Logging;

    class AssemblyInfoAttribute_TESTS is
        @test()

        init() is si

        Constructing__AssemblyInfoAttribute__with_name_and_value_should_set_those_properties() is
            @test()

            let expected_name = "some-attribute-name";
            let expected_value = "some-attribute-value";

            let attribute = new AssemblyInfoAttribute(expected_name, expected_value);

            Assert.are_equal(expected_name, attribute.name);
            Assert.are_equal(expected_value, attribute.value);
        si

        Calling__gen_attribute__should_generate_expected_attribute_boilerplate() is
            @test()
            
            let context = get_IR_context();

            let attribute = new AssemblyInfoAttribute("some-attribute-name", "some-attribute-value");

            attribute.gen_attribute(context);

            Assert.are_equal(".custom instance void [System.Runtime]some-attribute-name::.ctor(string) = ", context.leave_buffer());
        si

        Calling__gen__should_delegate_to_gen_attribute_and_gen_value() is
            @test()

            let logger = new Mock[Logger]();
            let context = new Mock[IR.CONTEXT]([logger.object, "entry"]);
            let attribute = new AssemblyInfoAttribute_GEN_HISTORY_FAKE();

            attribute.gen(context.object);

            Assert.are_equal(2, attribute.history.count);
            Assert.are_equal(attribute.history[0], ("gen_attribute", context.object));
            Assert.are_equal(attribute.history[1], ("gen_value", context.object));
        si

        Calling__gen__should_generate_name_and_value() is
            @test()
            
            let context = get_IR_context();

            let attribute_name = "some-attribute-name";
            let attribute_value = "some-attribute-value";

            let attribute = new AssemblyInfoAttribute_PASS_THROUGH_VALUE_FAKE(attribute_name, attribute_value);

            attribute.gen(context);

            let expected_value = ".custom instance void [System.Runtime]" + attribute_name + "::.ctor(string) = " + attribute_value;
            let actual_value = context.leave_buffer();

            Assert.are_equal(expected_value, actual_value);
        si

        get_IR_context() -> IR.CONTEXT is
            let logger_mock = new Mock[Logger]();
            let logger_object = cast Logger(logger_mock.object);

            let result = new IR.CONTEXT(logger_object, "entry");

            result.enter_buffer(false);

            return result;
        si
    si
si