namespace Semantic.DotNet.UnitTests is
    use Collections;

    use Microsoft.VisualStudio.TestTools.UnitTesting.Assert;
    use Mock = Moq.Mock`1;

    use Logging;

    class STRING_ASSEMBLY_INFO_ATTRIBUTE_TESTS is
        @test()

        init() is si

        Constructing__STRING_ASSEMBLY_INFO_ATTRIBUTE__with_name_and_value_should_set_those_properties() is
            @test()

            let expected_name = "some-attribute-name";
            let expected_value = "some-attribute-value";

            let attribute = STRING_ASSEMBLY_INFO_ATTRIBUTE(expected_name, expected_value);

            Assert.are_equal(expected_name, attribute.name);
            Assert.are_equal(expected_value, attribute.value);
        si

        Calling__gen_attribute__should_generate_expected_attribute_boilerplate() is
            @test()
            
            let context = get_IR_context();

            let attribute = STRING_ASSEMBLY_INFO_ATTRIBUTE("some-attribute-name", "some-attribute-value");

            attribute.gen_attribute(context);

            Assert.are_equal(".custom instance void [System.Runtime]some-attribute-name::.ctor(string) = ", context.leave_buffer());
        si

        Calling__gen_value__with_short_ASCII_string_should_generate_expected_bytes() is
            @test()
            
            let context = get_IR_context();
            let attribute = STRING_ASSEMBLY_INFO_ATTRIBUTE("some-attribute-name", "some-attribute-value");

            attribute.gen_value(context);

            // expected value captured via ildasm of assembly produced by compiling C# project containing the source string
            Assert.are_equal(
                "( 01 00 14 73 6F 6D 65 2D 61 74 74 72 69 62 75 74 65 2D 76 61 6C 75 65 )\n",
                context.leave_buffer()
            );
        si

        Calling__gen_value__with_short_UTF8_string_should_generate_expected_bytes() is
            @test()
            
            let context = get_IR_context();
            let attribute = STRING_ASSEMBLY_INFO_ATTRIBUTE("some-attribute-name", "Οὐχὶ ταὐτὰ παρίσταταί μοι γιγνώσκειν");

            attribute.gen_value(context);

            // expected value captured via ildasm of assembly produced by compiling C# project containing the source string
            Assert.are_equal(
                "( 01 00 4B CE 9F E1 BD 90 CF 87 E1 BD B6 20 CF 84 CE B1 E1 BD 90 CF 84 E1 BD B0 20 CF 80 CE B1 CF 81 E1 BD B7 CF 83 CF 84 CE B1 CF 84 CE B1 E1 BD B7 20 CE BC CE BF CE B9 20 CE B3 CE B9 CE B3 CE BD E1 BD BD CF 83 CE BA CE B5 CE B9 CE BD )\n",
                context.leave_buffer()
            );
        si

        Calling__gen_value__with_long_ASCII_string_should_generate_expected_bytes() is
            @test()
            
            let context = get_IR_context();
            let attribute = STRING_ASSEMBLY_INFO_ATTRIBUTE("some-attribute-name", "I met a traveller from an antique land, Who said - 'Two vast and trunkless legs of stone Stand in the desert. . . . Near them, on the sand, Half sunk a shattered visage lies, whose frown, And wrinkled lip, and sneer of cold command, Tell that its sculptor well those passions read Which yet survive, stamped on these lifeless things, The hand that mocked them, and the heart that fed; And on the pedestal, these words appear: My name is Ozymandias, King of Kings; Look on my Works, ye Mighty, and despair! Nothing beside remains. Round the decay Of that colossal Wreck, boundless and bare The lone and level sands stretch far away.'");

            attribute.gen_value(context);

            // expected value captured via ildasm of assembly produced by compiling C# project containing the source string
            Assert.are_equal(
                "( 01 00 82 78 49 20 6D 65 74 20 61 20 74 72 61 76 65 6C 6C 65 72 20 66 72 6F 6D 20 61 6E 20 61 6E 74 69 71 75 65 20 6C 61 6E 64 2C 20 57 68 6F 20 73 61 69 64 20 2D 20 27 54 77 6F 20 76 61 73 74 20 61 6E 64 20 74 72 75 6E 6B 6C 65 73 73 20 6C 65 67 73 20 6F 66 20 73 74 6F 6E 65 20 53 74 61 6E 64 20 69 6E 20 74 68 65 20 64 65 73 65 72 74 2E 20 2E 20 2E 20 2E 20 4E 65 61 72 20 74 68 65 6D 2C 20 6F 6E 20 74 68 65 20 73 61 6E 64 2C 20 48 61 6C 66 20 73 75 6E 6B 20 61 20 73 68 61 74 74 65 72 65 64 20 76 69 73 61 67 65 20 6C 69 65 73 2C 20 77 68 6F 73 65 20 66 72 6F 77 6E 2C 20 41 6E 64 20 77 72 69 6E 6B 6C 65 64 20 6C 69 70 2C 20 61 6E 64 20 73 6E 65 65 72 20 6F 66 20 63 6F 6C 64 20 63 6F 6D 6D 61 6E 64 2C 20 54 65 6C 6C 20 74 68 61 74 20 69 74 73 20 73 63 75 6C 70 74 6F 72 20 77 65 6C 6C 20 74 68 6F 73 65 20 70 61 73 73 69 6F 6E 73 20 72 65 61 64 20 57 68 69 63 68 20 79 65 74 20 73 75 72 76 69 76 65 2C 20 73 74 61 6D 70 65 64 20 6F 6E 20 74 68 65 73 65 20 6C 69 66 65 6C 65 73 73 20 74 68 69 6E 67 73 2C 20 54 68 65 20 68 61 6E 64 20 74 68 61 74 20 6D 6F 63 6B 65 64 20 74 68 65 6D 2C 20 61 6E 64 20 74 68 65 20 68 65 61 72 74 20 74 68 61 74 20 66 65 64 3B 20 41 6E 64 20 6F 6E 20 74 68 65 20 70 65 64 65 73 74 61 6C 2C 20 74 68 65 73 65 20 77 6F 72 64 73 20 61 70 70 65 61 72 3A 20 4D 79 20 6E 61 6D 65 20 69 73 20 4F 7A 79 6D 61 6E 64 69 61 73 2C 20 4B 69 6E 67 20 6F 66 20 4B 69 6E 67 73 3B 20 4C 6F 6F 6B 20 6F 6E 20 6D 79 20 57 6F 72 6B 73 2C 20 79 65 20 4D 69 67 68 74 79 2C 20 61 6E 64 20 64 65 73 70 61 69 72 21 20 4E 6F 74 68 69 6E 67 20 62 65 73 69 64 65 20 72 65 6D 61 69 6E 73 2E 20 52 6F 75 6E 64 20 74 68 65 20 64 65 63 61 79 20 4F 66 20 74 68 61 74 20 63 6F 6C 6F 73 73 61 6C 20 57 72 65 63 6B 2C 20 62 6F 75 6E 64 6C 65 73 73 20 61 6E 64 20 62 61 72 65 20 54 68 65 20 6C 6F 6E 65 20 61 6E 64 20 6C 65 76 65 6C 20 73 61 6E 64 73 20 73 74 72 65 74 63 68 20 66 61 72 20 61 77 61 79 2E 27 )\n",
                context.leave_buffer()
            );
        si

        Calling__gen_value__with_long_UTF8_string_should_generate_expected_bytes() is
            @test()
            
            let context = get_IR_context();
            let attribute = STRING_ASSEMBLY_INFO_ATTRIBUTE("some-attribute-name", "Οὐχὶ ταὐτὰ παρίσταταί μοι γιγνώσκειν, ὦ ἄνδρες ᾿Αθηναῖοι, ὅταν τ᾿ εἰς τὰ πράγματα ἀποβλέψω καὶ ὅταν πρὸς τοὺς λόγους οὓς ἀκούω· τοὺς μὲν γὰρ λόγους περὶ τοῦ τιμωρήσασθαι Φίλιππον ὁρῶ γιγνομένους, τὰ δὲ πράγματ᾿  εἰς τοῦτο προήκοντα,  ὥσθ᾿ ὅπως μὴ πεισόμεθ᾿ αὐτοὶ πρότερον κακῶς σκέψασθαι δέον. οὐδέν οὖν ἄλλο μοι δοκοῦσιν οἱ τὰ τοιαῦτα λέγοντες ἢ τὴν ὑπόθεσιν, περὶ ἧς βουλεύεσθαι");

            attribute.gen_value(context);

            // expected value captured via ildasm of assembly produced by compiling C# project containing the source string
            Assert.are_equal(
                "( 01 00 82 FC CE 9F E1 BD 90 CF 87 E1 BD B6 20 CF 84 CE B1 E1 BD 90 CF 84 E1 BD B0 20 CF 80 CE B1 CF 81 E1 BD B7 CF 83 CF 84 CE B1 CF 84 CE B1 E1 BD B7 20 CE BC CE BF CE B9 20 CE B3 CE B9 CE B3 CE BD E1 BD BD CF 83 CE BA CE B5 CE B9 CE BD 2C 20 E1 BD A6 20 E1 BC 84 CE BD CE B4 CF 81 CE B5 CF 82 20 E1 BE BF CE 91 CE B8 CE B7 CE BD CE B1 E1 BF 96 CE BF CE B9 2C 20 E1 BD 85 CF 84 CE B1 CE BD 20 CF 84 E1 BE BF 20 CE B5 E1 BC B0 CF 82 20 CF 84 E1 BD B0 20 CF 80 CF 81 E1 BD B1 CE B3 CE BC CE B1 CF 84 CE B1 20 E1 BC 80 CF 80 CE BF CE B2 CE BB E1 BD B3 CF 88 CF 89 20 CE BA CE B1 E1 BD B6 20 E1 BD 85 CF 84 CE B1 CE BD 20 CF 80 CF 81 E1 BD B8 CF 82 20 CF 84 CE BF E1 BD BA CF 82 20 CE BB E1 BD B9 CE B3 CE BF CF 85 CF 82 20 CE BF E1 BD 93 CF 82 20 E1 BC 80 CE BA CE BF E1 BD BB CF 89 CE 87 20 CF 84 CE BF E1 BD BA CF 82 20 CE BC E1 BD B2 CE BD 20 CE B3 E1 BD B0 CF 81 20 CE BB E1 BD B9 CE B3 CE BF CF 85 CF 82 20 CF 80 CE B5 CF 81 E1 BD B6 20 CF 84 CE BF E1 BF A6 20 CF 84 CE B9 CE BC CF 89 CF 81 E1 BD B5 CF 83 CE B1 CF 83 CE B8 CE B1 CE B9 20 CE A6 E1 BD B7 CE BB CE B9 CF 80 CF 80 CE BF CE BD 20 E1 BD 81 CF 81 E1 BF B6 20 CE B3 CE B9 CE B3 CE BD CE BF CE BC E1 BD B3 CE BD CE BF CF 85 CF 82 2C 20 CF 84 E1 BD B0 20 CE B4 E1 BD B2 20 CF 80 CF 81 E1 BD B1 CE B3 CE BC CE B1 CF 84 E1 BE BF 20 20 CE B5 E1 BC B0 CF 82 20 CF 84 CE BF E1 BF A6 CF 84 CE BF 20 CF 80 CF 81 CE BF E1 BD B5 CE BA CE BF CE BD CF 84 CE B1 2C 20 20 E1 BD A5 CF 83 CE B8 E1 BE BF 20 E1 BD 85 CF 80 CF 89 CF 82 20 CE BC E1 BD B4 20 CF 80 CE B5 CE B9 CF 83 E1 BD B9 CE BC CE B5 CE B8 E1 BE BF 20 CE B1 E1 BD 90 CF 84 CE BF E1 BD B6 20 CF 80 CF 81 E1 BD B9 CF 84 CE B5 CF 81 CE BF CE BD 20 CE BA CE B1 CE BA E1 BF B6 CF 82 20 CF 83 CE BA E1 BD B3 CF 88 CE B1 CF 83 CE B8 CE B1 CE B9 20 CE B4 E1 BD B3 CE BF CE BD 2E 20 CE BF E1 BD 90 CE B4 E1 BD B3 CE BD 20 CE BF E1 BD 96 CE BD 20 E1 BC 84 CE BB CE BB CE BF 20 CE BC CE BF CE B9 20 CE B4 CE BF CE BA CE BF E1 BF A6 CF 83 CE B9 CE BD 20 CE BF E1 BC B1 20 CF 84 E1 BD B0 20 CF 84 CE BF CE B9 CE B1 E1 BF A6 CF 84 CE B1 20 CE BB E1 BD B3 CE B3 CE BF CE BD CF 84 CE B5 CF 82 20 E1 BC A2 20 CF 84 E1 BD B4 CE BD 20 E1 BD 91 CF 80 E1 BD B9 CE B8 CE B5 CF 83 CE B9 CE BD 2C 20 CF 80 CE B5 CF 81 E1 BD B6 20 E1 BC A7 CF 82 20 CE B2 CE BF CF 85 CE BB CE B5 E1 BD BB CE B5 CF 83 CE B8 CE B1 CE B9 )\n",
                context.leave_buffer()
            );
        si

        get_IR_context() -> IR.CONTEXT is
            let logger_mock = Mock[Logger]();
            let logger_object = cast Logger(logger_mock.object);

            let result = IR.CONTEXT(logger_object, "entry");

            result.enter_buffer(false);

            return result;
        si
    si
si