namespace Lexical.UnitTests is
    use Collections;

    use Microsoft.VisualStudio.TestTools.UnitTesting.Assert;
    use Mock = Moq.Mock`1;

    use Logging;

    class TOKENIZER_TESTS is
        @test()

        init() is si

        split_at_white_space(source_string: string) -> Iterable[string]
            => source_string.split([' ', '\t', '\r', '\n'], System.StringSplitOptions.REMOVE_EMPTY_ENTRIES);

        Given_a_list_of_space_separated_identifiers__next__should_return_one_non_eof_token_for_each_identifier() is
            @test()

            let logger = Mock[Logger]();

            let source_string = "a list of identifier tokens";

            let reader = IO.StringReader(source_string);

            let tokenizer = TOKENIZER(logger.object, "dummy.ghul", reader, false);

            for expected_identifier in split_at_white_space(source_string) do
                let result = tokenizer.read_token();
                assert result.token != TOKEN.END_OF_INPUT;
            od

            let result = tokenizer.read_token();
            assert result.token == TOKEN.END_OF_INPUT;
        si

        Given_a_list_of_multi_white_space_separated_identifiers__next__should_return_one_non_eof_token_for_each_identifier() is
            @test()

            let logger = Mock[Logger]();

            let source_string = "a    list  \n of \r\n identifier tokens    ";

            let reader = IO.StringReader(source_string);

            let tokenizer = TOKENIZER(logger.object, "dummy.ghul", reader, false);

            for expected_identifier in split_at_white_space(source_string) do
                let result = tokenizer.read_token();
                assert result.token != TOKEN.END_OF_INPUT;
            od

            let result = tokenizer.read_token();
            assert result.token == TOKEN.END_OF_INPUT;
        si

        Given_a_list_of_space_separated_identifiers__next__should_return_eof_after_the_last_identifier() is
            @test()

            let logger = Mock[Logger]();

            let source_string = "a list of identifier tokens";

            let reader = IO.StringReader(source_string);

            let tokenizer = TOKENIZER(logger.object, "dummy.ghul", reader, false);

            for expected_identifier in split_at_white_space(source_string) do
                let result = tokenizer.read_token();
                assert result.token != TOKEN.END_OF_INPUT;
            od

            let result = tokenizer.read_token();
            assert result.token == TOKEN.END_OF_INPUT;
        si        

        Given_a_list_of_multi_white_space_separated_identifiers__next__should_return_eof_after_the_last_identifier() is
            @test()

            let logger = Mock[Logger]();

            let source_string = "\t\ta \t\t\tlist of \r\n identifier\n tokens\n\t\t";

            let reader = IO.StringReader(source_string);

            let tokenizer = TOKENIZER(logger.object, "dummy.ghul", reader, false);

            for expected_identifier in split_at_white_space(source_string) do
                let result = tokenizer.read_token();
                assert result.token != TOKEN.END_OF_INPUT;
            od

            let result = tokenizer.read_token();
            assert result.token == TOKEN.END_OF_INPUT;
        si        


        Given_a_list_of_space_separated_identifiers__current_token__should_be_IDENTIFIER_for_each_identifier() is
            @test()

            let logger = Mock[Logger]();

            let source_string = "a list of identifier tokens";

            let reader = IO.StringReader(source_string);

            let tokenizer = TOKENIZER(logger.object, "dummy.ghul", reader, false);

            for expected_identifier in split_at_white_space(source_string) do
                let result = tokenizer.read_token();

                result.token == TOKEN.IDENTIFIER;
            od
        si        

        Given_a_list_of_space_separated_identifiers__current_value_string__should_be_each_identifier_in_turn() is
            @test()

            let logger = Mock[Logger]();

            let source_string = "a list of identifier tokens";

            let reader = IO.StringReader(source_string);

            let tokenizer = TOKENIZER(logger.object, "dummy.ghul", reader, false);

            for expected_identifier in source_string.split([' ']) do
                let result = tokenizer.read_token();

                assert result.value_string =~ expected_identifier;
            od
        si

        Given_a_list_of_space_separated_identifiers__current__should_be_IDENTIFIER_for_each_identifier() is
            @test()

            let logger = Mock[Logger]();

            let reader = IO.StringReader("a list of identifier tokens");

            let tokenizer = TOKENIZER(logger.object, "dummy.ghul", reader, false);

            let expected_tokens = [TOKEN.IDENTIFIER, TOKEN.IDENTIFIER, TOKEN.IDENTIFIER, TOKEN.IDENTIFIER, TOKEN.IDENTIFIER].iterator;

            do
                let result = tokenizer.read_token();

                if result.token == TOKEN.END_OF_INPUT then
                    break;
                fi

                Assert.is_true(expected_tokens.move_next());

                Assert.are_equal(result.token, expected_tokens.current);
            od

            Assert.is_false(expected_tokens.move_next());
        si
    si
si