namespace Lexical.UnitTests is
    use Collections;

    use Microsoft.VisualStudio.TestTools.UnitTesting.Assert;
    use Mock = Moq.Mock`1;

    use Logging;

    class TOKEN_QUEUE_TESTS is
        @test()

        init() is si

        split_at_white_space(source_string: string) -> Iterable[string]
            => source_string.split([' ', '\t', '\r', '\n'], System.StringSplitOptions.REMOVE_EMPTY_ENTRIES);

        get_dummy_identifier(n: int) -> Lexical.TOKEN_PAIR =>
            new Lexical.TOKEN_PAIR(Lexical.TOKEN.IDENTIFIER, new Source.LOCATION("test.ghul", 0, 0), "dummy_{n}");

        given_a_non_power_of_2_size__init__should_throw() is
            @test()

            let exception_thrown = false;

            try
                let queue = new Lexical.TOKEN_QUEUE(3);
            catch ex: System.Exception
                exception_thrown = true;
            yrt
            
            assert exception_thrown;
        si

        given_a_new_token_queue__count__should_return_0() is
            @test()

            let queue = new Lexical.TOKEN_QUEUE(128);

            assert queue.count == 0;
        si

        given_an_empty_token_queue__enqueue__should_add_a_token_to_the_queue() is
            @test()

            let queue = new Lexical.TOKEN_QUEUE(16);

            queue.enqueue(get_dummy_identifier(1));

            assert queue.count == 1;
        si

        given_a_queue_with_one_token__dequeue__should_return_the_token() is
            @test()

            let queue = new Lexical.TOKEN_QUEUE(16);

            let expected_token = get_dummy_identifier(1);

            queue.enqueue(expected_token);

            let actual_token = queue.dequeue();

            assert actual_token == expected_token;
        si

        given_a_queue_with_one_token__dequeue__should_decrement_count() is
            @test()

            let queue = new Lexical.TOKEN_QUEUE(16);

            queue.enqueue(get_dummy_identifier(1));

            queue.dequeue();

            assert queue.count == 0;
        si

        given_an_empty_queue__dequeue__should_throw() is
            @test()

            let queue = new Lexical.TOKEN_QUEUE(16);

            let exception_thrown = false;

            try
                queue.dequeue();
            catch ex: System.Exception
                exception_thrown = true;
            yrt

            assert exception_thrown;
        si

        given_a_token_dequeued__last__should_return_the_dequeued_token() is
            @test()

            let queue = new Lexical.TOKEN_QUEUE(16);

            queue.enqueue(get_dummy_identifier(1));

            let actual_token = queue.dequeue();

            assert queue.last() == actual_token;
        si
        
        given_a_nearly_full_queue__enqueue__should_not_throw() is
            @test()

            let queue = new Lexical.TOKEN_QUEUE(4);

            let exception_thrown = false;

            try
                // we only expect to be able to queue size-1 tokens, as
                // one slot is reserved for the last token read
                queue.enqueue(get_dummy_identifier(1));
                queue.enqueue(get_dummy_identifier(2));
                queue.enqueue(get_dummy_identifier(3));
            catch ex: System.Exception
                IO.Std.error.write_line("exception caught: {ex}");
                exception_thrown = true;
            yrt

            assert !exception_thrown;
        si

        given_a_full_queue__enqueue__should_throw() is
            @test()

            let queue = new Lexical.TOKEN_QUEUE(4);

            // we only expect to be able to queue size-1 tokens, as
            // one slot is reserved for the last token read

            queue.enqueue(get_dummy_identifier(1));
            queue.enqueue(get_dummy_identifier(2));
            queue.enqueue(get_dummy_identifier(3));

            let exception_thrown = false;

            try
                queue.enqueue(get_dummy_identifier(4));
            catch ex: System.Exception
                exception_thrown = true;
            yrt

            assert exception_thrown;
        si

        given_six_tokens_enqueued_four_dequeued_and_two_more_enqueued__dequeue_then_last__should_return_the_last_four_tokens() is
            @test()

            let tokens = (0..8) | .map(i => get_dummy_identifier(i)) .collect();

            let queue = new Lexical.TOKEN_QUEUE(8);

            // queue is empty

            IO.Std.error.write_line("enqueueing 6 tokens...");

            for i in 0..6 do
                queue.enqueue(tokens[i]);
            od

            // queue has six tokens available

            IO.Std.error.write_line("dequeuing 4 tokens...");

            for i in 0..4 do
                queue.dequeue();
            od

            // queue has two tokens available

            IO.Std.error.write_line("enqueueing 2 tokens...");

            queue.enqueue(tokens[6]);
            queue.enqueue(tokens[7]);

            // queue has four tokens available

            let expected_tokens = [tokens[4], tokens[5], tokens[6], tokens[7]];

            IO.Std.error.write_line("checking last 4 tokens...");

            for i in 0..4 do
                IO.Std.error.write_line("checking token {i} expect {expected_tokens[i]}...");

                let dequeued = queue.dequeue();
                let last = queue.last();

                IO.Std.error.write_line("dequeued: {dequeued}, last: {last} expect: {expected_tokens[i]}");
                IO.Std.error.write_line("dequeued == expected_tokens[{i}]: {dequeued == expected_tokens[i]}");
                IO.Std.error.write_line("last == expected_tokens[{i}]: {last == expected_tokens[i]}");

                assert dequeued == expected_tokens[i];
                assert last == expected_tokens[i];
            od

            IO.Std.error.write_line("done");
        si

        given_not_in_speculate_mode__speculate_enter__should_enter_speculation_mode() is
            @test()

            let queue = new Lexical.TOKEN_QUEUE(8);

            queue.speculate_enter();

            assert queue.is_speculating;
        si

        given_in_speculate_mode__speculate_enter__should_throw() is
            @test()

            let queue = new Lexical.TOKEN_QUEUE(8);

            let exception_thrown = false;

            queue.speculate_enter();

            try
                queue.speculate_enter();
            catch ex: System.Exception
                exception_thrown = true;
            yrt
            
            assert exception_thrown;
        si

        given_not_in_speculate_mode__speculate_exit__should_throw() is
            @test()

            let queue = new Lexical.TOKEN_QUEUE(8);

            let exception_thrown = false;

            try
                queue.speculate_exit();
            catch ex: System.Exception
                exception_thrown = true;
            yrt

            assert exception_thrown;
        si

        given_in_speculate_mode__speculate_exit__should_exit_speculation_mode() is
            @test()

            let queue = new Lexical.TOKEN_QUEUE(8);

            queue.speculate_enter();
            queue.speculate_exit();

            assert !queue.is_speculating;
        si

        given_six_tokens_enqueued_and_four_dequeued__mark__should_return_4() is
            @test()

            let queue = new Lexical.TOKEN_QUEUE(8);

            for i in 0..6 do
                queue.enqueue(get_dummy_identifier(i));
            od

            for i in 0..4 do
                queue.dequeue();
            od

            queue.speculate_enter();

            assert queue.mark() == 4;
        si

        given_buffer_wrapped__mark__should_return_correct_index() is
            @test()

            let queue = new Lexical.TOKEN_QUEUE(8);

            for i in 0..6 do
                queue.enqueue(get_dummy_identifier(i));
            od

            for i in 0..4 do
                queue.dequeue();
            od

            queue.speculate_enter();

            for i in 0..4 do
                queue.enqueue(get_dummy_identifier(i + 6));
            od

            assert queue.mark() == 4;            
        si

        given_buffer_wrapped_and_speculating__enqueue__should_throw_on_overflow() is
            @test()

            let queue = new Lexical.TOKEN_QUEUE(8);

            // seven slots available in the buffer
            // initially, allowing for the last read
            // token slot

            for i in 0..6 do
                queue.enqueue(get_dummy_identifier(i));
            od

            // we've used up 6 slots, so there should be
            // one slot free

            for i in 0..4 do
                queue.dequeue();
            od

            // free up four slots, so there should now be
            // five slots free

            queue.speculate_enter();

            // we're now speculating, so we should only be
            // able to enqueue five more tokens before we
            // reach the speculative mark

            for i in 0..5 do
                queue.enqueue(get_dummy_identifier(i + 6));
            od

            let exception_thrown = false;

            try
                queue.enqueue(get_dummy_identifier(10));
            catch ex: System.Exception
                exception_thrown = true;
            yrt

            assert exception_thrown;
        si

        given_a_speculative_mark__enqueue__should_throw_rather_than_writing_past_it() is
            @test()

            let queue = new Lexical.TOKEN_QUEUE(8);

            for i in 0..4 do
                queue.enqueue(get_dummy_identifier(i));
            od

            queue.speculate_enter();
            queue.mark();

            for i in 0..4 do
                queue.dequeue();
            od
            
            // the queue is notionally empty, but four entries are
            // still in the speculative buffer, so we should only be
            // able to enqueue three more tokens before we reach the
            // speculative mark, allowing one slot for the last token
            // read

            let exception_thrown = false;

            for i in 0..3 do
                queue.enqueue(get_dummy_identifier(i + 4));
            od

            try
                queue.enqueue(get_dummy_identifier(7));
            catch ex: System.Exception
                exception_thrown = true;
            yrt
            
            assert exception_thrown;
        si
    si
si