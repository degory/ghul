namespace Lexical.UnitTests is
    use Collections;

    use Microsoft.VisualStudio.TestTools.UnitTesting.Assert;
    use Mock = Moq.Mock`1;

    use Logging;

    class FAKE_TOKEN_SOURCE: Lexical.TokenSource is
        _token_iterator: Iterator[Lexical.TOKEN_PAIR];

        init(tokens: Iterable[Lexical.TOKEN_PAIR]) is
            _token_iterator = tokens.iterator;
        si

        read_token() -> Lexical.TOKEN_PAIR is
            if _token_iterator.move_next() then
                return _token_iterator.current;
            else
                return new Lexical.TOKEN_PAIR(Lexical.TOKEN.END_OF_INPUT, new Source.LOCATION("test.ghul", 0, 0), "");
            fi
        si

        expect_format_specifier() is
        si
    si

    class TOKEN_LOOKAHEAD_TESTS is
        @test()

        init() is si

        get_dummy_identifier(n: int) -> Lexical.TOKEN_PAIR =>
            new Lexical.TOKEN_PAIR(Lexical.TOKEN.IDENTIFIER, new Source.LOCATION("test.ghul", 0, 0), "dummy_{n}");

        given_an_empty_queue__speculate__should_enter_speculation_mode() is
            @test()

            let queue = new Lexical.TOKEN_QUEUE(8);
            let source = new FAKE_TOKEN_SOURCE([get_dummy_identifier(1), get_dummy_identifier(2)]);
            let lookahead = new Lexical.TOKEN_LOOKAHEAD(queue, source);

            queue.speculate_enter();

            assert queue.is_speculating;
        si

    si
si