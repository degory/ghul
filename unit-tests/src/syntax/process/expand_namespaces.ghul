namespace Semantic.DotNet.UnitTests is
    use Collections;
    use System.IO.Abstractions;

    use Microsoft.VisualStudio.TestTools.UnitTesting.Assert;
    use NSubstitute;
    use NSubstitute.SubstituteExtensions.returns;

    use Logging;
    use Syntax.Process;

    class EXPAND_NAMESPACES_TESTS is
        @test()

        init() is si

        get_mock_filesystem() -> IFileSystem is
            let arguments = System.Array.empty`[object]();

            return NSubstitute.Substitute.`for`[IFileSystem](arguments);
        si

        Calling__convert_file_name_to_identifier__with_name_containing_dashes__should_convert_dashes_to_underscores() is
            @test()

            let name = "some-file-name";

            let object_under_test = new EXPAND_NAMESPACES(get_mock_filesystem());

            let result = object_under_test.convert_file_name_to_identifier(name);

            Assert.are_equal("some_file_name", result);
        si

        Calling__convert_file_name_to_identifier__with_name_containing_periods__should_convert_periods_to_underscores() is
            @test()

            let name = "some.file.name";

            let object_under_test = new EXPAND_NAMESPACES(get_mock_filesystem());

            let result = object_under_test.convert_file_name_to_identifier(name);

            Assert.are_equal("some_file_name", result);
        si
        
        Calling__convert_file_name_to_identifier__with_name_containing_special_chars__should_omit_them() is
            @test()

            let name = "some-file-name!@#$%^&*()+{{}}|:\"<>?[];',/`~";

            let object_under_test = new EXPAND_NAMESPACES(get_mock_filesystem());

            let result = object_under_test.convert_file_name_to_identifier(name);

            Assert.are_equal("some_file_name", result);
        si

        Calling__convert_file_name_to_identifier__with_name_containing_underscores__should_pass_them_through() is
            @test()

            let name = "some_file_name";

            let object_under_test = new EXPAND_NAMESPACES(get_mock_filesystem());

            let result = object_under_test.convert_file_name_to_identifier(name);

            Assert.are_equal("some_file_name", result);
        si

        Calling__convert_file_name_to_identifier__with_empty_name__should_return_empty_name() is
            @test()

            let name = "";

            let object_under_test = new EXPAND_NAMESPACES(get_mock_filesystem());

            let result = object_under_test.convert_file_name_to_identifier(name);

            Assert.are_equal("", result);
        si

        Calling__convert_file_name_to_identifier__with_name_containing_digits__should_pass_them_through() is
            @test()

            let name = "some_file_name_123";

            let object_under_test = new EXPAND_NAMESPACES(get_mock_filesystem());

            let result = object_under_test.convert_file_name_to_identifier(name);

            Assert.are_equal("some_file_name_123", result);
        si

        Calling__convert_file_name_to_identifier__with_name_starting_with_digit__should_prefix_with_backtick() is
            @test()

            let name = "123_some_file_name";

            let object_under_test = new EXPAND_NAMESPACES(get_mock_filesystem());

            let result = object_under_test.convert_file_name_to_identifier(name);

            Assert.are_equal("`123_some_file_name", result);
        si

        Calling_get_namespace_name__with_absolute_uri_and_no_config__should_return_expected_namespace_name() is
            @test()

            let path = "/some/path/to/some-file-name.ghul";
            let uri = "file://" + path;

            let arguments = System.Array.empty`[object]();

            let mock_file_system = NSubstitute.Substitute.`for`[IFileSystem](arguments);
            let mock_path = NSubstitute.Substitute.`for`[IPath](arguments);
            let mock_directory = NSubstitute.Substitute.`for`[IDirectory](arguments);
            let mock_directory_info_factory = NSubstitute.Substitute.`for`[IDirectoryInfoFactory](arguments);

            let mock_directory_info__some_path_to = NSubstitute.Substitute.`for`[IDirectoryInfo](arguments);
            let mock_directory_info__some_path = NSubstitute.Substitute.`for`[IDirectoryInfo](arguments);
            let mock_directory_info__some = NSubstitute.Substitute.`for`[IDirectoryInfo](arguments);
            let mock_directory_info__root = NSubstitute.Substitute.`for`[IDirectoryInfo](arguments);

            returns(mock_directory_info_factory.from_directory_name("/some/path/to"), mock_directory_info__some_path_to, null);
            returns(mock_directory_info_factory.from_directory_name("/some/path"), mock_directory_info__some_path, null);
            returns(mock_directory_info_factory.from_directory_name("/some"), mock_directory_info__some, null);
            returns(mock_directory_info_factory.from_directory_name("/"), mock_directory_info__root, null);

            returns(mock_directory_info__some_path_to.full_name, "/some/path/to", null);
            returns(mock_directory_info__some_path_to.name, "to", null);
            returns(mock_directory_info__some_path_to.parent, mock_directory_info__some_path, null);

            returns(mock_directory_info__some_path.full_name, "/some/path", null);
            returns(mock_directory_info__some_path.name, "path", null);
            returns(mock_directory_info__some_path.parent, mock_directory_info__some, null);

            returns(mock_directory_info__some.full_name, "/some", null);
            returns(mock_directory_info__some.name, "some", null);
            returns(mock_directory_info__some.parent, mock_directory_info__root, null);

            returns(mock_directory_info__root.full_name, "/", null);
            returns(mock_directory_info__root.name, "", null);
            returns(mock_directory_info__root.parent, cast IDirectoryInfo(null), null);

            returns(mock_file_system.path, mock_path, null);
            returns(mock_file_system.directory, mock_directory, null);
            returns(mock_file_system.directory_info, mock_directory_info_factory, null);

            returns(mock_path.get_file_name_without_extension(path), "some-file-name", null);
            returns(mock_path.get_directory_name(path), "/some/path/to", null);

            returns(mock_path.combine("/some/path/to", "ghul.json"), "/some/path/to/ghul.json", null);
            returns(mock_path.combine("/some/path", "ghul.json"), "/some/path/ghul.json", null);
            returns(mock_path.combine("/some", "ghul.json"), "/some/ghul.json", null);
            returns(mock_path.combine("/", "ghul.json"), "/ghul.json", null);
            returns(mock_path.combine("", "ghul.json"), "ghul.json", null); // why is this being called?

            returns(mock_path.get_path_root("/some/path/to"), "/", null);
            returns(mock_path.get_path_root("/some/path"), "/", null);
            returns(mock_path.get_path_root("/some"), "/", null);
            returns(mock_path.get_path_root("/"), "/", null);
            
            returns(mock_directory.get_current_directory(), "/some/path/to", null);

            let object_under_test = new EXPAND_NAMESPACES(mock_file_system);

            let result = object_under_test.get_namespace_name(uri);

            Assert.are_equal("__some__path__to__some_file_name", result);
        si

        Calling_get_namespace_name__with_windows_uri_and_no_config__should_return_expected_namespace_name() is
            @test()

            let path = "C:\\some\\path\\to\\some-file-name.ghul";
            let uri = new System.Uri(path).absolute_uri;

            let arguments = System.Array.empty`[object]();

            let mock_file_system = NSubstitute.Substitute.`for`[IFileSystem](arguments);
            let mock_path = NSubstitute.Substitute.`for`[IPath](arguments);
            let mock_directory = NSubstitute.Substitute.`for`[IDirectory](arguments);
            let mock_directory_info_factory = NSubstitute.Substitute.`for`[IDirectoryInfoFactory](arguments);

            let mock_directory_info__some_path_to = NSubstitute.Substitute.`for`[IDirectoryInfo](arguments);
            let mock_directory_info__some_path = NSubstitute.Substitute.`for`[IDirectoryInfo](arguments);
            let mock_directory_info__some = NSubstitute.Substitute.`for`[IDirectoryInfo](arguments);
            let mock_directory_info__root = NSubstitute.Substitute.`for`[IDirectoryInfo](arguments);

            returns(mock_directory_info_factory.from_directory_name("c:\\some\\path\\to"), mock_directory_info__some_path_to, null);
            returns(mock_directory_info_factory.from_directory_name("c:\\some\\path"), mock_directory_info__some_path, null);
            returns(mock_directory_info_factory.from_directory_name("c:\\some"), mock_directory_info__some, null);
            returns(mock_directory_info_factory.from_directory_name("c:\\"), mock_directory_info__root, null);

            returns(mock_directory_info__some_path_to.full_name, "c:\\some\\path\\to", null);
            returns(mock_directory_info__some_path_to.name, "to", null);
            returns(mock_directory_info__some_path_to.parent, mock_directory_info__some_path, null);

            returns(mock_directory_info__some_path.full_name, "c:\\some\\path", null);
            returns(mock_directory_info__some_path.name, "path", null);
            returns(mock_directory_info__some_path.parent, mock_directory_info__some, null);

            returns(mock_directory_info__some.full_name, "c:\\some", null);
            returns(mock_directory_info__some.name, "some", null);
            returns(mock_directory_info__some.parent, mock_directory_info__root, null);

            returns(mock_directory_info__root.full_name, "c:\\", null);
            returns(mock_directory_info__root.name, "", null);
            returns(mock_directory_info__root.parent, cast IDirectoryInfo(null), null);

            returns(mock_file_system.path, mock_path, null);
            returns(mock_file_system.directory, mock_directory, null);
            returns(mock_file_system.directory_info, mock_directory_info_factory, null);

            returns(mock_path.get_file_name_without_extension(path), "some-file-name", null);
            returns(mock_path.get_directory_name(path), "c:\\some\\path\\to", null);

            returns(mock_path.combine("c:\\some\\path\\to", "ghul.json"), "c:\\some\\path\\to\\ghul.json", null);
            returns(mock_path.combine("c:\\some\\path", "ghul.json"), "c:\\some\\path\\ghul.json", null);
            returns(mock_path.combine("c:\\some", "ghul.json"), "c:\\some\\ghul.json", null);
            returns(mock_path.combine("c:\\", "ghul.json"), "c:\\ghul.json", null);
            returns(mock_path.combine("", "ghul.json"), "ghul.json", null); // why is this being called?

            returns(mock_path.get_path_root("c:\\some\\path\\to"), "c:\\", null);
            returns(mock_path.get_path_root("c:\\some\\path"), "c:\\", null);
            returns(mock_path.get_path_root("c:\\some"), "c:\\", null);
            returns(mock_path.get_path_root("c:\\"), "c:\\", null);
            
            returns(mock_directory.get_current_directory(), "/some/path/to", null);

            let object_under_test = new EXPAND_NAMESPACES(mock_file_system);

            let result = object_under_test.get_namespace_name(uri);

            Assert.are_equal("__some__path__to__some_file_name", result);
        si


        Calling_get_namespace_name__with_absolute_path_and_no_config__should_return_expected_namespace_name() is
            @test()

            let path = "/some/path/to/some-file-name.ghul";

            let arguments = System.Array.empty`[object]();

            let mock_file_system = NSubstitute.Substitute.`for`[IFileSystem](arguments);
            let mock_path = NSubstitute.Substitute.`for`[IPath](arguments);
            let mock_directory = NSubstitute.Substitute.`for`[IDirectory](arguments);
            let mock_directory_info_factory = NSubstitute.Substitute.`for`[IDirectoryInfoFactory](arguments);

            let mock_directory_info__some_path_to = NSubstitute.Substitute.`for`[IDirectoryInfo](arguments);
            let mock_directory_info__some_path = NSubstitute.Substitute.`for`[IDirectoryInfo](arguments);
            let mock_directory_info__some = NSubstitute.Substitute.`for`[IDirectoryInfo](arguments);
            let mock_directory_info__root = NSubstitute.Substitute.`for`[IDirectoryInfo](arguments);

            returns(mock_directory_info_factory.from_directory_name("/some/path/to"), mock_directory_info__some_path_to, null);
            returns(mock_directory_info_factory.from_directory_name("/some/path"), mock_directory_info__some_path, null);
            returns(mock_directory_info_factory.from_directory_name("/some"), mock_directory_info__some, null);
            returns(mock_directory_info_factory.from_directory_name("/"), mock_directory_info__root, null);

            returns(mock_directory_info__some_path_to.full_name, "/some/path/to", null);
            returns(mock_directory_info__some_path_to.name, "to", null);
            returns(mock_directory_info__some_path_to.parent, mock_directory_info__some_path, null);

            returns(mock_directory_info__some_path.full_name, "/some/path", null);
            returns(mock_directory_info__some_path.name, "path", null);
            returns(mock_directory_info__some_path.parent, mock_directory_info__some, null);

            returns(mock_directory_info__some.full_name, "/some", null);
            returns(mock_directory_info__some.name, "some", null);
            returns(mock_directory_info__some.parent, mock_directory_info__root, null);

            returns(mock_directory_info__root.full_name, "/", null);
            returns(mock_directory_info__root.name, "", null);
            returns(mock_directory_info__root.parent, cast IDirectoryInfo(null), null);

            returns(mock_file_system.path, mock_path, null);
            returns(mock_file_system.directory, mock_directory, null);
            returns(mock_file_system.directory_info, mock_directory_info_factory, null);

            returns(mock_path.get_file_name_without_extension(path), "some-file-name", null);
            returns(mock_path.get_directory_name(path), "/some/path/to", null);

            returns(mock_path.combine("/some/path/to", "ghul.json"), "/some/path/to/ghul.json", null);
            returns(mock_path.combine("/some/path", "ghul.json"), "/some/path/ghul.json", null);
            returns(mock_path.combine("/some", "ghul.json"), "/some/ghul.json", null);
            returns(mock_path.combine("/", "ghul.json"), "/ghul.json", null);
            returns(mock_path.combine("", "ghul.json"), "ghul.json", null); // why is this being called?

            returns(mock_path.get_path_root("/some/path/to"), "/", null);
            returns(mock_path.get_path_root("/some/path"), "/", null);
            returns(mock_path.get_path_root("/some"), "/", null);
            returns(mock_path.get_path_root("/"), "/", null);

            returns(mock_directory.get_current_directory(), "/some/path/to", null);

            let object_under_test = new EXPAND_NAMESPACES(mock_file_system);

            let result = object_under_test.get_namespace_name(path);

            Assert.are_equal("__some__path__to__some_file_name", result);
        si

        Calling_get_namespace_name__with_ghul_json_below_root__should_return_expected_namespace_name() is
            @test()

            let path = "/some/path/to/some-file-name.ghul";

            let arguments = System.Array.empty`[object]();

            let mock_file_system = NSubstitute.Substitute.`for`[IFileSystem](arguments);
            let mock_file = NSubstitute.Substitute.`for`[IFile](arguments);
            let mock_path = NSubstitute.Substitute.`for`[IPath](arguments);
            let mock_directory = NSubstitute.Substitute.`for`[IDirectory](arguments);
            let mock_directory_info_factory = NSubstitute.Substitute.`for`[IDirectoryInfoFactory](arguments);

            let mock_directory_info__some_path_to = NSubstitute.Substitute.`for`[IDirectoryInfo](arguments);
            let mock_directory_info__some_path = NSubstitute.Substitute.`for`[IDirectoryInfo](arguments);
            let mock_directory_info__some = NSubstitute.Substitute.`for`[IDirectoryInfo](arguments);
            let mock_directory_info__root = NSubstitute.Substitute.`for`[IDirectoryInfo](arguments);

            returns(mock_directory_info_factory.from_directory_name("/some/path/to"), mock_directory_info__some_path_to, null);
            returns(mock_directory_info_factory.from_directory_name("/some/path"), mock_directory_info__some_path, null);
            returns(mock_directory_info_factory.from_directory_name("/some"), mock_directory_info__some, null);
            returns(mock_directory_info_factory.from_directory_name("/"), mock_directory_info__root, null);

            returns(mock_directory_info__some_path_to.full_name, "/some/path/to", null);
            returns(mock_directory_info__some_path_to.name, "to", null);
            returns(mock_directory_info__some_path_to.parent, mock_directory_info__some_path, null);

            returns(mock_directory_info__some_path.full_name, "/some/path", null);
            returns(mock_directory_info__some_path.name, "path", null);
            returns(mock_directory_info__some_path.parent, mock_directory_info__some, null);

            returns(mock_directory_info__some.full_name, "/some", null);
            returns(mock_directory_info__some.name, "some", null);
            returns(mock_directory_info__some.parent, mock_directory_info__root, null);

            returns(mock_directory_info__root.full_name, "/", null);
            returns(mock_directory_info__root.name, "", null);
            returns(mock_directory_info__root.parent, cast IDirectoryInfo(null), null);

            returns(mock_file_system.path, mock_path, null);
            returns(mock_file_system.file, mock_file, null);
            returns(mock_file_system.directory, mock_directory, null);
            returns(mock_file_system.directory_info, mock_directory_info_factory, null);

            returns(mock_path.get_file_name_without_extension(path), "some-file-name", null);
            returns(mock_path.get_directory_name(path), "/some/path/to", null);

            returns(mock_path.combine("/some/path/to", "ghul.json"), "/some/path/to/ghul.json", null);
            returns(mock_path.combine("/some/path", "ghul.json"), "/some/path/ghul.json", null);
            returns(mock_path.combine("/some", "ghul.json"), "/some/ghul.json", null);
            returns(mock_path.combine("/", "ghul.json"), "/ghul.json", null);
            returns(mock_path.combine("", "ghul.json"), "ghul.json", null); // why is this being called?

            returns(mock_path.get_path_root("/some/path/to"), "/", null);
            returns(mock_path.get_path_root("/some/path"), "/", null);
            returns(mock_path.get_path_root("/some"), "/", null);
            returns(mock_path.get_path_root("/"), "/", null);

            returns(mock_directory.get_current_directory(), "/some/path/to", null);

            returns(mock_file.exists("/some/path/ghul.json"), true, null);

            let object_under_test = new EXPAND_NAMESPACES(mock_file_system);

            let result = object_under_test.get_namespace_name(path);

            Assert.are_equal("path__to__some_file_name", result);
        si

        Calling_get_namespace_name__with_ghulproj_below_root__should_return_expected_namespace_name() is
            @test()

            let path = "/some/path/to/some-file-name.ghul";

            let arguments = System.Array.empty`[object]();

            let mock_file_system = NSubstitute.Substitute.`for`[IFileSystem](arguments);
            let mock_file = NSubstitute.Substitute.`for`[IFile](arguments);
            let mock_path = NSubstitute.Substitute.`for`[IPath](arguments);
            let mock_directory = NSubstitute.Substitute.`for`[IDirectory](arguments);
            let mock_directory_info_factory = NSubstitute.Substitute.`for`[IDirectoryInfoFactory](arguments);

            let mock_directory_info__some_path_to = NSubstitute.Substitute.`for`[IDirectoryInfo](arguments);
            let mock_directory_info__some_path = NSubstitute.Substitute.`for`[IDirectoryInfo](arguments);
            let mock_directory_info__some = NSubstitute.Substitute.`for`[IDirectoryInfo](arguments);
            let mock_directory_info__root = NSubstitute.Substitute.`for`[IDirectoryInfo](arguments);

            returns(mock_directory_info_factory.from_directory_name("/some/path/to"), mock_directory_info__some_path_to, null);
            returns(mock_directory_info_factory.from_directory_name("/some/path"), mock_directory_info__some_path, null);
            returns(mock_directory_info_factory.from_directory_name("/some"), mock_directory_info__some, null);
            returns(mock_directory_info_factory.from_directory_name("/"), mock_directory_info__root, null);

            returns(mock_directory_info__some_path_to.full_name, "/some/path/to", null);
            returns(mock_directory_info__some_path_to.name, "to", null);
            returns(mock_directory_info__some_path_to.parent, mock_directory_info__some_path, null);

            returns(mock_directory_info__some_path.full_name, "/some/path", null);
            returns(mock_directory_info__some_path.name, "path", null);
            returns(mock_directory_info__some_path.parent, mock_directory_info__some, null);

            returns(mock_directory_info__some.full_name, "/some", null);
            returns(mock_directory_info__some.name, "some", null);
            returns(mock_directory_info__some.parent, mock_directory_info__root, null);

            returns(mock_directory_info__root.full_name, "/", null);
            returns(mock_directory_info__root.name, "", null);
            returns(mock_directory_info__root.parent, cast IDirectoryInfo(null), null);

            returns(mock_file_system.path, mock_path, null);
            returns(mock_file_system.file, mock_file, null);
            returns(mock_file_system.directory, mock_directory, null);
            returns(mock_file_system.directory_info, mock_directory_info_factory, null);

            returns(mock_path.get_file_name_without_extension(path), "some-file-name", null);
            returns(mock_path.get_directory_name(path), "/some/path/to", null);

            returns(mock_directory.get_current_directory(), "/some/path/to", null);

            returns(mock_directory.get_files("/some/path", "*.ghulproj"), ["test.ghulproj"], null);

            returns(mock_path.combine("/some/path/to", "ghul.json"), "/some/path/to/ghul.json", null);
            returns(mock_path.combine("/some/path", "ghul.json"), "/some/path/ghul.json", null);
            returns(mock_path.combine("/some", "ghul.json"), "/some/ghul.json", null);
            returns(mock_path.combine("/", "ghul.json"), "/ghul.json", null);
            returns(mock_path.combine("", "ghul.json"), "ghul.json", null); // why is this being called?

            returns(mock_path.get_path_root("/some/path/to"), "/", null);
            returns(mock_path.get_path_root("/some/path"), "/", null);
            returns(mock_path.get_path_root("/some"), "/", null);
            returns(mock_path.get_path_root("/"), "/", null);

            returns(mock_file.exists("/some/path/ghul.json"), true, null);

            let object_under_test = new EXPAND_NAMESPACES(mock_file_system);

            let result = object_under_test.get_namespace_name(path);

            Assert.are_equal("path__to__some_file_name", result);
        si
    si
si