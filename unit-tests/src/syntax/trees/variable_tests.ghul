namespace Syntax.Trees.Variables.UnitTests is
    use Collections;

    use Logging;

    class VARIABLE_TESTS is
        @test()

        init() is si

        split_at_white_space(source_string: string) -> Iterable[string]
            => source_string.split([' ', '\t', '\r', '\n'], System.StringSplitOptions.REMOVE_EMPTY_ENTRIES);

        get_dummy_identifier(prefix: string, n: int) -> Trees.Identifiers.Identifier =>
            new Trees.Identifiers.Identifier(new Source.LOCATION("test.ghul", 0, 0), "{prefix}_{n}");

        get_dummy_variable(n: int) -> Variables.VARIABLE =>
            new Variables.VARIABLE(
                Source.LOCATION.internal,   
                get_dummy_identifier("var", n),
                new Trees.TypeExpressions.NAMED(Source.LOCATION.internal, get_dummy_identifier("type", n)),
                false,
                false,
                null
            );

        given_an_empty_variable_list__iterator__should_return_no_variables() is
            @test()

            let variables = new Variables.LIST(Source.LOCATION.internal, new LIST[Variables.Node]());

            let count = 0;

            for v in variables.iterator do
                count = count + 1;
            od

            assert count == 0;
        si

        given_a_variable_list_containing_only_variables__iterator__should_return_those_variables() is
            @test()

            let expected = [get_dummy_variable(1), get_dummy_variable(2), get_dummy_variable(3)]:Variables.Node;

            let variables = new Variables.LIST(Source.LOCATION.internal, new LIST[Variables.Node](expected));

            let count = 0;

            for v in variables.iterator do
                assert v == expected[count];
                count = count + 1;
            od

            assert count == 3;
        si
        
    si
si