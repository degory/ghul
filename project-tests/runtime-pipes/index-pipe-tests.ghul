namespace Tests is

    use Collections;

    use Microsoft.VisualStudio.TestTools.UnitTesting;

    use Ghul.Pipes;

    class IndexPipeShould is
        @test()

        init() is
        si

        Index_EmptyArray_ReturnsEmptySequence() is
            @test()

            let pipe = 
                Ghul.Pipes.Pipe`[int]
                    .from(empty`[int]());

            let result = 
                pipe
                    .index();

            expect_equal(empty`[INDEXED_VALUE[int]]() |, result);
            assert_are_equal(empty`[INDEXED_VALUE[int]](), result);
        si

        Index_MultipleElements_ReturnsExpectedSequence() is
            @test()

            let pipe = 
                Ghul.Pipes.Pipe`[string]
                    .from(["3", "4", "1", "5", "2", "3", "1", "4", "5"]);

            let result = 
                pipe
                    .index();

            expect_equal([iv(0, "3"), iv(1, "4"), iv(2, "1"), iv(3, "5"), iv(4, "2"), iv(5, "3"), iv(6, "1"), iv(7, "4"), iv(8, "5")] |, result);
            assert_are_equal([iv(0, "3"), iv(1, "4"), iv(2, "1"), iv(3, "5"), iv(4, "2"), iv(5, "3"), iv(6, "1"), iv(7, "4"), iv(8, "5")], result);
        si

        Index_MultipleElementsPositiveInitialIndex_ReturnsExpectedSequence() is
            @test()

            let pipe = 
                Ghul.Pipes.Pipe`[string]
                    .from(["3", "4", "1", "5", "2", "3", "1", "4", "5"]);

            let result = 
                pipe
                    .index(3);

            expect_equal([iv(3, "3"), iv(4, "4"), iv(5, "1"), iv(6, "5"), iv(7, "2"), iv(8, "3"), iv(9, "1"), iv(10, "4"), iv(11, "5")] |, result);
            assert_are_equal([iv(3, "3"), iv(4, "4"), iv(5, "1"), iv(6, "5"), iv(7, "2"), iv(8, "3"), iv(9, "1"), iv(10, "4"), iv(11, "5")], result);
        si

        Index_MultipleElementsNegativeInitialIndex_ReturnsExpectedSequence() is
            @test()

            let pipe = 
                Ghul.Pipes.Pipe`[string]
                    .from(["3", "4", "1", "5", "2", "3", "1", "4", "5"]);

            let result = 
                pipe
                    .index(-3);

            expect_equal([iv(-3, "3"), iv(-2, "4"), iv(-1, "1"), iv(0, "5"), iv(1, "2"), iv(2, "3"), iv(3, "1"), iv(4, "4"), iv(5, "5")] |, result);
            assert_are_equal([iv(-3, "3"), iv(-2, "4"), iv(-1, "1"), iv(0, "5"), iv(1, "2"), iv(2, "3"), iv(3, "1"), iv(4, "4"), iv(5, "5")], result);
        si

        IndexedValue_ToString_ReturnsIndexAndValueInParentheses() is
            @test()

            let indexedValue = iv(1234, "ABCD");

            expect_equal("(1234,ABCD)", indexedValue.to_string());
            Assert.are_equal("(1234,ABCD)", indexedValue.to_string());
        si        
    si
si



