namespace Tests is

    use Collections;

    use System.Text.StringBuilder;

    use Microsoft.VisualStudio.TestTools.UnitTesting;

    use Ghul.Pipes;

    class PipeOperatorShould is
        @test()

        init() is
        si

        // same as all the other pipe tests (see PipeShould), but using the pipe operator

        Pipe_SkipThenFirst_ReturnsCorrectElement() is
            @test()

            let result = 
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] | 
                    .skip(5)
                    .first();

            expect_equal(new MAYBE[int](6), result);
            Assert.are_equal(new MAYBE[int](6), result);
        si

        Pipe_TakeThenFirst_ReturnsFirstElement() is
            @test()

            let result = 
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] | 
                    .take(5)
                    .first();

            Assert.are_equal(new MAYBE[int](1), result);
        si

        Pipe_FirstEmptySequence_ReturnsMaybeNot() is
            @test()

            let result = 
                empty`[int]() |
                    .first();

            Assert.are_equal(new MAYBE[int](), result);
        si

        Pipe_FindEmptySequence_ReturnsMaybeNot() is
            @test()

            let result = 
                empty`[int]() | 
                    .find(i => i > 10);

            Assert.are_equal(new MAYBE[int](), result);
        si

        Pipe_FindNonEmptySequenceButNoMatch_ReturnsMaybeNot() is
            @test()

            let result = 
                [1, 2, 3, 4, 5, 6, 7, 8, 9] | 
                    .find(i => i == 10);

            Assert.are_equal(new MAYBE[int](), result);
        si

        Pipe_FindSingleMatchingElement_ReturnsThatElement() is
            @test()

            let result = 
                [1, 2, 3, 4, 5, 6, 7, 8, 9] | 
                    .find(i => i == 4);

            Assert.are_equal(new MAYBE[int](4), result);
        si

        Pipe_FindMultipleMatchingElement_ReturnsFirstMatchingElement() is
            @test()

            let array = [new THING(1), new THING(2), new THING(3), new THING(4), new THING(3), new THING(2), new THING(3), new THING(8), new THING(9)];

            let result = 
                array |
                    .find(t => t.key == 3);

            Assert.are_equal(new MAYBE[THING](array[2]), result);
        si

        Pipe_HasNoElements_ReturnsFalse() is
            @test()

            let result = 
                empty`[int]() | 
                    .has(i => i == 4);

            Assert.is_false(result);
        si

        Pipe_HasSomeElementsButNoneMatch_ReturnsFalse() is
            @test()

            let result = 
                [1, 2, 3, 4, 5, 6, 7, 8, 9] | 
                    .has(i => i == 99);

            Assert.is_false(result);
        si

        Pipe_HasSomeElementsOneMatches_ReturnsTrue() is
            @test()

            let result = 
                [1, 2, 3, 4, 5, 6, 7, 8, 9] | 
                    .has(i => i == 4);

            Assert.is_true(result);
        si

        Pipe_HasSomeElementsMultipleMatches_ReturnsTrue() is
            @test()

            let result = 
                [1, 2, 3, 4, 5, 6, 7, 8, 9] | 
                    .has(i => i > 4);

            Assert.is_true(result);
        si

        Pipe_SkipThenFilter_ReturnsFilteredTailSequence() is
            @test()

            let result = 
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] | 
                    .skip(5)
                    .filter(i => (i ∩ 1) == 0);

            assert_are_equal([6, 8, 10], result);
        si

        Pipe_FilterThenSkip_ReturnsFilteredTailSequence() is
            @test()

            let result = 
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] | 
                    .filter(i => (i ∩ 1) == 0)
                    .skip(1);

            assert_are_equal([4, 6, 8, 10], result);
        si

        Pipe_SkipThenIndex_StartsIndexingFromZero() is
            @test()

            let result = 
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] | 
                    .skip(4)
                    .index();

            assert_are_equal([iv(0, 5), iv(1, 6), iv(2, 7), iv(3, 8), iv(4, 9), iv(5, 10)], result);
        si

        Pipe_IndexThenSkip_StartsIndexingFromCorrectOffset() is
            @test()

            let result = 
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] | 
                    .index()
                    .skip(6);

            assert_are_equal([iv(6, 7), iv(7, 8), iv(8, 9), iv(9, 10)], result);
        si

        Pipe_TakeThenFilter_ReturnsFilteredHeadSequence() is
            @test()

            let result =
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] |
                    .take(5)
                    .filter(i => (i ∩ 1) == 0);

            assert_are_equal([2, 4], result);
        si

        Pipe_FilterThenTake_ReturnsFilteredHeadSequence() is
            @test()

            let result = 
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] |
                    .filter(i => (i ∩ 1) == 0)
                    .take(3);

            assert_are_equal([2, 4, 6], result);
        si

        Pipe_IndexThenFilter_RetainsOriginalIndexes() is
            @test()

            let result = 
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] | 
                    .index()
                    .filter(i => (i.value ∩ 1) == 1);

            assert_are_equal([iv(0,1), iv(2,3), iv(4,5), iv(6,7), iv(8,9)], result);
        si

        Pipe_FilterThenIndex_AppliesNewIndexes() is
            @test()

            let result = 
                [3, 4, 1, 5, 2, 3, 1, 4, 5] | 
                    .filter(i => i > 2)
                    .index();

            assert_are_equal([iv(0,3), iv(1,4), iv(2,5), iv(3,3), iv(4,4), iv(5,5)], result);
        si

        Pipe_SkipThenMap_ReturnsMappedTailSequence() is
            @test()

            let result = 
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] | 
                    .skip(5)
                    .map(i => "X" + i);

            assert_are_equal(["X6", "X7", "X8", "X9", "X10"], result);
        si

        Pipe_MapThenSkip_ReturnsMappedTailSequence() is
            @test()

            let result = 
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] |
                    .map(i => "X" + i)
                    .skip(5);

            assert_are_equal(["X6", "X7", "X8", "X9", "X10"], result);
        si

        Pipe_TakeThenMap_ReturnsMappedHeadSequence() is
            @test()

            let result = 
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] | 
                    .take(4)
                    .map(i => "X" + i);

            assert_are_equal(["X1", "X2", "X3", "X4"], result);
        si

        Pipe_MapThenTake_ReturnsMappedHeadSequence() is
            @test()

            let result = 
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] | 
                    .map(i => "X" + i)
                    .take(6);

            assert_are_equal(["X1", "X2", "X3", "X4", "X5", "X6"], result);
        si

        Pipe_TakeThenIndex_StartsIndexingFromZero() is
            @test()

            let result = 
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] | 
                    .take(4)
                    .index();

            assert_are_equal([iv(0, 1), iv(1, 2), iv(2, 3), iv(3, 4)], result);
        si

        Pipe_IndexThenTake_StartsIndexingFromZero() is
            @test()

            let result =
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] | 
                    .index()
                    .take(6);

            assert_are_equal([iv(0, 1), iv(1, 2), iv(2, 3), iv(3, 4), iv(4, 5), iv(5, 6)], result);
        si

        Pipe_FilterThenFilter_ReturnsOnlyElementsThatMatchBothPredicates() is
            @test()

            let result = 
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] | 
                    .filter(i => i > 3 /\ i < 9)
                    .filter(i => (i ∩ 1) == 0);

            assert_are_equal([4, 6, 8], result);
        si

        Pipe_MapThenMap_AppliesBothFunctionsToEveryElementInCorrectOrder() is
            @test()

            let result = 
                [1, 2, 3, 4, 5, 6] | 
                    .map(i => "" + i + "-first")
                    .map(i => i + "-second");

            assert_are_equal(["1-first-second", "2-first-second", "3-first-second", "4-first-second", "5-first-second", "6-first-second"], result);
        si

        Pipe_Running() is
            @test()

            let result = 
                [1, 2, 3, 4, 5, 6] | 
                    .reduce(0, (running, element) => running + element);

            Assert.are_equal(1 + 2 + 3 + 4 + 5 + 6, result);
        si

        Pipe_Mapped_Running() is
            @test()

            let result = 
                [1, 2, 3, 4, 5, 6] | 
                    .reduce(0, (running, element) => running + element, total => "total: " + total);

            Assert.are_equal("total: " + (1 + 2 + 3 + 4 + 5 + 6), result);
        si

        Sort_NoComparer_SortsInDefaultOrder() is
            @test()

            let result = 
                [2, 1, 4, 3, 6, 5] | .sort();

            assert_are_equal([1, 2, 3, 4, 5, 6], result);
        si

        Sort_GivenComparer_SortsInComparerOrder() is
            @test()

            let result = 
                [2, 1, 4, 3, 6, 5] | 
                    .sort(new ReverseIntComparer());

            assert_are_equal([6, 5, 4, 3, 2, 1], result);
        si

        Sort_GivenCompareFunction_SortsInCompareFunctionOrder() is
            @test()

            let result = 
                [2, 1, 4, 3, 6, 5] |
                    .sort((x, y) => y - x);

            assert_are_equal([6, 5, 4, 3, 2, 1], result);
        si

        Sort_CalledTwice_SortsInLastComparerOrder() is
            @test()

            let result = 
                [2, 1, 4, 3, 6, 5] | 
                    .sort()
                    .sort(new ReverseIntComparer());

            assert_are_equal([6, 5, 4, 3, 2, 1], result);
        si

        Sort_EnumeratedTwice_ReturnsSameResultBothTimes() is
            @test()

            let result = 
                [2, 1, 4, 3, 6, 5] | 
                    .sort(new ReverseIntComparer());

            result.collect();

            assert_are_equal([6, 5, 4, 3, 2, 1], result);
        si

        ToString_WithNoSeparatorArgument_ReturnsStringRepresentationOfAllElementsSeparatedWithACommaAndSpace() is
            @test()

            let result = 
                [2, 1, 4, 3, 6, 5] | 
                    .to_string();

            Assert.are_equal("2, 1, 4, 3, 6, 5", result);
        si

        ToString_WithSeparatorArgument_ReturnsStringRepresentationOfAllElementsSeparatedWithThatSeparator() is
            @test()

            let result = 
                [2, 1, 4, 3, 6, 5] | 
                    .to_string("///");

            Assert.are_equal("2///1///4///3///6///5", result);
        si

        ToString_CalledTwice_ReturnsStringRepresentationOfAllElements() is
            @test()

            let pipe = [2, 1, 4, 3, 6, 5] |;

            pipe.to_string();

            let result = pipe.to_string("\t");

            Assert.are_equal("2\t1\t4\t3\t6\t5", result);
        si

        AppendTo_WithNoSeparatorArgument_AppendsStringRepresentationOfAllElementsSeparatedWithACommaAndSpace() is
            @test()

            let result = new StringBuilder("XX");

            [2, 1, 4, 3, 6, 5] | .append_to(result);

            Assert.are_equal("XX2, 1, 4, 3, 6, 5", result.to_string());
        si

        AppendTo_WithSeparatorArgument_AppendsStringRepresentationOfAllElementsSeparatedWithThatSeparator() is
            @test()

            let result = new StringBuilder("XX");

            let pipe = [2, 1, 4, 3, 6, 5] | .append_to(result, "///");

            Assert.are_equal("XX2///1///4///3///6///5", result.to_string());
        si

        AppendTo_CalledTwice_AppendsStringRepresentationOfAllElementsTwice() is
            @test()

            let result = new StringBuilder("XX");

            let pipe = [2, 1, 4, 3, 6, 5] |;
            
            pipe.append_to(result, "-");

            result.append("YY");

            pipe.append_to(result, "_");

            Assert.are_equal("XX2-1-4-3-6-5YY2_1_4_3_6_5", result.to_string());
        si
    si    
si
