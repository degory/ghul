namespace Tests is
    use IO.Std.write_line;

    use Collections;

    use Microsoft.VisualStudio.TestTools.UnitTesting;

    use Ghul.Pipes;


    class CatPipeShould is
        @test()

        init() is
        si

        Cat_EmptySequences_ReturnsEmptySequence() is
            @test()

            let pipe = 
                Ghul.Pipes.Pipe`[int]
                    .from(empty`[int]())
                    .cat(empty`[int]());

            expect_equal(empty`[int]() |, pipe);

            Assert.are_equal(0, pipe.count());
        si

        Cat_EmptyPlusNonEmpty_ReturnsSecondSequence() is
            @test()

            let pipe = 
                Ghul.Pipes.Pipe`[int]
                    .from(empty`[int]())
                    .cat([1, 2, 3, 4, 5]);

            expect_equal([1, 2, 3, 4, 5] |, pipe);
            assert_are_equal([1, 2, 3, 4, 5], pipe);
        si

        Cat_NonEmptyPlusEmpty_ReturnsFirstSequence() is
            @test()

            let pipe = 
                Ghul.Pipes.Pipe`[int]
                    .from([1, 2, 3, 4, 5])
                    .cat(empty`[int]());

            expect_equal([1, 2, 3, 4, 5] |, pipe);
            assert_are_equal([1, 2, 3, 4, 5], pipe);
        si

        Cat_NonEmptyPlusNonEmpty_ReturnsBothSequencesInOrder() is
            @test()

            let pipe = 
                Ghul.Pipes.Pipe`[int]
                    .from([1, 2, 3, 4, 5])
                    .cat([6, 7, 8, 9, 10]);

            expect_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 10] |, pipe);
            assert_are_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], pipe);
        si

        Cat_ChainedCalls_ReturnsConcatenationOfAllInputs() is
            @test()

            let pipe = 
                Ghul.Pipes.Pipe`[int]
                    .from([3, 4, 5])
                    .cat([1, 2, 1])
                    .cat(empty`[int]())
                    .cat([2, 3, 4])
                    .cat([5]);

            write_line(pipe);

            expect_equal([3, 4, 5, 1, 2, 1, 2, 3, 4, 5] |, pipe);
            assert_are_equal([3, 4, 5, 1, 2, 1, 2, 3, 4, 5], pipe);
        si

        Cat_ChainedCalls_CountReturnsSumOfAllCounts() is
            @test()

            let pipe = 
                Ghul.Pipes.Pipe`[int]
                    .from([3, 4, 5])
                    .cat([1, 2, 1])
                    .cat(empty`[int]())
                    .cat([2, 3, 4])
                    .cat([5]);

            expect_equal(10, pipe.count());
            Assert.are_equal(10, pipe.count());
        si
    si
si
