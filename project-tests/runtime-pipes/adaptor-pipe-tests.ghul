namespace Tests is
    use IO.Std.write_line;
    use Collections;

    use Microsoft.VisualStudio.TestTools.UnitTesting;

    use Ghul.Pipes;
        
    class ADAPTOR_PIPEShould is
        @test()
   
        init() is
        si

        Pipe_FromArray_ReturnsInstanceOfADAPTOR_PIPE() is
            @test()

            let pipe = Ghul.Pipes.Pipe`[int].from([1, 2, 3, 4, 5]);

            expect_equal(pipe.get_type(), typeof ADAPTOR_PIPE[int]);
            Assert.is_instance_of_type(pipe, typeof ADAPTOR_PIPE[int]);
        si

        Count_NonEmptyArray_ReturnsElementCount() is
            @test()

            let pipe = new ADAPTOR_PIPE[int]([1, 2, 3, 4, 5]);

            expect_equal(pipe.count(), 5);
            Assert.are_equal(5, pipe.count());
        si

        Count_EmptyArray_ReturnsZero() is
            @test()

            let pipe = new ADAPTOR_PIPE[int](empty`[int]());

            expect_equal(pipe.count(), 0);
            Assert.are_equal(0, pipe.count());
        si

        // If the collection is a MutableBag (ICollection) then the count method should
        // call the Count method of the collection, rather than iterating over
        // the collection to count the elements.

        @IF.dont()
        Count_MutableBag_CallsMutableBagCount() is
            @test()

            let collection = Substitute.`for`[MutableBag[int]](empty`[object]());

            returns(collection.iterator, [1, 2, 3, 4].iterator, null);
            returns(collection.count, 4, null);

            let pipe = new ADAPTOR_PIPE[int](collection);

            let count = pipe.count();

            let actual = received(collection, 1).count;
        si

        // If the collection is a MutableBag (IReadOnlyCollection) then the count
        // method should call the Count method of the collection, rather than
        // iterating over the collection to count the elements.

        @IF.dont()
        Count_Bag_CallsBagCount() is
            @test()

            let collection = Substitute.`for`[MutableBag[int]](empty`[object]());

            returns(collection.iterator, [1, 2, 3, 4].iterator, null);
            returns(collection.count, 4, null);

            let pipe = new ADAPTOR_PIPE[int](collection);

            let count = pipe.count();

            let actual = received(collection, 1).count;
        si

        Iterator_ReturnsSelf() is
            @test()

            let pipe = new ADAPTOR_PIPE[string]([ "a", "b", "c" ]);

            expect_equal(pipe, pipe.iterator);
            Assert.are_same(pipe, pipe.iterator);
        si
        
        Iterator_ReturnsCorrectElements() is
            @test()

            let pipe = new ADAPTOR_PIPE[string]([ "a", "b", "c" ]);

            // FIXME: this shouldn't need a cast - why are array literals
            // not reliably Iterable[T] anymore?
            expect_equal([ "a", "b", "c" ] |, pipe);
 
            assert_are_equal(
                [ "a", "b", "c" ],
                pipe
            );
        si
    si
si
