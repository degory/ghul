namespace Test is
    use IO.Std.write_line;
    use System.Reflection;
    use System.Activator;
    use Type = System.Type2;

    use Microsoft.VisualStudio.TestTools.UnitTesting;

    entry() is
        let type_compare = (t1: Type, t2: Type) is
            let t1_name = t1.name;
            return t1_name.compare_to(t2.name);
        si;

        let method_compare = (m1: MethodInfo, m2: MethodInfo) is
            let m1_name = m1.name;
            return m1_name.compare_to(m2.name);
        si;

        let assembly = Assembly.get_executing_assembly();

        let types = assembly.get_types() | .sort(type_compare);

        for type in types do
            let is_test_class = type.get_custom_attributes(typeof TestClassAttribute, false).count > 0;

            if !is_test_class then
                continue;
            fi

            let methods = type.get_methods() | .sort(method_compare);

            for method in methods do
                let is_test_method = method.get_custom_attributes(typeof TestMethodAttribute, false).count > 0;

                if !is_test_method then
                    continue;
                fi

                try
                    write_line("run test: " + type.name + "." + method.name);

                    let instance = Activator.create_instance(type);
    
                    method.invoke(instance, null);
    
                    write_line("finished: " + type.name + "." + method.name);
                    write_line();
                catch e: System.Exception
                    write_line("threw: " + type.name + "." + method.name);
                    write_line("error: " + e);
                    write_line();
                yrt
            od
        od
    si
si