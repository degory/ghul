namespace Tests is
    use Microsoft.VisualStudio.TestTools.UnitTesting;

    class INT_RANGE_INCLUSIVE_Should is
        @test()

        init() is si

        INT_RANGE_INCLUSIVE__init__given_0_to_10__constructs_range_with_11_elements() is
            @test()

            let range = Ghul.INT_RANGE_INCLUSIVE(0, 10);

            expect_equal(range | .count(), 11);

            Assert.are_equal(Pipes.Pipe`[int].from(range) .count(), 11);
        si        

        INT_RANGE_INCLUSIVE__init__given_0_to_10__constructs_range_with_11_elements_consecutive_elements_0_through_10() is
            @test()

            let range = Ghul.INT_RANGE_INCLUSIVE(0, 10);

            expect_equal(range |, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] |);
            assert_equal(range, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
        si

        INT_RANGE_INCLUSIVE__init__given_10_to_0__constructs_range_with_0_elements() is
            @test()

            let range = Ghul.INT_RANGE_INCLUSIVE(10, 0);

            expect_equal(range | .count(), 0);
            Assert.are_equal(Pipes.Pipe`[int].from(range) .count(), 0);
        si

        INT_RANGE_INCLUSIVE__init__given_50_to_50__constructs_range_with_1_elements() is
            @test()

            let range = Ghul.INT_RANGE_INCLUSIVE(50, 50);

            expect_equal(range | .count(), 1);
            Assert.are_equal(Pipes.Pipe`[int].from(range) .count(), 1);
        si

        INT_RANGE_INCLUSIVE__colon_colon__given_0_to_10__constructs_range_with_consecutive_elements_0_through_10() is
            @test()

            let range = 0::10;

            expect_equal(range |, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] |);
            assert_equal(range, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);            
        si

        INT_RANGE_INCLUSIVE__colon_colon__minus_5_to_5__constructs_range_with_consecutive_elements_minus_5_through_5() is
            @test()

            let range = -5::5;

            expect_equal(range |, [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5] |);
            assert_equal(range, [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]);            
        si

        INT_RANGE_INCLUSIVE__reset__given_partially_enumerated_range__starts_from_beginning_again() is
            @test()

            let range = 0::10;
            
            Pipes.Pipe`[int].from(range) .take(5);

            expect_equal(range |, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] |);
            assert_equal(range, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
        si

        INT_RANGE_INCLUSIVE__from__given_0_to_10__is_0() is
            @test()

            let range = 0::10;

            expect_equal(range.from, 0);
            Assert.are_equal(range.from, 0);
        si

        INT_RANGE_INCLUSIVE__to__given_0_to_10__is_10() is
            @test()

            let range = 0::10;

            expect_equal(range.to, 10);
            Assert.are_equal(range.to, 10);
        si

        INT_RANGE_INCLUSIVE__move_next__given_0_to_10__returns_true() is
            @test()

            let range = 0::10;

            let result = range.move_next();

            expect_equal(result, true);
            Assert.is_true(result);
        si

        INT_RANGE_INCLUSIVE__move_next__given_10_to_0__returns_false() is
            @test()

            let range = 10::0;

            let result = range.move_next();

            expect_equal(result, true);
            Assert.is_false(result);
        si

        INT_RANGE_INCLUSIVE__to_string__given_new_0_to_10__returns_0_colon_colon_10() is
            @test()

            let range = 0::10;

            expect_equal(range.to_string(), "0::10");
            Assert.are_equal("0::10", range.to_string());
        si

        INT_RANGE_INCLUSIVE__to_string__given_reset_0_to_10__returns_0_colon_colon_10() is
            @test()

            let range = 0::10;

            range.reset();

            expect_equal(range.to_string(), "0::10");
            Assert.are_equal("0::10", range.to_string());
        si

        INT_RANGE_INCLUSIVE__to_string__given_0_to_10_then_move_next_returns_0_colon_colon_10_at_0() is
            @test()

            let range = 0::10;

            range.move_next();

            expect_equal(range.to_string(), "0::10 @ 0");
            Assert.are_equal("0::10 @ 0", range.to_string());
        si

        INT_RANGE_INCLUSIVE__to_string__given_0_to_10_then_3_move_next_returns_0_colon_colon_10_at_2() is
            @test()

            let range = 0::10;

            range.move_next();
            range.move_next();
            range.move_next();

            expect_equal(range.to_string(), "0::10 @ 2");
            Assert.are_equal("0::10 @ 2", range.to_string());
        si        
    si
si