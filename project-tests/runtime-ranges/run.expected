run test: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__colon_colon__given_0_to_10__constructs_range_with_consecutive_elements_0_through_10
expect_equal: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 == 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
finished: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__colon_colon__given_0_to_10__constructs_range_with_consecutive_elements_0_through_10

run test: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__colon_colon__minus_5_to_5__constructs_range_with_consecutive_elements_minus_5_through_5
expect_equal: -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5 == -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5
finished: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__colon_colon__minus_5_to_5__constructs_range_with_consecutive_elements_minus_5_through_5

run test: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__from__given_0_to_10__is_0
expect_equal: 0 == 0
finished: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__from__given_0_to_10__is_0

run test: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__init__given_0_to_10__constructs_range_with_11_elements
expect_equal: 11 == 11
finished: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__init__given_0_to_10__constructs_range_with_11_elements

run test: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__init__given_0_to_10__constructs_range_with_11_elements_consecutive_elements_0_through_10
expect_equal: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 == 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
finished: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__init__given_0_to_10__constructs_range_with_11_elements_consecutive_elements_0_through_10

run test: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__init__given_10_to_0__constructs_range_with_0_elements
expect_equal: 0 == 0
finished: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__init__given_10_to_0__constructs_range_with_0_elements

run test: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__init__given_50_to_50__constructs_range_with_1_elements
expect_equal: 1 == 1
finished: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__init__given_50_to_50__constructs_range_with_1_elements

run test: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__move_next__given_0_to_10__returns_true
expect_equal: True == True
finished: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__move_next__given_0_to_10__returns_true

run test: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__move_next__given_10_to_0__returns_false
expect_equal: False == True
finished: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__move_next__given_10_to_0__returns_false

run test: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__reset__given_partially_enumerated_range__starts_from_beginning_again
expect_equal: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 == 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
finished: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__reset__given_partially_enumerated_range__starts_from_beginning_again

run test: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__to__given_0_to_10__is_10
expect_equal: 10 == 10
finished: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__to__given_0_to_10__is_10

run test: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__to_string__given_0_to_10_then_3_move_next_returns_0_colon_colon_10_at_2
expect_equal: 0::10 @ 2 == 0::10 @ 2
finished: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__to_string__given_0_to_10_then_3_move_next_returns_0_colon_colon_10_at_2

run test: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__to_string__given_0_to_10_then_move_next_returns_0_colon_colon_10_at_0
expect_equal: 0::10 @ 0 == 0::10 @ 0
finished: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__to_string__given_0_to_10_then_move_next_returns_0_colon_colon_10_at_0

run test: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__to_string__given_new_0_to_10__returns_0_colon_colon_10
expect_equal: 0::10 == 0::10
finished: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__to_string__given_new_0_to_10__returns_0_colon_colon_10

run test: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__to_string__given_reset_0_to_10__returns_0_colon_colon_10
expect_equal: 0::10 == 0::10
finished: INT_RANGE_INCLUSIVE_Should.INT_RANGE_INCLUSIVE__to_string__given_reset_0_to_10__returns_0_colon_colon_10

run test: INT_RANGE_Should.INT_RANGE__dot_dot__given_0_to_10__constructs_range_with_consecutive_elements_0_through_9
expect_equal: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 == 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
finished: INT_RANGE_Should.INT_RANGE__dot_dot__given_0_to_10__constructs_range_with_consecutive_elements_0_through_9

run test: INT_RANGE_Should.INT_RANGE__dot_dot__minus_5_to_5__constructs_range_with_consecutive_elements_minus_5_through_4
expect_equal: -5, -4, -3, -2, -1, 0, 1, 2, 3, 4 == -5, -4, -3, -2, -1, 0, 1, 2, 3, 4
finished: INT_RANGE_Should.INT_RANGE__dot_dot__minus_5_to_5__constructs_range_with_consecutive_elements_minus_5_through_4

run test: INT_RANGE_Should.INT_RANGE__from__given_0_to_10__is_0
expect_equal: 0 == 0
finished: INT_RANGE_Should.INT_RANGE__from__given_0_to_10__is_0

run test: INT_RANGE_Should.INT_RANGE__init__given_0_to_10__constructs_range_with_10_elements
expect_equal: 10 == 10
finished: INT_RANGE_Should.INT_RANGE__init__given_0_to_10__constructs_range_with_10_elements

run test: INT_RANGE_Should.INT_RANGE__init__given_0_to_10__constructs_range_with_10_elements_consecutive_elements_0_through_9
expect_equal: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 == 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
finished: INT_RANGE_Should.INT_RANGE__init__given_0_to_10__constructs_range_with_10_elements_consecutive_elements_0_through_9

run test: INT_RANGE_Should.INT_RANGE__init__given_10_to_0__constructs_range_with_0_elements
expect_equal: 0 == 0
finished: INT_RANGE_Should.INT_RANGE__init__given_10_to_0__constructs_range_with_0_elements

run test: INT_RANGE_Should.INT_RANGE__init__given_50_to_50__constructs_range_with_0_elements
expect_equal: 0 == 0
finished: INT_RANGE_Should.INT_RANGE__init__given_50_to_50__constructs_range_with_0_elements

run test: INT_RANGE_Should.INT_RANGE__move_next__given_0_to_10__returns_true
expect_equal: True == True
finished: INT_RANGE_Should.INT_RANGE__move_next__given_0_to_10__returns_true

run test: INT_RANGE_Should.INT_RANGE__move_next__given_10_to_0__returns_false
expect_equal: False == False
finished: INT_RANGE_Should.INT_RANGE__move_next__given_10_to_0__returns_false

run test: INT_RANGE_Should.INT_RANGE__reset__given_partially_enumerated_range__starts_from_beginning_again
expect_equal: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 == 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
finished: INT_RANGE_Should.INT_RANGE__reset__given_partially_enumerated_range__starts_from_beginning_again

run test: INT_RANGE_Should.INT_RANGE__to__given_0_to_10__is_10
expect_equal: 10 == 10
finished: INT_RANGE_Should.INT_RANGE__to__given_0_to_10__is_10

run test: INT_RANGE_Should.INT_RANGE__to_string__given_0_to_10_then_3_move_next_returns_0_dot_dot_10_at_2
expect_equal: 0..10 @ 2 == 0..10 @ 2
finished: INT_RANGE_Should.INT_RANGE__to_string__given_0_to_10_then_3_move_next_returns_0_dot_dot_10_at_2

run test: INT_RANGE_Should.INT_RANGE__to_string__given_0_to_10_then_move_next_returns_0_dot_dot_10_at_0
expect_equal: 0..10 @ 0 == 0..10 @ 0
finished: INT_RANGE_Should.INT_RANGE__to_string__given_0_to_10_then_move_next_returns_0_dot_dot_10_at_0

run test: INT_RANGE_Should.INT_RANGE__to_string__given_new_0_to_10__returns_0_dot_dot_10
expect_equal: 0..10 == 0..10
finished: INT_RANGE_Should.INT_RANGE__to_string__given_new_0_to_10__returns_0_dot_dot_10

run test: INT_RANGE_Should.INT_RANGE__to_string__given_reset_0_to_10__returns_0_dot_dot_10
expect_equal: 0..10 == 0..10
finished: INT_RANGE_Should.INT_RANGE__to_string__given_reset_0_to_10__returns_0_dot_dot_10

run test: LIST_REVERSE_ITERATOR_Should.LIST_REVERSE_ITERATOR__iterator__given_empty_list__returns_no_elements
expect_equal:  == 
finished: LIST_REVERSE_ITERATOR_Should.LIST_REVERSE_ITERATOR__iterator__given_empty_list__returns_no_elements

run test: LIST_REVERSE_ITERATOR_Should.LIST_REVERSE_ITERATOR__iterator__given_even_length_multiple_element_list__returns_elements_in_reverse_order
expect_equal: 2, 6, 3, 11, 8, 7, 6, 3, 2, 1 == 2, 6, 3, 11, 8, 7, 6, 3, 2, 1
finished: LIST_REVERSE_ITERATOR_Should.LIST_REVERSE_ITERATOR__iterator__given_even_length_multiple_element_list__returns_elements_in_reverse_order

run test: LIST_REVERSE_ITERATOR_Should.LIST_REVERSE_ITERATOR__iterator__given_odd_length_multiple_element_list__returns_elements_in_reverse_order
expect_equal: 11, 8, 7, 6, 3, 2, 1 == 11, 8, 7, 6, 3, 2, 1
finished: LIST_REVERSE_ITERATOR_Should.LIST_REVERSE_ITERATOR__iterator__given_odd_length_multiple_element_list__returns_elements_in_reverse_order

run test: LIST_REVERSE_ITERATOR_Should.LIST_REVERSE_ITERATOR__iterator__given_single_element_list__returns_that_element
expect_equal: 1 == 1
finished: LIST_REVERSE_ITERATOR_Should.LIST_REVERSE_ITERATOR__iterator__given_single_element_list__returns_that_element

