use IO.Std.write_line;

entry() is
    assert_examples();
    if_examples();
    if_expression_examples();
    while_examples();
    for_examples();
    try_examples();
    let_use_examples();
si

assert_examples() is
    // assert tests a condition, and throws an exception if the condition does not hold:
    assert 1 == 1;
    assert 3 > 2;

    // the optional assert else clause supplies a message to include in any thrown exception:
    assert true else "who knows what to believe?";

    // or a specific object to throw:
    assert 1 < "hello".length else System.IndexOutOfRangeException();
si


if_examples() is
    if true then
        assert true;
        write_line("true is {true}");
    fi    

    if false \/ true then
        write_line("false or-else true is {false \/ true}");
    else
        assert false;
    fi
si

if_expression_examples() is
    // ghÅ«l doesn't have full support for Expression Oriented Programming,
    // but if statements can be used as expressions:

    for day_of_week in (0..7) | .map(dow => cast System.DayOfWeek(dow)) do
        let greeting = 
            if day_of_week == System.DayOfWeek.MONDAY then
                "ugh: monday"
            elif day_of_week == System.DayOfWeek.FRIDAY then
                "woooo: friday!"
            else
                "meh: {day_of_week.to_string().to_lower()}"
            fi;

        write_line(day_of_week);
    od
si

while_examples() is
    let i = 0;
    while i < 10 do
        assert i < 10;
        i = i + 1;

        write_line("loop iteration {i} out of 10");
    od

    assert i == 10;
si

for_examples() is
    let count = 0;

    for i in 0..10 do
        assert i >= 0 /\ i < 10;

        write_line("i is {i}, count is {count}");

        count = count + 1;
    od

    assert count == 10;

    // 0..10 is not for loop specific syntax, '..' is just an operator that constructs
    // an iterable integer range:

    let range = 0..100;

    assert range.from == 0;
    assert range.to == 100;

    assert range | .count() == 100;

    // for can iterate over anything that implements Iterable[T], Iterator[T], or move_next() and current:
    for ci in "hello" | .index() do
        write_line("char {ci.index} of 'hello' is {ci.value}");
    od    
si

try_examples() is
    try
        let wombat = "wombat";
        let elephant = "elephant";

        write_line("we're pretty sure a {wombat} is the same as an {elephant}, right?");

        assert wombat =~ elephant;
    catch ex: System.Exception
        assert ex.get_type() == typeof Ghul.AssertFailedException;

        write_line("err, maybe not");
    yrt

    // try finally for ensuring clean-up code is run:

    let is_resource_in_use = false;
    try
        is_resource_in_use = true;
        write_line("resource acquired");
        throw System.Exception("oops: exception with resource held");
    catch ex: System.Exception
        write_line("caught: {ex.message}");
    finally
        is_resource_in_use = false;
        write_line("resource released");
    yrt

    assert !is_resource_in_use;
    
    write_line("done");
si

let_use_examples() is
    let use reader = IO.File.open_text("greeting.txt");
    
    write_line(reader.read_line());
 
    // reader will be disposed at the end of the block
    // it was declared in
si