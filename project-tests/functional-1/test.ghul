use IO.Std.write_line;
use Collections.LIST;

entry() is
    first_class_functions();
    map_filter_reduce_examples();
    expression_body_example(3, 4);
    pure_examples();
    self_recursion_examples();
    mutual_recursion_example();
    immutable_data_structures_and_pure_functions();
    higher_order_functions_examples();
    union_examples();
    currying_examples();
    partial_application_examples();
    generator_examples();
si

first_class_functions() is
    let f = (i: int) => i * 2;

    let g = f;

    write_line("g(123) is {g(123)}");
si

// map filter reduce
map_filter_reduce_examples() is
    // see pipes examples for more details

    // map
    let doubled = [1, 2, 3, 4, 5] | .map(x => x * 2);
    write_line("doubled: {doubled}");
 
    // filter
    let evens = [1, 2, 3, 4, 5] | .filter(x => x % 2 == 0);
    write_line("evens: {evens}");

    // reduce
    let sum = [1, 2, 3, 4, 5] | .reduce(0, (acc, x) => acc + x);
    write_line("sum: {sum}");
si

// expression bodied functions and let-in
expression_body_example(a: int, b: int) -> string =>
    let sum = a + b in
    if sum > 10 then
        "{sum} > 10"
    else
        "{sum} <= 10"
    fi;

// Expression bodied functions and some support for
// expression oriented programming help in writing
// pure functions
pure_examples() is
    let list = [1, 2, 3, 4, 5];

    // lists can be subscripted to read an element at a given index
    let element_3 = list[3];

    // but lists are immutable, so this will cause a compile time
    // error if uncommented:
    // list[3] = 10;

    let tuple = (1, 2, 3, 4, 5);

    // tuples can be destructured
    let (a, b, c, d, e) = tuple;

    // individual members can be accessed with dot notation
    let first = tuple.`1;

    // but tuples are immutable, so members cannot be assigned to:
    // tuple.`1 = 10; // compile time error

    let classify = (n: int) =>
        if n == 0 then
            "Zero"
        elif n % 2 == 0 /\ n < 0 then
            if n % 5 == 0 then "Negative even and multiple of 5"
            else "Negative even" fi
        elif n % 2 != 0 /\ n < 0 then
            if n % 5 == 0 then "Negative odd and multiple of 5"
            else "Negative odd" fi
        elif n % 2 == 0 then
            if n % 5 == 0 then "Positive even and multiple of 5"
            else "Positive even" fi
        else
            if n % 5 == 0 then "Positive odd and multiple of 5"
            else "Positive odd" fi
        fi;

    write_line("classifyNumber(-10): {classify(-10)}");
    write_line("classifyNumber(-3): {classify(-3)}");
    write_line("classifyNumber(0): {classify(0)}");
    write_line("classifyNumber(4): {classify(4)}");
    write_line("classifyNumber(25): {classify(25)}");        
si

// self recursion with anonymous functions:
self_recursion_examples() is
    // factorial
    let factorial = 
        (n: int) rec => 
            if n == 0 then
                1 
            else 
                n * rec(n - 1)
            fi;

    write_line("factorial(5): {factorial(5)}");

    // fibonacci
    let fibonacci = 
        (n: int) rec => 
            if n <= 1 then
                n 
            else 
                rec(n - 1) + rec(n - 2)
            fi;

    write_line("fibonacci(5): {fibonacci(5)}");
si

// mutual recursion with anonymous functions:
mutual_recursion_example() is
    // mutual recursion for anonymous functions is slightly awkward, but possible
    // by passing one function into the other as an argument:

    let is_even = (n: int, is_odd: int -> bool) => if n == 0 then true else is_odd(n - 1) fi;
    let is_odd = (n: int) rec => if n == 0 then false else is_even(n - 1, rec) fi;

    write_line("even(10): {is_even(10, is_odd)}");
    write_line("odd(10): {is_odd(10)}");
si

// mututal recursion with named functions, doesn't require any workarounds:
is_even(n: int) -> bool is
    if n == 0 then true else is_odd(n - 1) fi;
si

is_odd(n: int) -> bool is
    if n == 0 then false else is_even(n - 1) fi;
si

// immutable data structures and pure functions
immutable_data_structures_and_pure_functions() is
    // immutable data structures
    let list = [1, 2, 3, 4, 5];

    let doubled = list | .map(x => x * 2);

    // original list is still the same:
    write_line("list: {list | }");

    // pure functions
    let add = (x: int, y: int) => x + y;
    write_line("add(5, 3): {add(5, 3)}");
si

// higher-order functions:

// higher-order generically typed global functions:
apply[T](f: T -> T, x: T) -> T =>
    f(x);

apply_if[T](f: T -> T, x: T, predicate: T -> bool) -> T =>
    if predicate(x) then f(x) else x fi;

// higher-order generically typed methods:
class HIGHER_ORDER_FUNCTIONS[T] is
    apply(f: T -> T, x: T) -> T static =>
        f(x);

    apply_if(f: T -> T, x: T, predicate: T -> bool) -> T static =>
        if predicate(x) then f(x) else x fi;
si

// higher order non-genericly typed anonymous functions:
higher_order_functions_examples() is
    let times_2 = (x: int) => x * 2;
    write_line("apply(times_2, 5): {apply(times_2, 5)}");

    let square = (x: int) => x * x;
    write_line("apply(square, 5): {apply(square, 5)}");

    // higher order function consumes another function:
    let apply_twice = (f: int -> int, x: int) => f(f(x));
    write_line("apply_twice(times_2, 5): {apply_twice(times_2, 5)}");

    // higher order function returns another function:
    let create_apply_twice = (f: int -> int) => (x: int) => f(f(x));
    let apply_twice_times_2 = create_apply_twice(times_2);

    write_line("apply_twice_times_2(5): {apply_twice_times_2(5)}");
si

// if expressions
if_expressions() is
    // pattern matching is not yet supported, but if expressions
    // go some way to providing similar functionality:

    let is_even =
        (n: int) => 
            if n % 2 == 0 then 
                true 
            else 
                false
            fi;

    let is_odd = 
        (n: int) => 
            if n % 2 != 0 then
                true 
            else 
                false
            fi;

    let parity = 
        (n: int) => 
            if is_even(n) then
                "even" 
            else
                "odd"
            fi;

    write_line("parity(10): {parity(10)}");
    write_line("parity(11): {parity(11)}");
si

// unions
union_examples() is
    option_example();
    list_example([1, 2, 3]);
    list_example(["A", "B", "C"]);
    tree_example([1, 2, 3, 4]);
    tree_example(["A", "B", "C", "D"]);
si

union Option[T] is
    NONE;
    SOME(value: T);
si

union List[T] is
    NIL;
    CONS(head: T, tail: List[T]);
si

union Tree[T] is
    LEAF(value: T);
    NODE(left: Tree[T], right: Tree[T]);
si

use Option.SOME;
use Option.NONE;
use List.NIL;
use List.CONS;
use Tree.LEAF;
use Tree.NODE;

option_example() is
    let some_int = SOME(42);
    let none_int = NONE[int]();

    let stringify_option = (o: Option[int]) rec =>
        if o.is_some then
            "{o.some}"
        else
            "none"
        fi;

    write_line(stringify_option(some_int));
    write_line(stringify_option(none_int));
si

list_example[T](elements: Collections.List[T]) is
    assert elements.count == 3 else "expected 3 elements";

    let list = CONS(elements[0], CONS(elements[1], CONS(elements[2], NIL[T]())));

    let stringify_list = (l: List[T]) rec =>
        if l.is_cons then
            let (head, tail) = l.cons in
            "{head}, {rec(tail)}"
        else
            "nil"
        fi;

    write_line(stringify_list(list));
si

tree_example[T](leaves: Collections.List[T]) is
    assert leaves.count == 4 else "expected 4 leaves";

    let tree = 
        NODE(
            NODE(
                LEAF(leaves[0]),
                LEAF(leaves[1])
            ),
            NODE(
                LEAF(leaves[2]),
                LEAF(leaves[3])
            )
        );

    let stringify_tree = (t: Tree[T]) rec =>
        if t.is_node then
            let (left, right) = t.node in
            "({rec(left)}, {rec(right)})"
        else
            "{t.leaf}"
        fi;

    write_line(stringify_tree(tree));
si

next[T](iterator: Collections.Iterator[T]) -> Option[T] =>
    if iterator.move_next() then
        SOME(iterator.current)
    else
        NONE[T]()
    fi;


// currying
currying_examples() is
    let curryed_add = (x: int) => (y: int) => x + y;

    write_line("curryed_add(5)(3): {curryed_add(5)(3)}");

    let add_5 = curryed_add(5);
    write_line("add_5(3): {add_5(3)}");

    let add_10 = curryed_add(10);
    write_line("add_10(3): {add_10(3)}");
si

// partial application
partial_application_examples() is
    let add = (x: int, y: int) => x + y;

    let add_5 = (y: int) => add(5, y);
    write_line("add_5(3): {add_5(3)}");

    let add_10 = (y: int) => add(10, y);
    write_line("add_10(3): {add_10(3)}");
si

// we don't have true lazy evaluation but we can try to approximate it

// a generic infinite sequence generator with arbitrary state
class GENERATOR[T, S]: Collections.Iterator[T], Collections.Iterable[T] is
    current: T;
    iterator: Collections.Iterator[T] => self;

    _initial: S;
    _state: S;
    _generator: S -> (S, T); // given the current state, return the next state and the current value

    init(initial: S, generator: S -> (S, T)) is
        _initial = initial;
        _generator = generator;
        reset();
    si

    init() is
        reset();
    si
        
    move_next() -> bool is
        (_state, current) = _generator(_state);
        return true;
    si

    reset() is
        _state = _initial;
    si

    dispose() is
    si
si

generator_examples() is
    // generates an infinite sequence of fibonacci numbers:
    let fibonacci_sequence = GENERATOR(
        (0, 1),
        (state: (int, int)) =>
            let 
                (prev, current) = state,
                next = prev + current
            in
                ((current, next), next)
    );

    // generates an infinite sequence of factorials:
    let factorial_sequence = GENERATOR(
        (1, 1),
        (state) =>
            let
                (p, prev) = state,
                n = p + 1,
                next = prev * n
            in
                ((n, next), next)            
    );

    write_line("first 10 fibonacci numbers: {fibonacci_sequence | .take(10)}");
    write_line("first 10 factorial numbers: {factorial_sequence | .take(10)}");
    write_line("first 10 even fibonacci numbers: {fibonacci_sequence | .filter(x => x % 2 == 0) .take(10)}");

    for (i, (fib, fact)) in fibonacci_sequence | .zip(factorial_sequence) .take(10) .index() do
        write_line("fibonacci {i} is {fib}");
        write_line("factorial {i} is {fact}");
    od;
si
