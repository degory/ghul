use IO.Std.write_line;
use Collections;

entry() is
    let int_things = [1, 2, 3, 4, 5];
    let string_things = ["one", "two", "three", "four", "five"];

    write_line("int_things has {count_things(int_things)} things");
    write_line("string_things has {count_things(string_things)} things");

    demonstrate_sack(SACK[int](), int_things);
    demonstrate_sack(SACK[string](), string_things);
si

count_things[E](things: Iterable[E]) -> int is
    let count = 0;

    for thing in things do
        count = count + 1;
    od

    return count;
si

trait Sack[T] is
    add(thing: T);
    count() -> int;
si

class SACK[T]: Sack[T] is
    _things: MutableList[T];

    init() is
        _things = LIST[T]();
    si

    add(thing: T) =>
        _things.add(thing);

    count() -> int =>
        _things.count;
si

demonstrate_sack[T](sack: Sack[T], things: Iterable[T]) is
    for thing in things do
        sack.add(thing);
    od
    
    write_line("sack has {sack.count()} things");
si

