namespace LLVM is
    enum OpCode is
        /* Terminator Instructions */
        Ret            = 1,
        Br             = 2,
        Switch         = 3,
        IndirectBr     = 4,
        Invoke         = 5,
        /* removed 6 due to API changes */
        Unreachable    = 7,

        /* Standard Binary Operators */
        Add            = 8,
        FAdd           = 9,
        Sub            = 10,
        FSub           = 11,
        Mul            = 12,
        FMul           = 13,
        UDiv           = 14,
        SDiv           = 15,
        FDiv           = 16,
        URem           = 17,
        SRem           = 18,
        FRem           = 19,

        /* Logical Operators */
        Shl            = 20,
        LShr           = 21,
        AShr           = 22,
        And            = 23,
        Or             = 24,
        Xor            = 25,

        /* Memory Operators */
        Alloca         = 26,
        Load           = 27,
        Store          = 28,
        GetElementPtr  = 29,

        /* Cast Operators */
        Trunc          = 30,
        ZExt           = 31,
        SExt           = 32,
        FPToUI         = 33,
        FPToSI         = 34,
        UIToFP         = 35,
        SIToFP         = 36,
        FPTrunc        = 37,
        FPExt          = 38,
        PtrToInt       = 39,
        IntToPtr       = 40,
        BitCast        = 41,
        AddrSpaceCast  = 60,

        /* Other Operators */
        ICmp           = 42,
        FCmp           = 43,
        PHI            = 44,
        Call           = 45,
        Select         = 46,
        UserOp1        = 47,
        UserOp2        = 48,
        VAArg          = 49,
        ExtractElement = 50,
        InsertElement  = 51,
        ShuffleVector  = 52,
        ExtractValue   = 53,
        InsertValue    = 54,

        /* Atomic operators */
        Fence          = 55,
        AtomicCmpXchg  = 56,
        AtomicRMW      = 57,

        /* Exception Handling Operators */
        Resume         = 58,
        LandingPad     = 59,
        CleanupRet     = 61,
        CatchRet       = 62,
        CatchPad       = 63,
        CleanupPad     = 64,
        CatchSwitch    = 65
    si

    enum TypeKind is
        Void,        /**< type with no size */
        Half,        /**< 16 bit floating point type */
        Float,       /**< 32 bit floating point type */
        Double,      /**< 64 bit floating point type */
        X86_FP80,    /**< 80 bit floating point type (X87) */
        FP128,       /**< 128 bit floating point type (112-bit mantissa)*/
        PPC_FP128,   /**< 128 bit floating point type (two 64-bits) */
        Label,       /**< Labels */
        Integer,     /**< Arbitrary bit width integers */
        Function,    /**< Functions */
        Struct,      /**< Structures */
        Array,       /**< Arrays */
        Pointer,     /**< Pointers */
        Vector,      /**< SIMD 'packed' format, or other vector type */
        Metadata,    /**< Metadata */
        X86_MMX,     /**< X86 MMX */
        Token        /**< Tokens */
    si

    enum Linkage is
        External,    /**< Externally visible function */
        AvailableExternally,
        LinkOnceAny, /**< Keep one copy of function when linking (inline)*/
        LinkOnceODR, /**< Same, but only replaced by something
                                equivalent. */
        LinkOnceODRAutoHide, /**< Obsolete */
        WeakAny,     /**< Keep one copy of function when linking (weak) */
        WeakODR,     /**< Same, but only replaced by something
                                equivalent. */
        Appending,   /**< Special purpose, only applies to global arrays */
        Internal,    /**< Rename collisions when linking (static
                                    functions) */
        Private,     /**< Like Internal, but omit from symbol table */
        DLLImport,   /**< Obsolete */
        DLLExport,   /**< Obsolete */
        ExternalWeak,/**< ExternalWeak linkage description */
        Ghost,       /**< Obsolete */
        Common,      /**< Tentative definitions */
        LinkerPrivate, /**< Like Private, but linker removes. */
        LinkerPrivateWeak /**< Like LinkerPrivate, but is weak. */
    si

    enum Visibility is
        Default,  /**< The GV is visible */
        Hidden,   /**< The GV is hidden */
        Protected /**< The GV is protected */
    si

    enum DLLStorageClass is
        Default   = 0,
        DLLImport = 1, /**< Function to be imported from DLL. */
        DLLExport = 2  /**< Function to be accessible from DLL. */
    si

    enum CallConv is
        C           = 0,
        Fast        = 8,
        Cold        = 9,
        WebKitJS    = 12,
        AnyReg      = 13,
        X86Stdcall  = 64,
        X86Fastcall = 65
    si

    enum ValueKind is
        Argument,
        BasicBlock,
        MemoryUse,
        MemoryDef,
        MemoryPhi,

        Function,
        GlobalAlias,
        GlobalIFunc,
        GlobalVariable,
        BlockAddress,
        ConstantExpr,
        ConstantArray,
        ConstantStruct,
        ConstantVector,

        UndefValue,
        ConstantAggregateZero,
        ConstantDataArray,
        ConstantDataVector,
        ConstantInt,
        ConstantFP,
        ConstantPointerNull,
        ConstantTokenNone,

        MetadataAsValue,
        InlineAsm,

        Instruction,
    si

    enum IntPredicate is
        EQ = 32, /**< equal */
        NE,      /**< not equal */
        UGT,     /**< unsigned greater than */
        UGE,     /**< unsigned greater or equal */
        ULT,     /**< unsigned less than */
        ULE,     /**< unsigned less or equal */
        SGT,     /**< signed greater than */
        SGE,     /**< signed greater or equal */
        SLT,     /**< signed less than */
        SLE      /**< signed less or equal */
    si

    enum RealPredicate is
        False, /**< Always false (always folded) */
        OEQ,            /**< True if ordered and equal */
        OGT,            /**< True if ordered and greater than */
        OGE,            /**< True if ordered and greater than or equal */
        OLT,            /**< True if ordered and less than */
        OLE,            /**< True if ordered and less than or equal */
        ONE,            /**< True if ordered and operands are unequal */
        ORD,            /**< True if ordered (no nans) */
        UNO,            /**< True if unordered: isnan(X) | isnan(Y) */
        UEQ,            /**< True if unordered or equal */
        UGT,            /**< True if unordered or greater than */
        UGE,            /**< True if unordered, greater than, or equal */
        ULT,            /**< True if unordered or less than */
        ULE,            /**< True if unordered, less than, or equal */
        UNE,            /**< True if unordered or not equal */
        True   /**< Always true (always folded) */
    si

    enum LandingPadClauseTy is
        Catch,    /**< A catch clause   */
        Filter    /**< A filter clause  */
    si

    enum ThreadLocalMode is
        NotThreadLocal = 0,
        GeneralDynamic,
        LocalDynamic,
        InitialExec,
        LocalExec
    si

    enum AtomicOrdering is
        NotAtomic = 0, /**< A load or store which is not atomic */
        Unordered = 1, /**< Lowest level of atomicity, guarantees
                                            somewhat sane results, lock free. */
        Monotonic = 2, /**< guarantees that if you take all the
                                            operations affecting a specific address,
                                            a consistent ordering exists */
        Acquire = 4, /**< Acquire provides a barrier of the sort
                                        necessary to acquire a lock to access other
                                        memory with normal loads and stores. */
        Release = 5, /**< Release is similar to Acquire, but with
                                        a barrier of the sort necessary to release
                                        a lock. */
        AcquireRelease = 6, /**< provides both an Acquire and a
                                                Release barrier (for fences and
                                                operations which both read and write
                                                memory). */
        SequentiallyConsistent = 7 /**< provides Acquire semantics
                                                        for loads and Release
                                                        semantics for stores.
                                                        Additionally, it guarantees
                                                        that a total ordering exists
                                                        between all
                                                        SequentiallyConsistent
                                                        operations. */
    si

    enum AtomicRMWBinOp is
        Xchg, /**< Set the new value and return the one old */
        Add, /**< Add a value and return the old one */
        Sub, /**< Subtract a value and return the old one */
        And, /**< And a value and return the old one */
        Nand, /**< Not-And a value and return the old one */
        Or, /**< OR a value and return the old one */
        Xor, /**< Xor a value and return the old one */
        Max, /**< Sets the value if it's greater than the
                                original using a signed comparison and return
                                the old one */
        Min, /**< Sets the value if it's Smaller than the
                                original using a signed comparison and return
                                the old one */
        UMax, /**< Sets the value if it's greater than the
                                original using an unsigned comparison and return
                                the old one */
        UMin /**< Sets the value if it's greater than the
                                original using an unsigned comparison  and return
                                the old one */
    si

    enum DiagnosticSeverity is
        Error,
        Warning,
        Remark,
        Note
    si

    /**
    * Attribute index are either LLVMAttributeReturnIndex,
    * LLVMAttributeFunctionIndex or a parameter number from 1 to N.
    */
    enum AttributeIndex is
        Return = 0,
        // ISO C restricts enumerator values to range of 'int'
        // (4294967295 is too large)
        // Function = ~0U,
        Function = -1,
    si

    /**
    * @defgroup LLVMCSupportTypes Types and Enumerations
    *
    * @{
    */


    /* Opaque types. */

    /**
    * LLVM uses a polymorphic type hierarchy which C cannot represent, therefore
    * parameters must be passed as base types. Despite the declared types, most
    * of the functions provided operate only on branches of the type hierarchy.
    * The declared parameter names are descriptive and specify which type is
    * required. Additionally, each type hierarchy is documented along with the
    * functions that operate upon it. For more detail, refer to LLVM's C++ code.
    * If in doubt, refer to Core.cpp, which performs parameter downcasts in the
    * form unwrap<RequiredType>(Param).
    */

    struct Bool is si

    /**
    * Used to pass regions of memory through LLVM interfaces.
    *
    * @see llvm::MemoryBuffer
    */
    struct MemoryBuffer is si

    /**
    * The top-level container for all LLVM global data. See the LLVMContext class.
    */
    struct Context is si

    /**
    * The top-level container for all other LLVM Intermediate Representation (IR)
    * objects.
    *
    * @see llvm::Module
    */
    struct Module is si

    /**
    * Each value in the LLVM IR has a type, an LLVMTypeRef.
    *
    * @see llvm::Type
    */
    struct Type is si

    /**
    * Represents an individual value in LLVM IR.
    *
    * This models llvm::Value.
    */
    struct Value is si

    /**
    * Represents a basic block of instructions in LLVM IR.
    *
    * This models llvm::BasicBlock.
    */
    struct BasicBlock is si

    /**
    * Represents an LLVM Metadata.
    *
    * This models llvm::Metadata.
    */
    struct Metadata is si

    /**
    * Represents an LLVM basic block builder.
    *
    * This models llvm::IRBuilder.
    */
    struct Builder is si

    /**
    * Represents an LLVM debug info builder.
    *
    * This models llvm::DIBuilder.
    */
    struct DIBuilder is si

    /**
    * Interface used to provide a module to JIT or interpreter.
    * This is now just a synonym for llvm::Module, but we have to keep using the
    * different type to keep binary compatibility.
    */
    struct ModuleProvider is si

    /** @see llvm::PassManagerBase */
    struct PassManager is si

    /** @see llvm::PassRegistry */
    struct PassRegistry is si

    /**
    * Used to get the users and usees of a Value.
    *
    * @see llvm::Use */
    struct Use is si

    /**
    * Used to represent an attributes.
    *
    * @see llvm::Attribute
    */
    struct Attribute is si

    /**
    * @see llvm::DiagnosticInfo
    */
    struct DiagnosticInfo is si
si