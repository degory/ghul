name: CI

on:
  workflow_dispatch:
  pull_request: 
  push:
    branches: [master, main]

jobs:
  create_version:
    name: Create a version number
    runs-on: ubuntu-20.04
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2

    - name: Prepare version number
      id: prepare_version_number
      uses: anothrNick/github-tag-action@1.26.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WITH_V: true          
        DRY_RUN: ${{ github.event_name == 'pull_request' }}
        DEFAULT_BUMP: patch

    - name: Capture version number
      run: 'echo ${{ steps.prepare_version_number.outputs.new_tag }} >version.txt'

    - name: Upload version number
      uses: actions/upload-artifact@v2
      with:
        name: version
        path: version.txt

  bootstrap:
    name: Bootstrap compiler
    needs: [create_version]
    runs-on: ubuntu-20.04
    container: ghul/devcontainer:stable
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2

    - name: Download version number
      uses: actions/download-artifact@v2
      with:
        name: version
        path: .

    - name: Set version number variable
      id: version
      run: echo "::set-output name=current::`cat version.txt`"

    - name: Mono version
      run: mono --version

    - name: Bootstrap compiler
      run: ./build/bootstrap.sh
      env:
        BUILD_NAME: ${{ steps.version.outputs.current }}

    - name: Build compiler for release
      if: ${{ github.event_name != 'pull_request' }}
      run: ./build/build.sh
      env:
        BUILD_NAME: ${{ steps.version.outputs.current }}

    - name: Build test runner
      run: cd ghul-test && ./build/build.sh

    - name: Generate installer
      run: ./build/make-installer.sh

    - uses: actions/upload-artifact@v2
      with:
        name: installer
        path: installer/ghul.run

  mono_tests:
    needs: [bootstrap]
    name: Run tests under Mono
    runs-on: ubuntu-20.04
    container: mono
    timeout-minutes: 10
    if: ${{ github.event_name == 'pull_request' }}

    steps:
    - uses: actions/checkout@v2
                    
    - name: Download ghul installer
      uses: actions/download-artifact@v2
      with:
        name: installer
        path: .

    - name: Install ghul
      run: bash ./ghul.run

    - name: Run tests
      run: ghul-test tests | tee mono-test-results.txt
      env:
        HOST: mono
        TARGET: mono

    - uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: mono-test-results
        path: mono-test-results.txt

  build_dev_container:
    needs: [bootstrap]
    name: Build development container
    runs-on: ubuntu-20.04    
    if: ${{ github.event_name != 'pull_request' }}

    steps:
    - uses: actions/checkout@v2

    - name: Download version number
      uses: actions/download-artifact@v2
      with:
        name: version
        path: .

    - name: Set version number variable
      id: version
      run: echo "::set-output name=current::`cat version.txt`"

    - name: Download ghul installer
      uses: actions/download-artifact@v2
      with:
        name: installer
        path: ./installer
  
    - name: Docker login
      run: ./build/docker-login.sh
      env:
        DOCKER_USER_NAME: ${{ secrets.DOCKER_USER_NAME }}  
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  
    - name: Docker build
      run: 'docker build . -f devcontainer.dockerfile -t ghul/devcontainer:${{ steps.version.outputs.current }}'

    - name: Docker push
      run: docker push ghul/devcontainer:${{ steps.version.outputs.current }}

    - name: Docker logout
      run: docker logout
      if: ${{ always() }}

  dev_container_tests:
    needs: [build_dev_container]
    name: Run tests in development container
    runs-on: ubuntu-20.04
    container: mono
    timeout-minutes: 10
    if: ${{ github.event_name != 'pull_request' }}

    steps:
    - uses: actions/checkout@v2
                    
    - name: Run .NET tests
      run: 'docker run --env TARGET -v `pwd`:/home/dev/source/ -w /home/dev/source ghul/devcontainer:${{ steps.version.outputs.current }} ghul-test tests | tee dev-container-test-results.txt'
      env:
        TARGET: mono

    - uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: mono-test-results
        path: |
          tests/test-results.md

    - uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: dev-container-test-results
        path: dev-container-test-results.txt

  tag_containers:
    needs: [dev_container_tests]
    name: Tag containers
    runs-on: ubuntu-20.04
    if: ${{ github.event_name != 'pull_request' }}

    steps:
    - uses: actions/checkout@v2

    - name: Download version number
      uses: actions/download-artifact@v2
      with:
        name: version
        path: .

    - name: Set version number variable
      id: version
      run: echo "::set-output name=current::`cat version.txt`"

    - name: Docker login
      run: ./build/docker-login.sh
      env:
        DOCKER_USER_NAME: ${{ secrets.DOCKER_USER_NAME }}  
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    - name: Docker pull
      run: docker pull ghul/devcontainer:${{ steps.version.outputs.current }}

    - name: Docker tag stable
      if: ${{ github.event_name == 'push' }}
      run: docker tag ghul/devcontainer:${{ steps.version.outputs.current }} ghul/devcontainer:stable

    - name: Docker push
      if: ${{ github.event_name == 'push' }}
      run: docker push ghul/devcontainer:stable

    - name: Docker tag test
      if: ${{ github.event_name != 'push' }}
      run: docker tag ghul/devcontainer:${{ steps.version.outputs.current }} ghul/devcontainer:test

    - name: Docker push
      if: ${{ github.event_name != 'push' }}
      run: docker push ghul/devcontainer:test

    - name: Docker logout
      run: docker logout
      if: ${{ always() }}    

  create_release:
    needs: [dev_container_tests]
    name: Create release
    runs-on: ubuntu-20.04
    if: ${{ github.event_name != 'pull_request' }}

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Download version number
      uses: actions/download-artifact@v2
      with:
        name: version
        path: .

    - name: Set version number variable
      id: version
      run: echo "::set-output name=current::`cat version.txt`"

    - name: Download ghul installer
      uses: actions/download-artifact@v2
      with:
        name: installer
        path: .

    - name: Create changelog
      run: git log -1 --format="%s%n%n%b%n%n" >changelog.txt

    - name: Create a Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.current }}
        release_name: ${{ steps.version.outputs.current }}
        body_path: changelog.txt
        draft: true

    - name: Download ghul installer
      uses: actions/download-artifact@v2
      with:
        name: installer
        path: .

    - name: Upload installer asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./ghul.run
        asset_name: ghul.run
        asset_content_type: application/x-shellscript
    
    - name: Publish release
      uses: eregon/publish-release@v1.0.3
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ steps.create_release.outputs.id }}

