# CI/CD pipeline. 

name: CI

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number'
        required: true

  pull_request:
  push:
    branches: [master, main]

env:
  CI: true

jobs:
  version:
    name: Create a version number
    runs-on: ubuntu-20.04
    timeout-minutes: 1
    outputs:
      number: ${{ steps.pick_version_number.outputs.version }}

    steps:
    - uses: actions/checkout@v2

    - name: Create version number
      id: create_version_number
      uses: anothrNick/github-tag-action@1.33.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WITH_V: true
        DEFAULT_BUMP: patch
        RELEASE_BRANCHES: main,master
        PRERELEASE_SUFFIX: pre

    - name: Pick version number
      id: pick_version_number
      run: |
        VALID_VERSION_REGEX="^v[0-9]+\.[0-9]+\.[0-9]+(-[A-Za-z0-9]+)?$"

        if [ ! -z "${MANUAL_VERSION}" ] ; then
          echo "User supplied version: ${MANUAL_VERSION}"

          VERSION="${MANUAL_VERSION}"
        elif [ ! -z "${TAG_VERSION}" ] ; then
          echo "Tag bump generated version: ${TAG_VERSION}"

          VERSION="${TAG_VERSION/-pre\./-pre}"
        else
          echo "Neither manual or tag version set"
          exit 1
        fi

        if [[ ${VERSION} =~ ${VALID_VERSION_REGEX} ]] && [ "${VERSION}" != "v0.0.0" ] ; then
          echo "Version number is valid: ${VERSION}"
          echo "::set-output name=version::${VERSION}"
        else
          echo "Version number is not valid ${VERSION}"
          exit 1
        fi

      env:
        TAG_VERSION: ${{ steps.create_version_number.outputs.new_tag }}
        MANUAL_VERSION: ${{ github.event.inputs.version }}

    - name: Echo version number
      run: echo ${{ steps.pick_version_number.outputs.version }}

  bootstrap:
    name: Bootstrap compiler
    needs: [version]
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        host: [dotnet]

    container:
      image: ghcr.io/degory/ghul/devcontainer:${{ matrix.host }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}

    env:
      HOST: ${{ matrix.host }}

    timeout-minutes: 5

    steps:
    - uses: actions/checkout@v2

    - name: CLI version
      run: $HOST --version

    - name: Bootstrap compiler
      run: ./build/bootstrap.sh
      env:
        BUILD_NAME: ${{ needs.version.outputs.number }}

    - name: Generate installer
      run: ./build/make-installer.sh

    - uses: actions/upload-artifact@v2
      with:
        name: installer-${{ matrix.host }}
        path: installer/ghul.run

  tests:
    needs: [bootstrap]
    name: Run tests
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        host: [dotnet]
        target: [dotnet]
        version: [v2, v3]

    env:
      HOST: ${{ matrix.host }}
      TARGET: ${{ matrix.target }}
      GHUL_V3: ${{ matrix.version == 'v3' }}

    timeout-minutes: 5

    if: ${{ github.event_name == 'pull_request' }}

    steps:
    - uses: actions/checkout@v2

    - name: Install .NET 5.0
      if: ${{ matrix.host == 'dotnet' || matrix.target == 'dotnet' }}
      run: sudo apt-get install dotnet-sdk-5.0

    - name: Download ghul installer
      uses: actions/download-artifact@v2
      with:
        name: installer-${{ matrix.host }}
        path: .

    - name: Install ghul
      run: bash ./ghul.run

    - name: Install ghul-test
      run: mkdir -p tools ; dotnet tool install ghul.test --tool-path ./tools

    - name: Run tests
      run: bash -c "set -o pipefail ; ./tools/ghul-test tests | tee test-results.txt"        

    - uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: test-results-${{ matrix.host }}-${{ matrix.target }}
        path: test-results.txt

  build_container:
    needs: [version, bootstrap]
    name: Build development container
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        host: [dotnet]

    timeout-minutes: 5

    if: ${{ github.event_name != 'pull_request' || github.repository != 'degory/ghul' }}

    steps:
    - uses: actions/checkout@v2

    - name: Download ghul installer
      uses: actions/download-artifact@v2
      with:
        name: installer-${{ matrix.host }}
        path: ./installer

    - name: Docker login to GHCR
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GHCR_PAT }}

    - name: Docker build
      run: 'docker build . -f devcontainer-${{ matrix.host }}.dockerfile -t ghcr.io/degory/ghul/devcontainer:${{ matrix.host }}-${{ needs.version.outputs.number }}'

    - name: Docker push
      run: docker push ghcr.io/degory/ghul/devcontainer:${{ matrix.host }}-${{ needs.version.outputs.number }}

  container_tests:
    needs: [version, build_container]
    name: Run tests in development container
    runs-on: ubuntu-20.04
    timeout-minutes: 6
    strategy:
      matrix:
        host: [dotnet]
        version: [v2, v3]

    container:
      image: ghcr.io/degory/ghul/devcontainer:${{ matrix.host }}-${{ needs.version.outputs.number }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}

    env:
      HOST: ${{ matrix.host }}
      TARGET: ${{ matrix.host }}
      GHUL_V3: ${{ matrix.version == 'v3' }}

    if: ${{ github.event_name != 'pull_request' || github.repository != 'degory/ghul' }}

    steps:
    - uses: actions/checkout@v2

    - name: Install ghul-test
      run: mkdir -p tools ; dotnet tool install ghul.test --tool-path ./tools

    - name: Run tests
      run: bash -c "set -o pipefail ; ./tools/ghul-test tests | tee test-results.txt"        

    - uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: container-test-results-${{ matrix.host }}-${{ matrix.version }}
        path: test-results.txt

  tag_containers:
    needs: [version, container_tests]
    name: Tag containers
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        host: [dotnet]

    timeout-minutes: 5

    if: ${{ github.event_name != 'pull_request' || github.repository != 'degory/ghul' }}

    steps:
    - uses: actions/checkout@v2

    - name: Docker login to GHCR
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GHCR_PAT }}

    - name: Docker login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USER_NAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Docker pull
      run: docker pull ghcr.io/degory/ghul/devcontainer:${{ matrix.host }}-${{ needs.version.outputs.number }}

    - name: Docker tag GHCR stable
      run: docker tag ghcr.io/degory/ghul/devcontainer:${{ matrix.host}}-${{ needs.version.outputs.number }} ghcr.io/degory/ghul/devcontainer:${{ matrix.host }}
      
    - name: Docker tag Docker Hub versioned
      run: docker tag ghcr.io/degory/ghul/devcontainer:${{ matrix.host}}-${{ needs.version.outputs.number }} ghul/devcontainer:${{ matrix.host }}-${{ needs.version.outputs.number }}

    - name: Docker tag Docker Hub stable
      run: docker tag ghcr.io/degory/ghul/devcontainer:${{ matrix.host}}-${{ needs.version.outputs.number }} ghul/devcontainer:${{ matrix.host }}

    - name: Docker push GHCR stable
      run: docker push ghcr.io/degory/ghul/devcontainer:${{ matrix.host }}
      if: ${{ github.repository == 'degory/ghul' }}

    - name: Docker push Docker Hub versioned
      run: docker push ghul/devcontainer:${{ matrix.host }}-${{ needs.version.outputs.number }}
      if: ${{ github.repository == 'degory/ghul' }}

    - name: Docker push Docker Hub stable
      run: docker push ghul/devcontainer:${{ matrix.host }}
      if: ${{ github.repository == 'degory/ghul' }}


  create_release:
    needs: [version, container_tests]
    name: Create release
    runs-on: ubuntu-20.04

    timeout-minutes: 5
    if: ${{ github.event_name != 'pull_request' || github.repository != 'degory/ghul' }}

    steps:
    - uses: actions/checkout@v2

    - name: Download ghul installer
      uses: actions/download-artifact@v2
      with:
        name: installer-dotnet
        path: .

    - name: Create changelog
      run: git log -1 --format="%s%n%n%b%n%n" >changelog.txt

    - name: Create a Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.version.outputs.number }}
        release_name: ${{ needs.version.outputs.number }}
        body_path: changelog.txt
        draft: true

    - name: Upload installer asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./ghul.run
        asset_name: ghul.run
        asset_content_type: application/x-shellscript
    
    - name: Publish release
      uses: eregon/publish-release@v1.0.3
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ steps.create_release.outputs.id }}

