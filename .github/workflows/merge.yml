name: Merge

on:
  workflow_dispatch:
  pull_request: 

jobs:
  create_version:
    name: Create a version number
    runs-on: ubuntu-20.04
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2

    - name: Prepare version number
      id: prepare_version_number
      uses: anothrNick/github-tag-action@1.26.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WITH_V: true          
        DRY_RUN: true
        DEFAULT_BUMP: patch

    - name: Capture version number
      run: 'echo ${{ steps.prepare_version_number.outputs.new_tag }} >version.txt'

    - name: Upload version number
      uses: actions/upload-artifact@v2
      with:
        name: version
        path: version.txt

  build_stage_0:
    name: Build stage 0 compiler
    needs: [create_version]
    runs-on: ubuntu-20.04    
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2

    - name: Download version number
      uses: actions/download-artifact@v2
      with:
        name: version
        path: .

    - name: Write build number
      run: 'echo "namespace Source is class BUILD is number: System.String public static => \"`cat ./version.txt`-stage-0\"; si si" >src/source/build.ghul'

    - name: Build compiler
      run: docker run --rm -v `pwd`:/home/dev/source -w /home/dev/source -u `id -u`:`id -g` ghul/compiler:stable ./build/build.sh no-docker

    - name: Generate installer
      run: ./build/make-installer.sh

    - uses: actions/upload-artifact@v2
      with:
        name: binary
        path: ghul

    - uses: actions/upload-artifact@v2
      with:
        name: installer-0
        path: installer/ghul.run

  build_stage_1:
    name: Build stage 1 compiler
    needs: [build_stage_0]
    runs-on: ubuntu-20.04
    container: mono
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2

    - name: Download version number
      uses: actions/download-artifact@v2
      with:
        name: version
        path: .

    - name: Write build number
      run: 'echo "namespace Source is class BUILD is number: System.String public static => \"`cat ./version.txt`-stage-1\"; si si" >src/source/build.ghul'

    - name: Install dependencies
      run: ./build/install-dependencies.sh

    - name: Download ghul installer
      uses: actions/download-artifact@v2
      with:
        name: installer-0
        path: .

    - name: Make installer executable
      run: chmod +x ./ghul.run

    - name: Install ghul
      run: bash ./ghul.run -- -N

    - name: Build stage 1
      run: find src -name '*.ghul' | xargs ghul -o ghul.exe -p ./lib

    - name: copy native binary
      run: cp /usr/bin/ghul .

    - name: Generate installer
      run: ./build/make-installer.sh

    - uses: actions/upload-artifact@v2
      with:
        name: installer-1
        path: installer/ghul.run

    - uses: actions/upload-artifact@v2
      with:
        name: stage-1
        path: ghul.exe

  build_stage_2:
    name: Build stage 2 compiler
    needs: [build_stage_1]
    runs-on: ubuntu-20.04
    container: mono
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2

    - name: Download version number
      uses: actions/download-artifact@v2
      with:
        name: version
        path: .

    - name: Write build number
      run: 'echo "namespace Source is class BUILD is number: System.String public static => \"`cat ./version.txt`\"; si si" >src/source/build.ghul'

    - name: Install dependencies
      run: ./build/install-dependencies.sh

    - name: Download ghul installer
      uses: actions/download-artifact@v2
      with:
        name: installer-1
        path: .

    - name: Make installer executable
      run: chmod +x ./ghul.run

    - name: Install ghul
      run: bash ./ghul.run -- -N

    - name: Build stage 2
      run: find src -name '*.ghul' | xargs mono /usr/bin/ghul.exe -o ghul.exe -p ./lib

    - name: copy native binary
      run: cp /usr/bin/ghul .

    - name: Generate installer
      run: ./build/make-installer.sh

    - uses: actions/upload-artifact@v2
      with:
        name: installer
        path: installer/ghul.run

  build_tester:
    name: Build tester
    runs-on: ubuntu-20.04
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2

    - name: Build tester
      run: docker run --rm -v `pwd`/tester:/home/dev/source/ -w /home/dev/source -u `id -u`:`id -g` ghul/compiler:stable /bin/sh ./_build.sh
      
    - uses: actions/upload-artifact@v2
      with:
        name: tester
        path: tester/tester

  build_legacy_container:
    needs: [build_stage_0]
    name: Build legacy container
    runs-on: ubuntu-20.04    

    steps:
    - uses: actions/checkout@v2

    - name: Download version number
      uses: actions/download-artifact@v2
      with:
        name: version
        path: .

    - name: Download ghul installer
      uses: actions/download-artifact@v2
      with:
        name: installer-0
        path: ./installer
  
    - name: Docker login
      run: ./build/docker-login.sh
      env:
        DOCKER_USER_NAME: ${{ secrets.DOCKER_USER_NAME }}  
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  
    - name: Docker build
      run: 'docker build . -f legacy.dockerfile -t ghul/compiler:`cat version.txt`'

    - name: Docker push
      run: docker push ghul/compiler:`cat version.txt`

    - name: Docker logout
      run: docker logout
      if: ${{ always() }}

  mono_tests:
    needs: [build_stage_2, build_tester]
    name: Run tests under Mono
    runs-on: ubuntu-20.04
    container: mono
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2
                    
    - name: Install dependencies
      run: ./build/install-dependencies.sh

    - name: Download ghul installer
      uses: actions/download-artifact@v2
      with:
        name: installer
        path: .

    - name: Make installer executable
      run: chmod +x ./ghul.run

    - name: Install ghul
      run: bash ./ghul.run -- -N

    - name: Download ghul tester
      uses: actions/download-artifact@v2
      with:
        name: tester
        path: ./tester

    - name: Make tester executable
      run: chmod +x tester/tester

    - name: Copy ghul.exe to workspace
      run: cp /usr/bin/ghul.exe .

    - name: Run .NET tests
      run: ./tests/test.sh
      env:
        HOST: mono
        TARGET: mono

    - uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: mono-test-results
        path: |
          tests/test-results.md

  dotnet_tests:
    needs: [build_stage_2, build_tester]
    name: Run tests under .NET Core
    runs-on: ubuntu-20.04
    container: mcr.microsoft.com/dotnet/core/sdk:3.1
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2

    - name: Install Mono
      run: |
        apt update
        apt install --no-install-recommends --yes mono-devel

    - name: Install dependencies
      run: ./build/install-dependencies.sh

    - name: Download ghul installer
      uses: actions/download-artifact@v2
      with:
        name: installer
        path: .

    - name: Make installer executable
      run: chmod +x ./ghul.run

    - name: Install ghul
      run: bash ./ghul.run -- -N

    - name: Download ghul tester
      uses: actions/download-artifact@v2
      with:
        name: tester
        path: ./tester

    - name: Make tester executable
      run: chmod +x tester/tester

    - name: Copy ghul.exe to workspace
      run: cp /usr/bin/ghul.exe .

    - name: Run .NET tests
      run: ./tests/test.sh
      env:
        HOST: mono
        TARGET: dotnet

    - uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: dotnet-test-results
        path: |
          tests/test-results.md

  bootstrap:
    name: Legacy bootstrap
    needs: [build_legacy_container]
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2

    - name: Download version number
      uses: actions/download-artifact@v2
      with:
        name: version
        path: .
          
    - name: Set version number variable
      id: version
      run: echo "::set-output name=current::`cat version.txt`"

    - name: Docker login
      run: ./build/docker-login.sh
      env:
        DOCKER_USER_NAME: ${{ secrets.DOCKER_USER_NAME }}  
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    - name: Bootstrap
      run: ./build/bootstrap.sh
      env:
        BUILD_WITH: 'ghul/compiler:${{ steps.version.outputs.current }}'
        BUILD_NAME: ${{ steps.version.outputs.current }}

    - name: Docker push
      run: docker push ghul/bootstrap:${{ steps.version.outputs.current }}

    - name: Docker logout
      run: docker logout
      if: ${{ always() }}

