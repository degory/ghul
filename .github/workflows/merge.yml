name: Merge

on:
  workflow_dispatch:
  pull_request: 

jobs:
  create_version:
    name: Create a version number
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2

    - name: Prepare version number
      id: prepare_version_number
      uses: anothrNick/github-tag-action@1.26.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WITH_V: true          
        DRY_RUN: true
        DEFAULT_BUMP: patch

    - name: Capture version number
      run: 'echo ${{ steps.prepare_version_number.outputs.new_tag }} >version.txt'

    - name: Upload version number
      uses: actions/upload-artifact@v2
      with:
        name: version
        path: version.txt

  build_compiler:
    name: Build compiler
    needs: [create_version]
    runs-on: ubuntu-latest    
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2

    - name: Download version number
      uses: actions/download-artifact@v2
      with:
        name: version
        path: .

    - name: Write build number
      run: 'echo "namespace Source is class BUILD is number: System.String public static => \"`cat ./version.txt`\"; si si" >src/source/build.ghul'

    - name: Build compiler
      run: docker run --rm -v `pwd`:/home/dev/source -w /home/dev/source -u `id -u`:`id -g` ghul/compiler:stable ./build/build.sh no-docker

    - name: Generate installer
      run: ./build/make-installer.sh

    - uses: actions/upload-artifact@v2
      with:
        name: binary
        path: ghul

    - uses: actions/upload-artifact@v2
      with:
        name: installer
        path: installer/ghul.run

  type_check:
    name: Type check
    needs: [build_compiler]
    runs-on: ubuntu-latest
    container: mono
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2

    - name: Download version number
      uses: actions/download-artifact@v2
      with:
        name: version
        path: .

    - name: Write build number
      run: 'echo "namespace Source is class BUILD is number: System.String public static => \"`cat ./version.txt`\"; si si" >src/source/build.ghul'

    - name: Install dependencies
      run: ./build/install-dependencies.sh

    - name: Download ghul installer
      uses: actions/download-artifact@v2
      with:
        name: installer
        path: .

    - name: Make installer executable
      run: chmod +x ./ghul.run

    - name: Install ghul
      run: bash ./ghul.run -- -N

    - name: Type check
      run: find src -name '*.ghul' | xargs ghul -G -p ./lib -l legacy/ghul

  build_tester:
    name: Build tester
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2

    - name: Build tester
      run: docker run --rm -v `pwd`/tester:/home/dev/source/ -w /home/dev/source -u `id -u`:`id -g` ghul/compiler:stable /bin/sh ./_build.sh
      
    - uses: actions/upload-artifact@v2
      with:
        name: tester
        path: tester/tester

  build_container:
    needs: [build_compiler]
    name: Build legacy container
    runs-on: ubuntu-latest    

    steps:
    - uses: actions/checkout@v2

    - name: Download version number
      uses: actions/download-artifact@v2
      with:
        name: version
        path: .

    - name: Download ghul installer
      uses: actions/download-artifact@v2
      with:
        name: installer
        path: ./installer
  
    - name: Docker login
      run: ./build/docker-login.sh
      env:
        DOCKER_USER_NAME: ${{ secrets.DOCKER_USER_NAME }}  
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  
    - name: Docker build
      run: 'docker build . -t ghul/compiler:`cat version.txt`'

    - name: Docker push
      run: docker push ghul/compiler:`cat version.txt`

    - name: Docker logout
      run: docker logout
      if: ${{ always() }}

  dotnet_tests:
    needs: [build_compiler, build_tester]
    name: Run .NET tests
    runs-on: ubuntu-latest
    container: mono
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2
                    
    - name: Install dependencies
      run: ./build/install-dependencies.sh

    - name: Download ghul installer
      uses: actions/download-artifact@v2
      with:
        name: installer
        path: .

    - name: Make installer executable
      run: chmod +x ./ghul.run

    - name: Install ghul
      run: bash ./ghul.run -- -N

    - name: Download ghul tester
      uses: actions/download-artifact@v2
      with:
        name: tester
        path: ./tester

    - name: Make tester executable
      run: chmod +x tester/tester

    - name: Run .NET tests
      run: ./tests/test.sh

    - uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: test-results
        path: |
          tests/test-results.md

  legacy_tests:
    needs: [build_container, build_tester]
    name: Run legacy tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2

    - name: Download version number
      uses: actions/download-artifact@v2
      with:
        name: version
        path: .

    - name: Set version number variable
      id: version
      run: echo "::set-output name=current::`cat version.txt`"
                    
    - name: Install dependencies
      run: ./build/install-dependencies.sh

    - name: Download ghul tester
      uses: actions/download-artifact@v2
      with:
        name: tester
        path: ./tester

    - name: Make tester executable
      run: chmod +x tester/tester

    - name: Run legacy tests
      run: ./tests-legacy/test.sh
      env:
        BUILD_WITH: 'ghul/compiler:${{ steps.version.outputs.current }}'

    - uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: test-results
        path: |
          tests-legacy/test-results.md
