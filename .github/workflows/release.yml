name: Release

on:
  release:
    types:
    - created
  pull_request: # remove me
  workflow_dispatch:

jobs:
  build_compiler:
    name: Build compiler
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2

    - name: Build compiler
      run: docker run --rm -v `pwd`:/home/dev/source -w /home/dev/source -u `id -u`:`id -g` ghul/compiler:stable ./build/build.sh no-docker

    - name: Generate installer
      run: ./build/make-installer.sh

    - uses: actions/upload-artifact@v2
      with:
        name: installer
        path: |
          installer/ghul.run

  build_tester:
    name: Build tester
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2

    - name: Build tester
      run: docker run --rm -v `pwd`/tester:/home/dev/source/ -w /home/dev/source -u `id -u`:`id -g` ghul/compiler:stable /bin/sh ./_build.sh
      
    - uses: actions/upload-artifact@v2
      with:
        name: tester
        path: |
          tester/tester

  test:
    needs: [build_compiler, build_tester]
    name: Install and test
    runs-on: ubuntu-latest
    container: mono
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2
                    
    - name: Install dependencies
      run: ./build/install-dependencies.sh

    - name: Download ghul installer
      uses: actions/download-artifact@v2
      with:
        name: installer
        path: .

    - name: Make installer executable
      run: chmod +x ./ghul.run

    - name: Install ghul
      run: bash ./ghul.run

    - name: Download ghul tester
      uses: actions/download-artifact@v2
      with:
        name: tester
        path: ./tester

    - name: Make tester executable
      run: chmod +x tester/tester

    - name: Test compiler
      run: ./tests/test.sh

    - uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: test-results
        path: |
          tests/test-results.md

  legacy_test:
    needs: [build_compiler, build_tester]
    name: Install and test
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2
                    
    - name: Install dependencies
      run: ./build/install-dependencies.sh

    - name: Download ghul installer
      uses: actions/download-artifact@v2
      with:
        name: installer
        path: .

    - name: Make installer executable
      run: chmod +x ./ghul.run

    - name: Install ghul
      run: bash ./ghul.run

    - name: Download ghul tester
      uses: actions/download-artifact@v2
      with:
        name: tester
        path: ./tester

    - name: Make tester executable
      run: chmod +x tester/tester

    - name: Test compiler
      run: ./tests/test.sh

    - uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: test-results
        path: |
          tests/test-results.md

  upload:
    needs: [test, legacy_test]
    name: Upload release assets
    runs-on: ubuntu-latest

    steps:
    - name: Download ghul installer
      uses: actions/download-artifact@v2
      with:
        name: installer
        path: .

    - name: Get release
      id: get_release
      uses: bruceadams/get-release@v1.2.1
      env:
        GITHUB_TOKEN: ${{ github.token }}    

    - name: Upload installer asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: ./ghul.run
        asset_name: ghul.run
        asset_content_type: application/x-shellscript

