name: Release

on:
  workflow_dispatch:
  push:
    branches: 
      - master

jobs:
  create_version:
    name: Create a version number
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Prepare version number
      id: prepare_version_number
      uses: anothrNick/github-tag-action@1.26.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WITH_V: true          
        DRY_RUN: true
        DEFAULT_BUMP: patch

    - name: Capture version number
      run: 'echo ${{ steps.prepare_version_number.outputs.new_tag }} >version.txt'

    - name: Upload version number
      uses: actions/upload-artifact@v2
      with:
        name: version
        path: version.txt

  build_compiler:
    name: Build compiler
    needs: [create_version]
    runs-on: ubuntu-latest    
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2

    - name: Download version number
      uses: actions/download-artifact@v2
      with:
        name: version
        path: .

    - name: Write build number
      run: 'echo "namespace Source is class BUILD is number: System.String public static => \"`cat ./version.txt`\"; si si" >src/source/build.ghul'

    - name: Build compiler
      run: docker run --rm -v `pwd`:/home/dev/source -w /home/dev/source -u `id -u`:`id -g` ghul/compiler:stable ./build/build.sh no-docker

    - name: Generate installer
      run: ./build/make-installer.sh

    - uses: actions/upload-artifact@v2
      with:
        name: binary
        path: ghul

    - uses: actions/upload-artifact@v2
      with:
        name: installer
        path: installer/ghul.run

  type_check:
    name: Type check
    needs: [build_compiler]
    runs-on: ubuntu-latest
    container: mono
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2

    - name: Download version number
      uses: actions/download-artifact@v2
      with:
        name: version
        path: .

    - name: Write build number
      run: 'echo "namespace Source is class BUILD is number: System.String public static => \"`cat ./version.txt`\"; si si" >src/source/build.ghul'

    - name: Install dependencies
      run: ./build/install-dependencies.sh

    - name: Download ghul installer
      uses: actions/download-artifact@v2
      with:
        name: installer
        path: .

    - name: Make installer executable
      run: chmod +x ./ghul.run

    - name: Install ghul
      run: bash ./ghul.run -- -N

    - name: Type check
      run: find src -name '*.ghul' | xargs ghul -G -p ./lib -l legacy/ghul

  build_tester:
    name: Build tester
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2

    - name: Build tester
      run: docker run --rm -v `pwd`/tester:/home/dev/source/ -w /home/dev/source -u `id -u`:`id -g` ghul/compiler:stable /bin/sh ./_build.sh
      
    - uses: actions/upload-artifact@v2
      with:
        name: tester
        path: tester/tester

  build_dev_container:
    needs: [build_compiler]
    name: Build development container
    runs-on: ubuntu-latest    

    steps:
    - uses: actions/checkout@v2

    - name: Download version number
      uses: actions/download-artifact@v2
      with:
        name: version
        path: .

    - name: Set version number variable
      id: version
      run: echo "::set-output name=current::`cat version.txt`"

    - name: Download ghul installer
      uses: actions/download-artifact@v2
      with:
        name: installer
        path: ./installer
  
    - name: Docker login
      run: ./build/docker-login.sh
      env:
        DOCKER_USER_NAME: ${{ secrets.DOCKER_USER_NAME }}  
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  
    - name: Docker build
      run: 'docker build . -f devcontainer.dockerfile -t ghul/devcontainer:${{ steps.version.outputs.current }}'

    - name: Docker push
      run: docker push ghul/devcontainer:${{ steps.version.outputs.current }}

    - name: Docker logout
      run: docker logout
      if: ${{ always() }}

  build_legacy_container:
    needs: [build_compiler]
    name: Build legacy container
    runs-on: ubuntu-latest    

    steps:
    - uses: actions/checkout@v2

    - name: Download version number
      uses: actions/download-artifact@v2
      with:
        name: version
        path: .

    - name: Set version number variable
      id: version
      run: echo "::set-output name=current::`cat version.txt`"

    - name: Download ghul installer
      uses: actions/download-artifact@v2
      with:
        name: installer
        path: ./installer
  
    - name: Docker login
      run: ./build/docker-login.sh
      env:
        DOCKER_USER_NAME: ${{ secrets.DOCKER_USER_NAME }}  
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  
    - name: Docker build
      run: 'docker build . -f legacy.dockerfile -t ghul/compiler:${{ steps.version.outputs.current }}'

    - name: Docker push
      run: docker push ghul/compiler:${{ steps.version.outputs.current }}

    - name: Docker logout
      run: docker logout
      if: ${{ always() }}

  mono_tests:
    needs: [build_dev_container, build_tester]
    name: Run .NET tests under Mono
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2

    - name: Download version number
      uses: actions/download-artifact@v2
      with:
        name: version
        path: .
                    
    - name: Download ghul tester
      uses: actions/download-artifact@v2
      with:
        name: tester
        path: ./tester

    - name: Make tester executable
      run: chmod +x tester/tester

    - name: Run .NET tests
      run: 'docker run -v `pwd`:/home/dev/source/ -w /home/dev/source/tests ghul/devcontainer:`cat version.txt` ../tester/tester'
      env:
        CLI_RUNNER: mono

    - uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: mono-test-results
        path: |
          tests/test-results.md

  dotnet_tests:
    needs: [build_dev_container, build_tester]
    name: Run .NET tests under .NET Core
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2
                    
    - name: Download ghul tester
      uses: actions/download-artifact@v2
      with:
        name: tester
        path: ./tester

    - name: Make tester executable
      run: chmod +x tester/tester

    - name: Run .NET tests
      run: 'docker run -v `pwd`:/home/dev/source/ -w /home/dev/source/tests ghul/devcontainer:`cat version.txt` ../tester/tester'
      env:
        CLI_RUNNER: dotnet

    - uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: dotnet-test-results
        path: |
          tests/test-results.md

  bootstrap:
    name: Legacy bootstrap
    needs: [build_legacy_container]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Download version number
      uses: actions/download-artifact@v2
      with:
        name: version
        path: .
          
    - name: Set version number variable
      id: version
      run: echo "::set-output name=current::`cat version.txt`"

    - name: Docker login
      run: ./build/docker-login.sh
      env:
        DOCKER_USER_NAME: ${{ secrets.DOCKER_USER_NAME }}  
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    - name: Bootstrap
      run: ./build/bootstrap.sh
      env:
        BUILD_WITH: 'ghul/compiler:${{ steps.version.outputs.current }}'
        BUILD_NAME: ${{ steps.version.outputs.current }}

    - name: Docker push
      run: docker push ghul/bootstrap:${{ steps.version.outputs.current }}

    - name: Docker logout
      run: docker logout
      if: ${{ always() }}

  legacy_tests:
    needs: [bootstrap]
    name: Run legacy tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2

    - name: Download version number
      uses: actions/download-artifact@v2
      with:
        name: version
        path: .

    - name: Set version number variable
      id: version
      run: echo "::set-output name=current::`cat version.txt`"
                    
    - name: Install dependencies
      run: ./build/install-dependencies.sh

    - name: Download ghul tester
      uses: actions/download-artifact@v2
      with:
        name: tester
        path: ./tester

    - name: Make tester executable
      run: chmod +x tester/tester

    - name: Run legacy tests
      run: ./tests-legacy/test.sh
      env:
        BUILD_WITH: 'ghul/bootstrap:${{ steps.version.outputs.current }}'

    - uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: legacy-test-results
        path: |
          tests-legacy/test-results.md

  tag_containers:
    needs: [bootstrap, type_check, mono_tests, dotnet_tests, legacy_tests]
    name: Tag legacy container
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}

    steps:
    - uses: actions/checkout@v2

    - name: Download version number
      uses: actions/download-artifact@v2
      with:
        name: version
        path: .

    - name: Docker login
      run: ./build/docker-login.sh
      env:
        DOCKER_USER_NAME: ${{ secrets.DOCKER_USER_NAME }}  
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    - name: Docker pull
      run: docker pull ghul/compiler:`cat version.txt`

    - name: Docker pull
      run: docker pull ghul/devcontainer:`cat version.txt`

    - name: Docker tag
      run: docker tag ghul/compiler:`cat version.txt` ghul/compiler:stable

    - name: Docker tag
      run: docker tag ghul/devcontainer:`cat version.txt` ghul/devcontainer:stable

    - name: Docker push
      run: docker push ghul/compiler:stable

    - name: Docker push
      run: docker push ghul/devcontainer:stable

    - name: Docker logout
      run: docker logout
      if: ${{ always() }}    

  create_release:
    needs: [bootstrap, type_check, mono_tests, dotnet_tests, legacy_tests]
    name: Create release
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Download version number
      uses: actions/download-artifact@v2
      with:
        name: version
        path: .

    - name: Set version number variable
      id: version
      run: echo "::set-output name=current::`cat version.txt`"

    - name: Download ghul installer
      uses: actions/download-artifact@v2
      with:
        name: installer
        path: .

    - name: Create tag
      run: git tag ${{ steps.version.outputs.current }}

    - name: Push tag
      run: git push origin ${{ steps.version.outputs.current }}

    - name: Create changelog
      run: docker run --env CHANGELOG_GITHUB_TOKEN --rm -v `pwd`:/usr/local/src/your-app ferrarimarco/github-changelog-generator -u degory -p ghul
      env:
        CHANGELOG_GITHUB_TOKEN: ${{ secrets.CHANGELOG_GITHUB_TOKEN }}

    - name: Create a Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.current }}
        release_name: ${{ steps.version.outputs.current }}
        body_path: CHANGELOG.md
        draft: true

    - name: Download ghul installer
      uses: actions/download-artifact@v2
      with:
        name: installer
        path: .

    - name: Upload installer asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./ghul.run
        asset_name: ghul.run
        asset_content_type: application/x-shellscript
    
    - name: Publish release
      uses: eregon/publish-release@v1.0.3
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ steps.create_release.outputs.id }}
