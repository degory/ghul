namespace Tester is
    use System.String;
    use System.Exception;
    use System.Console;

    use System.IO2.Directory;
    use System.IO2.File;

    use Collections.Iterable;
    use Collections.MutableList;
    use Collections.LIST;

    use Shim.COUNT;
    use Shim.JOIN;
    use Shim.MAPPER;
            
    class TEST_QUEUE is
        _host_cli: String;
        _target_cli: String;
        _use_installed_compiler: bool;

        _task_queue: TASK_QUEUE;

        _tests: MutableList[TEST];

        progress: int;
        count: int => _tests.count;

        executed_count: int => new COUNT[TEST](_tests, (t: TEST) -> bool => t.has_executed).result;
        pass_count: int => new COUNT[TEST](_tests, (t: TEST) -> bool => t.has_passed).result;
        fail_count: int => new COUNT[TEST](_tests, (t: TEST) -> bool => t.has_failed).result;

        init(host_cli: String, target_cli: String) is
            _host_cli = host_cli;
            _target_cli = target_cli;

            let requested_test_processes = System.Environment.get_environment_variable("TEST_PROCESSES");

            let actual_test_processes: int;


            if requested_test_processes? then
                actual_test_processes = System.Convert.to_int32(num_processes);                
            else

            let cpu_count = System.Environment.processor_count;


            if cpu_count <= 4 then
                
            fi
            

            if num_processes? then
                max_tasks = System.Convert.to_int32(num_processes);
            fi

            _task_queue = new TASK_QUEUE(max_tasks);

            Console.write_line("using " + max_tasks + " processes to run tests");

            _tests = new LIST[TEST]();
        si

        run_queued_tests() -> Iterable[Result] is
            let i = 0;

            for test in _tests do
                let runner = 
                    new RUNNER(
                        _host_cli,
                        _target_cli,
                        _use_installed_compiler, 
                        test
                    );

                let results = _task_queue.queue(runner.get_run());

                report_progress(results);
            od

            let results = _task_queue.drain();

            while results? do
                report_progress(results);
                results = _task_queue.drain();
            od
        si

        report_progress(results: Iterable[Result]) is
            for result in results do
                let p = 100 * progress / count;

                result.progress = p;

                Console.write_line(result);

                progress = progress + 1;            
            od
        si

        try_queue_tests(path: String) is
            let depth = find_depth(path);

            if depth == -1 then
                Console.write_line("testing installed compiler and library for tests in " + path);

                _use_installed_compiler = true;
                depth = 0;
            else
                Console.write_line("testing compiler and library in " + 
                    System.IO3.Path.get_full_path(
                        path + "/" +
                            new System.Text.StringBuilder()
                                .insert(0, "../", depth)
                                .append("ghul.exe")  
                                .to_string()
                        ) + " for tests in " + path
                );

                _use_installed_compiler = false;
            fi
            
            try_queue_tests(path, depth);
        si

        find_depth(path: String) -> int is
            if System.IO3.Path.get_full_path(path + "/..") =~ System.IO3.Path.get_full_path(path) then
                return -1;
            fi

            if Directory.get_files(path, "ghul.exe").count == 1 && Directory.exists(path + "/lib") then
                return 0;
            fi

            let result = find_depth(path + "/..");
           
            if result > 15 then
                Console.write_line("stupid depth");
            fi
            

            if result == -1 || result > 15 then
                return -1;
            fi
            
            return result + 1;
        si

        try_queue_tests(path: String, depth: int) is
            if depth > 30 then
                throw new Exception("oops: path: " + path + " depth: " + depth);
            fi            

            try                
                try_queue_test(path, depth);

                let entries = new LIST[String](Directory.get_directories(path));
                
                entries.sort();

                for entry in entries do
                    // FIXME: appears not to be needed:
                    if entry =~ "." || entry =~ ".." || entry =~ "template" then
                        continue;
                    fi

                    try_queue_tests(entry, depth + 1);
                od
            catch ex: Exception
                Console.write_line("probably not a directory: " + path);
                Console.write_line("caught: " + ex);
            yrt            
        si

        try_queue_test(path: String, depth: int) is
            let flags_path = path + "/ghulflags";

            if !File.exists(flags_path) then
                return;
            fi

            let flags = File.read_all_text(flags_path);
            let source_files = get_source_files(path);
            let is_build_failure_Expected = File.exists(path + "/fail.expected");

            queue_test(
                new TEST(
                    path,
                    source_files,
                    depth,
                    flags,
                    is_build_failure_Expected
                )
            );
        si

        queue_test(test: TEST) is
            _tests.add(test);
        si

        get_source_files(path: String) -> Iterable[String] =>
            new MAPPER[String,String](Directory.get_files(path, "*.ghul"), (path: String) -> String is
                let last_slash_index = path.last_index_of('/');

                if last_slash_index > 0 then
                    return path.substring(last_slash_index + 1);
                fi

                return path;                
            si);        
    si
si
