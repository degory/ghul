namespace Tester is
    use System; 
    use System.Console;
    use System.Text.StringBuilder;
    use System.Text.UTF8Encoding;

    use Collections.Iterable;
    use Collections.List;
    use Collections.MutableList;
    use Collections.LIST;

    use System.IO2.Directory;
    use System.IO2.File;

    class Main is
        entry(arguments: String[]) -> int static is
            @IL.entrypoint()

            Console.output_encoding = new UTF8Encoding();

            let host = get_cli_environment_variable("HOST");
            let target = get_cli_environment_variable("TARGET");

            report_host_and_target(host, target);

            let queue = new TEST_QUEUE(host, target);

            if arguments.count == 0 then
                Console.write_line("usage: ghul-text <test-folder>...");
                return 1;
            fi
            
            for path in arguments do
                if !Directory.exists(path) then
                    Console.write_line("not a directory: " + path);
                    return 1;
                fi
                
                queue.try_queue_tests(path);
            od

            queue.run_queued_tests();

            Console.write_line("" + queue.count + " tests discovered");
            Console.write_line("" + queue.executed_count + " tests enabled");
            Console.write_line("" + queue.pass_count + "/" + queue.executed_count + " tests passed");

            if queue.fail_count == 0 then
                Console.write_line("" + cast char(9989) + " all tests passed " + cast char(9989));
                return 0;
            fi
            
            Console.write_line("" + cast char(10060) + " " + queue.fail_count + " tests failed " + cast char(10060));

            return 1;
        si

        report_host_and_target(host: String, target: String) static is
            Console.write_line("compiler hosted on: " + get_cli_description(host));
            Console.write_line("built tests executed on: " + get_cli_description(target));
        si

        get_cli_description(name: String) -> String static is
            if name =~ "mono" then
                return "Mono";
            elif name =~ "dotnet" then
                return ".NET";
            fi

            throw new Exception("unknown CLI environment: " + name);
        si
                
        get_cli_environment_variable(name: String) -> String static is
            let result = System.Environment.get_environment_variable(name);

            if !result? then
                result = "mono";
            fi

            return result;
        si
    si
si