namespace System.IO3 is
    @IL.stub()
    @IL.name("class [mscorlib]System.IO.Path")
    class Path: System.Object is
        @IL.name("ChangeExtension")
        change_extension(path: System.String, extension: System.String) -> System.String static;

        @IL.name("GetDirectoryName")
        get_directory_name(path: System.String) -> System.String static;

        @IL.name("GetDirectoryName")
        get_directory_name(path: System.ReadOnlySpan[char]) -> System.ReadOnlySpan[char] static;

        @IL.name("GetExtension")
        get_extension(path: System.String) -> System.String static;

        @IL.name("GetExtension")
        get_extension(path: System.ReadOnlySpan[char]) -> System.ReadOnlySpan[char] static;

        @IL.name("GetFileName")
        get_file_name(path: System.String) -> System.String static;

        @IL.name("GetFileName")
        get_file_name(path: System.ReadOnlySpan[char]) -> System.ReadOnlySpan[char] static;

        @IL.name("GetFileNameWithoutExtension")
        get_file_name_without_extension(path: System.String) -> System.String static;

        @IL.name("GetFileNameWithoutExtension")
        get_file_name_without_extension(path: System.ReadOnlySpan[char]) -> System.ReadOnlySpan[char] static;

        @IL.name("GetRandomFileName")
        get_random_file_name() -> System.String static;

        @IL.name("IsPathFullyQualified")
        is_path_fully_qualified(path: System.String) -> bool static;

        @IL.name("IsPathFullyQualified")
        is_path_fully_qualified(path: System.ReadOnlySpan[char]) -> bool static;

        @IL.name("HasExtension")
        has_extension(path: System.String) -> bool static;

        @IL.name("HasExtension")
        has_extension(path: System.ReadOnlySpan[char]) -> bool static;

        @IL.name("Combine")
        combine(path1: System.String, path2: System.String) -> System.String static;

        @IL.name("Combine")
        combine(path1: System.String, path2: System.String, path3: System.String) -> System.String static;

        @IL.name("Combine")
        combine(path1: System.String, path2: System.String, path3: System.String, path4: System.String) -> System.String static;

        @IL.name("Combine")
        combine(paths: System.String[]) -> System.String static;

        @IL.name("Join")
        join(path1: System.ReadOnlySpan[char], path2: System.ReadOnlySpan[char]) -> System.String static;

        @IL.name("Join")
        join(path1: System.ReadOnlySpan[char], path2: System.ReadOnlySpan[char], path3: System.ReadOnlySpan[char]) -> System.String static;

        @IL.name("Join")
        join(path1: System.ReadOnlySpan[char], path2: System.ReadOnlySpan[char], path3: System.ReadOnlySpan[char], path4: System.ReadOnlySpan[char]) -> System.String static;

        @IL.name("Join")
        join(path1: System.String, path2: System.String) -> System.String static;

        @IL.name("Join")
        join(path1: System.String, path2: System.String, path3: System.String) -> System.String static;

        @IL.name("Join")
        join(path1: System.String, path2: System.String, path3: System.String, path4: System.String) -> System.String static;

        @IL.name("Join")
        join(paths: System.String[]) -> System.String static;

        @IL.name("TryJoin")
        try_join(path1: System.ReadOnlySpan[char], path2: System.ReadOnlySpan[char], destination: System.Span[char], chars_written: int ref) -> bool static;

        @IL.name("TryJoin")
        try_join(path1: System.ReadOnlySpan[char], path2: System.ReadOnlySpan[char], path3: System.ReadOnlySpan[char], destination: System.Span[char], chars_written: int ref) -> bool static;

        @IL.name("GetRelativePath")
        get_relative_path(relative_to: System.String, path: System.String) -> System.String static;

        @IL.name("TrimEndingDirectorySeparator")
        trim_ending_directory_separator(path: System.String) -> System.String static;

        @IL.name("TrimEndingDirectorySeparator")
        trim_ending_directory_separator(path: System.ReadOnlySpan[char]) -> System.ReadOnlySpan[char] static;

        @IL.name("EndsInDirectorySeparator")
        ends_in_directory_separator(path: System.ReadOnlySpan[char]) -> bool static;

        @IL.name("EndsInDirectorySeparator")
        ends_in_directory_separator(path: System.String) -> bool static;

        @IL.name("GetInvalidFileNameChars")
        get_invalid_file_name_chars() -> char[] static;

        @IL.name("GetInvalidPathChars")
        get_invalid_path_chars() -> char[] static;

        @IL.name("GetFullPath")
        get_full_path(path: System.String) -> System.String static;

        @IL.name("GetFullPath")
        get_full_path(path: System.String, base_path: System.String) -> System.String static;

        @IL.name("GetTempPath")
        get_temp_path() -> System.String static;

        @IL.name("GetTempFileName")
        get_temp_file_name() -> System.String static;

        @IL.name("IsPathRooted")
        is_path_rooted(path: System.String) -> bool static;

        @IL.name("IsPathRooted")
        is_path_rooted(path: System.ReadOnlySpan[char]) -> bool static;

        @IL.name("GetPathRoot")
        get_path_root(path: System.String) -> System.String static;

        @IL.name("GetPathRoot")
        get_path_root(path: System.ReadOnlySpan[char]) -> System.ReadOnlySpan[char] static;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("DirectorySeparatorChar")
        _directory_separator_char: char public;
        @IL.name("AltDirectorySeparatorChar")
        _alt_directory_separator_char: char public;
        @IL.name("VolumeSeparatorChar")
        _volume_separator_char: char public;
        @IL.name("PathSeparator")
        _path_separator: char public;
        @IL.name("InvalidPathChars")
        _invalid_path_chars: char[] public;
    si


si
