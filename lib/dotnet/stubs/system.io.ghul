namespace System.IO2 is
    @IL.stub()
    @IL.name("class [mscorlib]System.IO.Stream")
    class Stream: System.MarshalByRefObject,System.IDisposable,System.IAsyncDisposable is
        @IL.name("CopyToAsync")
        copy_to_async(destination: System.IO2.Stream) -> System.Threading.Tasks.Task_0;

        @IL.name("CopyToAsync")
        copy_to_async(destination: System.IO2.Stream, buffer_size: int) -> System.Threading.Tasks.Task_0;

        @IL.name("CopyToAsync")
        copy_to_async(destination: System.IO2.Stream, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("CopyToAsync")
        copy_to_async(destination: System.IO2.Stream, buffer_size: int, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("CopyTo")
        copy_to(destination: System.IO2.Stream);

        @IL.name("CopyTo")
        copy_to(destination: System.IO2.Stream, buffer_size: int);

        @IL.name("Close")
        close();

        @IL.name("Dispose")
        dispose();

        @IL.name("DisposeAsync")
        dispose_async() -> System.Threading.Tasks.ValueTask_0;

        @IL.name("Flush")
        flush();

        @IL.name("FlushAsync")
        flush_async() -> System.Threading.Tasks.Task_0;

        @IL.name("FlushAsync")
        flush_async(cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("BeginRead")
        begin_read(buffer: ubyte[], offset: int, count: int, callback: System.AsyncCallback, state: System.Object) -> System.IAsyncResult;

        @IL.name("EndRead")
        end_read(async_result: System.IAsyncResult) -> int;

        @IL.name("ReadAsync")
        read_async(buffer: ubyte[], offset: int, count: int) -> System.Threading.Tasks.Task[int];

        @IL.name("ReadAsync")
        read_async(buffer: ubyte[], offset: int, count: int, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task[int];

        @IL.name("ReadAsync")
        read_async(buffer: System.Memory[ubyte], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.ValueTask[int];

        @IL.name("BeginWrite")
        begin_write(buffer: ubyte[], offset: int, count: int, callback: System.AsyncCallback, state: System.Object) -> System.IAsyncResult;

        @IL.name("EndWrite")
        end_write(async_result: System.IAsyncResult);

        @IL.name("WriteAsync")
        write_async(buffer: ubyte[], offset: int, count: int) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteAsync")
        write_async(buffer: ubyte[], offset: int, count: int, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteAsync")
        write_async(buffer: System.ReadOnlyMemory[ubyte], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.ValueTask_0;

        @IL.name("Seek")
        seek(offset: long, origin: System.IO2.SeekOrigin) -> long;

        @IL.name("SetLength")
        set_length(value: long);

        @IL.name("Read")
        read(buffer: ubyte[], offset: int, count: int) -> int;

        @IL.name("Read")
        read(buffer: System.Span[ubyte]) -> int;

        @IL.name("ReadByte")
        read_byte() -> int;

        @IL.name("Write")
        write(buffer: ubyte[], offset: int, count: int);

        @IL.name("Write")
        write(buffer: System.ReadOnlySpan[ubyte]);

        @IL.name("WriteByte")
        write_byte(value: ubyte);

        @IL.name("Synchronized")
        synchronized(stream: System.IO2.Stream) -> System.IO2.Stream static;

        @IL.name("GetLifetimeService")
        get_lifetime_service() -> System.Object;

        @IL.name("InitializeLifetimeService")
        initialize_lifetime_service() -> System.Object;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name.read("get_CanRead") 
        can_read: bool;

        @IL.name.read("get_CanSeek") 
        can_seek: bool;

        @IL.name.read("get_CanTimeout") 
        can_timeout: bool;

        @IL.name.read("get_CanWrite") 
        can_write: bool;

        @IL.name.read("get_Length") 
        length: long;

        @IL.name.read("get_Position") @IL.name.assign("set_Position") 
        position: long;

        @IL.name.read("get_ReadTimeout") @IL.name.assign("set_ReadTimeout") 
        read_timeout: int;

        @IL.name.read("get_WriteTimeout") @IL.name.assign("set_WriteTimeout") 
        write_timeout: int;

        @IL.name("Null")
        _null: System.IO2.Stream public;
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IO.TextWriter")
    class TextWriter: System.MarshalByRefObject,System.IDisposable,System.IAsyncDisposable is
        @IL.name("Close")
        close();

        @IL.name("Dispose")
        dispose();

        @IL.name("DisposeAsync")
        dispose_async() -> System.Threading.Tasks.ValueTask_0;

        @IL.name("Flush")
        flush();

        @IL.name("Write")
        write(value: char);

        @IL.name("Write")
        write(buffer: char[]);

        @IL.name("Write")
        write(buffer: char[], index: int, count: int);

        @IL.name("Write")
        write(buffer: System.ReadOnlySpan[char]);

        @IL.name("Write")
        write(value: bool);

        @IL.name("Write")
        write(value: int);

        @IL.name("Write")
        write(value: uint);

        @IL.name("Write")
        write(value: long);

        @IL.name("Write")
        write(value: ulong);

        @IL.name("Write")
        write(value: System.Single);

        @IL.name("Write")
        write(value: System.Double);

        @IL.name("Write")
        write(value: System.Decimal);

        @IL.name("Write")
        write(value: System.String);

        @IL.name("Write")
        write(value: System.Object);

        @IL.name("Write")
        write(value: System.Text.StringBuilder);

        @IL.name("Write")
        write(format: System.String, arg0: System.Object);

        @IL.name("Write")
        write(format: System.String, arg0: System.Object, arg1: System.Object);

        @IL.name("Write")
        write(format: System.String, arg0: System.Object, arg1: System.Object, arg2: System.Object);

        @IL.name("Write")
        write(format: System.String, arg: System.Object[]);

        @IL.name("WriteLine")
        write_line();

        @IL.name("WriteLine")
        write_line(value: char);

        @IL.name("WriteLine")
        write_line(buffer: char[]);

        @IL.name("WriteLine")
        write_line(buffer: char[], index: int, count: int);

        @IL.name("WriteLine")
        write_line(buffer: System.ReadOnlySpan[char]);

        @IL.name("WriteLine")
        write_line(value: bool);

        @IL.name("WriteLine")
        write_line(value: int);

        @IL.name("WriteLine")
        write_line(value: uint);

        @IL.name("WriteLine")
        write_line(value: long);

        @IL.name("WriteLine")
        write_line(value: ulong);

        @IL.name("WriteLine")
        write_line(value: System.Single);

        @IL.name("WriteLine")
        write_line(value: System.Double);

        @IL.name("WriteLine")
        write_line(value: System.Decimal);

        @IL.name("WriteLine")
        write_line(value: System.String);

        @IL.name("WriteLine")
        write_line(value: System.Text.StringBuilder);

        @IL.name("WriteLine")
        write_line(value: System.Object);

        @IL.name("WriteLine")
        write_line(format: System.String, arg0: System.Object);

        @IL.name("WriteLine")
        write_line(format: System.String, arg0: System.Object, arg1: System.Object);

        @IL.name("WriteLine")
        write_line(format: System.String, arg0: System.Object, arg1: System.Object, arg2: System.Object);

        @IL.name("WriteLine")
        write_line(format: System.String, arg: System.Object[]);

        @IL.name("WriteAsync")
        write_async(value: char) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteAsync")
        write_async(value: System.String) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteAsync")
        write_async(value: System.Text.StringBuilder, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteAsync")
        write_async(buffer: char[]) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteAsync")
        write_async(buffer: char[], index: int, count: int) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteAsync")
        write_async(buffer: System.ReadOnlyMemory[char], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteLineAsync")
        write_line_async(value: char) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteLineAsync")
        write_line_async(value: System.String) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteLineAsync")
        write_line_async(value: System.Text.StringBuilder, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteLineAsync")
        write_line_async(buffer: char[]) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteLineAsync")
        write_line_async(buffer: char[], index: int, count: int) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteLineAsync")
        write_line_async(buffer: System.ReadOnlyMemory[char], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteLineAsync")
        write_line_async() -> System.Threading.Tasks.Task_0;

        @IL.name("FlushAsync")
        flush_async() -> System.Threading.Tasks.Task_0;

        @IL.name("Synchronized")
        synchronized(writer: System.IO2.TextWriter) -> System.IO2.TextWriter static;

        @IL.name("GetLifetimeService")
        get_lifetime_service() -> System.Object;

        @IL.name("InitializeLifetimeService")
        initialize_lifetime_service() -> System.Object;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name.read("get_FormatProvider") 
        format_provider: System.IFormatProvider;

        @IL.name.read("get_Encoding") 
        encoding: System.Text.Encoding;

        @IL.name.read("get_NewLine") @IL.name.assign("set_NewLine") 
        new_line: System.String;

        @IL.name("Null")
        _null: System.IO2.TextWriter public;
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IO.TextReader")
    class TextReader: System.MarshalByRefObject,System.IDisposable is
        @IL.name("Close")
        close();

        @IL.name("Dispose")
        dispose();

        @IL.name("Peek")
        peek() -> int;

        @IL.name("Read")
        read() -> int;

        @IL.name("Read")
        read(buffer: char[], index: int, count: int) -> int;

        @IL.name("Read")
        read(buffer: System.Span[char]) -> int;

        @IL.name("ReadToEnd")
        read_to_end() -> System.String;

        @IL.name("ReadBlock")
        read_block(buffer: char[], index: int, count: int) -> int;

        @IL.name("ReadBlock")
        read_block(buffer: System.Span[char]) -> int;

        @IL.name("ReadLine")
        read_line() -> System.String;

        @IL.name("ReadLineAsync")
        read_line_async() -> System.Threading.Tasks.Task[System.String];

        @IL.name("ReadToEndAsync")
        read_to_end_async() -> System.Threading.Tasks.Task[System.String];

        @IL.name("ReadAsync")
        read_async(buffer: char[], index: int, count: int) -> System.Threading.Tasks.Task[int];

        @IL.name("ReadAsync")
        read_async(buffer: System.Memory[char], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.ValueTask[int];

        @IL.name("ReadBlockAsync")
        read_block_async(buffer: char[], index: int, count: int) -> System.Threading.Tasks.Task[int];

        @IL.name("ReadBlockAsync")
        read_block_async(buffer: System.Memory[char], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.ValueTask[int];

        @IL.name("Synchronized")
        synchronized(reader: System.IO2.TextReader) -> System.IO2.TextReader static;

        @IL.name("GetLifetimeService")
        get_lifetime_service() -> System.Object;

        @IL.name("InitializeLifetimeService")
        initialize_lifetime_service() -> System.Object;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("Null")
        _null: System.IO2.TextReader public;
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.IO.SeekOrigin")
    struct SeekOrigin is
        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("HasFlag")
        has_flag(flag: System.Enum) -> bool;

        @IL.name("CompareTo")
        compare_to(target: System.Object) -> int;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("ToString")
        to_string(format: System.String, provider: System.IFormatProvider) -> System.String;

        @IL.name("ToString")
        to_string(format: System.String) -> System.String;

        @IL.name("ToString")
        to_string(provider: System.IFormatProvider) -> System.String;

        @IL.name("GetTypeCode")
        get_type_code() -> System.TypeCode;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("Begin")
        _begin: System.IO2.SeekOrigin public;
        @IL.name("Current")
        _current: System.IO2.SeekOrigin public;
        @IL.name("End")
        _end: System.IO2.SeekOrigin public;
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.IO.FileAccess")
    struct FileAccess is
        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("HasFlag")
        has_flag(flag: System.Enum) -> bool;

        @IL.name("CompareTo")
        compare_to(target: System.Object) -> int;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("ToString")
        to_string(format: System.String, provider: System.IFormatProvider) -> System.String;

        @IL.name("ToString")
        to_string(format: System.String) -> System.String;

        @IL.name("ToString")
        to_string(provider: System.IFormatProvider) -> System.String;

        @IL.name("GetTypeCode")
        get_type_code() -> System.TypeCode;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("Read")
        _read: System.IO2.FileAccess public;
        @IL.name("Write")
        _write: System.IO2.FileAccess public;
        @IL.name("ReadWrite")
        _read_write: System.IO2.FileAccess public;
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.IO.FileShare")
    struct FileShare is
        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("HasFlag")
        has_flag(flag: System.Enum) -> bool;

        @IL.name("CompareTo")
        compare_to(target: System.Object) -> int;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("ToString")
        to_string(format: System.String, provider: System.IFormatProvider) -> System.String;

        @IL.name("ToString")
        to_string(format: System.String) -> System.String;

        @IL.name("ToString")
        to_string(provider: System.IFormatProvider) -> System.String;

        @IL.name("GetTypeCode")
        get_type_code() -> System.TypeCode;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("None")
        _none: System.IO2.FileShare public;
        @IL.name("Read")
        _read: System.IO2.FileShare public;
        @IL.name("Write")
        _write: System.IO2.FileShare public;
        @IL.name("ReadWrite")
        _read_write: System.IO2.FileShare public;
        @IL.name("Delete")
        _delete: System.IO2.FileShare public;
        @IL.name("Inheritable")
        _inheritable: System.IO2.FileShare public;
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IO.File")
    class File: System.Object is
        @IL.name("OpenText")
        open_text(path: System.String) -> StreamReader static;

        @IL.name("CreateText")
        create_text(path: System.String) -> StreamWriter static;

        @IL.name("AppendText")
        append_text(path: System.String) -> StreamWriter static;

        @IL.name("Copy")
        copy(source_file_name: System.String, dest_file_name: System.String) static;

        @IL.name("Copy")
        copy(source_file_name: System.String, dest_file_name: System.String, overwrite: bool) static;

        @IL.name("Create")
        create(path: System.String) -> FileStream static;

        @IL.name("Create")
        create(path: System.String, buffer_size: int) -> FileStream static;

        @IL.name("Create")
        create(path: System.String, buffer_size: int, options: FileOptions) -> FileStream static;

        @IL.name("Delete")
        delete(path: System.String) static;

        @IL.name("Exists")
        exists(path: System.String) -> bool static;

        @IL.name("Open")
        open(path: System.String, mode: FileMode) -> FileStream static;

        @IL.name("Open")
        open(path: System.String, mode: FileMode, access: FileAccess) -> FileStream static;

        @IL.name("Open")
        open(path: System.String, mode: FileMode, access: FileAccess, share: FileShare) -> FileStream static;

        @IL.name("SetCreationTime")
        set_creation_time(path: System.String, creation_time: System.DateTime) static;

        @IL.name("SetCreationTimeUtc")
        set_creation_time_utc(path: System.String, creation_time_utc: System.DateTime) static;

        @IL.name("GetCreationTime")
        get_creation_time(path: System.String) -> System.DateTime static;

        @IL.name("GetCreationTimeUtc")
        get_creation_time_utc(path: System.String) -> System.DateTime static;

        @IL.name("SetLastAccessTime")
        set_last_access_time(path: System.String, last_access_time: System.DateTime) static;

        @IL.name("SetLastAccessTimeUtc")
        set_last_access_time_utc(path: System.String, last_access_time_utc: System.DateTime) static;

        @IL.name("GetLastAccessTime")
        get_last_access_time(path: System.String) -> System.DateTime static;

        @IL.name("GetLastAccessTimeUtc")
        get_last_access_time_utc(path: System.String) -> System.DateTime static;

        @IL.name("SetLastWriteTime")
        set_last_write_time(path: System.String, last_write_time: System.DateTime) static;

        @IL.name("SetLastWriteTimeUtc")
        set_last_write_time_utc(path: System.String, last_write_time_utc: System.DateTime) static;

        @IL.name("GetLastWriteTime")
        get_last_write_time(path: System.String) -> System.DateTime static;

        @IL.name("GetLastWriteTimeUtc")
        get_last_write_time_utc(path: System.String) -> System.DateTime static;

        @IL.name("GetAttributes")
        get_attributes(path: System.String) -> FileAttributes static;

        @IL.name("SetAttributes")
        set_attributes(path: System.String, file_attributes: FileAttributes) static;

        @IL.name("OpenRead")
        open_read(path: System.String) -> FileStream static;

        @IL.name("OpenWrite")
        open_write(path: System.String) -> FileStream static;

        @IL.name("ReadAllText")
        read_all_text(path: System.String) -> System.String static;

        @IL.name("ReadAllText")
        read_all_text(path: System.String, encoding: System.Text.Encoding) -> System.String static;

        @IL.name("WriteAllText")
        write_all_text(path: System.String, contents: System.String) static;

        @IL.name("WriteAllText")
        write_all_text(path: System.String, contents: System.String, encoding: System.Text.Encoding) static;

        @IL.name("ReadAllBytes")
        read_all_bytes(path: System.String) -> ubyte[] static;

        @IL.name("WriteAllBytes")
        write_all_bytes(path: System.String, bytes: ubyte[]) static;

        @IL.name("ReadAllLines")
        read_all_lines(path: System.String) -> System.String[] static;

        @IL.name("ReadAllLines")
        read_all_lines(path: System.String, encoding: System.Text.Encoding) -> System.String[] static;

        @IL.name("ReadLines")
        read_lines(path: System.String) -> Collections.Iterable[System.String] static;

        @IL.name("ReadLines")
        read_lines(path: System.String, encoding: System.Text.Encoding) -> Collections.Iterable[System.String] static;

        @IL.name("WriteAllLines")
        write_all_lines(path: System.String, contents: System.String[]) static;

        @IL.name("WriteAllLines")
        write_all_lines(path: System.String, contents: Collections.Iterable[System.String]) static;

        @IL.name("WriteAllLines")
        write_all_lines(path: System.String, contents: System.String[], encoding: System.Text.Encoding) static;

        @IL.name("WriteAllLines")
        write_all_lines(path: System.String, contents: Collections.Iterable[System.String], encoding: System.Text.Encoding) static;

        @IL.name("AppendAllText")
        append_all_text(path: System.String, contents: System.String) static;

        @IL.name("AppendAllText")
        append_all_text(path: System.String, contents: System.String, encoding: System.Text.Encoding) static;

        @IL.name("AppendAllLines")
        append_all_lines(path: System.String, contents: Collections.Iterable[System.String]) static;

        @IL.name("AppendAllLines")
        append_all_lines(path: System.String, contents: Collections.Iterable[System.String], encoding: System.Text.Encoding) static;

        @IL.name("Replace")
        replace(source_file_name: System.String, destination_file_name: System.String, destination_backup_file_name: System.String) static;

        @IL.name("Replace")
        replace(source_file_name: System.String, destination_file_name: System.String, destination_backup_file_name: System.String, ignore_metadata_errors: bool) static;

        @IL.name("Move")
        move(source_file_name: System.String, dest_file_name: System.String) static;

        @IL.name("Move")
        move(source_file_name: System.String, dest_file_name: System.String, overwrite: bool) static;

        @IL.name("Encrypt")
        encrypt(path: System.String) static;

        @IL.name("Decrypt")
        decrypt(path: System.String) static;

        @IL.name("ReadAllTextAsync")
        read_all_text_async(path: System.String, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task[System.String] static;

        @IL.name("ReadAllTextAsync")
        read_all_text_async(path: System.String, encoding: System.Text.Encoding, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task[System.String] static;

        @IL.name("WriteAllTextAsync")
        write_all_text_async(path: System.String, contents: System.String, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0 static;

        @IL.name("WriteAllTextAsync")
        write_all_text_async(path: System.String, contents: System.String, encoding: System.Text.Encoding, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0 static;

        @IL.name("ReadAllBytesAsync")
        read_all_bytes_async(path: System.String, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task[ubyte[]] static;

        @IL.name("WriteAllBytesAsync")
        write_all_bytes_async(path: System.String, bytes: ubyte[], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0 static;

        @IL.name("ReadAllLinesAsync")
        read_all_lines_async(path: System.String, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task[System.String[]] static;

        @IL.name("ReadAllLinesAsync")
        read_all_lines_async(path: System.String, encoding: System.Text.Encoding, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task[System.String[]] static;

        @IL.name("WriteAllLinesAsync")
        write_all_lines_async(path: System.String, contents: Collections.Iterable[System.String], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0 static;

        @IL.name("WriteAllLinesAsync")
        write_all_lines_async(path: System.String, contents: Collections.Iterable[System.String], encoding: System.Text.Encoding, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0 static;

        @IL.name("AppendAllTextAsync")
        append_all_text_async(path: System.String, contents: System.String, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0 static;

        @IL.name("AppendAllTextAsync")
        append_all_text_async(path: System.String, contents: System.String, encoding: System.Text.Encoding, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0 static;

        @IL.name("AppendAllLinesAsync")
        append_all_lines_async(path: System.String, contents: Collections.Iterable[System.String], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0 static;

        @IL.name("AppendAllLinesAsync")
        append_all_lines_async(path: System.String, contents: Collections.Iterable[System.String], encoding: System.Text.Encoding, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0 static;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IO.FileStream")
    class FileStream: System.IO2.Stream,System.IDisposable,System.IAsyncDisposable is
        @IL.name("Lock")
        lock(position: long, length: long);

        @IL.name("Unlock")
        unlock(position: long, length: long);

        @IL.name("FlushAsync")
        flush_async(cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("Read")
        read(array: ubyte[], offset: int, count: int) -> int;

        @IL.name("Read")
        read(buffer: System.Span[ubyte]) -> int;

        @IL.name("ReadAsync")
        read_async(buffer: ubyte[], offset: int, count: int, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task[int];

        @IL.name("ReadAsync")
        read_async(buffer: System.Memory[ubyte], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.ValueTask[int];

        @IL.name("Write")
        write(array: ubyte[], offset: int, count: int);

        @IL.name("Write")
        write(buffer: System.ReadOnlySpan[ubyte]);

        @IL.name("WriteAsync")
        write_async(buffer: ubyte[], offset: int, count: int, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteAsync")
        write_async(buffer: System.ReadOnlyMemory[ubyte], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.ValueTask_0;

        @IL.name("Flush")
        flush();

        @IL.name("Flush")
        flush(flush_to_disk: bool);

        @IL.name("SetLength")
        set_length(value: long);

        @IL.name("ReadByte")
        read_byte() -> int;

        @IL.name("WriteByte")
        write_byte(value: ubyte);

        @IL.name("BeginRead")
        begin_read(array: ubyte[], offset: int, num_bytes: int, callback: System.AsyncCallback, state: System.Object) -> System.IAsyncResult;

        @IL.name("BeginWrite")
        begin_write(array: ubyte[], offset: int, num_bytes: int, callback: System.AsyncCallback, state: System.Object) -> System.IAsyncResult;

        @IL.name("EndRead")
        end_read(async_result: System.IAsyncResult) -> int;

        @IL.name("EndWrite")
        end_write(async_result: System.IAsyncResult);

        @IL.name("DisposeAsync")
        dispose_async() -> System.Threading.Tasks.ValueTask_0;

        @IL.name("CopyToAsync")
        copy_to_async(destination: System.IO2.Stream, buffer_size: int, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("Seek")
        seek(offset: long, origin: System.IO2.SeekOrigin) -> long;

        @IL.name("CopyToAsync")
        copy_to_async(destination: System.IO2.Stream) -> System.Threading.Tasks.Task_0;

        @IL.name("CopyToAsync")
        copy_to_async(destination: System.IO2.Stream, buffer_size: int) -> System.Threading.Tasks.Task_0;

        @IL.name("CopyToAsync")
        copy_to_async(destination: System.IO2.Stream, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("CopyTo")
        copy_to(destination: System.IO2.Stream);

        @IL.name("CopyTo")
        copy_to(destination: System.IO2.Stream, buffer_size: int);

        @IL.name("Close")
        close();

        @IL.name("Dispose")
        dispose();

        @IL.name("FlushAsync")
        flush_async() -> System.Threading.Tasks.Task_0;

        @IL.name("ReadAsync")
        read_async(buffer: ubyte[], offset: int, count: int) -> System.Threading.Tasks.Task[int];

        @IL.name("WriteAsync")
        write_async(buffer: ubyte[], offset: int, count: int) -> System.Threading.Tasks.Task_0;

        @IL.name("GetLifetimeService")
        get_lifetime_service() -> System.Object;

        @IL.name("InitializeLifetimeService")
        initialize_lifetime_service() -> System.Object;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name(".ctor")
        init(handle: word, access: System.IO2.FileAccess);
        @IL.name(".ctor")
        init(handle: word, access: System.IO2.FileAccess, owns_handle: bool);
        @IL.name(".ctor")
        init(handle: word, access: System.IO2.FileAccess, owns_handle: bool, buffer_size: int);
        @IL.name(".ctor")
        init(handle: word, access: System.IO2.FileAccess, owns_handle: bool, buffer_size: int, is_async: bool);
        @IL.name(".ctor")
        init(handle: Microsoft.Win32.SafeHandles.SafeFileHandle, access: System.IO2.FileAccess);
        @IL.name(".ctor")
        init(handle: Microsoft.Win32.SafeHandles.SafeFileHandle, access: System.IO2.FileAccess, buffer_size: int);
        @IL.name(".ctor")
        init(handle: Microsoft.Win32.SafeHandles.SafeFileHandle, access: System.IO2.FileAccess, buffer_size: int, is_async: bool);
        @IL.name(".ctor")
        init(path: System.String, mode: System.IO2.FileMode);
        @IL.name(".ctor")
        init(path: System.String, mode: System.IO2.FileMode, access: System.IO2.FileAccess);
        @IL.name(".ctor")
        init(path: System.String, mode: System.IO2.FileMode, access: System.IO2.FileAccess, share: System.IO2.FileShare);
        @IL.name(".ctor")
        init(path: System.String, mode: System.IO2.FileMode, access: System.IO2.FileAccess, share: System.IO2.FileShare, buffer_size: int);
        @IL.name(".ctor")
        init(path: System.String, mode: System.IO2.FileMode, access: System.IO2.FileAccess, share: System.IO2.FileShare, buffer_size: int, use_async: bool);
        @IL.name(".ctor")
        init(path: System.String, mode: System.IO2.FileMode, access: System.IO2.FileAccess, share: System.IO2.FileShare, buffer_size: int, options: System.IO2.FileOptions);
        @IL.name.read("get_Handle") 
        handle: word;

        @IL.name.read("get_CanRead") 
        can_read: bool;

        @IL.name.read("get_CanWrite") 
        can_write: bool;

        @IL.name.read("get_SafeFileHandle") 
        safe_file_handle: Microsoft.Win32.SafeHandles.SafeFileHandle;

        @IL.name.read("get_Name") 
        name: System.String;

        @IL.name.read("get_IsAsync") 
        is_async: bool;

        @IL.name.read("get_Length") 
        length: long;

        @IL.name.read("get_Position") @IL.name.assign("set_Position") 
        position: long;

        @IL.name.read("get_CanSeek") 
        can_seek: bool;

        @IL.name.read("get_CanTimeout") 
        can_timeout: bool;

        @IL.name.read("get_ReadTimeout") @IL.name.assign("set_ReadTimeout") 
        read_timeout: int;

        @IL.name.read("get_WriteTimeout") @IL.name.assign("set_WriteTimeout") 
        write_timeout: int;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IO.StreamReader")
    class StreamReader: TextReader,System.IDisposable is
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IO.StreamWriter")
    class StreamWriter: TextWriter,System.IDisposable,System.IAsyncDisposable is
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.IO.FileMode")
    struct FileMode is
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.IO.FileOptions")
    struct FileOptions is
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.IO.FileAttributes")
    struct FileAttributes is
    si
si
