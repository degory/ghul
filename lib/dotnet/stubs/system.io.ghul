namespace System.IO2 is
    @IL.stub()
    @IL.name("class [mscorlib]System.IO.Stream")
    class Stream: System.MarshalByRefObject,System.IDisposable,System.IAsyncDisposable is
        @IL.name("CopyToAsync")
        copy_to_async(destination: System.IO2.Stream) -> System.Threading.Tasks.Task_0;

        @IL.name("CopyToAsync")
        copy_to_async(destination: System.IO2.Stream, buffer_size: int) -> System.Threading.Tasks.Task_0;

        @IL.name("CopyToAsync")
        copy_to_async(destination: System.IO2.Stream, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("CopyToAsync")
        copy_to_async(destination: System.IO2.Stream, buffer_size: int, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("CopyTo")
        copy_to(destination: System.IO2.Stream);

        @IL.name("CopyTo")
        copy_to(destination: System.IO2.Stream, buffer_size: int);

        @IL.name("Close")
        close();

        @IL.name("Dispose")
        dispose();

        @IL.name("DisposeAsync")
        dispose_async() -> System.Threading.Tasks.ValueTask_0;

        @IL.name("Flush")
        flush();

        @IL.name("FlushAsync")
        flush_async() -> System.Threading.Tasks.Task_0;

        @IL.name("FlushAsync")
        flush_async(cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("BeginRead")
        begin_read(buffer: ubyte[], offset: int, count: int, callback: System.AsyncCallback, state: System.Object) -> System.IAsyncResult;

        @IL.name("EndRead")
        end_read(async_result: System.IAsyncResult) -> int;

        @IL.name("ReadAsync")
        read_async(buffer: ubyte[], offset: int, count: int) -> System.Threading.Tasks.Task[int];

        @IL.name("ReadAsync")
        read_async(buffer: ubyte[], offset: int, count: int, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task[int];

        @IL.name("ReadAsync")
        read_async(buffer: System.Memory[ubyte], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.ValueTask[int];

        @IL.name("BeginWrite")
        begin_write(buffer: ubyte[], offset: int, count: int, callback: System.AsyncCallback, state: System.Object) -> System.IAsyncResult;

        @IL.name("EndWrite")
        end_write(async_result: System.IAsyncResult);

        @IL.name("WriteAsync")
        write_async(buffer: ubyte[], offset: int, count: int) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteAsync")
        write_async(buffer: ubyte[], offset: int, count: int, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteAsync")
        write_async(buffer: System.ReadOnlyMemory[ubyte], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.ValueTask_0;

        @IL.name("Seek")
        seek(offset: long, origin: System.IO2.SeekOrigin) -> long;

        @IL.name("SetLength")
        set_length(value: long);

        @IL.name("Read")
        read(buffer: ubyte[], offset: int, count: int) -> int;

        @IL.name("Read")
        read(buffer: System.Span[ubyte]) -> int;

        @IL.name("ReadByte")
        read_byte() -> int;

        @IL.name("Write")
        write(buffer: ubyte[], offset: int, count: int);

        @IL.name("Write")
        write(buffer: System.ReadOnlySpan[ubyte]);

        @IL.name("WriteByte")
        write_byte(value: ubyte);

        @IL.name("Synchronized")
        synchronized(stream: System.IO2.Stream) -> System.IO2.Stream static;

        @IL.name("GetLifetimeService")
        get_lifetime_service() -> System.Object;

        @IL.name("InitializeLifetimeService")
        initialize_lifetime_service() -> System.Object;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name.read("get_CanRead") 
        can_read: bool;

        @IL.name.read("get_CanSeek") 
        can_seek: bool;

        @IL.name.read("get_CanTimeout") 
        can_timeout: bool;

        @IL.name.read("get_CanWrite") 
        can_write: bool;

        @IL.name.read("get_Length") 
        length: long;

        @IL.name.read("get_Position") @IL.name.assign("set_Position") 
        position: long;

        @IL.name.read("get_ReadTimeout") @IL.name.assign("set_ReadTimeout") 
        read_timeout: int;

        @IL.name.read("get_WriteTimeout") @IL.name.assign("set_WriteTimeout") 
        write_timeout: int;

        @IL.name("Null")
        _null: System.IO2.Stream public;
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IO.TextWriter")
    class TextWriter: System.MarshalByRefObject,System.IDisposable,System.IAsyncDisposable is
        @IL.name("Close")
        close();

        @IL.name("Dispose")
        dispose();

        @IL.name("DisposeAsync")
        dispose_async() -> System.Threading.Tasks.ValueTask_0;

        @IL.name("Flush")
        flush();

        @IL.name("Write")
        write(value: char);

        @IL.name("Write")
        write(buffer: char[]);

        @IL.name("Write")
        write(buffer: char[], index: int, count: int);

        @IL.name("Write")
        write(buffer: System.ReadOnlySpan[char]);

        @IL.name("Write")
        write(value: bool);

        @IL.name("Write")
        write(value: int);

        @IL.name("Write")
        write(value: uint);

        @IL.name("Write")
        write(value: long);

        @IL.name("Write")
        write(value: ulong);

        @IL.name("Write")
        write(value: single);

        @IL.name("Write")
        write(value: double);

        @IL.name("Write")
        write(value: System.Decimal);

        @IL.name("Write")
        write(value: System.String);

        @IL.name("Write")
        write(value: System.Object);

        @IL.name("Write")
        write(value: System.Text.StringBuilder);

        @IL.name("Write")
        write(format: System.String, arg0: System.Object);

        @IL.name("Write")
        write(format: System.String, arg0: System.Object, arg1: System.Object);

        @IL.name("Write")
        write(format: System.String, arg0: System.Object, arg1: System.Object, arg2: System.Object);

        @IL.name("Write")
        write(format: System.String, arg: System.Object[]);

        @IL.name("WriteLine")
        write_line();

        @IL.name("WriteLine")
        write_line(value: char);

        @IL.name("WriteLine")
        write_line(buffer: char[]);

        @IL.name("WriteLine")
        write_line(buffer: char[], index: int, count: int);

        @IL.name("WriteLine")
        write_line(buffer: System.ReadOnlySpan[char]);

        @IL.name("WriteLine")
        write_line(value: bool);

        @IL.name("WriteLine")
        write_line(value: int);

        @IL.name("WriteLine")
        write_line(value: uint);

        @IL.name("WriteLine")
        write_line(value: long);

        @IL.name("WriteLine")
        write_line(value: ulong);

        @IL.name("WriteLine")
        write_line(value: single);

        @IL.name("WriteLine")
        write_line(value: double);

        @IL.name("WriteLine")
        write_line(value: System.Decimal);

        @IL.name("WriteLine")
        write_line(value: System.String);

        @IL.name("WriteLine")
        write_line(value: System.Text.StringBuilder);

        @IL.name("WriteLine")
        write_line(value: System.Object);

        @IL.name("WriteLine")
        write_line(format: System.String, arg0: System.Object);

        @IL.name("WriteLine")
        write_line(format: System.String, arg0: System.Object, arg1: System.Object);

        @IL.name("WriteLine")
        write_line(format: System.String, arg0: System.Object, arg1: System.Object, arg2: System.Object);

        @IL.name("WriteLine")
        write_line(format: System.String, arg: System.Object[]);

        @IL.name("WriteAsync")
        write_async(value: char) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteAsync")
        write_async(value: System.String) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteAsync")
        write_async(value: System.Text.StringBuilder, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteAsync")
        write_async(buffer: char[]) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteAsync")
        write_async(buffer: char[], index: int, count: int) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteAsync")
        write_async(buffer: System.ReadOnlyMemory[char], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteLineAsync")
        write_line_async(value: char) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteLineAsync")
        write_line_async(value: System.String) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteLineAsync")
        write_line_async(value: System.Text.StringBuilder, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteLineAsync")
        write_line_async(buffer: char[]) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteLineAsync")
        write_line_async(buffer: char[], index: int, count: int) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteLineAsync")
        write_line_async(buffer: System.ReadOnlyMemory[char], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteLineAsync")
        write_line_async() -> System.Threading.Tasks.Task_0;

        @IL.name("FlushAsync")
        flush_async() -> System.Threading.Tasks.Task_0;

        @IL.name("Synchronized")
        synchronized(writer: System.IO2.TextWriter) -> System.IO2.TextWriter static;

        @IL.name("GetLifetimeService")
        get_lifetime_service() -> System.Object;

        @IL.name("InitializeLifetimeService")
        initialize_lifetime_service() -> System.Object;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name.read("get_FormatProvider") 
        format_provider: System.IFormatProvider;

        @IL.name.read("get_Encoding") 
        encoding: System.Text.Encoding;

        @IL.name.read("get_NewLine") @IL.name.assign("set_NewLine") 
        new_line: System.String;

        @IL.name("Null")
        _null: System.IO2.TextWriter public;
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IO.TextReader")
    class TextReader: System.MarshalByRefObject,System.IDisposable is
        @IL.name("Close")
        close();

        @IL.name("Dispose")
        dispose();

        @IL.name("Peek")
        peek() -> int;

        @IL.name("Read")
        read() -> int;

        @IL.name("Read")
        read(buffer: char[], index: int, count: int) -> int;

        @IL.name("Read")
        read(buffer: System.Span[char]) -> int;

        @IL.name("ReadToEnd")
        read_to_end() -> System.String;

        @IL.name("ReadBlock")
        read_block(buffer: char[], index: int, count: int) -> int;

        @IL.name("ReadBlock")
        read_block(buffer: System.Span[char]) -> int;

        @IL.name("ReadLine")
        read_line() -> System.String;

        @IL.name("ReadLineAsync")
        read_line_async() -> System.Threading.Tasks.Task[System.String];

        @IL.name("ReadToEndAsync")
        read_to_end_async() -> System.Threading.Tasks.Task[System.String];

        @IL.name("ReadAsync")
        read_async(buffer: char[], index: int, count: int) -> System.Threading.Tasks.Task[int];

        @IL.name("ReadAsync")
        read_async(buffer: System.Memory[char], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.ValueTask[int];

        @IL.name("ReadBlockAsync")
        read_block_async(buffer: char[], index: int, count: int) -> System.Threading.Tasks.Task[int];

        @IL.name("ReadBlockAsync")
        read_block_async(buffer: System.Memory[char], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.ValueTask[int];

        @IL.name("Synchronized")
        synchronized(reader: System.IO2.TextReader) -> System.IO2.TextReader static;

        @IL.name("GetLifetimeService")
        get_lifetime_service() -> System.Object;

        @IL.name("InitializeLifetimeService")
        initialize_lifetime_service() -> System.Object;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("Null")
        _null: System.IO2.TextReader public;
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IO.StreamWriter")
    class StreamWriter: System.IO2.TextWriter,System.IDisposable,System.IAsyncDisposable is
        @IL.name("Close")
        close();

        @IL.name("DisposeAsync")
        dispose_async() -> System.Threading.Tasks.ValueTask_0;

        @IL.name("Flush")
        flush();

        @IL.name("Write")
        write(value: char);

        @IL.name("Write")
        write(buffer: char[]);

        @IL.name("Write")
        write(buffer: char[], index: int, count: int);

        @IL.name("Write")
        write(buffer: System.ReadOnlySpan[char]);

        @IL.name("Write")
        write(value: System.String);

        @IL.name("WriteLine")
        write_line(value: System.String);

        @IL.name("WriteLine")
        write_line(value: System.ReadOnlySpan[char]);

        @IL.name("Write")
        write(format: System.String, arg0: System.Object);

        @IL.name("Write")
        write(format: System.String, arg0: System.Object, arg1: System.Object);

        @IL.name("Write")
        write(format: System.String, arg0: System.Object, arg1: System.Object, arg2: System.Object);

        @IL.name("Write")
        write(format: System.String, arg: System.Object[]);

        @IL.name("WriteLine")
        write_line(format: System.String, arg0: System.Object);

        @IL.name("WriteLine")
        write_line(format: System.String, arg0: System.Object, arg1: System.Object);

        @IL.name("WriteLine")
        write_line(format: System.String, arg0: System.Object, arg1: System.Object, arg2: System.Object);

        @IL.name("WriteLine")
        write_line(format: System.String, arg: System.Object[]);

        @IL.name("WriteAsync")
        write_async(value: char) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteAsync")
        write_async(value: System.String) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteAsync")
        write_async(buffer: char[], index: int, count: int) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteAsync")
        write_async(buffer: System.ReadOnlyMemory[char], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteLineAsync")
        write_line_async() -> System.Threading.Tasks.Task_0;

        @IL.name("WriteLineAsync")
        write_line_async(value: char) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteLineAsync")
        write_line_async(value: System.String) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteLineAsync")
        write_line_async(buffer: char[], index: int, count: int) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteLineAsync")
        write_line_async(buffer: System.ReadOnlyMemory[char], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("FlushAsync")
        flush_async() -> System.Threading.Tasks.Task_0;

        @IL.name("Dispose")
        dispose();

        @IL.name("Write")
        write(value: bool);

        @IL.name("Write")
        write(value: int);

        @IL.name("Write")
        write(value: uint);

        @IL.name("Write")
        write(value: long);

        @IL.name("Write")
        write(value: ulong);

        @IL.name("Write")
        write(value: single);

        @IL.name("Write")
        write(value: double);

        @IL.name("Write")
        write(value: System.Decimal);

        @IL.name("Write")
        write(value: System.Object);

        @IL.name("Write")
        write(value: System.Text.StringBuilder);

        @IL.name("WriteLine")
        write_line();

        @IL.name("WriteLine")
        write_line(value: char);

        @IL.name("WriteLine")
        write_line(buffer: char[]);

        @IL.name("WriteLine")
        write_line(buffer: char[], index: int, count: int);

        @IL.name("WriteLine")
        write_line(value: bool);

        @IL.name("WriteLine")
        write_line(value: int);

        @IL.name("WriteLine")
        write_line(value: uint);

        @IL.name("WriteLine")
        write_line(value: long);

        @IL.name("WriteLine")
        write_line(value: ulong);

        @IL.name("WriteLine")
        write_line(value: single);

        @IL.name("WriteLine")
        write_line(value: double);

        @IL.name("WriteLine")
        write_line(value: System.Decimal);

        @IL.name("WriteLine")
        write_line(value: System.Text.StringBuilder);

        @IL.name("WriteLine")
        write_line(value: System.Object);

        @IL.name("WriteAsync")
        write_async(value: System.Text.StringBuilder, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteAsync")
        write_async(buffer: char[]) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteLineAsync")
        write_line_async(value: System.Text.StringBuilder, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteLineAsync")
        write_line_async(buffer: char[]) -> System.Threading.Tasks.Task_0;

        @IL.name("GetLifetimeService")
        get_lifetime_service() -> System.Object;

        @IL.name("InitializeLifetimeService")
        initialize_lifetime_service() -> System.Object;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name(".ctor")
        init(stream: System.IO2.Stream);
        @IL.name(".ctor")
        init(stream: System.IO2.Stream, encoding: System.Text.Encoding);
        @IL.name(".ctor")
        init(stream: System.IO2.Stream, encoding: System.Text.Encoding, buffer_size: int);
        @IL.name(".ctor")
        init(stream: System.IO2.Stream, encoding: System.Text.Encoding, buffer_size: int, leave_open: bool);
        @IL.name(".ctor")
        init(path: System.String);
        @IL.name(".ctor")
        init(path: System.String, append: bool);
        @IL.name(".ctor")
        init(path: System.String, append: bool, encoding: System.Text.Encoding);
        @IL.name(".ctor")
        init(path: System.String, append: bool, encoding: System.Text.Encoding, buffer_size: int);
        @IL.name.read("get_AutoFlush") @IL.name.assign("set_AutoFlush") 
        auto_flush: bool;

        @IL.name.read("get_BaseStream") 
        base_stream: System.IO2.Stream;

        @IL.name.read("get_Encoding") 
        encoding: System.Text.Encoding;

        @IL.name.read("get_FormatProvider") 
        format_provider: System.IFormatProvider;

        @IL.name.read("get_NewLine") @IL.name.assign("set_NewLine") 
        new_line: System.String;

        @IL.name("Null")
        _null: System.IO2.StreamWriter public;
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IO.StreamReader")
    class StreamReader: System.IO2.TextReader,System.IDisposable is
        @IL.name("Close")
        close();

        @IL.name("DiscardBufferedData")
        discard_buffered_data();

        @IL.name("Peek")
        peek() -> int;

        @IL.name("Read")
        read() -> int;

        @IL.name("Read")
        read(buffer: char[], index: int, count: int) -> int;

        @IL.name("Read")
        read(buffer: System.Span[char]) -> int;

        @IL.name("ReadToEnd")
        read_to_end() -> System.String;

        @IL.name("ReadBlock")
        read_block(buffer: char[], index: int, count: int) -> int;

        @IL.name("ReadBlock")
        read_block(buffer: System.Span[char]) -> int;

        @IL.name("ReadLine")
        read_line() -> System.String;

        @IL.name("ReadLineAsync")
        read_line_async() -> System.Threading.Tasks.Task[System.String];

        @IL.name("ReadToEndAsync")
        read_to_end_async() -> System.Threading.Tasks.Task[System.String];

        @IL.name("ReadAsync")
        read_async(buffer: char[], index: int, count: int) -> System.Threading.Tasks.Task[int];

        @IL.name("ReadAsync")
        read_async(buffer: System.Memory[char], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.ValueTask[int];

        @IL.name("ReadBlockAsync")
        read_block_async(buffer: char[], index: int, count: int) -> System.Threading.Tasks.Task[int];

        @IL.name("ReadBlockAsync")
        read_block_async(buffer: System.Memory[char], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.ValueTask[int];

        @IL.name("Dispose")
        dispose();

        @IL.name("GetLifetimeService")
        get_lifetime_service() -> System.Object;

        @IL.name("InitializeLifetimeService")
        initialize_lifetime_service() -> System.Object;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name(".ctor")
        init(stream: System.IO2.Stream);
        @IL.name(".ctor")
        init(stream: System.IO2.Stream, detect_encoding_from_byte_order_marks: bool);
        @IL.name(".ctor")
        init(stream: System.IO2.Stream, encoding: System.Text.Encoding);
        @IL.name(".ctor")
        init(stream: System.IO2.Stream, encoding: System.Text.Encoding, detect_encoding_from_byte_order_marks: bool);
        @IL.name(".ctor")
        init(stream: System.IO2.Stream, encoding: System.Text.Encoding, detect_encoding_from_byte_order_marks: bool, buffer_size: int);
        @IL.name(".ctor")
        init(stream: System.IO2.Stream, encoding: System.Text.Encoding, detect_encoding_from_byte_order_marks: bool, buffer_size: int, leave_open: bool);
        @IL.name(".ctor")
        init(path: System.String);
        @IL.name(".ctor")
        init(path: System.String, detect_encoding_from_byte_order_marks: bool);
        @IL.name(".ctor")
        init(path: System.String, encoding: System.Text.Encoding);
        @IL.name(".ctor")
        init(path: System.String, encoding: System.Text.Encoding, detect_encoding_from_byte_order_marks: bool);
        @IL.name(".ctor")
        init(path: System.String, encoding: System.Text.Encoding, detect_encoding_from_byte_order_marks: bool, buffer_size: int);
        @IL.name.read("get_CurrentEncoding") 
        current_encoding: System.Text.Encoding;

        @IL.name.read("get_BaseStream") 
        base_stream: System.IO2.Stream;

        @IL.name.read("get_EndOfStream") 
        end_of_stream: bool;

        @IL.name("Null")
        _null: System.IO2.StreamReader public;
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IO.FileStream")
    class FileStream: System.IO2.Stream,System.IDisposable,System.IAsyncDisposable is
        @IL.name("Lock")
        lock(position: long, length: long);

        @IL.name("Unlock")
        unlock(position: long, length: long);

        @IL.name("FlushAsync")
        flush_async(cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("Read")
        read(array: ubyte[], offset: int, count: int) -> int;

        @IL.name("Read")
        read(buffer: System.Span[ubyte]) -> int;

        @IL.name("ReadAsync")
        read_async(buffer: ubyte[], offset: int, count: int, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task[int];

        @IL.name("ReadAsync")
        read_async(buffer: System.Memory[ubyte], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.ValueTask[int];

        @IL.name("Write")
        write(array: ubyte[], offset: int, count: int);

        @IL.name("Write")
        write(buffer: System.ReadOnlySpan[ubyte]);

        @IL.name("WriteAsync")
        write_async(buffer: ubyte[], offset: int, count: int, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteAsync")
        write_async(buffer: System.ReadOnlyMemory[ubyte], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.ValueTask_0;

        @IL.name("Flush")
        flush();

        @IL.name("Flush")
        flush(flush_to_disk: bool);

        @IL.name("SetLength")
        set_length(value: long);

        @IL.name("ReadByte")
        read_byte() -> int;

        @IL.name("WriteByte")
        write_byte(value: ubyte);

        @IL.name("BeginRead")
        begin_read(array: ubyte[], offset: int, num_bytes: int, callback: System.AsyncCallback, state: System.Object) -> System.IAsyncResult;

        @IL.name("BeginWrite")
        begin_write(array: ubyte[], offset: int, num_bytes: int, callback: System.AsyncCallback, state: System.Object) -> System.IAsyncResult;

        @IL.name("EndRead")
        end_read(async_result: System.IAsyncResult) -> int;

        @IL.name("EndWrite")
        end_write(async_result: System.IAsyncResult);

        @IL.name("DisposeAsync")
        dispose_async() -> System.Threading.Tasks.ValueTask_0;

        @IL.name("CopyToAsync")
        copy_to_async(destination: System.IO2.Stream, buffer_size: int, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("Seek")
        seek(offset: long, origin: System.IO2.SeekOrigin) -> long;

        @IL.name("CopyToAsync")
        copy_to_async(destination: System.IO2.Stream) -> System.Threading.Tasks.Task_0;

        @IL.name("CopyToAsync")
        copy_to_async(destination: System.IO2.Stream, buffer_size: int) -> System.Threading.Tasks.Task_0;

        @IL.name("CopyToAsync")
        copy_to_async(destination: System.IO2.Stream, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("CopyTo")
        copy_to(destination: System.IO2.Stream);

        @IL.name("CopyTo")
        copy_to(destination: System.IO2.Stream, buffer_size: int);

        @IL.name("Close")
        close();

        @IL.name("Dispose")
        dispose();

        @IL.name("FlushAsync")
        flush_async() -> System.Threading.Tasks.Task_0;

        @IL.name("ReadAsync")
        read_async(buffer: ubyte[], offset: int, count: int) -> System.Threading.Tasks.Task[int];

        @IL.name("WriteAsync")
        write_async(buffer: ubyte[], offset: int, count: int) -> System.Threading.Tasks.Task_0;

        @IL.name("GetLifetimeService")
        get_lifetime_service() -> System.Object;

        @IL.name("InitializeLifetimeService")
        initialize_lifetime_service() -> System.Object;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name(".ctor")
        init(handle: word, access: System.IO2.FileAccess);
        @IL.name(".ctor")
        init(handle: word, access: System.IO2.FileAccess, owns_handle: bool);
        @IL.name(".ctor")
        init(handle: word, access: System.IO2.FileAccess, owns_handle: bool, buffer_size: int);
        @IL.name(".ctor")
        init(handle: word, access: System.IO2.FileAccess, owns_handle: bool, buffer_size: int, is_async: bool);
        @IL.name(".ctor")
        init(handle: Microsoft.Win32.SafeHandles.SafeFileHandle, access: System.IO2.FileAccess);
        @IL.name(".ctor")
        init(handle: Microsoft.Win32.SafeHandles.SafeFileHandle, access: System.IO2.FileAccess, buffer_size: int);
        @IL.name(".ctor")
        init(handle: Microsoft.Win32.SafeHandles.SafeFileHandle, access: System.IO2.FileAccess, buffer_size: int, is_async: bool);
        @IL.name(".ctor")
        init(path: System.String, mode: System.IO2.FileMode);
        @IL.name(".ctor")
        init(path: System.String, mode: System.IO2.FileMode, access: System.IO2.FileAccess);
        @IL.name(".ctor")
        init(path: System.String, mode: System.IO2.FileMode, access: System.IO2.FileAccess, share: System.IO2.FileShare);
        @IL.name(".ctor")
        init(path: System.String, mode: System.IO2.FileMode, access: System.IO2.FileAccess, share: System.IO2.FileShare, buffer_size: int);
        @IL.name(".ctor")
        init(path: System.String, mode: System.IO2.FileMode, access: System.IO2.FileAccess, share: System.IO2.FileShare, buffer_size: int, use_async: bool);
        @IL.name(".ctor")
        init(path: System.String, mode: System.IO2.FileMode, access: System.IO2.FileAccess, share: System.IO2.FileShare, buffer_size: int, options: System.IO2.FileOptions);
        @IL.name.read("get_Handle") 
        handle: word;

        @IL.name.read("get_CanRead") 
        can_read: bool;

        @IL.name.read("get_CanWrite") 
        can_write: bool;

        @IL.name.read("get_SafeFileHandle") 
        safe_file_handle: Microsoft.Win32.SafeHandles.SafeFileHandle;

        @IL.name.read("get_Name") 
        name: System.String;

        @IL.name.read("get_IsAsync") 
        is_async: bool;

        @IL.name.read("get_Length") 
        length: long;

        @IL.name.read("get_Position") @IL.name.assign("set_Position") 
        position: long;

        @IL.name.read("get_CanSeek") 
        can_seek: bool;

        @IL.name.read("get_CanTimeout") 
        can_timeout: bool;

        @IL.name.read("get_ReadTimeout") @IL.name.assign("set_ReadTimeout") 
        read_timeout: int;

        @IL.name.read("get_WriteTimeout") @IL.name.assign("set_WriteTimeout") 
        write_timeout: int;

    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.IO.FileMode")
    struct FileMode is
        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("HasFlag")
        has_flag(flag: System.Enum) -> bool;

        @IL.name("CompareTo")
        compare_to(target: System.Object) -> int;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("ToString")
        to_string(format: System.String, provider: System.IFormatProvider) -> System.String;

        @IL.name("ToString")
        to_string(format: System.String) -> System.String;

        @IL.name("ToString")
        to_string(provider: System.IFormatProvider) -> System.String;

        @IL.name("GetTypeCode")
        get_type_code() -> System.TypeCode;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("CreateNew")
        _create_new: System.IO2.FileMode public;
        @IL.name("Create")
        _create: System.IO2.FileMode public;
        @IL.name("Open")
        _open: System.IO2.FileMode public;
        @IL.name("OpenOrCreate")
        _open_or_create: System.IO2.FileMode public;
        @IL.name("Truncate")
        _truncate: System.IO2.FileMode public;
        @IL.name("Append")
        _append: System.IO2.FileMode public;
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.IO.FileOptions")
    struct FileOptions is
        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("HasFlag")
        has_flag(flag: System.Enum) -> bool;

        @IL.name("CompareTo")
        compare_to(target: System.Object) -> int;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("ToString")
        to_string(format: System.String, provider: System.IFormatProvider) -> System.String;

        @IL.name("ToString")
        to_string(format: System.String) -> System.String;

        @IL.name("ToString")
        to_string(provider: System.IFormatProvider) -> System.String;

        @IL.name("GetTypeCode")
        get_type_code() -> System.TypeCode;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("None")
        _none: System.IO2.FileOptions public;
        @IL.name("WriteThrough")
        _write_through: System.IO2.FileOptions public;
        @IL.name("Asynchronous")
        _asynchronous: System.IO2.FileOptions public;
        @IL.name("RandomAccess")
        _random_access: System.IO2.FileOptions public;
        @IL.name("DeleteOnClose")
        _delete_on_close: System.IO2.FileOptions public;
        @IL.name("SequentialScan")
        _sequential_scan: System.IO2.FileOptions public;
        @IL.name("Encrypted")
        _encrypted: System.IO2.FileOptions public;
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.IO.FileAttributes")
    struct FileAttributes is
        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("HasFlag")
        has_flag(flag: System.Enum) -> bool;

        @IL.name("CompareTo")
        compare_to(target: System.Object) -> int;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("ToString")
        to_string(format: System.String, provider: System.IFormatProvider) -> System.String;

        @IL.name("ToString")
        to_string(format: System.String) -> System.String;

        @IL.name("ToString")
        to_string(provider: System.IFormatProvider) -> System.String;

        @IL.name("GetTypeCode")
        get_type_code() -> System.TypeCode;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("ReadOnly")
        _read_only: System.IO2.FileAttributes public;
        @IL.name("Hidden")
        _hidden: System.IO2.FileAttributes public;
        @IL.name("System")
        _system: System.IO2.FileAttributes public;
        @IL.name("Directory")
        _directory: System.IO2.FileAttributes public;
        @IL.name("Archive")
        _archive: System.IO2.FileAttributes public;
        @IL.name("Device")
        _device: System.IO2.FileAttributes public;
        @IL.name("Normal")
        _normal: System.IO2.FileAttributes public;
        @IL.name("Temporary")
        _temporary: System.IO2.FileAttributes public;
        @IL.name("SparseFile")
        _sparse_file: System.IO2.FileAttributes public;
        @IL.name("ReparsePoint")
        _reparse_point: System.IO2.FileAttributes public;
        @IL.name("Compressed")
        _compressed: System.IO2.FileAttributes public;
        @IL.name("Offline")
        _offline: System.IO2.FileAttributes public;
        @IL.name("NotContentIndexed")
        _not_content_indexed: System.IO2.FileAttributes public;
        @IL.name("Encrypted")
        _encrypted: System.IO2.FileAttributes public;
        @IL.name("IntegrityStream")
        _integrity_stream: System.IO2.FileAttributes public;
        @IL.name("NoScrubData")
        _no_scrub_data: System.IO2.FileAttributes public;
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.IO.SeekOrigin")
    struct SeekOrigin is
        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("HasFlag")
        has_flag(flag: System.Enum) -> bool;

        @IL.name("CompareTo")
        compare_to(target: System.Object) -> int;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("ToString")
        to_string(format: System.String, provider: System.IFormatProvider) -> System.String;

        @IL.name("ToString")
        to_string(format: System.String) -> System.String;

        @IL.name("ToString")
        to_string(provider: System.IFormatProvider) -> System.String;

        @IL.name("GetTypeCode")
        get_type_code() -> System.TypeCode;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("Begin")
        _begin: System.IO2.SeekOrigin public;
        @IL.name("Current")
        _current: System.IO2.SeekOrigin public;
        @IL.name("End")
        _end: System.IO2.SeekOrigin public;
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.IO.FileAccess")
    struct FileAccess is
        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("HasFlag")
        has_flag(flag: System.Enum) -> bool;

        @IL.name("CompareTo")
        compare_to(target: System.Object) -> int;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("ToString")
        to_string(format: System.String, provider: System.IFormatProvider) -> System.String;

        @IL.name("ToString")
        to_string(format: System.String) -> System.String;

        @IL.name("ToString")
        to_string(provider: System.IFormatProvider) -> System.String;

        @IL.name("GetTypeCode")
        get_type_code() -> System.TypeCode;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("Read")
        _read: System.IO2.FileAccess public;
        @IL.name("Write")
        _write: System.IO2.FileAccess public;
        @IL.name("ReadWrite")
        _read_write: System.IO2.FileAccess public;
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.IO.FileShare")
    struct FileShare is
        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("HasFlag")
        has_flag(flag: System.Enum) -> bool;

        @IL.name("CompareTo")
        compare_to(target: System.Object) -> int;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("ToString")
        to_string(format: System.String, provider: System.IFormatProvider) -> System.String;

        @IL.name("ToString")
        to_string(format: System.String) -> System.String;

        @IL.name("ToString")
        to_string(provider: System.IFormatProvider) -> System.String;

        @IL.name("GetTypeCode")
        get_type_code() -> System.TypeCode;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("None")
        _none: System.IO2.FileShare public;
        @IL.name("Read")
        _read: System.IO2.FileShare public;
        @IL.name("Write")
        _write: System.IO2.FileShare public;
        @IL.name("ReadWrite")
        _read_write: System.IO2.FileShare public;
        @IL.name("Delete")
        _delete: System.IO2.FileShare public;
        @IL.name("Inheritable")
        _inheritable: System.IO2.FileShare public;
    si
    
    @IL.stub()
    @IL.name("class [mscorlib]System.IO.Path")
    class Path: System.Object is
        @IL.name("ChangeExtension")
        change_extension(path: System.String, extension: System.String) -> System.String static;

        @IL.name("GetDirectoryName")
        get_directory_name(path: System.String) -> System.String static;

        @IL.name("GetDirectoryName")
        get_directory_name(path: System.ReadOnlySpan[char]) -> System.ReadOnlySpan[char] static;

        @IL.name("GetExtension")
        get_extension(path: System.String) -> System.String static;

        @IL.name("GetExtension")
        get_extension(path: System.ReadOnlySpan[char]) -> System.ReadOnlySpan[char] static;

        @IL.name("GetFileName")
        get_file_name(path: System.String) -> System.String static;

        @IL.name("GetFileName")
        get_file_name(path: System.ReadOnlySpan[char]) -> System.ReadOnlySpan[char] static;

        @IL.name("GetFileNameWithoutExtension")
        get_file_name_without_extension(path: System.String) -> System.String static;

        @IL.name("GetFileNameWithoutExtension")
        get_file_name_without_extension(path: System.ReadOnlySpan[char]) -> System.ReadOnlySpan[char] static;

        @IL.name("GetRandomFileName")
        get_random_file_name() -> System.String static;

        @IL.name("IsPathFullyQualified")
        is_path_fully_qualified(path: System.String) -> bool static;

        @IL.name("IsPathFullyQualified")
        is_path_fully_qualified(path: System.ReadOnlySpan[char]) -> bool static;

        @IL.name("HasExtension")
        has_extension(path: System.String) -> bool static;

        @IL.name("HasExtension")
        has_extension(path: System.ReadOnlySpan[char]) -> bool static;

        @IL.name("Combine")
        combine(path1: System.String, path2: System.String) -> System.String static;

        @IL.name("Combine")
        combine(path1: System.String, path2: System.String, path3: System.String) -> System.String static;

        @IL.name("Combine")
        combine(path1: System.String, path2: System.String, path3: System.String, path4: System.String) -> System.String static;

        @IL.name("Combine")
        combine(paths: System.String[]) -> System.String static;

        @IL.name("Join")
        join(path1: System.ReadOnlySpan[char], path2: System.ReadOnlySpan[char]) -> System.String static;

        @IL.name("Join")
        join(path1: System.ReadOnlySpan[char], path2: System.ReadOnlySpan[char], path3: System.ReadOnlySpan[char]) -> System.String static;

        @IL.name("Join")
        join(path1: System.ReadOnlySpan[char], path2: System.ReadOnlySpan[char], path3: System.ReadOnlySpan[char], path4: System.ReadOnlySpan[char]) -> System.String static;

        @IL.name("Join")
        join(path1: System.String, path2: System.String) -> System.String static;

        @IL.name("Join")
        join(path1: System.String, path2: System.String, path3: System.String) -> System.String static;

        @IL.name("Join")
        join(path1: System.String, path2: System.String, path3: System.String, path4: System.String) -> System.String static;

        @IL.name("Join")
        join(paths: System.String[]) -> System.String static;

        @IL.name("TryJoin")
        try_join(path1: System.ReadOnlySpan[char], path2: System.ReadOnlySpan[char], destination: System.Span[char], chars_written: int ref) -> bool static;

        @IL.name("TryJoin")
        try_join(path1: System.ReadOnlySpan[char], path2: System.ReadOnlySpan[char], path3: System.ReadOnlySpan[char], destination: System.Span[char], chars_written: int ref) -> bool static;

        @IL.name("GetRelativePath")
        get_relative_path(relative_to: System.String, path: System.String) -> System.String static;

        @IL.name("TrimEndingDirectorySeparator")
        trim_ending_directory_separator(path: System.String) -> System.String static;

        @IL.name("TrimEndingDirectorySeparator")
        trim_ending_directory_separator(path: System.ReadOnlySpan[char]) -> System.ReadOnlySpan[char] static;

        @IL.name("EndsInDirectorySeparator")
        ends_in_directory_separator(path: System.ReadOnlySpan[char]) -> bool static;

        @IL.name("EndsInDirectorySeparator")
        ends_in_directory_separator(path: System.String) -> bool static;

        @IL.name("GetInvalidFileNameChars")
        get_invalid_file_name_chars() -> char[] static;

        @IL.name("GetInvalidPathChars")
        get_invalid_path_chars() -> char[] static;

        @IL.name("GetFullPath")
        get_full_path(path: System.String) -> System.String static;

        @IL.name("GetFullPath")
        get_full_path(path: System.String, base_path: System.String) -> System.String static;

        @IL.name("GetTempPath")
        get_temp_path() -> System.String static;

        @IL.name("GetTempFileName")
        get_temp_file_name() -> System.String static;

        @IL.name("IsPathRooted")
        is_path_rooted(path: System.String) -> bool static;

        @IL.name("IsPathRooted")
        is_path_rooted(path: System.ReadOnlySpan[char]) -> bool static;

        @IL.name("GetPathRoot")
        get_path_root(path: System.String) -> System.String static;

        @IL.name("GetPathRoot")
        get_path_root(path: System.ReadOnlySpan[char]) -> System.ReadOnlySpan[char] static;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("DirectorySeparatorChar")
        _directory_separator_char: char public;
        @IL.name("AltDirectorySeparatorChar")
        _alt_directory_separator_char: char public;
        @IL.name("VolumeSeparatorChar")
        _volume_separator_char: char public;
        @IL.name("PathSeparator")
        _path_separator: char public;
        @IL.name("InvalidPathChars")
        _invalid_path_chars: char[] public;
    si

    @IL.stub()
    @IL.name("class [mscorlib]System.IO.File")
    class File: System.Object is
        @IL.name("OpenText")
        open_text(path: System.String) -> System.IO2.StreamReader static;

        @IL.name("CreateText")
        create_text(path: System.String) -> System.IO2.StreamWriter static;

        @IL.name("AppendText")
        append_text(path: System.String) -> System.IO2.StreamWriter static;

        @IL.name("Copy")
        copy(source_file_name: System.String, dest_file_name: System.String) static;

        @IL.name("Copy")
        copy(source_file_name: System.String, dest_file_name: System.String, overwrite: bool) static;

        @IL.name("Create")
        create(path: System.String) -> System.IO2.FileStream static;

        @IL.name("Create")
        create(path: System.String, buffer_size: int) -> System.IO2.FileStream static;

        @IL.name("Create")
        create(path: System.String, buffer_size: int, options: System.IO2.FileOptions) -> System.IO2.FileStream static;

        @IL.name("Delete")
        delete(path: System.String) static;

        @IL.name("Exists")
        exists(path: System.String) -> bool static;

        @IL.name("Open")
        open(path: System.String, mode: System.IO2.FileMode) -> System.IO2.FileStream static;

        @IL.name("Open")
        open(path: System.String, mode: System.IO2.FileMode, access: System.IO2.FileAccess) -> System.IO2.FileStream static;

        @IL.name("Open")
        open(path: System.String, mode: System.IO2.FileMode, access: System.IO2.FileAccess, share: System.IO2.FileShare) -> System.IO2.FileStream static;

        @IL.name("SetCreationTime")
        set_creation_time(path: System.String, creation_time: System.DateTime) static;

        @IL.name("SetCreationTimeUtc")
        set_creation_time_utc(path: System.String, creation_time_utc: System.DateTime) static;

        @IL.name("GetCreationTime")
        get_creation_time(path: System.String) -> System.DateTime static;

        @IL.name("GetCreationTimeUtc")
        get_creation_time_utc(path: System.String) -> System.DateTime static;

        @IL.name("SetLastAccessTime")
        set_last_access_time(path: System.String, last_access_time: System.DateTime) static;

        @IL.name("SetLastAccessTimeUtc")
        set_last_access_time_utc(path: System.String, last_access_time_utc: System.DateTime) static;

        @IL.name("GetLastAccessTime")
        get_last_access_time(path: System.String) -> System.DateTime static;

        @IL.name("GetLastAccessTimeUtc")
        get_last_access_time_utc(path: System.String) -> System.DateTime static;

        @IL.name("SetLastWriteTime")
        set_last_write_time(path: System.String, last_write_time: System.DateTime) static;

        @IL.name("SetLastWriteTimeUtc")
        set_last_write_time_utc(path: System.String, last_write_time_utc: System.DateTime) static;

        @IL.name("GetLastWriteTime")
        get_last_write_time(path: System.String) -> System.DateTime static;

        @IL.name("GetLastWriteTimeUtc")
        get_last_write_time_utc(path: System.String) -> System.DateTime static;

        @IL.name("GetAttributes")
        get_attributes(path: System.String) -> System.IO2.FileAttributes static;

        @IL.name("SetAttributes")
        set_attributes(path: System.String, file_attributes: System.IO2.FileAttributes) static;

        @IL.name("OpenRead")
        open_read(path: System.String) -> System.IO2.FileStream static;

        @IL.name("OpenWrite")
        open_write(path: System.String) -> System.IO2.FileStream static;

        @IL.name("ReadAllText")
        read_all_text(path: System.String) -> System.String static;

        @IL.name("ReadAllText")
        read_all_text(path: System.String, encoding: System.Text.Encoding) -> System.String static;

        @IL.name("WriteAllText")
        write_all_text(path: System.String, contents: System.String) static;

        @IL.name("WriteAllText")
        write_all_text(path: System.String, contents: System.String, encoding: System.Text.Encoding) static;

        @IL.name("ReadAllBytes")
        read_all_bytes(path: System.String) -> ubyte[] static;

        @IL.name("WriteAllBytes")
        write_all_bytes(path: System.String, bytes: ubyte[]) static;

        @IL.name("ReadAllLines")
        read_all_lines(path: System.String) -> System.String[] static;

        @IL.name("ReadAllLines")
        read_all_lines(path: System.String, encoding: System.Text.Encoding) -> System.String[] static;

        @IL.name("ReadLines")
        read_lines(path: System.String) -> Collections.Iterable[System.String] static;

        @IL.name("ReadLines")
        read_lines(path: System.String, encoding: System.Text.Encoding) -> Collections.Iterable[System.String] static;

        @IL.name("WriteAllLines")
        write_all_lines(path: System.String, contents: System.String[]) static;

        @IL.name("WriteAllLines")
        write_all_lines(path: System.String, contents: Collections.Iterable[System.String]) static;

        @IL.name("WriteAllLines")
        write_all_lines(path: System.String, contents: System.String[], encoding: System.Text.Encoding) static;

        @IL.name("WriteAllLines")
        write_all_lines(path: System.String, contents: Collections.Iterable[System.String], encoding: System.Text.Encoding) static;

        @IL.name("AppendAllText")
        append_all_text(path: System.String, contents: System.String) static;

        @IL.name("AppendAllText")
        append_all_text(path: System.String, contents: System.String, encoding: System.Text.Encoding) static;

        @IL.name("AppendAllLines")
        append_all_lines(path: System.String, contents: Collections.Iterable[System.String]) static;

        @IL.name("AppendAllLines")
        append_all_lines(path: System.String, contents: Collections.Iterable[System.String], encoding: System.Text.Encoding) static;

        @IL.name("Replace")
        replace(source_file_name: System.String, destination_file_name: System.String, destination_backup_file_name: System.String) static;

        @IL.name("Replace")
        replace(source_file_name: System.String, destination_file_name: System.String, destination_backup_file_name: System.String, ignore_metadata_errors: bool) static;

        @IL.name("Move")
        move(source_file_name: System.String, dest_file_name: System.String) static;

        @IL.name("Move")
        move(source_file_name: System.String, dest_file_name: System.String, overwrite: bool) static;

        @IL.name("Encrypt")
        encrypt(path: System.String) static;

        @IL.name("Decrypt")
        decrypt(path: System.String) static;

        @IL.name("ReadAllTextAsync")
        read_all_text_async(path: System.String, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task[System.String] static;

        @IL.name("ReadAllTextAsync")
        read_all_text_async(path: System.String, encoding: System.Text.Encoding, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task[System.String] static;

        @IL.name("WriteAllTextAsync")
        write_all_text_async(path: System.String, contents: System.String, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0 static;

        @IL.name("WriteAllTextAsync")
        write_all_text_async(path: System.String, contents: System.String, encoding: System.Text.Encoding, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0 static;

        @IL.name("ReadAllBytesAsync")
        read_all_bytes_async(path: System.String, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task[ubyte[]] static;

        @IL.name("WriteAllBytesAsync")
        write_all_bytes_async(path: System.String, bytes: ubyte[], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0 static;

        @IL.name("ReadAllLinesAsync")
        read_all_lines_async(path: System.String, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task[System.String[]] static;

        @IL.name("ReadAllLinesAsync")
        read_all_lines_async(path: System.String, encoding: System.Text.Encoding, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task[System.String[]] static;

        @IL.name("WriteAllLinesAsync")
        write_all_lines_async(path: System.String, contents: Collections.Iterable[System.String], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0 static;

        @IL.name("WriteAllLinesAsync")
        write_all_lines_async(path: System.String, contents: Collections.Iterable[System.String], encoding: System.Text.Encoding, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0 static;

        @IL.name("AppendAllTextAsync")
        append_all_text_async(path: System.String, contents: System.String, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0 static;

        @IL.name("AppendAllTextAsync")
        append_all_text_async(path: System.String, contents: System.String, encoding: System.Text.Encoding, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0 static;

        @IL.name("AppendAllLinesAsync")
        append_all_lines_async(path: System.String, contents: Collections.Iterable[System.String], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0 static;

        @IL.name("AppendAllLinesAsync")
        append_all_lines_async(path: System.String, contents: Collections.Iterable[System.String], encoding: System.Text.Encoding, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0 static;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IO.Directory")
    class Directory: System.Object is
        @IL.name("GetParent")
        get_parent(path: System.String) -> System.IO2.DirectoryInfo static;

        @IL.name("CreateDirectory")
        create_directory(path: System.String) -> System.IO2.DirectoryInfo static;

        @IL.name("Exists")
        exists(path: System.String) -> bool static;

        @IL.name("SetCreationTime")
        set_creation_time(path: System.String, creation_time: System.DateTime) static;

        @IL.name("SetCreationTimeUtc")
        set_creation_time_utc(path: System.String, creation_time_utc: System.DateTime) static;

        @IL.name("GetCreationTime")
        get_creation_time(path: System.String) -> System.DateTime static;

        @IL.name("GetCreationTimeUtc")
        get_creation_time_utc(path: System.String) -> System.DateTime static;

        @IL.name("SetLastWriteTime")
        set_last_write_time(path: System.String, last_write_time: System.DateTime) static;

        @IL.name("SetLastWriteTimeUtc")
        set_last_write_time_utc(path: System.String, last_write_time_utc: System.DateTime) static;

        @IL.name("GetLastWriteTime")
        get_last_write_time(path: System.String) -> System.DateTime static;

        @IL.name("GetLastWriteTimeUtc")
        get_last_write_time_utc(path: System.String) -> System.DateTime static;

        @IL.name("SetLastAccessTime")
        set_last_access_time(path: System.String, last_access_time: System.DateTime) static;

        @IL.name("SetLastAccessTimeUtc")
        set_last_access_time_utc(path: System.String, last_access_time_utc: System.DateTime) static;

        @IL.name("GetLastAccessTime")
        get_last_access_time(path: System.String) -> System.DateTime static;

        @IL.name("GetLastAccessTimeUtc")
        get_last_access_time_utc(path: System.String) -> System.DateTime static;

        @IL.name("GetFiles")
        get_files(path: System.String) -> System.String[] static;

        @IL.name("GetFiles")
        get_files(path: System.String, search_pattern: System.String) -> System.String[] static;

        @IL.name("GetFiles")
        get_files(path: System.String, search_pattern: System.String, search_option: System.IO2.SearchOption) -> System.String[] static;

        @IL.name("GetFiles")
        get_files(path: System.String, search_pattern: System.String, enumeration_options: System.IO2.EnumerationOptions) -> System.String[] static;

        @IL.name("GetDirectories")
        get_directories(path: System.String) -> System.String[] static;

        @IL.name("GetDirectories")
        get_directories(path: System.String, search_pattern: System.String) -> System.String[] static;

        @IL.name("GetDirectories")
        get_directories(path: System.String, search_pattern: System.String, search_option: System.IO2.SearchOption) -> System.String[] static;

        @IL.name("GetDirectories")
        get_directories(path: System.String, search_pattern: System.String, enumeration_options: System.IO2.EnumerationOptions) -> System.String[] static;

        @IL.name("GetFileSystemEntries")
        get_file_system_entries(path: System.String) -> System.String[] static;

        @IL.name("GetFileSystemEntries")
        get_file_system_entries(path: System.String, search_pattern: System.String) -> System.String[] static;

        @IL.name("GetFileSystemEntries")
        get_file_system_entries(path: System.String, search_pattern: System.String, search_option: System.IO2.SearchOption) -> System.String[] static;

        @IL.name("GetFileSystemEntries")
        get_file_system_entries(path: System.String, search_pattern: System.String, enumeration_options: System.IO2.EnumerationOptions) -> System.String[] static;

        @IL.name("EnumerateDirectories")
        enumerate_directories(path: System.String) -> Collections.Iterable[System.String] static;

        @IL.name("EnumerateDirectories")
        enumerate_directories(path: System.String, search_pattern: System.String) -> Collections.Iterable[System.String] static;

        @IL.name("EnumerateDirectories")
        enumerate_directories(path: System.String, search_pattern: System.String, search_option: System.IO2.SearchOption) -> Collections.Iterable[System.String] static;

        @IL.name("EnumerateDirectories")
        enumerate_directories(path: System.String, search_pattern: System.String, enumeration_options: System.IO2.EnumerationOptions) -> Collections.Iterable[System.String] static;

        @IL.name("EnumerateFiles")
        enumerate_files(path: System.String) -> Collections.Iterable[System.String] static;

        @IL.name("EnumerateFiles")
        enumerate_files(path: System.String, search_pattern: System.String) -> Collections.Iterable[System.String] static;

        @IL.name("EnumerateFiles")
        enumerate_files(path: System.String, search_pattern: System.String, search_option: System.IO2.SearchOption) -> Collections.Iterable[System.String] static;

        @IL.name("EnumerateFiles")
        enumerate_files(path: System.String, search_pattern: System.String, enumeration_options: System.IO2.EnumerationOptions) -> Collections.Iterable[System.String] static;

        @IL.name("EnumerateFileSystemEntries")
        enumerate_file_system_entries(path: System.String) -> Collections.Iterable[System.String] static;

        @IL.name("EnumerateFileSystemEntries")
        enumerate_file_system_entries(path: System.String, search_pattern: System.String) -> Collections.Iterable[System.String] static;

        @IL.name("EnumerateFileSystemEntries")
        enumerate_file_system_entries(path: System.String, search_pattern: System.String, search_option: System.IO2.SearchOption) -> Collections.Iterable[System.String] static;

        @IL.name("EnumerateFileSystemEntries")
        enumerate_file_system_entries(path: System.String, search_pattern: System.String, enumeration_options: System.IO2.EnumerationOptions) -> Collections.Iterable[System.String] static;

        @IL.name("GetDirectoryRoot")
        get_directory_root(path: System.String) -> System.String static;

        @IL.name("GetCurrentDirectory")
        get_current_directory() -> System.String static;

        @IL.name("SetCurrentDirectory")
        set_current_directory(path: System.String) static;

        @IL.name("Move")
        move(source_dir_name: System.String, dest_dir_name: System.String) static;

        @IL.name("Delete")
        delete(path: System.String) static;

        @IL.name("Delete")
        delete(path: System.String, recursive: bool) static;

        @IL.name("GetLogicalDrives")
        get_logical_drives() -> System.String[] static;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IO.DirectoryInfo")
    class DirectoryInfo: System.IO2.FileSystemInfo,System.Runtime.Serialization.ISerializable is
        @IL.name("CreateSubdirectory")
        create_subdirectory(path: System.String) -> System.IO2.DirectoryInfo;

        @IL.name("Create")
        create();

        @IL.name("GetFiles")
        get_files() -> System.IO2.FileInfo[];

        @IL.name("GetFiles")
        get_files(search_pattern: System.String) -> System.IO2.FileInfo[];

        @IL.name("GetFiles")
        get_files(search_pattern: System.String, search_option: System.IO2.SearchOption) -> System.IO2.FileInfo[];

        @IL.name("GetFiles")
        get_files(search_pattern: System.String, enumeration_options: System.IO2.EnumerationOptions) -> System.IO2.FileInfo[];

        @IL.name("GetFileSystemInfos")
        get_file_system_infos() -> System.IO2.FileSystemInfo[];

        @IL.name("GetFileSystemInfos")
        get_file_system_infos(search_pattern: System.String) -> System.IO2.FileSystemInfo[];

        @IL.name("GetFileSystemInfos")
        get_file_system_infos(search_pattern: System.String, search_option: System.IO2.SearchOption) -> System.IO2.FileSystemInfo[];

        @IL.name("GetFileSystemInfos")
        get_file_system_infos(search_pattern: System.String, enumeration_options: System.IO2.EnumerationOptions) -> System.IO2.FileSystemInfo[];

        @IL.name("GetDirectories")
        get_directories() -> System.IO2.DirectoryInfo[];

        @IL.name("GetDirectories")
        get_directories(search_pattern: System.String) -> System.IO2.DirectoryInfo[];

        @IL.name("GetDirectories")
        get_directories(search_pattern: System.String, search_option: System.IO2.SearchOption) -> System.IO2.DirectoryInfo[];

        @IL.name("GetDirectories")
        get_directories(search_pattern: System.String, enumeration_options: System.IO2.EnumerationOptions) -> System.IO2.DirectoryInfo[];

        @IL.name("EnumerateDirectories")
        enumerate_directories() -> Collections.Iterable[System.IO2.DirectoryInfo];

        @IL.name("EnumerateDirectories")
        enumerate_directories(search_pattern: System.String) -> Collections.Iterable[System.IO2.DirectoryInfo];

        @IL.name("EnumerateDirectories")
        enumerate_directories(search_pattern: System.String, search_option: System.IO2.SearchOption) -> Collections.Iterable[System.IO2.DirectoryInfo];

        @IL.name("EnumerateDirectories")
        enumerate_directories(search_pattern: System.String, enumeration_options: System.IO2.EnumerationOptions) -> Collections.Iterable[System.IO2.DirectoryInfo];

        @IL.name("EnumerateFiles")
        enumerate_files() -> Collections.Iterable[System.IO2.FileInfo];

        @IL.name("EnumerateFiles")
        enumerate_files(search_pattern: System.String) -> Collections.Iterable[System.IO2.FileInfo];

        @IL.name("EnumerateFiles")
        enumerate_files(search_pattern: System.String, search_option: System.IO2.SearchOption) -> Collections.Iterable[System.IO2.FileInfo];

        @IL.name("EnumerateFiles")
        enumerate_files(search_pattern: System.String, enumeration_options: System.IO2.EnumerationOptions) -> Collections.Iterable[System.IO2.FileInfo];

        @IL.name("EnumerateFileSystemInfos")
        enumerate_file_system_infos() -> Collections.Iterable[System.IO2.FileSystemInfo];

        @IL.name("EnumerateFileSystemInfos")
        enumerate_file_system_infos(search_pattern: System.String) -> Collections.Iterable[System.IO2.FileSystemInfo];

        @IL.name("EnumerateFileSystemInfos")
        enumerate_file_system_infos(search_pattern: System.String, search_option: System.IO2.SearchOption) -> Collections.Iterable[System.IO2.FileSystemInfo];

        @IL.name("EnumerateFileSystemInfos")
        enumerate_file_system_infos(search_pattern: System.String, enumeration_options: System.IO2.EnumerationOptions) -> Collections.Iterable[System.IO2.FileSystemInfo];

        @IL.name("MoveTo")
        move_to(dest_dir_name: System.String);

        @IL.name("Delete")
        delete();

        @IL.name("Delete")
        delete(recursive: bool);

        @IL.name("GetObjectData")
        get_object_data(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext);

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Refresh")
        refresh();

        @IL.name("GetLifetimeService")
        get_lifetime_service() -> System.Object;

        @IL.name("InitializeLifetimeService")
        initialize_lifetime_service() -> System.Object;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name(".ctor")
        init(path: System.String);
        @IL.name.read("get_Parent") 
        parent: System.IO2.DirectoryInfo;

        @IL.name.read("get_Root") 
        root: System.IO2.DirectoryInfo;

        @IL.name.read("get_FullName") 
        full_name: System.String;

        @IL.name.read("get_Extension") 
        extension: System.String;

        @IL.name.read("get_Name") 
        name: System.String;

        @IL.name.read("get_Exists") 
        exists: bool;

        @IL.name.read("get_CreationTime") @IL.name.assign("set_CreationTime") 
        creation_time: System.DateTime;

        @IL.name.read("get_CreationTimeUtc") @IL.name.assign("set_CreationTimeUtc") 
        creation_time_utc: System.DateTime;

        @IL.name.read("get_LastAccessTime") @IL.name.assign("set_LastAccessTime") 
        last_access_time: System.DateTime;

        @IL.name.read("get_LastAccessTimeUtc") @IL.name.assign("set_LastAccessTimeUtc") 
        last_access_time_utc: System.DateTime;

        @IL.name.read("get_LastWriteTime") @IL.name.assign("set_LastWriteTime") 
        last_write_time: System.DateTime;

        @IL.name.read("get_LastWriteTimeUtc") @IL.name.assign("set_LastWriteTimeUtc") 
        last_write_time_utc: System.DateTime;

        @IL.name.read("get_Attributes") @IL.name.assign("set_Attributes") 
        attributes: System.IO2.FileAttributes;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IO.DirectoryNotFoundException")
    class DirectoryNotFoundException: System.IO2.IOException,System.Runtime.Serialization.ISerializable is
        @IL.name("GetBaseException")
        get_base_exception() -> System.Exception;

        @IL.name("GetObjectData")
        get_object_data(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext);

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name(".ctor")
        init();
        @IL.name(".ctor")
        init(message: System.String);
        @IL.name(".ctor")
        init(message: System.String, inner_exception: System.Exception);
        @IL.name.read("get_TargetSite") 
        target_site: System.Reflection.MethodBase;

        @IL.name.read("get_StackTrace") 
        stack_trace: System.String;

        @IL.name.read("get_Message") 
        message: System.String;

        @IL.name.read("get_InnerException") 
        inner_exception: System.Exception;

        @IL.name.read("get_HelpLink") @IL.name.assign("set_HelpLink") 
        help_link: System.String;

        @IL.name.read("get_Source") @IL.name.assign("set_Source") 
        source: System.String;

        @IL.name.read("get_HResult") @IL.name.assign("set_HResult") 
        hresult: int;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IO.FileNotFoundException")
    class FileNotFoundException: System.IO2.IOException,System.Runtime.Serialization.ISerializable is
        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("GetObjectData")
        get_object_data(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext);

        @IL.name("GetBaseException")
        get_base_exception() -> System.Exception;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name(".ctor")
        init();
        @IL.name(".ctor")
        init(message: System.String);
        @IL.name(".ctor")
        init(message: System.String, inner_exception: System.Exception);
        @IL.name(".ctor")
        init(message: System.String, file_name: System.String);
        @IL.name(".ctor")
        init(message: System.String, file_name: System.String, inner_exception: System.Exception);
        @IL.name.read("get_Message") 
        message: System.String;

        @IL.name.read("get_FileName") 
        file_name: System.String;

        @IL.name.read("get_FusionLog") 
        fusion_log: System.String;

        @IL.name.read("get_TargetSite") 
        target_site: System.Reflection.MethodBase;

        @IL.name.read("get_StackTrace") 
        stack_trace: System.String;

        @IL.name.read("get_InnerException") 
        inner_exception: System.Exception;

        @IL.name.read("get_HelpLink") @IL.name.assign("set_HelpLink") 
        help_link: System.String;

        @IL.name.read("get_Source") @IL.name.assign("set_Source") 
        source: System.String;

        @IL.name.read("get_HResult") @IL.name.assign("set_HResult") 
        hresult: int;

    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.IO.SearchOption")
    struct SearchOption is
        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("HasFlag")
        has_flag(flag: System.Enum) -> bool;

        @IL.name("CompareTo")
        compare_to(target: System.Object) -> int;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("ToString")
        to_string(format: System.String, provider: System.IFormatProvider) -> System.String;

        @IL.name("ToString")
        to_string(format: System.String) -> System.String;

        @IL.name("ToString")
        to_string(provider: System.IFormatProvider) -> System.String;

        @IL.name("GetTypeCode")
        get_type_code() -> System.TypeCode;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("TopDirectoryOnly")
        _top_directory_only: System.IO2.SearchOption public;
        @IL.name("AllDirectories")
        _all_directories: System.IO2.SearchOption public;
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IO.EnumerationOptions")
    class EnumerationOptions: System.Object is
        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name(".ctor")
        init();
        @IL.name.read("get_RecurseSubdirectories") @IL.name.assign("set_RecurseSubdirectories") 
        recurse_subdirectories: bool;

        @IL.name.read("get_IgnoreInaccessible") @IL.name.assign("set_IgnoreInaccessible") 
        ignore_inaccessible: bool;

        @IL.name.read("get_BufferSize") @IL.name.assign("set_BufferSize") 
        buffer_size: int;

        @IL.name.read("get_AttributesToSkip") @IL.name.assign("set_AttributesToSkip") 
        attributes_to_skip: System.IO2.FileAttributes;

        @IL.name.read("get_MatchType") @IL.name.assign("set_MatchType") 
        match_type: System.IO2.MatchType;

        @IL.name.read("get_MatchCasing") @IL.name.assign("set_MatchCasing") 
        match_casing: System.IO2.MatchCasing;

        @IL.name.read("get_ReturnSpecialDirectories") @IL.name.assign("set_ReturnSpecialDirectories") 
        return_special_directories: bool;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IO.FileInfo")
    class FileInfo: System.IO2.FileSystemInfo,System.Runtime.Serialization.ISerializable is
        @IL.name("OpenText")
        open_text() -> System.IO2.StreamReader;

        @IL.name("CreateText")
        create_text() -> System.IO2.StreamWriter;

        @IL.name("AppendText")
        append_text() -> System.IO2.StreamWriter;

        @IL.name("CopyTo")
        copy_to(dest_file_name: System.String) -> System.IO2.FileInfo;

        @IL.name("CopyTo")
        copy_to(dest_file_name: System.String, overwrite: bool) -> System.IO2.FileInfo;

        @IL.name("Create")
        create() -> System.IO2.FileStream;

        @IL.name("Delete")
        delete();

        @IL.name("Open")
        open(mode: System.IO2.FileMode) -> System.IO2.FileStream;

        @IL.name("Open")
        open(mode: System.IO2.FileMode, access: System.IO2.FileAccess) -> System.IO2.FileStream;

        @IL.name("Open")
        open(mode: System.IO2.FileMode, access: System.IO2.FileAccess, share: System.IO2.FileShare) -> System.IO2.FileStream;

        @IL.name("OpenRead")
        open_read() -> System.IO2.FileStream;

        @IL.name("OpenWrite")
        open_write() -> System.IO2.FileStream;

        @IL.name("MoveTo")
        move_to(dest_file_name: System.String);

        @IL.name("MoveTo")
        move_to(dest_file_name: System.String, overwrite: bool);

        @IL.name("Replace")
        replace(destination_file_name: System.String, destination_backup_file_name: System.String) -> System.IO2.FileInfo;

        @IL.name("Replace")
        replace(destination_file_name: System.String, destination_backup_file_name: System.String, ignore_metadata_errors: bool) -> System.IO2.FileInfo;

        @IL.name("Decrypt")
        decrypt();

        @IL.name("Encrypt")
        encrypt();

        @IL.name("GetObjectData")
        get_object_data(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext);

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Refresh")
        refresh();

        @IL.name("GetLifetimeService")
        get_lifetime_service() -> System.Object;

        @IL.name("InitializeLifetimeService")
        initialize_lifetime_service() -> System.Object;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name(".ctor")
        init(file_name: System.String);
        @IL.name.read("get_Length") 
        length: long;

        @IL.name.read("get_DirectoryName") 
        directory_name: System.String;

        @IL.name.read("get_Directory") 
        directory: System.IO2.DirectoryInfo;

        @IL.name.read("get_IsReadOnly") @IL.name.assign("set_IsReadOnly") 
        is_read_only: bool;

        @IL.name.read("get_FullName") 
        full_name: System.String;

        @IL.name.read("get_Extension") 
        extension: System.String;

        @IL.name.read("get_Name") 
        name: System.String;

        @IL.name.read("get_Exists") 
        exists: bool;

        @IL.name.read("get_CreationTime") @IL.name.assign("set_CreationTime") 
        creation_time: System.DateTime;

        @IL.name.read("get_CreationTimeUtc") @IL.name.assign("set_CreationTimeUtc") 
        creation_time_utc: System.DateTime;

        @IL.name.read("get_LastAccessTime") @IL.name.assign("set_LastAccessTime") 
        last_access_time: System.DateTime;

        @IL.name.read("get_LastAccessTimeUtc") @IL.name.assign("set_LastAccessTimeUtc") 
        last_access_time_utc: System.DateTime;

        @IL.name.read("get_LastWriteTime") @IL.name.assign("set_LastWriteTime") 
        last_write_time: System.DateTime;

        @IL.name.read("get_LastWriteTimeUtc") @IL.name.assign("set_LastWriteTimeUtc") 
        last_write_time_utc: System.DateTime;

        @IL.name.read("get_Attributes") @IL.name.assign("set_Attributes") 
        attributes: System.IO2.FileAttributes;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IO.IOException")
    class IOException: System.SystemException,System.Runtime.Serialization.ISerializable is
        @IL.name("GetBaseException")
        get_base_exception() -> System.Exception;

        @IL.name("GetObjectData")
        get_object_data(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext);

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name(".ctor")
        init();
        @IL.name(".ctor")
        init(message: System.String);
        @IL.name(".ctor")
        init(message: System.String, hresult: int);
        @IL.name(".ctor")
        init(message: System.String, inner_exception: System.Exception);
        @IL.name.read("get_TargetSite") 
        target_site: System.Reflection.MethodBase;

        @IL.name.read("get_StackTrace") 
        stack_trace: System.String;

        @IL.name.read("get_Message") 
        message: System.String;

        @IL.name.read("get_InnerException") 
        inner_exception: System.Exception;

        @IL.name.read("get_HelpLink") @IL.name.assign("set_HelpLink") 
        help_link: System.String;

        @IL.name.read("get_Source") @IL.name.assign("set_Source") 
        source: System.String;

        @IL.name.read("get_HResult") @IL.name.assign("set_HResult") 
        hresult: int;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IO.FileSystemInfo")
    class FileSystemInfo: System.MarshalByRefObject,System.Runtime.Serialization.ISerializable is
        @IL.name("GetObjectData")
        get_object_data(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext);

        @IL.name("Delete")
        delete();

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Refresh")
        refresh();

        @IL.name("GetLifetimeService")
        get_lifetime_service() -> System.Object;

        @IL.name("InitializeLifetimeService")
        initialize_lifetime_service() -> System.Object;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name.read("get_FullName") 
        full_name: System.String;

        @IL.name.read("get_Extension") 
        extension: System.String;

        @IL.name.read("get_Name") 
        name: System.String;

        @IL.name.read("get_Exists") 
        exists: bool;

        @IL.name.read("get_CreationTime") @IL.name.assign("set_CreationTime") 
        creation_time: System.DateTime;

        @IL.name.read("get_CreationTimeUtc") @IL.name.assign("set_CreationTimeUtc") 
        creation_time_utc: System.DateTime;

        @IL.name.read("get_LastAccessTime") @IL.name.assign("set_LastAccessTime") 
        last_access_time: System.DateTime;

        @IL.name.read("get_LastAccessTimeUtc") @IL.name.assign("set_LastAccessTimeUtc") 
        last_access_time_utc: System.DateTime;

        @IL.name.read("get_LastWriteTime") @IL.name.assign("set_LastWriteTime") 
        last_write_time: System.DateTime;

        @IL.name.read("get_LastWriteTimeUtc") @IL.name.assign("set_LastWriteTimeUtc") 
        last_write_time_utc: System.DateTime;

        @IL.name.read("get_Attributes") @IL.name.assign("set_Attributes") 
        attributes: System.IO2.FileAttributes;

    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.IO.MatchType")
    struct MatchType is
        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("HasFlag")
        has_flag(flag: System.Enum) -> bool;

        @IL.name("CompareTo")
        compare_to(target: System.Object) -> int;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("ToString")
        to_string(format: System.String, provider: System.IFormatProvider) -> System.String;

        @IL.name("ToString")
        to_string(format: System.String) -> System.String;

        @IL.name("ToString")
        to_string(provider: System.IFormatProvider) -> System.String;

        @IL.name("GetTypeCode")
        get_type_code() -> System.TypeCode;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("Simple")
        _simple: System.IO2.MatchType public;
        @IL.name("Win32")
        _win32: System.IO2.MatchType public;
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.IO.MatchCasing")
    struct MatchCasing is
        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("HasFlag")
        has_flag(flag: System.Enum) -> bool;

        @IL.name("CompareTo")
        compare_to(target: System.Object) -> int;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("ToString")
        to_string(format: System.String, provider: System.IFormatProvider) -> System.String;

        @IL.name("ToString")
        to_string(format: System.String) -> System.String;

        @IL.name("ToString")
        to_string(provider: System.IFormatProvider) -> System.String;

        @IL.name("GetTypeCode")
        get_type_code() -> System.TypeCode;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("PlatformDefault")
        _platform_default: System.IO2.MatchCasing public;
        @IL.name("CaseSensitive")
        _case_sensitive: System.IO2.MatchCasing public;
        @IL.name("CaseInsensitive")
        _case_insensitive: System.IO2.MatchCasing public;
    si
si
