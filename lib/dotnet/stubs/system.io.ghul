namespace System.IO is
    @IL.stub()
    @IL.name("class [mscorlib]System.IO.FileStream")
    class FileStream: System.IO.Stream,System.IDisposable,System.IAsyncDisposable is
        @IL.name("Lock")
        lock(position: long, length: long);

        @IL.name("Unlock")
        unlock(position: long, length: long);

        @IL.name("FlushAsync")
        flush_async(cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("Read")
        read(array: ubyte[], offset: int, count: int) -> int;

        @IL.name("Read")
        read(buffer: System.Span[ubyte]) -> int;

        @IL.name("ReadAsync")
        read_async(buffer: ubyte[], offset: int, count: int, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task[int];

        @IL.name("ReadAsync")
        read_async(buffer: System.Memory[ubyte], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.ValueTask[int];

        @IL.name("Write")
        write(array: ubyte[], offset: int, count: int);

        @IL.name("Write")
        write(buffer: System.ReadOnlySpan[ubyte]);

        @IL.name("WriteAsync")
        write_async(buffer: ubyte[], offset: int, count: int, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("WriteAsync")
        write_async(buffer: System.ReadOnlyMemory[ubyte], cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.ValueTask_0;

        @IL.name("Flush")
        flush();

        @IL.name("Flush")
        flush(flush_to_disk: bool);

        @IL.name("SetLength")
        set_length(value: long);

        @IL.name("ReadByte")
        read_byte() -> int;

        @IL.name("WriteByte")
        write_byte(value: ubyte);

        @IL.name("BeginRead")
        begin_read(array: ubyte[], offset: int, num_bytes: int, callback: System.AsyncCallback, state: System.Object) -> System.IAsyncResult;

        @IL.name("BeginWrite")
        begin_write(array: ubyte[], offset: int, num_bytes: int, callback: System.AsyncCallback, state: System.Object) -> System.IAsyncResult;

        @IL.name("EndRead")
        end_read(async_result: System.IAsyncResult) -> int;

        @IL.name("EndWrite")
        end_write(async_result: System.IAsyncResult);

        @IL.name("DisposeAsync")
        dispose_async() -> System.Threading.Tasks.ValueTask_0;

        @IL.name("CopyToAsync")
        copy_to_async(destination: System.IO.Stream, buffer_size: int, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("Seek")
        seek(offset: long, origin: System.IO.SeekOrigin) -> long;

        @IL.name("CopyToAsync")
        copy_to_async(destination: System.IO.Stream) -> System.Threading.Tasks.Task_0;

        @IL.name("CopyToAsync")
        copy_to_async(destination: System.IO.Stream, buffer_size: int) -> System.Threading.Tasks.Task_0;

        @IL.name("CopyToAsync")
        copy_to_async(destination: System.IO.Stream, cancellation_token: System.Threading.CancellationToken) -> System.Threading.Tasks.Task_0;

        @IL.name("CopyTo")
        copy_to(destination: System.IO.Stream);

        @IL.name("CopyTo")
        copy_to(destination: System.IO.Stream, buffer_size: int);

        @IL.name("Close")
        close();

        @IL.name("Dispose")
        dispose();

        @IL.name("FlushAsync")
        flush_async() -> System.Threading.Tasks.Task_0;

        @IL.name("ReadAsync")
        read_async(buffer: ubyte[], offset: int, count: int) -> System.Threading.Tasks.Task[int];

        @IL.name("WriteAsync")
        write_async(buffer: ubyte[], offset: int, count: int) -> System.Threading.Tasks.Task_0;

        @IL.name("GetLifetimeService")
        get_lifetime_service() -> System.Object;

        @IL.name("InitializeLifetimeService")
        initialize_lifetime_service() -> System.Object;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name(".ctor")
        init(handle: word, access: System.IO.FileAccess);
        @IL.name(".ctor")
        init(handle: word, access: System.IO.FileAccess, owns_handle: bool);
        @IL.name(".ctor")
        init(handle: word, access: System.IO.FileAccess, owns_handle: bool, buffer_size: int);
        @IL.name(".ctor")
        init(handle: word, access: System.IO.FileAccess, owns_handle: bool, buffer_size: int, is_async: bool);
        @IL.name(".ctor")
        init(handle: Microsoft.Win32.SafeHandles.SafeFileHandle, access: System.IO.FileAccess);
        @IL.name(".ctor")
        init(handle: Microsoft.Win32.SafeHandles.SafeFileHandle, access: System.IO.FileAccess, buffer_size: int);
        @IL.name(".ctor")
        init(handle: Microsoft.Win32.SafeHandles.SafeFileHandle, access: System.IO.FileAccess, buffer_size: int, is_async: bool);
        @IL.name(".ctor")
        init(path: System.String, mode: System.IO.FileMode);
        @IL.name(".ctor")
        init(path: System.String, mode: System.IO.FileMode, access: System.IO.FileAccess);
        @IL.name(".ctor")
        init(path: System.String, mode: System.IO.FileMode, access: System.IO.FileAccess, share: System.IO.FileShare);
        @IL.name(".ctor")
        init(path: System.String, mode: System.IO.FileMode, access: System.IO.FileAccess, share: System.IO.FileShare, buffer_size: int);
        @IL.name(".ctor")
        init(path: System.String, mode: System.IO.FileMode, access: System.IO.FileAccess, share: System.IO.FileShare, buffer_size: int, use_async: bool);
        @IL.name(".ctor")
        init(path: System.String, mode: System.IO.FileMode, access: System.IO.FileAccess, share: System.IO.FileShare, buffer_size: int, options: System.IO.FileOptions);
        @IL.name.read("get_Handle") 
        handle: word;

        @IL.name.read("get_CanRead") 
        can_read: bool;

        @IL.name.read("get_CanWrite") 
        can_write: bool;

        @IL.name.read("get_SafeFileHandle") 
        safe_file_handle: Microsoft.Win32.SafeHandles.SafeFileHandle;

        @IL.name.read("get_Name") 
        name: System.String;

        @IL.name.read("get_IsAsync") 
        is_async: bool;

        @IL.name.read("get_Length") 
        length: long;

        @IL.name.read("get_Position") @IL.name.assign("set_Position") 
        position: long;

        @IL.name.read("get_CanSeek") 
        can_seek: bool;

        @IL.name.read("get_CanTimeout") 
        can_timeout: bool;

        @IL.name.read("get_ReadTimeout") @IL.name.assign("set_ReadTimeout") 
        read_timeout: int;

        @IL.name.read("get_WriteTimeout") @IL.name.assign("set_WriteTimeout") 
        write_timeout: int;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IO.Stream")
    class Stream: System.MarshalByRefObject,System.IDisposable,System.IAsyncDisposable is
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IO.TextReader")
    class TextReader: System.MarshalByRefObject,System.IDisposable is
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IO.TextWriter")
    class TextWriter: System.MarshalByRefObject,System.IDisposable,System.IAsyncDisposable is
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.IO.SeekOrigin")
    struct SeekOrigin is
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.IO.FileAccess")
    struct FileAccess is
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.IO.FileMode")
    struct FileMode is
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.IO.FileShare")
    struct FileShare is
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.IO.FileOptions")
    struct FileOptions is
    si
si
