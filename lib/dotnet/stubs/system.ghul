namespace System is
    @IL.stub()
    @IL.name("class [mscorlib]System.String")
    class String: System.Object,System.IConvertible,Collections.Iterable[char],System.Comparable[System.String],System.Equatable[System.String],System.ICloneable is
        @IL.name("Replace")
        replace(old_char: char, new_char: char) -> System.String;

        @IL.name("Replace")
        replace(old_value: System.String, new_value: System.String) -> System.String;

        @IL.name("Split")
        split(separator: char, options: System.StringSplitOptions) -> System.String[];

        @IL.name("Split")
        split(separator: char, count: int, options: System.StringSplitOptions) -> System.String[];

        @IL.name("Split")
        split(separator: char[]) -> System.String[];

        @IL.name("Split")
        split(separator: char[], count: int) -> System.String[];

        @IL.name("Split")
        split(separator: char[], options: System.StringSplitOptions) -> System.String[];

        @IL.name("Split")
        split(separator: char[], count: int, options: System.StringSplitOptions) -> System.String[];

        @IL.name("Split")
        split(separator: System.String, options: System.StringSplitOptions) -> System.String[];

        @IL.name("Split")
        split(separator: System.String, count: int, options: System.StringSplitOptions) -> System.String[];

        @IL.name("Split")
        split(separator: System.String[], options: System.StringSplitOptions) -> System.String[];

        @IL.name("Split")
        split(separator: System.String[], count: int, options: System.StringSplitOptions) -> System.String[];

        @IL.name("Substring")
        substring(start_index: int) -> System.String;

        @IL.name("Substring")
        substring(start_index: int, length: int) -> System.String;

        @IL.name("ToLower")
        to_lower() -> System.String;

        @IL.name("ToLower")
        to_lower(culture: System.Globalization.CultureInfo) -> System.String;

        @IL.name("ToLowerInvariant")
        to_lower_invariant() -> System.String;

        @IL.name("ToUpper")
        to_upper() -> System.String;

        @IL.name("ToUpper")
        to_upper(culture: System.Globalization.CultureInfo) -> System.String;

        @IL.name("ToUpperInvariant")
        to_upper_invariant() -> System.String;

        @IL.name("Trim")
        trim() -> System.String;

        @IL.name("Trim")
        trim(trim_char: char) -> System.String;

        @IL.name("Trim")
        trim(trim_chars: char[]) -> System.String;

        @IL.name("TrimStart")
        trim_start() -> System.String;

        @IL.name("TrimStart")
        trim_start(trim_char: char) -> System.String;

        @IL.name("TrimStart")
        trim_start(trim_chars: char[]) -> System.String;

        @IL.name("TrimEnd")
        trim_end() -> System.String;

        @IL.name("TrimEnd")
        trim_end(trim_char: char) -> System.String;

        @IL.name("TrimEnd")
        trim_end(trim_chars: char[]) -> System.String;

        @IL.name("Contains")
        contains(value: System.String) -> bool;

        @IL.name("Contains")
        contains(value: System.String, comparison_type: System.StringComparison) -> bool;

        @IL.name("Contains")
        contains(value: char) -> bool;

        @IL.name("Contains")
        contains(value: char, comparison_type: System.StringComparison) -> bool;

        @IL.name("IndexOf")
        index_of(value: char) -> int;

        @IL.name("IndexOf")
        index_of(value: char, start_index: int) -> int;

        @IL.name("IndexOf")
        index_of(value: char, comparison_type: System.StringComparison) -> int;

        @IL.name("IndexOf")
        index_of(value: char, start_index: int, count: int) -> int;

        @IL.name("IndexOfAny")
        index_of_any(any_of: char[]) -> int;

        @IL.name("IndexOfAny")
        index_of_any(any_of: char[], start_index: int) -> int;

        @IL.name("IndexOfAny")
        index_of_any(any_of: char[], start_index: int, count: int) -> int;

        @IL.name("IndexOf")
        index_of(value: System.String) -> int;

        @IL.name("IndexOf")
        index_of(value: System.String, start_index: int) -> int;

        @IL.name("IndexOf")
        index_of(value: System.String, start_index: int, count: int) -> int;

        @IL.name("IndexOf")
        index_of(value: System.String, comparison_type: System.StringComparison) -> int;

        @IL.name("IndexOf")
        index_of(value: System.String, start_index: int, comparison_type: System.StringComparison) -> int;

        @IL.name("IndexOf")
        index_of(value: System.String, start_index: int, count: int, comparison_type: System.StringComparison) -> int;

        @IL.name("LastIndexOf")
        last_index_of(value: char) -> int;

        @IL.name("LastIndexOf")
        last_index_of(value: char, start_index: int) -> int;

        @IL.name("LastIndexOf")
        last_index_of(value: char, start_index: int, count: int) -> int;

        @IL.name("LastIndexOfAny")
        last_index_of_any(any_of: char[]) -> int;

        @IL.name("LastIndexOfAny")
        last_index_of_any(any_of: char[], start_index: int) -> int;

        @IL.name("LastIndexOfAny")
        last_index_of_any(any_of: char[], start_index: int, count: int) -> int;

        @IL.name("LastIndexOf")
        last_index_of(value: System.String) -> int;

        @IL.name("LastIndexOf")
        last_index_of(value: System.String, start_index: int) -> int;

        @IL.name("LastIndexOf")
        last_index_of(value: System.String, start_index: int, count: int) -> int;

        @IL.name("LastIndexOf")
        last_index_of(value: System.String, comparison_type: System.StringComparison) -> int;

        @IL.name("LastIndexOf")
        last_index_of(value: System.String, start_index: int, comparison_type: System.StringComparison) -> int;

        @IL.name("LastIndexOf")
        last_index_of(value: System.String, start_index: int, count: int, comparison_type: System.StringComparison) -> int;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("ToString")
        to_string(provider: System.IFormatProvider) -> System.String;

        @IL.name.read("GetEnumerator")
        iterator: System.CharEnumerator;
        @IL.name("EnumerateRunes")
        enumerate_runes() -> System.Text.StringRuneEnumerator;

        @IL.name("GetTypeCode")
        get_type_code() -> System.TypeCode;

        @IL.name("IsNormalized")
        is_normalized() -> bool;

        @IL.name("IsNormalized")
        is_normalized(normalization_form: System.Text.NormalizationForm) -> bool;

        @IL.name("Normalize")
        normalize() -> System.String;

        @IL.name("Normalize")
        normalize(normalization_form: System.Text.NormalizationForm) -> System.String;

        @IL.name("Concat")
        concat(arg0: System.Object) -> System.String static;

        @IL.name("Concat")
        concat(arg0: System.Object, arg1: System.Object) -> System.String static;

        @IL.name("Concat")
        concat(arg0: System.Object, arg1: System.Object, arg2: System.Object) -> System.String static;

        @IL.name("Concat")
        concat(args: System.Object[]) -> System.String static;

        // concat[T](values: Collections.Iterable[T]) -> System.String static;

        @IL.name("Concat")
        concat(values: Collections.Iterable[System.String]) -> System.String static;

        @IL.name("Concat")
        concat(str0: System.String, str1: System.String) -> System.String static;

        @IL.name("Concat")
        concat(str0: System.String, str1: System.String, str2: System.String) -> System.String static;

        @IL.name("Concat")
        concat(str0: System.String, str1: System.String, str2: System.String, str3: System.String) -> System.String static;

        @IL.name("Concat")
        concat(str0: System.ReadOnlySpan[char], str1: System.ReadOnlySpan[char]) -> System.String static;

        @IL.name("Concat")
        concat(str0: System.ReadOnlySpan[char], str1: System.ReadOnlySpan[char], str2: System.ReadOnlySpan[char]) -> System.String static;

        @IL.name("Concat")
        concat(str0: System.ReadOnlySpan[char], str1: System.ReadOnlySpan[char], str2: System.ReadOnlySpan[char], str3: System.ReadOnlySpan[char]) -> System.String static;

        @IL.name("Concat")
        concat(values: System.String[]) -> System.String static;

        @IL.name("Format")
        format(format: System.String, arg0: System.Object) -> System.String static;

        @IL.name("Format")
        format(format: System.String, arg0: System.Object, arg1: System.Object) -> System.String static;

        @IL.name("Format")
        format(format: System.String, arg0: System.Object, arg1: System.Object, arg2: System.Object) -> System.String static;

        @IL.name("Format")
        format(format: System.String, args: System.Object[]) -> System.String static;

        @IL.name("Format")
        format(provider: System.IFormatProvider, format: System.String, arg0: System.Object) -> System.String static;

        @IL.name("Format")
        format(provider: System.IFormatProvider, format: System.String, arg0: System.Object, arg1: System.Object) -> System.String static;

        @IL.name("Format")
        format(provider: System.IFormatProvider, format: System.String, arg0: System.Object, arg1: System.Object, arg2: System.Object) -> System.String static;

        @IL.name("Format")
        format(provider: System.IFormatProvider, format: System.String, args: System.Object[]) -> System.String static;

        @IL.name("Insert")
        insert(start_index: int, value: System.String) -> System.String;

        @IL.name("Join")
        join(separator: char, value: System.String[]) -> System.String static;

        @IL.name("Join")
        join(separator: char, values: System.Object[]) -> System.String static;

        // join[T](separator: char, values: Collections.Iterable[T]) -> System.String static;

        @IL.name("Join")
        join(separator: char, value: System.String[], start_index: int, count: int) -> System.String static;

        @IL.name("Join")
        join(separator: System.String, value: System.String[]) -> System.String static;

        @IL.name("Join")
        join(separator: System.String, values: System.Object[]) -> System.String static;

        // join[T](separator: System.String, values: Collections.Iterable[T]) -> System.String static;

        @IL.name("Join")
        join(separator: System.String, values: Collections.Iterable[System.String]) -> System.String static;

        @IL.name("Join")
        join(separator: System.String, value: System.String[], start_index: int, count: int) -> System.String static;

        @IL.name("PadLeft")
        pad_left(total_width: int) -> System.String;

        @IL.name("PadLeft")
        pad_left(total_width: int, padding_char: char) -> System.String;

        @IL.name("PadRight")
        pad_right(total_width: int) -> System.String;

        @IL.name("PadRight")
        pad_right(total_width: int, padding_char: char) -> System.String;

        @IL.name("Remove")
        remove(start_index: int, count: int) -> System.String;

        @IL.name("Remove")
        remove(start_index: int) -> System.String;

        @IL.name("Replace")
        replace(old_value: System.String, new_value: System.String, ignore_case: bool, culture: System.Globalization.CultureInfo) -> System.String;

        @IL.name("Replace")
        replace(old_value: System.String, new_value: System.String, comparison_type: System.StringComparison) -> System.String;

        @IL.name("Intern")
        intern(str: System.String) -> System.String static;

        @IL.name("IsInterned")
        is_interned(str: System.String) -> System.String static;

        @IL.name("Compare")
        compare(str_a: System.String, str_b: System.String) -> int static;

        @IL.name("Compare")
        compare(str_a: System.String, str_b: System.String, ignore_case: bool) -> int static;

        @IL.name("Compare")
        compare(str_a: System.String, str_b: System.String, comparison_type: System.StringComparison) -> int static;

        @IL.name("Compare")
        compare(str_a: System.String, str_b: System.String, culture: System.Globalization.CultureInfo, options: System.Globalization.CompareOptions) -> int static;

        @IL.name("Compare")
        compare(str_a: System.String, str_b: System.String, ignore_case: bool, culture: System.Globalization.CultureInfo) -> int static;

        @IL.name("Compare")
        compare(str_a: System.String, index_a: int, str_b: System.String, index_b: int, length: int) -> int static;

        @IL.name("Compare")
        compare(str_a: System.String, index_a: int, str_b: System.String, index_b: int, length: int, ignore_case: bool) -> int static;

        @IL.name("Compare")
        compare(str_a: System.String, index_a: int, str_b: System.String, index_b: int, length: int, ignore_case: bool, culture: System.Globalization.CultureInfo) -> int static;

        @IL.name("Compare")
        compare(str_a: System.String, index_a: int, str_b: System.String, index_b: int, length: int, culture: System.Globalization.CultureInfo, options: System.Globalization.CompareOptions) -> int static;

        @IL.name("Compare")
        compare(str_a: System.String, index_a: int, str_b: System.String, index_b: int, length: int, comparison_type: System.StringComparison) -> int static;

        @IL.name("CompareOrdinal")
        compare_ordinal(str_a: System.String, str_b: System.String) -> int static;

        @IL.name("CompareOrdinal")
        compare_ordinal(str_a: System.String, index_a: int, str_b: System.String, index_b: int, length: int) -> int static;

        @IL.name("CompareTo")
        compare_to(value: System.Object) -> int;

        @IL.name("CompareTo")
        compare_to(str_b: System.String) -> int;

        @IL.name("EndsWith")
        ends_with(value: System.String) -> bool;

        @IL.name("EndsWith")
        ends_with(value: System.String, comparison_type: System.StringComparison) -> bool;

        @IL.name("EndsWith")
        ends_with(value: System.String, ignore_case: bool, culture: System.Globalization.CultureInfo) -> bool;

        @IL.name("EndsWith")
        ends_with(value: char) -> bool;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("Equals")
        equals(value: System.String) -> bool;

        @IL.name("Equals")
        equals(value: System.String, comparison_type: System.StringComparison) -> bool;

        @IL.name("Equals")
        equals(a: System.String, b: System.String) -> bool static;

        @IL.name("Equals")
        equals(a: System.String, b: System.String, comparison_type: System.StringComparison) -> bool static;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("GetHashCode")
        get_hash_code(comparison_type: System.StringComparison) -> int;

        @IL.name("GetHashCode")
        get_hash_code(value: System.ReadOnlySpan[char]) -> int static;

        @IL.name("GetHashCode")
        get_hash_code(value: System.ReadOnlySpan[char], comparison_type: System.StringComparison) -> int static;

        @IL.name("StartsWith")
        starts_with(value: System.String) -> bool;

        @IL.name("StartsWith")
        starts_with(value: System.String, comparison_type: System.StringComparison) -> bool;

        @IL.name("StartsWith")
        starts_with(value: System.String, ignore_case: bool, culture: System.Globalization.CultureInfo) -> bool;

        @IL.name("StartsWith")
        starts_with(value: char) -> bool;

        // create[TState](length: int, state: TState, action: System.Buffers.SpanAction[char,TState]) -> System.String static;

        @IL.name("Clone")
        clone() -> System.Object;

        @IL.name("Copy")
        copy(str: System.String) -> System.String static;

        // @IL.name("CopyTo")
        // copy_to(source_index: int, destination: char[], destination_index: int, count: int);

        @IL.name("ToCharArray")
        to_char_array() -> char[];

        @IL.name("ToCharArray")
        to_char_array(start_index: int, length: int) -> char[];

        @IL.name("IsNullOrEmpty")
        is_null_or_empty(value: System.String) -> bool static;

        @IL.name("IsNullOrWhiteSpace")
        is_null_or_white_space(value: System.String) -> bool static;

        @IL.name("GetPinnableReference")
        get_pinnable_reference() -> char ref;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name(".ctor")
        init(value: char[]);
        @IL.name(".ctor")
        init(value: char[], start_index: int, length: int);
        @IL.name(".ctor")
        init(value: char ptr);
        @IL.name(".ctor")
        init(value: char ptr, start_index: int, length: int);
        @IL.name(".ctor")
        init(value: byte ptr);
        @IL.name(".ctor")
        init(value: byte ptr, start_index: int, length: int);
        @IL.name(".ctor")
        init(value: byte ptr, start_index: int, length: int, enc: System.Text.Encoding);
        @IL.name(".ctor")
        init(c: char, count: int);
        @IL.name(".ctor")
        init(value: System.ReadOnlySpan[char]);
        // named indexer: Chars
        @IL.name.read("get_Length") 
        length: int;
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.Exception")
    class Exception: System.Object,System.Runtime.Serialization.ISerializable is
        @IL.name("GetBaseException")
        get_base_exception() -> System.Exception;

        @IL.name("GetObjectData")
        get_object_data(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext);

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name(".ctor")
        init();
        @IL.name(".ctor")
        init(message: System.String);
        @IL.name(".ctor")
        init(message: System.String, inner_exception: System.Exception);
        @IL.name.read("get_TargetSite") 
        target_site: System.Reflection.MethodBase;

        @IL.name.read("get_StackTrace") 
        stack_trace: System.String;

        @IL.name.read("get_Message") 
        message: System.String;

        @IL.name.read("get_InnerException") 
        inner_exception: System.Exception;

        @IL.name.read("get_HelpLink") @IL.name.assign("set_HelpLink") 
        help_link: System.String;

        @IL.name.read("get_Source") @IL.name.assign("set_Source") 
        source: System.String;

        @IL.name.read("get_HResult") @IL.name.assign("set_HResult") 
        hresult: int;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.Console")
    class Console: System.Object is
        @IL.name("WriteLine")
        write_line(format: System.String, arg0: System.Object) static;

        @IL.name("WriteLine")
        write_line(format: System.String, arg0: System.Object, arg1: System.Object) static;

        @IL.name("WriteLine")
        write_line(format: System.String, arg0: System.Object, arg1: System.Object, arg2: System.Object) static;

        @IL.name("WriteLine")
        write_line(format: System.String, arg: System.Object[]) static;

        @IL.name("Write")
        write(format: System.String, arg0: System.Object) static;

        @IL.name("Write")
        write(format: System.String, arg0: System.Object, arg1: System.Object) static;

        @IL.name("Write")
        write(format: System.String, arg0: System.Object, arg1: System.Object, arg2: System.Object) static;

        @IL.name("Write")
        write(format: System.String, arg: System.Object[]) static;

        @IL.name("Write")
        write(value: bool) static;

        @IL.name("Write")
        write(value: char) static;

        @IL.name("Write")
        write(buffer: char[]) static;

        @IL.name("Write")
        write(buffer: char[], index: int, count: int) static;

        @IL.name("Write")
        write(value: System.Double) static;

        @IL.name("Write")
        write(value: System.Decimal) static;

        @IL.name("Write")
        write(value: System.Single) static;

        @IL.name("Write")
        write(value: int) static;

        @IL.name("Write")
        write(value: uint) static;

        @IL.name("Write")
        write(value: long) static;

        @IL.name("Write")
        write(value: ulong) static;

        @IL.name("Write")
        write(value: System.Object) static;

        @IL.name("Write")
        write(value: System.String) static;

        @IL.name("ReadKey")
        read_key() -> System.ConsoleKeyInfo static;

        @IL.name("ReadKey")
        read_key(intercept: bool) -> System.ConsoleKeyInfo static;

        @IL.name("ResetColor")
        reset_color() static;

        @IL.name("SetBufferSize")
        set_buffer_size(width: int, height: int) static;

        @IL.name("SetWindowPosition")
        set_window_position(left: int, top: int) static;

        @IL.name("SetWindowSize")
        set_window_size(width: int, height: int) static;

        @IL.name("GetCursorPosition")
        get_cursor_position() -> System.ValueTuple[int,int] static;

        @IL.name("Beep")
        beep() static;

        @IL.name("Beep")
        beep(frequency: int, duration: int) static;

        @IL.name("MoveBufferArea")
        move_buffer_area(source_left: int, source_top: int, source_width: int, source_height: int, target_left: int, target_top: int) static;

        @IL.name("MoveBufferArea")
        move_buffer_area(source_left: int, source_top: int, source_width: int, source_height: int, target_left: int, target_top: int, source_char: char, source_fore_color: System.ConsoleColor, source_back_color: System.ConsoleColor) static;

        @IL.name("Clear")
        clear() static;

        @IL.name("SetCursorPosition")
        set_cursor_position(left: int, top: int) static;

        @IL.name("OpenStandardInput")
        open_standard_input() -> System.IO.Stream static;

        @IL.name("OpenStandardInput")
        open_standard_input(buffer_size: int) -> System.IO.Stream static;

        @IL.name("OpenStandardOutput")
        open_standard_output() -> System.IO.Stream static;

        @IL.name("OpenStandardOutput")
        open_standard_output(buffer_size: int) -> System.IO.Stream static;

        @IL.name("OpenStandardError")
        open_standard_error() -> System.IO.Stream static;

        @IL.name("OpenStandardError")
        open_standard_error(buffer_size: int) -> System.IO.Stream static;

        @IL.name("SetIn")
        set_in(new_in: System.IO.TextReader) static;

        @IL.name("SetOut")
        set_out(new_out: System.IO.TextWriter) static;

        @IL.name("SetError")
        set_error(new_error: System.IO.TextWriter) static;

        @IL.name("Read")
        read() -> int static;

        @IL.name("ReadLine")
        read_line() -> System.String static;

        @IL.name("WriteLine")
        write_line() static;

        @IL.name("WriteLine")
        write_line(value: bool) static;

        @IL.name("WriteLine")
        write_line(value: char) static;

        @IL.name("WriteLine")
        write_line(buffer: char[]) static;

        @IL.name("WriteLine")
        write_line(buffer: char[], index: int, count: int) static;

        @IL.name("WriteLine")
        write_line(value: System.Decimal) static;

        @IL.name("WriteLine")
        write_line(value: System.Double) static;

        @IL.name("WriteLine")
        write_line(value: System.Single) static;

        @IL.name("WriteLine")
        write_line(value: int) static;

        @IL.name("WriteLine")
        write_line(value: uint) static;

        @IL.name("WriteLine")
        write_line(value: long) static;

        @IL.name("WriteLine")
        write_line(value: ulong) static;

        @IL.name("WriteLine")
        write_line(value: System.Object) static;

        @IL.name("WriteLine")
        write_line(value: System.String) static;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name.read("get_In") 
        in_: System.IO.TextReader static;

        @IL.name.read("get_InputEncoding") @IL.name.assign("set_InputEncoding") 
        input_encoding: System.Text.Encoding static;

        @IL.name.read("get_OutputEncoding") @IL.name.assign("set_OutputEncoding") 
        output_encoding: System.Text.Encoding static;

        @IL.name.read("get_KeyAvailable") 
        key_available: bool static;

        @IL.name.read("get_Out") 
        out: System.IO.TextWriter static;

        @IL.name.read("get_Error") 
        error: System.IO.TextWriter static;

        @IL.name.read("get_IsInputRedirected") 
        is_input_redirected: bool static;

        @IL.name.read("get_IsOutputRedirected") 
        is_output_redirected: bool static;

        @IL.name.read("get_IsErrorRedirected") 
        is_error_redirected: bool static;

        @IL.name.read("get_CursorSize") @IL.name.assign("set_CursorSize") 
        cursor_size: int static;

        @IL.name.read("get_NumberLock") 
        number_lock: bool static;

        @IL.name.read("get_CapsLock") 
        caps_lock: bool static;

        @IL.name.read("get_BackgroundColor") @IL.name.assign("set_BackgroundColor") 
        background_color: System.ConsoleColor static;

        @IL.name.read("get_ForegroundColor") @IL.name.assign("set_ForegroundColor") 
        foreground_color: System.ConsoleColor static;

        @IL.name.read("get_BufferWidth") @IL.name.assign("set_BufferWidth") 
        buffer_width: int static;

        @IL.name.read("get_BufferHeight") @IL.name.assign("set_BufferHeight") 
        buffer_height: int static;

        @IL.name.read("get_WindowLeft") @IL.name.assign("set_WindowLeft") 
        window_left: int static;

        @IL.name.read("get_WindowTop") @IL.name.assign("set_WindowTop") 
        window_top: int static;

        @IL.name.read("get_WindowWidth") @IL.name.assign("set_WindowWidth") 
        window_width: int static;

        @IL.name.read("get_WindowHeight") @IL.name.assign("set_WindowHeight") 
        window_height: int static;

        @IL.name.read("get_LargestWindowWidth") 
        largest_window_width: int static;

        @IL.name.read("get_LargestWindowHeight") 
        largest_window_height: int static;

        @IL.name.read("get_CursorVisible") @IL.name.assign("set_CursorVisible") 
        cursor_visible: bool static;

        @IL.name.read("get_CursorLeft") @IL.name.assign("set_CursorLeft") 
        cursor_left: int static;

        @IL.name.read("get_CursorTop") @IL.name.assign("set_CursorTop") 
        cursor_top: int static;

        @IL.name.read("get_Title") @IL.name.assign("set_Title") 
        title: System.String static;

        @IL.name.read("get_TreatControlCAsInput") @IL.name.assign("set_TreatControlCAsInput") 
        treat_control_c_as_input: bool static;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.NullReferenceException")
    class NullPointerException: System.SystemException,System.Runtime.Serialization.ISerializable is
        @IL.name("GetBaseException")
        get_base_exception() -> System.Exception;

        @IL.name("GetObjectData")
        get_object_data(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext);

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name(".ctor")
        init();
        @IL.name(".ctor")
        init(message: System.String);
        @IL.name(".ctor")
        init(message: System.String, inner_exception: System.Exception);
        @IL.name.read("get_TargetSite") 
        target_site: System.Reflection.MethodBase;

        @IL.name.read("get_StackTrace") 
        stack_trace: System.String;

        @IL.name.read("get_Message") 
        message: System.String;

        @IL.name.read("get_InnerException") 
        inner_exception: System.Exception;

        @IL.name.read("get_HelpLink") @IL.name.assign("set_HelpLink") 
        help_link: System.String;

        @IL.name.read("get_Source") @IL.name.assign("set_Source") 
        source: System.String;

        @IL.name.read("get_HResult") @IL.name.assign("set_HResult") 
        hresult: int;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.NotImplementedException")
    class NotImplementedException: System.SystemException,System.Runtime.Serialization.ISerializable is
        @IL.name("GetBaseException")
        get_base_exception() -> System.Exception;

        @IL.name("GetObjectData")
        get_object_data(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext);

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name(".ctor")
        init();
        @IL.name(".ctor")
        init(message: System.String);
        @IL.name(".ctor")
        init(message: System.String, inner: System.Exception);
        @IL.name.read("get_TargetSite") 
        target_site: System.Reflection.MethodBase;

        @IL.name.read("get_StackTrace") 
        stack_trace: System.String;

        @IL.name.read("get_Message") 
        message: System.String;

        @IL.name.read("get_InnerException") 
        inner_exception: System.Exception;

        @IL.name.read("get_HelpLink") @IL.name.assign("set_HelpLink") 
        help_link: System.String;

        @IL.name.read("get_Source") @IL.name.assign("set_Source") 
        source: System.String;

        @IL.name.read("get_HResult") @IL.name.assign("set_HResult") 
        hresult: int;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IndexOutOfRangeException")
    class BoundsException: System.SystemException,System.Runtime.Serialization.ISerializable is
        @IL.name("GetBaseException")
        get_base_exception() -> System.Exception;

        @IL.name("GetObjectData")
        get_object_data(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext);

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name(".ctor")
        init();
        @IL.name(".ctor")
        init(message: System.String);
        @IL.name(".ctor")
        init(message: System.String, inner_exception: System.Exception);
        @IL.name.read("get_TargetSite") 
        target_site: System.Reflection.MethodBase;

        @IL.name.read("get_StackTrace") 
        stack_trace: System.String;

        @IL.name.read("get_Message") 
        message: System.String;

        @IL.name.read("get_InnerException") 
        inner_exception: System.Exception;

        @IL.name.read("get_HelpLink") @IL.name.assign("set_HelpLink") 
        help_link: System.String;

        @IL.name.read("get_Source") @IL.name.assign("set_Source") 
        source: System.String;

        @IL.name.read("get_HResult") @IL.name.assign("set_HResult") 
        hresult: int;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IComparable`1")
    trait Comparable[T] is
        @IL.name("CompareTo")
        compare_to(other: T) -> int;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IEquatable`1")
    trait Equatable[T] is
        @IL.name("Equals")
        equals(other: T) -> bool;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.MulticastDelegate")
    class MulticastDelegate: System.Delegate,System.ICloneable,System.Runtime.Serialization.ISerializable is
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.ICloneable")
    trait ICloneable is
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.AsyncCallback")
    class AsyncCallback: System.MulticastDelegate,System.ICloneable,System.Runtime.Serialization.ISerializable is
    si

    @IL.stub()
    @IL.built_in_type("object")
    class Object is
        // address: Object ptr => null;
        ClassName: String => null;

        @IL.name(".ctor")
        init();

        @IL.name("Clone")
        clone() -> Object;

        @IL.name("ToString")
        toString() -> String;

        @IL.name("ToString")
        to_string() -> String;

        @IL.name("GetHashCode")
        hash() -> int;

        // FIXME: just to silence some false positive errors when compiling compiler itself:
        opCompare(other: Object) -> int;
    si

    @IL.stub()
    @IL.name("class [mscorlib]System.IAsyncResult")
    trait IAsyncResult is
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.Delegate")
    class Delegate: System.Object,System.ICloneable,System.Runtime.Serialization.ISerializable is
    si
@IL.stub()
@IL.name("class [mscorlib]System.Type")
class Type: System.Reflection.MemberInfo,System.Reflection.ICustomAttributeProvider,System.Reflection.IReflect is
si
@IL.stub()
@IL.name("class [mscorlib]System.IConvertible")
trait IConvertible is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.StringSplitOptions")
struct StringSplitOptions is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.StringComparison")
struct StringComparison is
si
@IL.stub()
@IL.name("class [mscorlib]System.IFormatProvider")
trait IFormatProvider is
si
@IL.stub()
@IL.name("class [mscorlib]System.CharEnumerator")
class CharEnumerator: System.Object,Collections.MoveNext,Collections.Iterator[char],System.IDisposable,System.ICloneable is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.TypeCode")
struct TypeCode is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.ReadOnlySpan`1")
struct ReadOnlySpan[T] is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.Span`1")
struct Span[T] is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.Single")
struct Single: System.IConvertible,System.IFormattable,System.Comparable[System.Single],System.Equatable[System.Single] is
si
@IL.stub()
@IL.name("class [mscorlib]System.IFormattable")
trait IFormattable is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.Double")
struct Double: System.IConvertible,System.IFormattable,System.Comparable[System.Double],System.Equatable[System.Double] is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.Decimal")
struct Decimal: System.IFormattable,System.IConvertible,System.Comparable[System.Decimal],System.Equatable[System.Decimal],System.Runtime.Serialization.ISerializable,System.Runtime.Serialization.IDeserializationCallback is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.ReadOnlyMemory`1")
struct ReadOnlyMemory[T]: System.Equatable[System.ReadOnlyMemory[T]] is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.ConsoleKeyInfo")
struct ConsoleKeyInfo is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.ValueTuple`2")
struct ValueTuple[T1,T2]: System.Equatable[System.ValueTuple[T1,T2]],System.Comparable[System.ValueTuple[T1,T2]],System.Runtime.CompilerServices.ITuple is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.ConsoleColor")
struct ConsoleColor is
si
@IL.stub()
@IL.name("class [mscorlib]System.IAsyncDisposable")
trait IAsyncDisposable is
si
@IL.stub()
@IL.name("class [mscorlib]System.MarshalByRefObject")
class MarshalByRefObject: System.Object is
si
@IL.stub()
@IL.name("class [mscorlib]System.SystemException")
class SystemException: System.Exception,System.Runtime.Serialization.ISerializable is
si
@IL.stub()
@IL.name("class [mscorlib]System.IDisposable")
trait IDisposable is
si
@IL.stub()
@IL.name("class [mscorlib]System.Converter`2")
class Converter[TInput,TOutput]: System.MulticastDelegate,System.ICloneable,System.Runtime.Serialization.ISerializable is
si
@IL.stub()
@IL.name("class [mscorlib]System.Comparison`1")
class Comparison[T]: System.MulticastDelegate,System.ICloneable,System.Runtime.Serialization.ISerializable is
si
si
