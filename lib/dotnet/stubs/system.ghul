namespace System is
    @IL.stub()
    @IL.built_in_type("object")
    class Object is
        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        // @IL.name("Equals")
        // equals(obj_a: System.Object, obj_b: System.Object) -> bool static;

        @IL.name("ReferenceEquals")
        reference_equals(obj_a: System.Object, obj_b: System.Object) -> bool static;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name(".ctor")
        init();
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.ValueType")
    class ValueType is
        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("GetType")
        get_type() -> System.Type;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.String")
    class String: System.Object,System.IConvertible,Collections.Iterable[char],System.Comparable[System.String],System.Equatable[System.String],System.ICloneable is
        @IL.name("Replace")
        replace(old_char: char, new_char: char) -> System.String;

        @IL.name("Replace")
        replace(old_value: System.String, new_value: System.String) -> System.String;

        @IL.name("Split")
        split(separator: char, options: System.StringSplitOptions) -> System.String[];

        @IL.name("Split")
        split(separator: char, count: int, options: System.StringSplitOptions) -> System.String[];

        @IL.name("Split")
        split(separator: char[]) -> System.String[];

        @IL.name("Split")
        split(separator: char[], count: int) -> System.String[];

        @IL.name("Split")
        split(separator: char[], options: System.StringSplitOptions) -> System.String[];

        @IL.name("Split")
        split(separator: char[], count: int, options: System.StringSplitOptions) -> System.String[];

        @IL.name("Split")
        split(separator: System.String, options: System.StringSplitOptions) -> System.String[];

        @IL.name("Split")
        split(separator: System.String, count: int, options: System.StringSplitOptions) -> System.String[];

        @IL.name("Split")
        split(separator: System.String[], options: System.StringSplitOptions) -> System.String[];

        @IL.name("Split")
        split(separator: System.String[], count: int, options: System.StringSplitOptions) -> System.String[];

        @IL.name("Substring")
        substring(start_index: int) -> System.String;

        @IL.name("Substring")
        substring(start_index: int, length: int) -> System.String;

        @IL.name("ToLower")
        to_lower() -> System.String;

        @IL.name("ToLower")
        to_lower(culture: System.Globalization.CultureInfo) -> System.String;

        @IL.name("ToLowerInvariant")
        to_lower_invariant() -> System.String;

        @IL.name("ToUpper")
        to_upper() -> System.String;

        @IL.name("ToUpper")
        to_upper(culture: System.Globalization.CultureInfo) -> System.String;

        @IL.name("ToUpperInvariant")
        to_upper_invariant() -> System.String;

        @IL.name("Trim")
        trim() -> System.String;

        @IL.name("Trim")
        trim(trim_char: char) -> System.String;

        @IL.name("Trim")
        trim(trim_chars: char[]) -> System.String;

        @IL.name("TrimStart")
        trim_start() -> System.String;

        @IL.name("TrimStart")
        trim_start(trim_char: char) -> System.String;

        @IL.name("TrimStart")
        trim_start(trim_chars: char[]) -> System.String;

        @IL.name("TrimEnd")
        trim_end() -> System.String;

        @IL.name("TrimEnd")
        trim_end(trim_char: char) -> System.String;

        @IL.name("TrimEnd")
        trim_end(trim_chars: char[]) -> System.String;

        @IL.name("Contains")
        contains(value: System.String) -> bool;

        @IL.name("Contains")
        contains(value: System.String, comparison_type: System.StringComparison) -> bool;

        @IL.name("Contains")
        contains(value: char) -> bool;

        @IL.name("Contains")
        contains(value: char, comparison_type: System.StringComparison) -> bool;

        @IL.name("IndexOf")
        index_of(value: char) -> int;

        @IL.name("IndexOf")
        index_of(value: char, start_index: int) -> int;

        @IL.name("IndexOf")
        index_of(value: char, comparison_type: System.StringComparison) -> int;

        @IL.name("IndexOf")
        index_of(value: char, start_index: int, count: int) -> int;

        @IL.name("IndexOfAny")
        index_of_any(any_of: char[]) -> int;

        @IL.name("IndexOfAny")
        index_of_any(any_of: char[], start_index: int) -> int;

        @IL.name("IndexOfAny")
        index_of_any(any_of: char[], start_index: int, count: int) -> int;

        @IL.name("IndexOf")
        index_of(value: System.String) -> int;

        @IL.name("IndexOf")
        index_of(value: System.String, start_index: int) -> int;

        @IL.name("IndexOf")
        index_of(value: System.String, start_index: int, count: int) -> int;

        @IL.name("IndexOf")
        index_of(value: System.String, comparison_type: System.StringComparison) -> int;

        @IL.name("IndexOf")
        index_of(value: System.String, start_index: int, comparison_type: System.StringComparison) -> int;

        @IL.name("IndexOf")
        index_of(value: System.String, start_index: int, count: int, comparison_type: System.StringComparison) -> int;

        @IL.name("LastIndexOf")
        last_index_of(value: char) -> int;

        @IL.name("LastIndexOf")
        last_index_of(value: char, start_index: int) -> int;

        @IL.name("LastIndexOf")
        last_index_of(value: char, start_index: int, count: int) -> int;

        @IL.name("LastIndexOfAny")
        last_index_of_any(any_of: char[]) -> int;

        @IL.name("LastIndexOfAny")
        last_index_of_any(any_of: char[], start_index: int) -> int;

        @IL.name("LastIndexOfAny")
        last_index_of_any(any_of: char[], start_index: int, count: int) -> int;

        @IL.name("LastIndexOf")
        last_index_of(value: System.String) -> int;

        @IL.name("LastIndexOf")
        last_index_of(value: System.String, start_index: int) -> int;

        @IL.name("LastIndexOf")
        last_index_of(value: System.String, start_index: int, count: int) -> int;

        @IL.name("LastIndexOf")
        last_index_of(value: System.String, comparison_type: System.StringComparison) -> int;

        @IL.name("LastIndexOf")
        last_index_of(value: System.String, start_index: int, comparison_type: System.StringComparison) -> int;

        @IL.name("LastIndexOf")
        last_index_of(value: System.String, start_index: int, count: int, comparison_type: System.StringComparison) -> int;

        @IL.name("Compare")
        compare(str_a: System.String, str_b: System.String) -> int static;

        @IL.name("Compare")
        compare(str_a: System.String, str_b: System.String, ignore_case: bool) -> int static;

        @IL.name("Compare")
        compare(str_a: System.String, str_b: System.String, comparison_type: System.StringComparison) -> int static;

        @IL.name("Compare")
        compare(str_a: System.String, str_b: System.String, culture: System.Globalization.CultureInfo, options: System.Globalization.CompareOptions) -> int static;

        @IL.name("Compare")
        compare(str_a: System.String, str_b: System.String, ignore_case: bool, culture: System.Globalization.CultureInfo) -> int static;

        @IL.name("Compare")
        compare(str_a: System.String, index_a: int, str_b: System.String, index_b: int, length: int) -> int static;

        @IL.name("Compare")
        compare(str_a: System.String, index_a: int, str_b: System.String, index_b: int, length: int, ignore_case: bool) -> int static;

        @IL.name("Compare")
        compare(str_a: System.String, index_a: int, str_b: System.String, index_b: int, length: int, ignore_case: bool, culture: System.Globalization.CultureInfo) -> int static;

        @IL.name("Compare")
        compare(str_a: System.String, index_a: int, str_b: System.String, index_b: int, length: int, culture: System.Globalization.CultureInfo, options: System.Globalization.CompareOptions) -> int static;

        @IL.name("Compare")
        compare(str_a: System.String, index_a: int, str_b: System.String, index_b: int, length: int, comparison_type: System.StringComparison) -> int static;

        @IL.name("CompareOrdinal")
        compare_ordinal(str_a: System.String, str_b: System.String) -> int static;

        @IL.name("CompareOrdinal")
        compare_ordinal(str_a: System.String, index_a: int, str_b: System.String, index_b: int, length: int) -> int static;

        @IL.name("CompareTo")
        compare_to(value: System.Object) -> int;

        @IL.name("CompareTo")
        compare_to(str_b: System.String) -> int;

        @IL.name("EndsWith")
        ends_with(value: System.String) -> bool;

        @IL.name("EndsWith")
        ends_with(value: System.String, comparison_type: System.StringComparison) -> bool;

        @IL.name("EndsWith")
        ends_with(value: System.String, ignore_case: bool, culture: System.Globalization.CultureInfo) -> bool;

        @IL.name("EndsWith")
        ends_with(value: char) -> bool;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("Equals")
        equals(value: System.String) -> bool;

        @IL.name("Equals")
        equals(value: System.String, comparison_type: System.StringComparison) -> bool;

        @IL.name("Equals")
        equals(a: System.String, b: System.String) -> bool static;

        @IL.name("Equals")
        equals(a: System.String, b: System.String, comparison_type: System.StringComparison) -> bool static;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("GetHashCode")
        get_hash_code(comparison_type: System.StringComparison) -> int;

        @IL.name("GetHashCode")
        get_hash_code(value: System.ReadOnlySpan[char]) -> int static;

        @IL.name("GetHashCode")
        get_hash_code(value: System.ReadOnlySpan[char], comparison_type: System.StringComparison) -> int static;

        @IL.name("StartsWith")
        starts_with(value: System.String) -> bool;

        @IL.name("StartsWith")
        starts_with(value: System.String, comparison_type: System.StringComparison) -> bool;

        @IL.name("StartsWith")
        starts_with(value: System.String, ignore_case: bool, culture: System.Globalization.CultureInfo) -> bool;

        @IL.name("StartsWith")
        starts_with(value: char) -> bool;

        @IL.name("Concat")
        concat(arg0: System.Object) -> System.String static;

        @IL.name("Concat")
        concat(arg0: System.Object, arg1: System.Object) -> System.String static;

        @IL.name("Concat")
        concat(arg0: System.Object, arg1: System.Object, arg2: System.Object) -> System.String static;

        @IL.name("Concat")
        concat(args: System.Object[]) -> System.String static;

        // concat[T](values: Collections.Iterable[T]) -> System.String static;

        @IL.name("Concat")
        concat(values: Collections.Iterable[System.String]) -> System.String static;

        @IL.name("Concat")
        concat(str0: System.String, str1: System.String) -> System.String static;

        @IL.name("Concat")
        concat(str0: System.String, str1: System.String, str2: System.String) -> System.String static;

        @IL.name("Concat")
        concat(str0: System.String, str1: System.String, str2: System.String, str3: System.String) -> System.String static;

        @IL.name("Concat")
        concat(str0: System.ReadOnlySpan[char], str1: System.ReadOnlySpan[char]) -> System.String static;

        @IL.name("Concat")
        concat(str0: System.ReadOnlySpan[char], str1: System.ReadOnlySpan[char], str2: System.ReadOnlySpan[char]) -> System.String static;

        @IL.name("Concat")
        concat(str0: System.ReadOnlySpan[char], str1: System.ReadOnlySpan[char], str2: System.ReadOnlySpan[char], str3: System.ReadOnlySpan[char]) -> System.String static;

        @IL.name("Concat")
        concat(values: System.String[]) -> System.String static;

        @IL.name("Format")
        format(format: System.String, arg0: System.Object) -> System.String static;

        @IL.name("Format")
        format(format: System.String, arg0: System.Object, arg1: System.Object) -> System.String static;

        @IL.name("Format")
        format(format: System.String, arg0: System.Object, arg1: System.Object, arg2: System.Object) -> System.String static;

        @IL.name("Format")
        format(format: System.String, args: System.Object[]) -> System.String static;

        @IL.name("Format")
        format(provider: System.IFormatProvider, format: System.String, arg0: System.Object) -> System.String static;

        @IL.name("Format")
        format(provider: System.IFormatProvider, format: System.String, arg0: System.Object, arg1: System.Object) -> System.String static;

        @IL.name("Format")
        format(provider: System.IFormatProvider, format: System.String, arg0: System.Object, arg1: System.Object, arg2: System.Object) -> System.String static;

        @IL.name("Format")
        format(provider: System.IFormatProvider, format: System.String, args: System.Object[]) -> System.String static;

        @IL.name("Insert")
        insert(start_index: int, value: System.String) -> System.String;

        @IL.name("Join")
        join(separator: char, value: System.String[]) -> System.String static;

        @IL.name("Join")
        join(separator: char, values: System.Object[]) -> System.String static;

        // join[T](separator: char, values: Collections.Iterable[T]) -> System.String static;

        @IL.name("Join")
        join(separator: char, value: System.String[], start_index: int, count: int) -> System.String static;

        @IL.name("Join")
        join(separator: System.String, value: System.String[]) -> System.String static;

        @IL.name("Join")
        join(separator: System.String, values: System.Object[]) -> System.String static;

        // join[T](separator: System.String, values: Collections.Iterable[T]) -> System.String static;

        @IL.name("Join")
        join(separator: System.String, values: Collections.Iterable[System.String]) -> System.String static;

        @IL.name("Join")
        join(separator: System.String, value: System.String[], start_index: int, count: int) -> System.String static;

        @IL.name("PadLeft")
        pad_left(total_width: int) -> System.String;

        @IL.name("PadLeft")
        pad_left(total_width: int, padding_char: char) -> System.String;

        @IL.name("PadRight")
        pad_right(total_width: int) -> System.String;

        @IL.name("PadRight")
        pad_right(total_width: int, padding_char: char) -> System.String;

        @IL.name("Remove")
        remove(start_index: int, count: int) -> System.String;

        @IL.name("Remove")
        remove(start_index: int) -> System.String;

        @IL.name("Replace")
        replace(old_value: System.String, new_value: System.String, ignore_case: bool, culture: System.Globalization.CultureInfo) -> System.String;

        @IL.name("Replace")
        replace(old_value: System.String, new_value: System.String, comparison_type: System.StringComparison) -> System.String;

        @IL.name("Intern")
        intern(str: System.String) -> System.String static;

        @IL.name("IsInterned")
        is_interned(str: System.String) -> System.String static;

        // create[TState](length: int, state: TState, action: System.Buffers.SpanAction[char,TState]) -> System.String static;

        @IL.name("Clone")
        clone() -> System.Object;

        @IL.name("Copy")
        copy(str: System.String) -> System.String static;

        @IL.name("CopyTo")
        copy_to(source_index: int, destination: char[], destination_index: int, count: int);

        @IL.name("ToCharArray")
        to_char_array() -> char[];

        @IL.name("ToCharArray")
        to_char_array(start_index: int, length: int) -> char[];

        @IL.name("IsNullOrEmpty")
        is_null_or_empty(value: System.String) -> bool static;

        @IL.name("IsNullOrWhiteSpace")
        is_null_or_white_space(value: System.String) -> bool static;

        @IL.name("GetPinnableReference")
        get_pinnable_reference() -> char ref;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("ToString")
        to_string(provider: System.IFormatProvider) -> System.String;

        @IL.name.read("GetEnumerator")
        iterator: System.CharEnumerator;
        @IL.name("EnumerateRunes")
        enumerate_runes() -> System.Text.StringRuneEnumerator;

        @IL.name("GetTypeCode")
        get_type_code() -> System.TypeCode;

        @IL.name("IsNormalized")
        is_normalized() -> bool;

        @IL.name("IsNormalized")
        is_normalized(normalization_form: System.Text.NormalizationForm) -> bool;

        @IL.name("Normalize")
        normalize() -> System.String;

        @IL.name("Normalize")
        normalize(normalization_form: System.Text.NormalizationForm) -> System.String;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name(".ctor")
        init(value: char[]);
        @IL.name(".ctor")
        init(value: char[], start_index: int, length: int);
        @IL.name(".ctor")
        init(value: char ptr);
        @IL.name(".ctor")
        init(value: char ptr, start_index: int, length: int);
        @IL.name(".ctor")
        init(value: byte ptr);
        @IL.name(".ctor")
        init(value: byte ptr, start_index: int, length: int);
        @IL.name(".ctor")
        init(value: byte ptr, start_index: int, length: int, enc: System.Text.Encoding);
        @IL.name(".ctor")
        init(c: char, count: int);
        @IL.name(".ctor")
        init(value: System.ReadOnlySpan[char]);
        // named indexer: Chars
        @IL.name.read("get_Length") 
        length: int;

        @IL.name("Empty")
        _empty: System.String public;
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.Exception")
    class Exception: System.Object,System.Runtime.Serialization.ISerializable is
        @IL.name("GetBaseException")
        get_base_exception() -> System.Exception;

        @IL.name("GetObjectData")
        get_object_data(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext);

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name(".ctor")
        init();
        @IL.name(".ctor")
        init(message: System.String);
        @IL.name(".ctor")
        init(message: System.String, inner_exception: System.Exception);
        @IL.name.read("get_TargetSite") 
        target_site: System.Reflection.MethodBase;

        @IL.name.read("get_StackTrace") 
        stack_trace: System.String;

        @IL.name.read("get_Message") 
        message: System.String;

        @IL.name.read("get_InnerException") 
        inner_exception: System.Exception;

        @IL.name.read("get_HelpLink") @IL.name.assign("set_HelpLink") 
        help_link: System.String;

        @IL.name.read("get_Source") @IL.name.assign("set_Source") 
        source: System.String;

        @IL.name.read("get_HResult") @IL.name.assign("set_HResult") 
        hresult: int;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.Console")
    class Console: System.Object is
        @IL.name("WriteLine")
        write_line(value: System.String) static;

        @IL.name("WriteLine")
        write_line(format: System.String, arg0: System.Object) static;

        @IL.name("WriteLine")
        write_line(format: System.String, arg0: System.Object, arg1: System.Object) static;

        @IL.name("WriteLine")
        write_line(format: System.String, arg0: System.Object, arg1: System.Object, arg2: System.Object) static;

        @IL.name("WriteLine")
        write_line(format: System.String, arg: System.Object[]) static;

        @IL.name("Write")
        write(format: System.String, arg0: System.Object) static;

        @IL.name("Write")
        write(format: System.String, arg0: System.Object, arg1: System.Object) static;

        @IL.name("Write")
        write(format: System.String, arg0: System.Object, arg1: System.Object, arg2: System.Object) static;

        @IL.name("Write")
        write(format: System.String, arg: System.Object[]) static;

        @IL.name("Write")
        write(value: bool) static;

        @IL.name("Write")
        write(value: char) static;

        @IL.name("Write")
        write(buffer: char[]) static;

        @IL.name("Write")
        write(buffer: char[], index: int, count: int) static;

        @IL.name("Write")
        write(value: System.Double) static;

        @IL.name("Write")
        write(value: System.Decimal) static;

        @IL.name("Write")
        write(value: System.Single) static;

        @IL.name("Write")
        write(value: int) static;

        @IL.name("Write")
        write(value: uint) static;

        @IL.name("Write")
        write(value: long) static;

        @IL.name("Write")
        write(value: ulong) static;

        @IL.name("Write")
        write(value: System.Object) static;

        @IL.name("Write")
        write(value: System.String) static;

        @IL.name("ReadKey")
        read_key() -> System.ConsoleKeyInfo static;

        @IL.name("ReadKey")
        read_key(intercept: bool) -> System.ConsoleKeyInfo static;

        @IL.name("ResetColor")
        reset_color() static;

        @IL.name("SetBufferSize")
        set_buffer_size(width: int, height: int) static;

        @IL.name("SetWindowPosition")
        set_window_position(left: int, top: int) static;

        @IL.name("SetWindowSize")
        set_window_size(width: int, height: int) static;

        @IL.name("Beep")
        beep() static;

        @IL.name("Beep")
        beep(frequency: int, duration: int) static;

        @IL.name("MoveBufferArea")
        move_buffer_area(source_left: int, source_top: int, source_width: int, source_height: int, target_left: int, target_top: int) static;

        @IL.name("MoveBufferArea")
        move_buffer_area(source_left: int, source_top: int, source_width: int, source_height: int, target_left: int, target_top: int, source_char: char, source_fore_color: System.ConsoleColor, source_back_color: System.ConsoleColor) static;

        @IL.name("Clear")
        clear() static;

        @IL.name("SetCursorPosition")
        set_cursor_position(left: int, top: int) static;

        @IL.name("OpenStandardInput")
        open_standard_input() -> System.IO.Stream static;

        @IL.name("OpenStandardInput")
        open_standard_input(buffer_size: int) -> System.IO.Stream static;

        @IL.name("OpenStandardOutput")
        open_standard_output() -> System.IO.Stream static;

        @IL.name("OpenStandardOutput")
        open_standard_output(buffer_size: int) -> System.IO.Stream static;

        @IL.name("OpenStandardError")
        open_standard_error() -> System.IO.Stream static;

        @IL.name("OpenStandardError")
        open_standard_error(buffer_size: int) -> System.IO.Stream static;

        @IL.name("SetIn")
        set_in(new_in: System.IO2.TextReader) static;

        @IL.name("SetOut")
        set_out(new_out: System.IO2.TextWriter) static;

        @IL.name("SetError")
        set_error(new_error: System.IO2.TextWriter) static;

        @IL.name("Read")
        read() -> int static;

        @IL.name("ReadLine")
        read_line() -> System.String static;

        @IL.name("WriteLine")
        write_line() static;

        @IL.name("WriteLine")
        write_line(value: bool) static;

        @IL.name("WriteLine")
        write_line(value: char) static;

        @IL.name("WriteLine")
        write_line(buffer: char[]) static;

        @IL.name("WriteLine")
        write_line(buffer: char[], index: int, count: int) static;

        @IL.name("WriteLine")
        write_line(value: System.Decimal) static;

        @IL.name("WriteLine")
        write_line(value: System.Double) static;

        @IL.name("WriteLine")
        write_line(value: System.Single) static;

        @IL.name("WriteLine")
        write_line(value: int) static;

        @IL.name("WriteLine")
        write_line(value: uint) static;

        @IL.name("WriteLine")
        write_line(value: long) static;

        @IL.name("WriteLine")
        write_line(value: ulong) static;

        @IL.name("WriteLine")
        write_line(value: System.Object) static;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name.read("get_In") 
        in_: System.IO2.TextReader static;

        @IL.name.read("get_InputEncoding") @IL.name.assign("set_InputEncoding") 
        input_encoding: System.Text.Encoding static;

        @IL.name.read("get_OutputEncoding") @IL.name.assign("set_OutputEncoding") 
        output_encoding: System.Text.Encoding static;

        @IL.name.read("get_KeyAvailable") 
        key_available: bool static;

        @IL.name.read("get_Out") 
        out: System.IO2.TextWriter static;

        @IL.name.read("get_Error") 
        error: System.IO2.TextWriter static;

        @IL.name.read("get_IsInputRedirected") 
        is_input_redirected: bool static;

        @IL.name.read("get_IsOutputRedirected") 
        is_output_redirected: bool static;

        @IL.name.read("get_IsErrorRedirected") 
        is_error_redirected: bool static;

        @IL.name.read("get_CursorSize") @IL.name.assign("set_CursorSize") 
        cursor_size: int static;

        @IL.name.read("get_NumberLock") 
        number_lock: bool static;

        @IL.name.read("get_CapsLock") 
        caps_lock: bool static;

        @IL.name.read("get_BackgroundColor") @IL.name.assign("set_BackgroundColor") 
        background_color: System.ConsoleColor static;

        @IL.name.read("get_ForegroundColor") @IL.name.assign("set_ForegroundColor") 
        foreground_color: System.ConsoleColor static;

        @IL.name.read("get_BufferWidth") @IL.name.assign("set_BufferWidth") 
        buffer_width: int static;

        @IL.name.read("get_BufferHeight") @IL.name.assign("set_BufferHeight") 
        buffer_height: int static;

        @IL.name.read("get_WindowLeft") @IL.name.assign("set_WindowLeft") 
        window_left: int static;

        @IL.name.read("get_WindowTop") @IL.name.assign("set_WindowTop") 
        window_top: int static;

        @IL.name.read("get_WindowWidth") @IL.name.assign("set_WindowWidth") 
        window_width: int static;

        @IL.name.read("get_WindowHeight") @IL.name.assign("set_WindowHeight") 
        window_height: int static;

        @IL.name.read("get_LargestWindowWidth") 
        largest_window_width: int static;

        @IL.name.read("get_LargestWindowHeight") 
        largest_window_height: int static;

        @IL.name.read("get_CursorVisible") @IL.name.assign("set_CursorVisible") 
        cursor_visible: bool static;

        @IL.name.read("get_CursorLeft") @IL.name.assign("set_CursorLeft") 
        cursor_left: int static;

        @IL.name.read("get_CursorTop") @IL.name.assign("set_CursorTop") 
        cursor_top: int static;

        @IL.name.read("get_Title") @IL.name.assign("set_Title") 
        title: System.String static;

        @IL.name.read("get_TreatControlCAsInput") @IL.name.assign("set_TreatControlCAsInput") 
        treat_control_c_as_input: bool static;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.NullReferenceException")
    class NullPointerException: System.SystemException,System.Runtime.Serialization.ISerializable is
        @IL.name("GetBaseException")
        get_base_exception() -> System.Exception;

        @IL.name("GetObjectData")
        get_object_data(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext);

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name(".ctor")
        init();
        @IL.name(".ctor")
        init(message: System.String);
        @IL.name(".ctor")
        init(message: System.String, inner_exception: System.Exception);
        @IL.name.read("get_TargetSite") 
        target_site: System.Reflection.MethodBase;

        @IL.name.read("get_StackTrace") 
        stack_trace: System.String;

        @IL.name.read("get_Message") 
        message: System.String;

        @IL.name.read("get_InnerException") 
        inner_exception: System.Exception;

        @IL.name.read("get_HelpLink") @IL.name.assign("set_HelpLink") 
        help_link: System.String;

        @IL.name.read("get_Source") @IL.name.assign("set_Source") 
        source: System.String;

        @IL.name.read("get_HResult") @IL.name.assign("set_HResult") 
        hresult: int;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.NotImplementedException")
    class NotImplementedException: System.SystemException,System.Runtime.Serialization.ISerializable is
        @IL.name("GetBaseException")
        get_base_exception() -> System.Exception;

        @IL.name("GetObjectData")
        get_object_data(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext);

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name(".ctor")
        init();
        @IL.name(".ctor")
        init(message: System.String);
        @IL.name(".ctor")
        init(message: System.String, inner: System.Exception);
        @IL.name.read("get_TargetSite") 
        target_site: System.Reflection.MethodBase;

        @IL.name.read("get_StackTrace") 
        stack_trace: System.String;

        @IL.name.read("get_Message") 
        message: System.String;

        @IL.name.read("get_InnerException") 
        inner_exception: System.Exception;

        @IL.name.read("get_HelpLink") @IL.name.assign("set_HelpLink") 
        help_link: System.String;

        @IL.name.read("get_Source") @IL.name.assign("set_Source") 
        source: System.String;

        @IL.name.read("get_HResult") @IL.name.assign("set_HResult") 
        hresult: int;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IndexOutOfRangeException")
    class BoundsException: System.SystemException,System.Runtime.Serialization.ISerializable is
        @IL.name("GetBaseException")
        get_base_exception() -> System.Exception;

        @IL.name("GetObjectData")
        get_object_data(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext);

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name(".ctor")
        init();
        @IL.name(".ctor")
        init(message: System.String);
        @IL.name(".ctor")
        init(message: System.String, inner_exception: System.Exception);
        @IL.name.read("get_TargetSite") 
        target_site: System.Reflection.MethodBase;

        @IL.name.read("get_StackTrace") 
        stack_trace: System.String;

        @IL.name.read("get_Message") 
        message: System.String;

        @IL.name.read("get_InnerException") 
        inner_exception: System.Exception;

        @IL.name.read("get_HelpLink") @IL.name.assign("set_HelpLink") 
        help_link: System.String;

        @IL.name.read("get_Source") @IL.name.assign("set_Source") 
        source: System.String;

        @IL.name.read("get_HResult") @IL.name.assign("set_HResult") 
        hresult: int;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IComparable`1")
    trait Comparable[T] is
        @IL.name("CompareTo")
        compare_to(other: T) -> int;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IEquatable`1")
    trait Equatable[T] is
        @IL.name("Equals")
        equals(other: T) -> bool;

    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.Guid")
    struct Guid: System.IFormattable,System.Comparable[System.Guid],System.Equatable[System.Guid] is
        @IL.name("Parse")
        parse(input: System.String) -> System.Guid static;

        @IL.name("Parse")
        parse(input: System.ReadOnlySpan[char]) -> System.Guid static;

        @IL.name("TryParse")
        try_parse(input: System.String, result: System.Guid ref) -> bool static;

        @IL.name("TryParse")
        try_parse(input: System.ReadOnlySpan[char], result: System.Guid ref) -> bool static;

        @IL.name("ParseExact")
        parse_exact(input: System.String, format: System.String) -> System.Guid static;

        @IL.name("ParseExact")
        parse_exact(input: System.ReadOnlySpan[char], format: System.ReadOnlySpan[char]) -> System.Guid static;

        @IL.name("TryParseExact")
        try_parse_exact(input: System.String, format: System.String, result: System.Guid ref) -> bool static;

        @IL.name("TryParseExact")
        try_parse_exact(input: System.ReadOnlySpan[char], format: System.ReadOnlySpan[char], result: System.Guid ref) -> bool static;

        @IL.name("ToByteArray")
        to_byte_array() -> ubyte[];

        @IL.name("TryWriteBytes")
        try_write_bytes(destination: System.Span[ubyte]) -> bool;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("Equals")
        equals(o: System.Object) -> bool;

        @IL.name("Equals")
        equals(g: System.Guid) -> bool;

        @IL.name("CompareTo")
        compare_to(value: System.Object) -> int;

        @IL.name("CompareTo")
        compare_to(value: System.Guid) -> int;

        @IL.name("ToString")
        to_string(format: System.String) -> System.String;

        @IL.name("ToString")
        to_string(format: System.String, provider: System.IFormatProvider) -> System.String;

        @IL.name("TryFormat")
        try_format(destination: System.Span[char], chars_written: int ref, format: System.ReadOnlySpan[char]) -> bool;

        @IL.name("NewGuid")
        new_guid() -> System.Guid static;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name(".ctor")
        init(b: ubyte[]);
        @IL.name(".ctor")
        init(b: System.ReadOnlySpan[ubyte]);
        @IL.name(".ctor")
        init(a: uint, b: ushort, c: ushort, d: ubyte, e: ubyte, f: ubyte, g: ubyte, h: ubyte, i: ubyte, j: ubyte, k: ubyte);
        @IL.name(".ctor")
        init(a: int, b: short, c: short, d: ubyte[]);
        @IL.name(".ctor")
        init(a: int, b: short, c: short, d: ubyte, e: ubyte, f: ubyte, g: ubyte, h: ubyte, i: ubyte, j: ubyte, k: ubyte);
        @IL.name(".ctor")
        init(g: System.String);
        @IL.name("Empty")
        _empty: System.Guid public;
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.Type")
    class Type: System.Reflection.MemberInfo,System.Reflection.ICustomAttributeProvider,System.Reflection.IReflect is
        @IL.name("GetField")
        get_field(name: System.String) -> System.Reflection.FieldInfo;

        @IL.name("GetField")
        get_field(name: System.String, binding_attr: System.Reflection.BindingFlags) -> System.Reflection.FieldInfo;

        @IL.name("GetFields")
        get_fields() -> System.Reflection.FieldInfo[];

        @IL.name("GetFields")
        get_fields(binding_attr: System.Reflection.BindingFlags) -> System.Reflection.FieldInfo[];

        @IL.name("GetMember")
        get_member(name: System.String) -> System.Reflection.MemberInfo[];

        @IL.name("GetMember")
        get_member(name: System.String, binding_attr: System.Reflection.BindingFlags) -> System.Reflection.MemberInfo[];

        @IL.name("GetMember")
        get_member(name: System.String, type: System.Reflection.MemberTypes, binding_attr: System.Reflection.BindingFlags) -> System.Reflection.MemberInfo[];

        @IL.name("GetMembers")
        get_members() -> System.Reflection.MemberInfo[];

        @IL.name("GetMembers")
        get_members(binding_attr: System.Reflection.BindingFlags) -> System.Reflection.MemberInfo[];

        @IL.name("GetMethod")
        get_method(name: System.String) -> System.Reflection.MethodInfo;

        @IL.name("GetMethod")
        get_method(name: System.String, binding_attr: System.Reflection.BindingFlags) -> System.Reflection.MethodInfo;

        @IL.name("GetMethod")
        get_method(name: System.String, types: System.Type[]) -> System.Reflection.MethodInfo;

        @IL.name("GetMethod")
        get_method(name: System.String, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]) -> System.Reflection.MethodInfo;

        @IL.name("GetMethod")
        get_method(name: System.String, binding_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]) -> System.Reflection.MethodInfo;

        @IL.name("GetMethod")
        get_method(name: System.String, binding_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, call_convention: System.Reflection.CallingConventions, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]) -> System.Reflection.MethodInfo;

        @IL.name("GetMethod")
        get_method(name: System.String, generic_parameter_count: int, types: System.Type[]) -> System.Reflection.MethodInfo;

        @IL.name("GetMethod")
        get_method(name: System.String, generic_parameter_count: int, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]) -> System.Reflection.MethodInfo;

        @IL.name("GetMethod")
        get_method(name: System.String, generic_parameter_count: int, binding_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]) -> System.Reflection.MethodInfo;

        @IL.name("GetMethod")
        get_method(name: System.String, generic_parameter_count: int, binding_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, call_convention: System.Reflection.CallingConventions, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]) -> System.Reflection.MethodInfo;

        @IL.name("GetMethods")
        get_methods() -> System.Reflection.MethodInfo[];

        @IL.name("GetMethods")
        get_methods(binding_attr: System.Reflection.BindingFlags) -> System.Reflection.MethodInfo[];

        @IL.name("GetNestedType")
        get_nested_type(name: System.String) -> System.Type;

        @IL.name("GetNestedType")
        get_nested_type(name: System.String, binding_attr: System.Reflection.BindingFlags) -> System.Type;

        @IL.name("GetNestedTypes")
        get_nested_types() -> System.Type[];

        @IL.name("GetNestedTypes")
        get_nested_types(binding_attr: System.Reflection.BindingFlags) -> System.Type[];

        @IL.name("GetProperty")
        get_property(name: System.String) -> System.Reflection.PropertyInfo;

        @IL.name("GetProperty")
        get_property(name: System.String, binding_attr: System.Reflection.BindingFlags) -> System.Reflection.PropertyInfo;

        @IL.name("GetProperty")
        get_property(name: System.String, return_type: System.Type) -> System.Reflection.PropertyInfo;

        @IL.name("GetProperty")
        get_property(name: System.String, types: System.Type[]) -> System.Reflection.PropertyInfo;

        @IL.name("GetProperty")
        get_property(name: System.String, return_type: System.Type, types: System.Type[]) -> System.Reflection.PropertyInfo;

        @IL.name("GetProperty")
        get_property(name: System.String, return_type: System.Type, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]) -> System.Reflection.PropertyInfo;

        @IL.name("GetProperty")
        get_property(name: System.String, binding_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, return_type: System.Type, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]) -> System.Reflection.PropertyInfo;

        @IL.name("GetProperties")
        get_properties() -> System.Reflection.PropertyInfo[];

        @IL.name("GetProperties")
        get_properties(binding_attr: System.Reflection.BindingFlags) -> System.Reflection.PropertyInfo[];

        @IL.name("GetDefaultMembers")
        get_default_members() -> System.Reflection.MemberInfo[];

        @IL.name("GetTypeHandle")
        get_type_handle(o: System.Object) -> System.RuntimeTypeHandle static;

        @IL.name("GetTypeArray")
        get_type_array(args: System.Object[]) -> System.Type[] static;

        @IL.name("GetTypeCode")
        get_type_code(type: System.Type) -> System.TypeCode static;

        @IL.name("GetTypeFromCLSID")
        get_type_from_c_l_s_i_d(clsid: System.Guid) -> System.Type static;

        @IL.name("GetTypeFromCLSID")
        get_type_from_c_l_s_i_d(clsid: System.Guid, throw_on_error: bool) -> System.Type static;

        @IL.name("GetTypeFromCLSID")
        get_type_from_c_l_s_i_d(clsid: System.Guid, server: System.String) -> System.Type static;

        @IL.name("GetTypeFromProgID")
        get_type_from_prog_i_d(prog_i_d: System.String) -> System.Type static;

        @IL.name("GetTypeFromProgID")
        get_type_from_prog_i_d(prog_i_d: System.String, throw_on_error: bool) -> System.Type static;

        @IL.name("GetTypeFromProgID")
        get_type_from_prog_i_d(prog_i_d: System.String, server: System.String) -> System.Type static;

        @IL.name("InvokeMember")
        invoke_member(name: System.String, invoke_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, target: System.Object, args: System.Object[]) -> System.Object;

        @IL.name("InvokeMember")
        invoke_member(name: System.String, invoke_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, target: System.Object, args: System.Object[], culture: System.Globalization.CultureInfo) -> System.Object;

        @IL.name("InvokeMember")
        invoke_member(name: System.String, invoke_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, target: System.Object, args: System.Object[], modifiers: System.Reflection.ParameterModifier[], culture: System.Globalization.CultureInfo, named_parameters: System.String[]) -> System.Object;

        @IL.name("GetInterface")
        get_interface(name: System.String) -> System.Type;

        @IL.name("GetInterface")
        get_interface(name: System.String, ignore_case: bool) -> System.Type;

        @IL.name("GetInterfaces")
        get_interfaces() -> System.Type[];

        @IL.name("GetInterfaceMap")
        get_interface_map(interface_type: System.Type) -> System.Reflection.InterfaceMapping;

        @IL.name("IsInstanceOfType")
        is_instance_of_type(o: System.Object) -> bool;

        @IL.name("IsEquivalentTo")
        is_equivalent_to(other: System.Type) -> bool;

        @IL.name("GetEnumUnderlyingType")
        get_enum_underlying_type() -> System.Type;

        @IL.name("GetEnumValues")
        get_enum_values() -> System.Array;

        @IL.name("MakeArrayType")
        make_array_type() -> System.Type;

        @IL.name("MakeArrayType")
        make_array_type(rank: int) -> System.Type;

        @IL.name("MakeByRefType")
        make_by_ref_type() -> System.Type;

        @IL.name("MakeGenericType")
        make_generic_type(type_arguments: System.Type[]) -> System.Type;

        @IL.name("MakePointerType")
        make_pointer_type() -> System.Type;

        @IL.name("MakeGenericSignatureType")
        make_generic_signature_type(generic_type_definition: System.Type, type_arguments: System.Type[]) -> System.Type static;

        @IL.name("MakeGenericMethodParameter")
        make_generic_method_parameter(position: int) -> System.Type static;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(o: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("Equals")
        equals(o: System.Type) -> bool;

        @IL.name("ReflectionOnlyGetType")
        reflection_only_get_type(type_name: System.String, throw_if_not_found: bool, ignore_case: bool) -> System.Type static;

        @IL.name("IsEnumDefined")
        is_enum_defined(value: System.Object) -> bool;

        @IL.name("GetEnumName")
        get_enum_name(value: System.Object) -> System.String;

        @IL.name("GetEnumNames")
        get_enum_names() -> System.String[];

        @IL.name("FindInterfaces")
        find_interfaces(filter: System.Reflection.TypeFilter, filter_criteria: System.Object) -> System.Type[];

        @IL.name("FindMembers")
        find_members(member_type: System.Reflection.MemberTypes, binding_attr: System.Reflection.BindingFlags, filter: System.Reflection.MemberFilter, filter_criteria: System.Object) -> System.Reflection.MemberInfo[];

        @IL.name("IsSubclassOf")
        is_subclass_of(c: System.Type) -> bool;

        @IL.name("IsAssignableFrom")
        is_assignable_from(c: System.Type) -> bool;

        @IL.name("GetType")
        get_type(type_name: System.String, throw_on_error: bool, ignore_case: bool) -> System.Type static;

        @IL.name("GetType")
        get_type(type_name: System.String, throw_on_error: bool) -> System.Type static;

        @IL.name("GetType")
        get_type(type_name: System.String) -> System.Type static;

        @IL.name("GetType")
        get_type(type_name: System.String, assembly_resolver: Ghul.FUNCTION_1[System.Reflection.AssemblyName,System.Reflection.Assembly], type_resolver: Ghul.FUNCTION_3[System.Reflection.Assembly,System.String,bool,System.Type]) -> System.Type static;

        @IL.name("GetType")
        get_type(type_name: System.String, assembly_resolver: Ghul.FUNCTION_1[System.Reflection.AssemblyName,System.Reflection.Assembly], type_resolver: Ghul.FUNCTION_3[System.Reflection.Assembly,System.String,bool,System.Type], throw_on_error: bool) -> System.Type static;

        @IL.name("GetType")
        get_type(type_name: System.String, assembly_resolver: Ghul.FUNCTION_1[System.Reflection.AssemblyName,System.Reflection.Assembly], type_resolver: Ghul.FUNCTION_3[System.Reflection.Assembly,System.String,bool,System.Type], throw_on_error: bool, ignore_case: bool) -> System.Type static;

        @IL.name("GetTypeFromProgID")
        get_type_from_prog_i_d(prog_i_d: System.String, server: System.String, throw_on_error: bool) -> System.Type static;

        @IL.name("GetTypeFromCLSID")
        get_type_from_c_l_s_i_d(clsid: System.Guid, server: System.String, throw_on_error: bool) -> System.Type static;

        @IL.name("GetTypeFromHandle")
        get_type_from_handle(handle: System.RuntimeTypeHandle) -> System.Type static;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("GetElementType")
        get_element_type() -> System.Type;

        @IL.name("GetArrayRank")
        get_array_rank() -> int;

        @IL.name("GetGenericTypeDefinition")
        get_generic_type_definition() -> System.Type;

        @IL.name("GetGenericArguments")
        get_generic_arguments() -> System.Type[];

        @IL.name("GetGenericParameterConstraints")
        get_generic_parameter_constraints() -> System.Type[];

        @IL.name("GetConstructor")
        get_constructor(types: System.Type[]) -> System.Reflection.ConstructorInfo;

        @IL.name("GetConstructor")
        get_constructor(binding_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]) -> System.Reflection.ConstructorInfo;

        @IL.name("GetConstructor")
        get_constructor(binding_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, call_convention: System.Reflection.CallingConventions, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]) -> System.Reflection.ConstructorInfo;

        @IL.name("GetConstructors")
        get_constructors() -> System.Reflection.ConstructorInfo[];

        @IL.name("GetConstructors")
        get_constructors(binding_attr: System.Reflection.BindingFlags) -> System.Reflection.ConstructorInfo[];

        @IL.name("GetEvent")
        get_event(name: System.String) -> System.Reflection.EventInfo;

        @IL.name("GetEvent")
        get_event(name: System.String, binding_attr: System.Reflection.BindingFlags) -> System.Reflection.EventInfo;

        @IL.name("GetEvents")
        get_events() -> System.Reflection.EventInfo[];

        @IL.name("GetEvents")
        get_events(binding_attr: System.Reflection.BindingFlags) -> System.Reflection.EventInfo[];

        @IL.name("HasSameMetadataDefinitionAs")
        has_same_metadata_definition_as(other: System.Reflection.MemberInfo) -> bool;

        @IL.name("IsDefined")
        is_defined(attribute_type: System.Type, inherit: bool) -> bool;

        @IL.name("GetCustomAttributes")
        get_custom_attributes(inherit: bool) -> System.Object[];

        @IL.name("GetCustomAttributes")
        get_custom_attributes(attribute_type: System.Type, inherit: bool) -> System.Object[];

        @IL.name("GetCustomAttributesData")
        get_custom_attributes_data() -> Collections.MutableList[System.Reflection.CustomAttributeData];

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name.read("get_IsInterface") 
        is_interface: bool;

        @IL.name.read("get_MemberType") 
        member_type: System.Reflection.MemberTypes;

        @IL.name.read("get_Namespace") 
        namespace_: System.String;

        @IL.name.read("get_AssemblyQualifiedName") 
        assembly_qualified_name: System.String;

        @IL.name.read("get_FullName") 
        full_name: System.String;

        @IL.name.read("get_Assembly") 
        assembly: System.Reflection.Assembly;

        @IL.name.read("get_Module") 
        module: System.Reflection.Module;

        @IL.name.read("get_IsNested") 
        is_nested: bool;

        @IL.name.read("get_DeclaringType") 
        declaring_type: System.Type;

        @IL.name.read("get_DeclaringMethod") 
        declaring_method: System.Reflection.MethodBase;

        @IL.name.read("get_ReflectedType") 
        reflected_type: System.Type;

        @IL.name.read("get_UnderlyingSystemType") 
        underlying_system_type: System.Type;

        @IL.name.read("get_IsTypeDefinition") 
        is_type_definition: bool;

        @IL.name.read("get_IsArray") 
        is_array: bool;

        @IL.name.read("get_IsByRef") 
        is_by_ref: bool;

        @IL.name.read("get_IsPointer") 
        is_pointer: bool;

        @IL.name.read("get_IsConstructedGenericType") 
        is_constructed_generic_type: bool;

        @IL.name.read("get_IsGenericParameter") 
        is_generic_parameter: bool;

        @IL.name.read("get_IsGenericTypeParameter") 
        is_generic_type_parameter: bool;

        @IL.name.read("get_IsGenericMethodParameter") 
        is_generic_method_parameter: bool;

        @IL.name.read("get_IsGenericType") 
        is_generic_type: bool;

        @IL.name.read("get_IsGenericTypeDefinition") 
        is_generic_type_definition: bool;

        @IL.name.read("get_IsSZArray") 
        is_s_z_array: bool;

        @IL.name.read("get_IsVariableBoundArray") 
        is_variable_bound_array: bool;

        @IL.name.read("get_IsByRefLike") 
        is_by_ref_like: bool;

        @IL.name.read("get_HasElementType") 
        has_element_type: bool;

        @IL.name.read("get_GenericTypeArguments") 
        generic_type_arguments: System.Type[];

        @IL.name.read("get_GenericParameterPosition") 
        generic_parameter_position: int;

        @IL.name.read("get_GenericParameterAttributes") 
        generic_parameter_attributes: System.Reflection.GenericParameterAttributes;

        @IL.name.read("get_Attributes") 
        attributes: System.Reflection.TypeAttributes;

        @IL.name.read("get_IsAbstract") 
        is_abstract: bool;

        @IL.name.read("get_IsImport") 
        is_import: bool;

        @IL.name.read("get_IsSealed") 
        is_sealed: bool;

        @IL.name.read("get_IsSpecialName") 
        is_special_name: bool;

        @IL.name.read("get_IsClass") 
        is_class: bool;

        @IL.name.read("get_IsNestedAssembly") 
        is_nested_assembly: bool;

        @IL.name.read("get_IsNestedFamANDAssem") 
        is_nested_fam_a_n_d_assem: bool;

        @IL.name.read("get_IsNestedFamily") 
        is_nested_family: bool;

        @IL.name.read("get_IsNestedFamORAssem") 
        is_nested_fam_o_r_assem: bool;

        @IL.name.read("get_IsNestedPrivate") 
        is_nested_private: bool;

        @IL.name.read("get_IsNestedPublic") 
        is_nested_public: bool;

        @IL.name.read("get_IsNotPublic") 
        is_not_public: bool;

        @IL.name.read("get_IsPublic") 
        is_public: bool;

        @IL.name.read("get_IsAutoLayout") 
        is_auto_layout: bool;

        @IL.name.read("get_IsExplicitLayout") 
        is_explicit_layout: bool;

        @IL.name.read("get_IsLayoutSequential") 
        is_layout_sequential: bool;

        @IL.name.read("get_IsAnsiClass") 
        is_ansi_class: bool;

        @IL.name.read("get_IsAutoClass") 
        is_auto_class: bool;

        @IL.name.read("get_IsUnicodeClass") 
        is_unicode_class: bool;

        @IL.name.read("get_IsCOMObject") 
        is_c_o_m_object: bool;

        @IL.name.read("get_IsContextful") 
        is_contextful: bool;

        @IL.name.read("get_IsEnum") 
        is_enum: bool;

        @IL.name.read("get_IsMarshalByRef") 
        is_marshal_by_ref: bool;

        @IL.name.read("get_IsPrimitive") 
        is_primitive: bool;

        @IL.name.read("get_IsValueType") 
        is_value_type: bool;

        @IL.name.read("get_IsSignatureType") 
        is_signature_type: bool;

        @IL.name.read("get_IsSecurityCritical") 
        is_security_critical: bool;

        @IL.name.read("get_IsSecuritySafeCritical") 
        is_security_safe_critical: bool;

        @IL.name.read("get_IsSecurityTransparent") 
        is_security_transparent: bool;

        @IL.name.read("get_StructLayoutAttribute") 
        struct_layout_attribute: System.Runtime.InteropServices.StructLayoutAttribute;

        @IL.name.read("get_TypeInitializer") 
        type_initializer: System.Reflection.ConstructorInfo;

        @IL.name.read("get_TypeHandle") 
        type_handle: System.RuntimeTypeHandle;

        @IL.name.read("get_GUID") 
        guid: System.Guid;

        @IL.name.read("get_BaseType") 
        base_type: System.Type;

        @IL.name.read("get_DefaultBinder") 
        default_binder: System.Reflection.Binder static;

        @IL.name.read("get_IsSerializable") 
        is_serializable: bool;

        @IL.name.read("get_ContainsGenericParameters") 
        contains_generic_parameters: bool;

        @IL.name.read("get_IsVisible") 
        is_visible: bool;

        @IL.name.read("get_Name") 
        name: System.String;

        @IL.name.read("get_CustomAttributes") 
        custom_attributes: Collections.Iterable[System.Reflection.CustomAttributeData];

        @IL.name.read("get_IsCollectible") 
        is_collectible: bool;

        @IL.name.read("get_MetadataToken") 
        metadata_token: int;

        @IL.name("Delimiter")
        _delimiter: char public;
        @IL.name("EmptyTypes")
        _empty_types: System.Type[] public;
        @IL.name("Missing")
        _missing: System.Object public;
        @IL.name("FilterAttribute")
        _filter_attribute: System.Reflection.MemberFilter public;
        @IL.name("FilterName")
        _filter_name: System.Reflection.MemberFilter public;
        @IL.name("FilterNameIgnoreCase")
        _filter_name_ignore_case: System.Reflection.MemberFilter public;
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.ModuleHandle")
    struct ModuleHandle is
        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("Equals")
        equals(handle: System.ModuleHandle) -> bool;

        @IL.name("GetRuntimeTypeHandleFromMetadataToken")
        get_runtime_type_handle_from_metadata_token(type_token: int) -> System.RuntimeTypeHandle;

        @IL.name("ResolveTypeHandle")
        resolve_type_handle(type_token: int) -> System.RuntimeTypeHandle;

        @IL.name("ResolveTypeHandle")
        resolve_type_handle(type_token: int, type_instantiation_context: System.RuntimeTypeHandle[], method_instantiation_context: System.RuntimeTypeHandle[]) -> System.RuntimeTypeHandle;

        @IL.name("GetRuntimeMethodHandleFromMetadataToken")
        get_runtime_method_handle_from_metadata_token(method_token: int) -> System.RuntimeMethodHandle;

        @IL.name("ResolveMethodHandle")
        resolve_method_handle(method_token: int) -> System.RuntimeMethodHandle;

        @IL.name("ResolveMethodHandle")
        resolve_method_handle(method_token: int, type_instantiation_context: System.RuntimeTypeHandle[], method_instantiation_context: System.RuntimeTypeHandle[]) -> System.RuntimeMethodHandle;

        @IL.name("GetRuntimeFieldHandleFromMetadataToken")
        get_runtime_field_handle_from_metadata_token(field_token: int) -> System.RuntimeFieldHandle;

        @IL.name("ResolveFieldHandle")
        resolve_field_handle(field_token: int) -> System.RuntimeFieldHandle;

        @IL.name("ResolveFieldHandle")
        resolve_field_handle(field_token: int, type_instantiation_context: System.RuntimeTypeHandle[], method_instantiation_context: System.RuntimeTypeHandle[]) -> System.RuntimeFieldHandle;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name.read("get_MDStreamVersion") 
        mdstream_version: int;

        @IL.name("EmptyHandle")
        _empty_handle: System.ModuleHandle public;
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.MulticastDelegate")
    class MulticastDelegate: System.Delegate,System.ICloneable,System.Runtime.Serialization.ISerializable is
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.ICloneable")
    trait ICloneable is
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.AsyncCallback")
    class AsyncCallback: System.MulticastDelegate,System.ICloneable,System.Runtime.Serialization.ISerializable is
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.IAsyncResult")
    trait IAsyncResult is
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.Delegate")
    class Delegate: System.Object,System.ICloneable,System.Runtime.Serialization.ISerializable is
    si
@IL.stub()
@IL.name("class [mscorlib]System.IValueTupleInternal")
trait IValueTupleInternal: System.Runtime.CompilerServices.ITuple is
si
@IL.stub()
@IL.name("class [mscorlib]System.IConvertible")
trait IConvertible is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.StringSplitOptions")
struct StringSplitOptions is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.StringComparison")
struct StringComparison is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.ReadOnlySpan`1")
struct ReadOnlySpan[T] is
si
@IL.stub()
@IL.name("class [mscorlib]System.IFormatProvider")
trait IFormatProvider is
si
@IL.stub()
@IL.name("class [mscorlib]System.CharEnumerator")
class CharEnumerator: System.Object,Collections.MoveNext,Collections.Iterator[char],System.IDisposable,System.ICloneable is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.TypeCode")
struct TypeCode is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.Span`1")
struct Span[T] is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.Single")
struct Single: System.IConvertible,System.IFormattable,System.Comparable[System.Single],System.Equatable[System.Single] is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.Double")
struct Double: System.IConvertible,System.IFormattable,System.Comparable[System.Double],System.Equatable[System.Double] is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.Decimal")
struct Decimal: System.IFormattable,System.IConvertible,System.Comparable[System.Decimal],System.Equatable[System.Decimal],System.Runtime.Serialization.IDeserializationCallback is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.ReadOnlyMemory`1")
struct ReadOnlyMemory[T]: System.Equatable[System.ReadOnlyMemory[T]] is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.ConsoleKeyInfo")
struct ConsoleKeyInfo is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.ConsoleColor")
struct ConsoleColor is
si
@IL.stub()
@IL.name("class [mscorlib]System.MarshalByRefObject")
class MarshalByRefObject: System.Object is
si
@IL.stub()
@IL.name("class [mscorlib]System.IDisposable")
trait IDisposable is
si
@IL.stub()
@IL.name("class [mscorlib]System.IAsyncDisposable")
trait IAsyncDisposable is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.Memory`1")
struct Memory[T]: System.Equatable[System.Memory[T]] is
si
@IL.stub()
@IL.name("class [mscorlib]System.SystemException")
class SystemException: System.Exception,System.Runtime.Serialization.ISerializable is
si
@IL.stub()
@IL.name("class [mscorlib]System.Converter`2")
class Converter[TInput,TOutput]: System.MulticastDelegate,System.ICloneable,System.Runtime.Serialization.ISerializable is
si
@IL.stub()
@IL.name("class [mscorlib]System.Comparison`1")
class Comparison[T]: System.MulticastDelegate,System.ICloneable,System.Runtime.Serialization.ISerializable is
si
@IL.stub()
@IL.name("class [mscorlib]System.IFormattable")
trait IFormattable is
si
@IL.stub()
@IL.name("class [mscorlib]System.Version")
class Version: System.Object,System.ICloneable,System.Comparable[System.Version],System.Equatable[System.Version] is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.RuntimeTypeHandle")
struct RuntimeTypeHandle: System.Runtime.Serialization.ISerializable is
si
@IL.stub()
@IL.name("class [mscorlib]System.Array")
class Array: System.Object,System.ICloneable is
si
@IL.stub()
@IL.name("class [mscorlib]System.Attribute")
class Attribute: System.Object is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.RuntimeMethodHandle")
struct RuntimeMethodHandle: System.Runtime.Serialization.ISerializable is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.RuntimeFieldHandle")
struct RuntimeFieldHandle: System.Runtime.Serialization.ISerializable is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.TypedReference")
struct TypedReference is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.TimeSpan")
struct TimeSpan: System.Comparable[System.TimeSpan],System.Equatable[System.TimeSpan],System.IFormattable is
si
@IL.stub()
@IL.name("valuetype [mscorlib]System.Nullable`1")
struct Nullable[T] is
si
@IL.stub()
@IL.name("class [mscorlib]System.AggregateException")
class AggregateException: System.Exception,System.Runtime.Serialization.ISerializable is
si
si
