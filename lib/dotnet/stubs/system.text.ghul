namespace System.Text is
    @IL.stub()
    @IL.name("class ['mscorlib']System.Text.StringBuilder")
    class StringBuilder: System.Object,System.Runtime.Serialization.ISerializable is
        @IL.name("get_Chars")
        get_at(index: int) -> char;

        @IL.name("Insert")
        insert(index: int, value: ulong) -> System.Text.StringBuilder;

        @IL.name("Insert")
        insert(index: int, value: System.Object) -> System.Text.StringBuilder;

        @IL.name("Insert")
        insert(index: int, value: System.ReadOnlySpan[char]) -> System.Text.StringBuilder;

        @IL.name("AppendFormat")
        append_format(format: System.String, arg0: System.Object) -> System.Text.StringBuilder;

        @IL.name("AppendFormat")
        append_format(format: System.String, arg0: System.Object, arg1: System.Object) -> System.Text.StringBuilder;

        @IL.name("AppendFormat")
        append_format(format: System.String, arg0: System.Object, arg1: System.Object, arg2: System.Object) -> System.Text.StringBuilder;

        @IL.name("AppendFormat")
        append_format(format: System.String, args: System.Object[]) -> System.Text.StringBuilder;

        @IL.name("AppendFormat")
        append_format(provider: System.IFormatProvider, format: System.String, arg0: System.Object) -> System.Text.StringBuilder;

        @IL.name("AppendFormat")
        append_format(provider: System.IFormatProvider, format: System.String, arg0: System.Object, arg1: System.Object) -> System.Text.StringBuilder;

        @IL.name("AppendFormat")
        append_format(provider: System.IFormatProvider, format: System.String, arg0: System.Object, arg1: System.Object, arg2: System.Object) -> System.Text.StringBuilder;

        @IL.name("AppendFormat")
        append_format(provider: System.IFormatProvider, format: System.String, args: System.Object[]) -> System.Text.StringBuilder;

        @IL.name("Replace")
        replace(old_value: System.String, new_value: System.String) -> System.Text.StringBuilder;

        @IL.name("Equals")
        equals(sb: System.Text.StringBuilder) -> bool;

        @IL.name("Equals")
        equals(span: System.ReadOnlySpan[char]) -> bool;

        @IL.name("Replace")
        replace(old_value: System.String, new_value: System.String, start_index: int, count: int) -> System.Text.StringBuilder;

        @IL.name("Replace")
        replace(old_char: char, new_char: char) -> System.Text.StringBuilder;

        @IL.name("Replace")
        replace(old_char: char, new_char: char, start_index: int, count: int) -> System.Text.StringBuilder;

        @IL.name("Append")
        append(value: char ptr, value_count: int) -> System.Text.StringBuilder;

        @IL.name("EnsureCapacity")
        ensure_capacity(capacity: int) -> int;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("ToString")
        to_string(start_index: int, length: int) -> System.String;

        @IL.name("Clear")
        clear() -> System.Text.StringBuilder;

        @IL.name("Append")
        append(value: char, repeat_count: int) -> System.Text.StringBuilder;

        @IL.name("Append")
        append(value: char[], start_index: int, char_count: int) -> System.Text.StringBuilder;

        @IL.name("Append")
        append(value: System.String) -> System.Text.StringBuilder;

        @IL.name("Append")
        append(value: System.String, start_index: int, count: int) -> System.Text.StringBuilder;

        @IL.name("Append")
        append(value: System.Text.StringBuilder) -> System.Text.StringBuilder;

        @IL.name("Append")
        append(value: System.Text.StringBuilder, start_index: int, count: int) -> System.Text.StringBuilder;

        @IL.name("AppendLine")
        append_line() -> System.Text.StringBuilder;

        @IL.name("AppendLine")
        append_line(value: System.String) -> System.Text.StringBuilder;

        @IL.name("CopyTo")
        copy_to(source_index: int, destination: char[], destination_index: int, count: int);

        @IL.name("CopyTo")
        copy_to(source_index: int, destination: System.Span[char], count: int);

        @IL.name("Insert")
        insert(index: int, value: System.String, count: int) -> System.Text.StringBuilder;

        @IL.name("Remove")
        remove(start_index: int, length: int) -> System.Text.StringBuilder;

        @IL.name("Append")
        append(value: bool) -> System.Text.StringBuilder;

        @IL.name("Append")
        append(value: char) -> System.Text.StringBuilder;

        @IL.name("Append")
        append(value: byte) -> System.Text.StringBuilder;

        @IL.name("Append")
        append(value: ubyte) -> System.Text.StringBuilder;

        @IL.name("Append")
        append(value: short) -> System.Text.StringBuilder;

        @IL.name("Append")
        append(value: int) -> System.Text.StringBuilder;

        @IL.name("Append")
        append(value: long) -> System.Text.StringBuilder;

        @IL.name("Append")
        append(value: single) -> System.Text.StringBuilder;

        @IL.name("Append")
        append(value: double) -> System.Text.StringBuilder;

        @IL.name("Append")
        append(value: System.Decimal) -> System.Text.StringBuilder;

        @IL.name("Append")
        append(value: ushort) -> System.Text.StringBuilder;

        @IL.name("Append")
        append(value: uint) -> System.Text.StringBuilder;

        @IL.name("Append")
        append(value: ulong) -> System.Text.StringBuilder;

        @IL.name("Append")
        append(value: System.Object) -> System.Text.StringBuilder;

        @IL.name("Append")
        append(value: char[]) -> System.Text.StringBuilder;

        @IL.name("Append")
        append(value: System.ReadOnlySpan[char]) -> System.Text.StringBuilder;

        @IL.name("Append")
        append(value: System.ReadOnlyMemory[char]) -> System.Text.StringBuilder;

        @IL.name("AppendJoin")
        append_join(separator: System.String, values: System.Object[]) -> System.Text.StringBuilder;

        // append_join[T](separator: System.String, values: Collections.Iterable[T]) -> System.Text.StringBuilder;

        @IL.name("AppendJoin")
        append_join(separator: System.String, values: System.String[]) -> System.Text.StringBuilder;

        @IL.name("AppendJoin")
        append_join(separator: char, values: System.Object[]) -> System.Text.StringBuilder;

        // append_join[T](separator: char, values: Collections.Iterable[T]) -> System.Text.StringBuilder;

        @IL.name("AppendJoin")
        append_join(separator: char, values: System.String[]) -> System.Text.StringBuilder;

        @IL.name("Insert")
        insert(index: int, value: System.String) -> System.Text.StringBuilder;

        @IL.name("Insert")
        insert(index: int, value: bool) -> System.Text.StringBuilder;

        @IL.name("Insert")
        insert(index: int, value: byte) -> System.Text.StringBuilder;

        @IL.name("Insert")
        insert(index: int, value: ubyte) -> System.Text.StringBuilder;

        @IL.name("Insert")
        insert(index: int, value: short) -> System.Text.StringBuilder;

        @IL.name("Insert")
        insert(index: int, value: char) -> System.Text.StringBuilder;

        @IL.name("Insert")
        insert(index: int, value: char[]) -> System.Text.StringBuilder;

        @IL.name("Insert")
        insert(index: int, value: char[], start_index: int, char_count: int) -> System.Text.StringBuilder;

        @IL.name("Insert")
        insert(index: int, value: int) -> System.Text.StringBuilder;

        @IL.name("Insert")
        insert(index: int, value: long) -> System.Text.StringBuilder;

        @IL.name("Insert")
        insert(index: int, value: single) -> System.Text.StringBuilder;

        @IL.name("Insert")
        insert(index: int, value: double) -> System.Text.StringBuilder;

        @IL.name("Insert")
        insert(index: int, value: System.Decimal) -> System.Text.StringBuilder;

        @IL.name("Insert")
        insert(index: int, value: ushort) -> System.Text.StringBuilder;

        @IL.name("Insert")
        insert(index: int, value: uint) -> System.Text.StringBuilder;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name(".ctor")
        init();
        @IL.name(".ctor")
        init(capacity: int);
        @IL.name(".ctor")
        init(value: System.String);
        @IL.name(".ctor")
        init(value: System.String, capacity: int);
        @IL.name(".ctor")
        init(value: System.String, start_index: int, length: int, capacity: int);
        @IL.name(".ctor")
        init(capacity: int, max_capacity: int);
        @IL.name.read("get_Capacity") // @IL.name.assign("set_Capacity") 
        capacity: int;

        @IL.name.read("get_MaxCapacity") 
        max_capacity: int;

        @IL.name.read("get_Length") // @IL.name.assign("set_Length") 
        length: int;

        // named indexer: Chars
    si
    @IL.stub()
    @IL.name("valuetype ['mscorlib']System.Text.StringRuneEnumerator")
    struct StringRuneEnumerator: Collections.Iterable[System.Text.Rune],Collections.Iterator[System.Text.Rune],System.IDisposable,Collections.MoveNext is
    si
    @IL.stub()
    @IL.name("valuetype ['mscorlib']System.Text.Rune")
    struct Rune: System.Comparable[System.Text.Rune],System.Equatable[System.Text.Rune] is
    si
    @IL.stub()
    @IL.name("valuetype ['mscorlib']System.Text.NormalizationForm")
    struct NormalizationForm is
    si
@IL.stub()
@IL.name("class ['mscorlib']System.Text.Encoding")
class Encoding: System.Object,System.Cloneable is
si
si
