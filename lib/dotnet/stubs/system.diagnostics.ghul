namespace System.Diagnostics is
    @IL.stub()
    @IL.name("class [System]System.Diagnostics.Debugger")
    class Debugger: System.Object is
        @IL.name("Break")
        break_() static;

        @IL.name("Launch")
        launch() -> bool static;

        @IL.name("NotifyOfCrossThreadDependency")
        notify_of_cross_thread_dependency() static;

        @IL.name("Log")
        log(level: int, category: System.String, message: System.String) static;

        @IL.name("IsLogging")
        is_logging() -> bool static;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name.read("get_IsAttached") 
        is_attached: bool static;

        @IL.name("DefaultCategory")
        _default_category: System.String public;
    si
    @IL.stub()
    @IL.name("class [System]System.Diagnostics.Process")
    class Process: System.IDisposable is
        @IL.name("Start")
        start(file_name: System.String, arguments: System.String) -> System.Diagnostics.Process static;

        @IL.name("Start")
        start(start_info: System.Diagnostics.ProcessStartInfo) -> System.Diagnostics.Process static;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("WaitForExit")
        wait_for_exit();

        @IL.name("WaitForExit")
        wait_for_exit(milliseconds: int) -> bool;

        @IL.name("BeginOutputReadLine")
        begin_output_read_line();

        @IL.name("BeginErrorReadLine")
        begin_error_read_line();

        @IL.name("CancelOutputRead")
        cancel_output_read();

        @IL.name("CancelErrorRead")
        cancel_error_read();

        @IL.name("EnterDebugMode")
        enter_debug_mode() static;

        @IL.name("LeaveDebugMode")
        leave_debug_mode() static;

        // @IL.name("Start")
        // start(file_name: System.String, user_name: System.String, password: System.Security.SecureString, domain: System.String) -> System.Diagnostics.Process static;

        // @IL.name("Start")
        // start(file_name: System.String, arguments: System.String, user_name: System.String, password: System.Security.SecureString, domain: System.String) -> System.Diagnostics.Process static;

        @IL.name("Kill")
        kill();

        @IL.name("GetProcessesByName")
        get_processes_by_name(process_name: System.String, machine_name: System.String) -> System.Diagnostics.Process[] static;

        @IL.name("Kill")
        kill(entire_process_tree: bool);

        @IL.name("CloseMainWindow")
        close_main_window() -> bool;

        @IL.name("WaitForInputIdle")
        wait_for_input_idle() -> bool;

        @IL.name("WaitForInputIdle")
        wait_for_input_idle(milliseconds: int) -> bool;

        @IL.name("Close")
        close();

        @IL.name("GetProcessById")
        get_process_by_id(process_id: int, machine_name: System.String) -> System.Diagnostics.Process static;

        @IL.name("GetProcessById")
        get_process_by_id(process_id: int) -> System.Diagnostics.Process static;

        @IL.name("GetProcessesByName")
        get_processes_by_name(process_name: System.String) -> System.Diagnostics.Process[] static;

        @IL.name("GetProcesses")
        get_processes() -> System.Diagnostics.Process[] static;

        @IL.name("GetProcesses")
        get_processes(machine_name: System.String) -> System.Diagnostics.Process[] static;

        @IL.name("GetCurrentProcess")
        get_current_process() -> System.Diagnostics.Process static;

        @IL.name("Refresh")
        refresh();

        @IL.name("Start")
        start() -> bool;

        @IL.name("Start")
        start(file_name: System.String) -> System.Diagnostics.Process static;

        @IL.name("Dispose")
        dispose();

        @IL.name("GetLifetimeService")
        get_lifetime_service() -> System.Object;

        @IL.name("InitializeLifetimeService")
        initialize_lifetime_service() -> System.Object;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name(".ctor")
        init();

        // @IL.name.read("get_SafeHandle") 
        // safe_handle: Microsoft.Win32.SafeHandles.SafeProcessHandle;

        @IL.name.read("get_Handle") 
        handle: word;

        @IL.name.read("get_BasePriority") 
        base_priority: int;

        @IL.name.read("get_ExitCode") 
        exit_code: int;

        @IL.name.read("get_HasExited") 
        has_exited: bool;

        @IL.name.read("get_StartTime") 
        start_time: System.DateTime;

        @IL.name.read("get_ExitTime") 
        exit_time: System.DateTime;

        @IL.name.read("get_Id") 
        id: int;

        @IL.name.read("get_MachineName") 
        machine_name: System.String;

        @IL.name.read("get_MaxWorkingSet") @IL.name.assign("set_MaxWorkingSet") 
        max_working_set: word;

        @IL.name.read("get_MinWorkingSet") @IL.name.assign("set_MinWorkingSet") 
        min_working_set: word;

        @IL.name.read("get_Modules") 
        modules: System.Diagnostics.ProcessModuleCollection;

        @IL.name.read("get_NonpagedSystemMemorySize64") 
        nonpaged_system_memory_size64: long;

        @IL.name.read("get_NonpagedSystemMemorySize") 
        nonpaged_system_memory_size: int;

        @IL.name.read("get_PagedMemorySize64") 
        paged_memory_size64: long;

        @IL.name.read("get_PagedMemorySize") 
        paged_memory_size: int;

        @IL.name.read("get_PagedSystemMemorySize64") 
        paged_system_memory_size64: long;

        @IL.name.read("get_PagedSystemMemorySize") 
        paged_system_memory_size: int;

        @IL.name.read("get_PeakPagedMemorySize64") 
        peak_paged_memory_size64: long;

        @IL.name.read("get_PeakPagedMemorySize") 
        peak_paged_memory_size: int;

        @IL.name.read("get_PeakWorkingSet64") 
        peak_working_set64: long;

        @IL.name.read("get_PeakWorkingSet") 
        peak_working_set: int;

        @IL.name.read("get_PeakVirtualMemorySize64") 
        peak_virtual_memory_size64: long;

        @IL.name.read("get_PeakVirtualMemorySize") 
        peak_virtual_memory_size: int;

        @IL.name.read("get_PriorityBoostEnabled") @IL.name.assign("set_PriorityBoostEnabled") 
        priority_boost_enabled: bool;

        @IL.name.read("get_PriorityClass") @IL.name.assign("set_PriorityClass") 
        priority_class: System.Diagnostics.ProcessPriorityClass;

        @IL.name.read("get_PrivateMemorySize64") 
        private_memory_size64: long;

        @IL.name.read("get_PrivateMemorySize") 
        private_memory_size: int;

        @IL.name.read("get_ProcessName") 
        process_name: System.String;

        @IL.name.read("get_ProcessorAffinity") @IL.name.assign("set_ProcessorAffinity") 
        processor_affinity: word;

        @IL.name.read("get_SessionId") 
        session_id: int;

        @IL.name.read("get_StartInfo") @IL.name.assign("set_StartInfo") 
        start_info: System.Diagnostics.ProcessStartInfo;

        @IL.name.read("get_Threads") 
        threads: System.Diagnostics.ProcessThreadCollection;

        @IL.name.read("get_HandleCount") 
        handle_count: int;

        @IL.name.read("get_VirtualMemorySize64") 
        virtual_memory_size64: long;

        @IL.name.read("get_VirtualMemorySize") 
        virtual_memory_size: int;

        @IL.name.read("get_EnableRaisingEvents") @IL.name.assign("set_EnableRaisingEvents") 
        enable_raising_events: bool;

        @IL.name.read("get_StandardInput") 
        standard_input: System.IO2.StreamWriter;

        @IL.name.read("get_StandardOutput") 
        standard_output: System.IO2.StreamReader;

        @IL.name.read("get_StandardError") 
        standard_error: System.IO2.StreamReader;

        @IL.name.read("get_WorkingSet64") 
        working_set64: long;

        @IL.name.read("get_WorkingSet") 
        working_set: int;

        // @IL.name.read("get_SynchronizingObject") @IL.name.assign("set_SynchronizingObject") 
        // synchronizing_object: System.ComponentModel.ISynchronizeInvoke;

        @IL.name.read("get_MainModule") 
        main_module: System.Diagnostics.ProcessModule;

        @IL.name.read("get_MainWindowHandle") 
        main_window_handle: word;

        @IL.name.read("get_MainWindowTitle") 
        main_window_title: System.String;

        @IL.name.read("get_Responding") 
        responding: bool;

        @IL.name.read("get_PrivilegedProcessorTime") 
        privileged_processor_time: System.TimeSpan;

        @IL.name.read("get_TotalProcessorTime") 
        total_processor_time: System.TimeSpan;

        @IL.name.read("get_UserProcessorTime") 
        user_processor_time: System.TimeSpan;

        // @IL.name.read("get_Site") @IL.name.assign("set_Site") 
        // site: System.ComponentModel.ISite;

        // @IL.name.read("get_Container") 
        // container: System.ComponentModel.IContainer;

    si
    @IL.stub()
    @IL.name("class [System]System.Diagnostics.ProcessModule")
    class ProcessModule: System.IDisposable is
        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Dispose")
        dispose();

        @IL.name("GetLifetimeService")
        get_lifetime_service() -> System.Object;

        @IL.name("InitializeLifetimeService")
        initialize_lifetime_service() -> System.Object;

        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name.read("get_ModuleName") 
        module_name: System.String;

        @IL.name.read("get_FileName") 
        file_name: System.String;

        @IL.name.read("get_BaseAddress") 
        base_address: word;

        @IL.name.read("get_ModuleMemorySize") 
        module_memory_size: int;

        @IL.name.read("get_EntryPointAddress") 
        entry_point_address: word;

        @IL.name.read("get_FileVersionInfo") 
        file_version_info: System.Diagnostics.FileVersionInfo;

        // @IL.name.read("get_Site") @IL.name.assign("set_Site") 
        // site: System.ComponentModel.ISite;

        // @IL.name.read("get_Container") 
        // container: System.ComponentModel.IContainer;

    si
    @IL.stub()
    @IL.name("class [System]System.Diagnostics.ProcessStartInfo")
    class ProcessStartInfo: System.Object is
        @IL.name("GetType")
        get_type() -> System.Type2;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name(".ctor")
        init();
        @IL.name(".ctor")
        init(file_name: System.String);
        @IL.name(".ctor")
        init(file_name: System.String, arguments: System.String);
        @IL.name.read("get_Arguments") @IL.name.assign("set_Arguments") 
        arguments: System.String;

        @IL.name.read("get_ArgumentList") 
        argument_list: Collections.CollectionBase[System.String];

        @IL.name.read("get_CreateNoWindow") @IL.name.assign("set_CreateNoWindow") 
        create_no_window: bool;

        // @IL.name.read("get_EnvironmentVariables") 
        // environment_variables: System.Collections.Specialized.StringDictionary;

        @IL.name.read("get_Environment") 
        environment: Collections.MutableMap[System.String,System.String];

        @IL.name.read("get_RedirectStandardInput") @IL.name.assign("set_RedirectStandardInput") 
        redirect_standard_input: bool;

        @IL.name.read("get_RedirectStandardOutput") @IL.name.assign("set_RedirectStandardOutput") 
        redirect_standard_output: bool;

        @IL.name.read("get_RedirectStandardError") @IL.name.assign("set_RedirectStandardError") 
        redirect_standard_error: bool;

        @IL.name.read("get_StandardInputEncoding") @IL.name.assign("set_StandardInputEncoding") 
        standard_input_encoding: System.Text.Encoding;

        @IL.name.read("get_StandardErrorEncoding") @IL.name.assign("set_StandardErrorEncoding") 
        standard_error_encoding: System.Text.Encoding;

        @IL.name.read("get_StandardOutputEncoding") @IL.name.assign("set_StandardOutputEncoding") 
        standard_output_encoding: System.Text.Encoding;

        @IL.name.read("get_FileName") @IL.name.assign("set_FileName") 
        file_name: System.String;

        @IL.name.read("get_WorkingDirectory") @IL.name.assign("set_WorkingDirectory") 
        working_directory: System.String;

        @IL.name.read("get_ErrorDialog") @IL.name.assign("set_ErrorDialog") 
        error_dialog: bool;

        @IL.name.read("get_ErrorDialogParentHandle") @IL.name.assign("set_ErrorDialogParentHandle") 
        error_dialog_parent_handle: word;

        @IL.name.read("get_UserName") @IL.name.assign("set_UserName") 
        user_name: System.String;

        @IL.name.read("get_Verb") @IL.name.assign("set_Verb") 
        verb: System.String;

        @IL.name.read("get_WindowStyle") @IL.name.assign("set_WindowStyle") 
        window_style: System.Diagnostics.ProcessWindowStyle;

        @IL.name.read("get_PasswordInClearText") @IL.name.assign("set_PasswordInClearText") 
        password_in_clear_text: System.String;

        @IL.name.read("get_Domain") @IL.name.assign("set_Domain") 
        domain: System.String;

        @IL.name.read("get_LoadUserProfile") @IL.name.assign("set_LoadUserProfile") 
        load_user_profile: bool;

        @IL.name.read("get_UseShellExecute") @IL.name.assign("set_UseShellExecute") 
        use_shell_execute: bool;

        @IL.name.read("get_Verbs") 
        verbs: System.String[];

        // @IL.name.read("get_Password") @IL.name.assign("set_Password") 
        // password: System.Security.SecureString;

    si
    
    @IL.stub()
    @IL.name("class [System]System.Diagnostics.ProcessModuleCollection")
    class ProcessModuleCollection is
    si
    @IL.stub()
    @IL.name("valuetype [System]System.Diagnostics.ProcessPriorityClass")
    struct ProcessPriorityClass is
    si
    @IL.stub()
    @IL.name("class [System]System.Diagnostics.ProcessThreadCollection")
    class ProcessThreadCollection is
    si
    @IL.stub()
    @IL.name("class [System]System.Diagnostics.FileVersionInfo")
    class FileVersionInfo: System.Object is
    si
    @IL.stub()
    @IL.name("valuetype [System]System.Diagnostics.ProcessWindowStyle")
    struct ProcessWindowStyle is
    si
si
