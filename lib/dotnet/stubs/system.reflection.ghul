namespace System.Reflection is
    @IL.stub()
    @IL.name("class [mscorlib]System.Reflection.Assembly")
    class Assembly: System.Object,System.Reflection.ICustomAttributeProvider,System.Runtime.Serialization.ISerializable is
        @IL.name("Load")
        load(assembly_string: System.String) -> System.Reflection.Assembly static;

        @IL.name("LoadWithPartialName")
        load_with_partial_name(partial_name: System.String) -> System.Reflection.Assembly static;

        @IL.name("Load")
        load(assembly_ref: System.Reflection.AssemblyName) -> System.Reflection.Assembly static;

        @IL.name("GetExecutingAssembly")
        get_executing_assembly() -> System.Reflection.Assembly static;

        @IL.name("GetCallingAssembly")
        get_calling_assembly() -> System.Reflection.Assembly static;

        @IL.name("GetEntryAssembly")
        get_entry_assembly() -> System.Reflection.Assembly static;

        @IL.name("GetTypes")
        get_types() -> System.Type[];

        @IL.name("GetExportedTypes")
        get_exported_types() -> System.Type[];

        @IL.name("GetForwardedTypes")
        get_forwarded_types() -> System.Type[];

        @IL.name("GetManifestResourceInfo")
        get_manifest_resource_info(resource_name: System.String) -> System.Reflection.ManifestResourceInfo;

        @IL.name("GetManifestResourceNames")
        get_manifest_resource_names() -> System.String[];

        @IL.name("GetManifestResourceStream")
        get_manifest_resource_stream(name: System.String) -> System.IO.Stream;

        @IL.name("GetManifestResourceStream")
        get_manifest_resource_stream(type: System.Type, name: System.String) -> System.IO.Stream;

        @IL.name("GetName")
        get_name() -> System.Reflection.AssemblyName;

        @IL.name("GetName")
        get_name(copied_name: bool) -> System.Reflection.AssemblyName;

        @IL.name("GetType")
        get_type(name: System.String) -> System.Type;

        @IL.name("GetType")
        get_type(name: System.String, throw_on_error: bool) -> System.Type;

        @IL.name("GetType")
        get_type(name: System.String, throw_on_error: bool, ignore_case: bool) -> System.Type;

        @IL.name("IsDefined")
        is_defined(attribute_type: System.Type, inherit: bool) -> bool;

        @IL.name("GetCustomAttributesData")
        get_custom_attributes_data() -> Collections.MutableList[System.Reflection.CustomAttributeData];

        @IL.name("GetCustomAttributes")
        get_custom_attributes(inherit: bool) -> System.Object[];

        @IL.name("GetCustomAttributes")
        get_custom_attributes(attribute_type: System.Type, inherit: bool) -> System.Object[];

        @IL.name("CreateInstance")
        create_instance(type_name: System.String) -> System.Object;

        @IL.name("CreateInstance")
        create_instance(type_name: System.String, ignore_case: bool) -> System.Object;

        @IL.name("CreateInstance")
        create_instance(type_name: System.String, ignore_case: bool, binding_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, args: System.Object[], culture: System.Globalization.CultureInfo, activation_attributes: System.Object[]) -> System.Object;

        @IL.name("GetModule")
        get_module(name: System.String) -> System.Reflection.Module;

        @IL.name("GetModules")
        get_modules() -> System.Reflection.Module[];

        @IL.name("GetModules")
        get_modules(get_resource_modules: bool) -> System.Reflection.Module[];

        @IL.name("GetLoadedModules")
        get_loaded_modules() -> System.Reflection.Module[];

        @IL.name("GetLoadedModules")
        get_loaded_modules(get_resource_modules: bool) -> System.Reflection.Module[];

        @IL.name("GetReferencedAssemblies")
        get_referenced_assemblies() -> System.Reflection.AssemblyName[];

        @IL.name("GetSatelliteAssembly")
        get_satellite_assembly(culture: System.Globalization.CultureInfo) -> System.Reflection.Assembly;

        @IL.name("GetSatelliteAssembly")
        get_satellite_assembly(culture: System.Globalization.CultureInfo, version: System.Version) -> System.Reflection.Assembly;

        @IL.name("GetFile")
        get_file(name: System.String) -> System.IO.FileStream;

        @IL.name("GetFiles")
        get_files() -> System.IO.FileStream[];

        @IL.name("GetFiles")
        get_files(get_resource_modules: bool) -> System.IO.FileStream[];

        @IL.name("GetObjectData")
        get_object_data(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext);

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(o: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("CreateQualifiedName")
        create_qualified_name(assembly_name: System.String, type_name: System.String) -> System.String static;

        @IL.name("GetAssembly")
        get_assembly(type: System.Type) -> System.Reflection.Assembly static;

        @IL.name("Load")
        load(raw_assembly: ubyte[]) -> System.Reflection.Assembly static;

        @IL.name("Load")
        load(raw_assembly: ubyte[], raw_symbol_store: ubyte[]) -> System.Reflection.Assembly static;

        @IL.name("LoadFile")
        load_file(path: System.String) -> System.Reflection.Assembly static;

        @IL.name("LoadFrom")
        load_from(assembly_file: System.String) -> System.Reflection.Assembly static;

        @IL.name("LoadFrom")
        load_from(assembly_file: System.String, hash_value: ubyte[], hash_algorithm: System.Configuration.Assemblies.AssemblyHashAlgorithm) -> System.Reflection.Assembly static;

        @IL.name("UnsafeLoadFrom")
        unsafe_load_from(assembly_file: System.String) -> System.Reflection.Assembly static;

        @IL.name("LoadModule")
        load_module(module_name: System.String, raw_module: ubyte[]) -> System.Reflection.Module;

        @IL.name("LoadModule")
        load_module(module_name: System.String, raw_module: ubyte[], raw_symbol_store: ubyte[]) -> System.Reflection.Module;

        @IL.name("ReflectionOnlyLoad")
        reflection_only_load(raw_assembly: ubyte[]) -> System.Reflection.Assembly static;

        @IL.name("ReflectionOnlyLoad")
        reflection_only_load(assembly_string: System.String) -> System.Reflection.Assembly static;

        @IL.name("ReflectionOnlyLoadFrom")
        reflection_only_load_from(assembly_file: System.String) -> System.Reflection.Assembly static;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name.read("get_DefinedTypes") 
        defined_types: Collections.Iterable[System.Reflection.TypeInfo];

        @IL.name.read("get_ExportedTypes") 
        exported_types: Collections.Iterable[System.Type];

        @IL.name.read("get_CodeBase") 
        code_base: System.String;

        @IL.name.read("get_EntryPoint") 
        entry_point: System.Reflection.MethodInfo;

        @IL.name.read("get_FullName") 
        full_name: System.String;

        @IL.name.read("get_ImageRuntimeVersion") 
        image_runtime_version: System.String;

        @IL.name.read("get_IsDynamic") 
        is_dynamic: bool;

        @IL.name.read("get_Location") 
        location: System.String;

        @IL.name.read("get_ReflectionOnly") 
        reflection_only: bool;

        @IL.name.read("get_IsCollectible") 
        is_collectible: bool;

        @IL.name.read("get_IsFullyTrusted") 
        is_fully_trusted: bool;

        @IL.name.read("get_CustomAttributes") 
        custom_attributes: Collections.Iterable[System.Reflection.CustomAttributeData];

        @IL.name.read("get_EscapedCodeBase") 
        escaped_code_base: System.String;

        @IL.name.read("get_ManifestModule") 
        manifest_module: System.Reflection.Module;

        @IL.name.read("get_Modules") 
        modules: Collections.Iterable[System.Reflection.Module];

        @IL.name.read("get_GlobalAssemblyCache") 
        global_assembly_cache: bool;

        @IL.name.read("get_HostContext") 
        host_context: long;

        @IL.name.read("get_SecurityRuleSet") 
        security_rule_set: System.Security.SecurityRuleSet;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.Reflection.Module")
    class Module: System.Object,System.Reflection.ICustomAttributeProvider,System.Runtime.Serialization.ISerializable is
        @IL.name("GetPEKind")
        get_p_e_kind(pe_kind: System.Reflection.PortableExecutableKinds ref, machine: System.Reflection.ImageFileMachine ref);

        @IL.name("IsResource")
        is_resource() -> bool;

        @IL.name("IsDefined")
        is_defined(attribute_type: System.Type, inherit: bool) -> bool;

        @IL.name("GetCustomAttributesData")
        get_custom_attributes_data() -> Collections.MutableList[System.Reflection.CustomAttributeData];

        @IL.name("GetCustomAttributes")
        get_custom_attributes(inherit: bool) -> System.Object[];

        @IL.name("GetCustomAttributes")
        get_custom_attributes(attribute_type: System.Type, inherit: bool) -> System.Object[];

        @IL.name("GetMethod")
        get_method(name: System.String) -> System.Reflection.MethodInfo;

        @IL.name("GetMethod")
        get_method(name: System.String, types: System.Type[]) -> System.Reflection.MethodInfo;

        @IL.name("GetMethod")
        get_method(name: System.String, binding_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, call_convention: System.Reflection.CallingConventions, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]) -> System.Reflection.MethodInfo;

        @IL.name("GetMethods")
        get_methods() -> System.Reflection.MethodInfo[];

        @IL.name("GetMethods")
        get_methods(binding_flags: System.Reflection.BindingFlags) -> System.Reflection.MethodInfo[];

        @IL.name("GetField")
        get_field(name: System.String) -> System.Reflection.FieldInfo;

        @IL.name("GetField")
        get_field(name: System.String, binding_attr: System.Reflection.BindingFlags) -> System.Reflection.FieldInfo;

        @IL.name("GetFields")
        get_fields() -> System.Reflection.FieldInfo[];

        @IL.name("GetFields")
        get_fields(binding_flags: System.Reflection.BindingFlags) -> System.Reflection.FieldInfo[];

        @IL.name("GetTypes")
        get_types() -> System.Type[];

        @IL.name("GetType")
        get_type(class_name: System.String) -> System.Type;

        @IL.name("GetType")
        get_type(class_name: System.String, ignore_case: bool) -> System.Type;

        @IL.name("GetType")
        get_type(class_name: System.String, throw_on_error: bool, ignore_case: bool) -> System.Type;

        @IL.name("FindTypes")
        find_types(filter: System.Reflection.TypeFilter, filter_criteria: System.Object) -> System.Type[];

        @IL.name("ResolveField")
        resolve_field(metadata_token: int) -> System.Reflection.FieldInfo;

        @IL.name("ResolveField")
        resolve_field(metadata_token: int, generic_type_arguments: System.Type[], generic_method_arguments: System.Type[]) -> System.Reflection.FieldInfo;

        @IL.name("ResolveMember")
        resolve_member(metadata_token: int) -> System.Reflection.MemberInfo;

        @IL.name("ResolveMember")
        resolve_member(metadata_token: int, generic_type_arguments: System.Type[], generic_method_arguments: System.Type[]) -> System.Reflection.MemberInfo;

        @IL.name("ResolveMethod")
        resolve_method(metadata_token: int) -> System.Reflection.MethodBase;

        @IL.name("ResolveMethod")
        resolve_method(metadata_token: int, generic_type_arguments: System.Type[], generic_method_arguments: System.Type[]) -> System.Reflection.MethodBase;

        @IL.name("ResolveSignature")
        resolve_signature(metadata_token: int) -> ubyte[];

        @IL.name("ResolveString")
        resolve_string(metadata_token: int) -> System.String;

        @IL.name("ResolveType")
        resolve_type(metadata_token: int) -> System.Type;

        @IL.name("ResolveType")
        resolve_type(metadata_token: int, generic_type_arguments: System.Type[], generic_method_arguments: System.Type[]) -> System.Type;

        @IL.name("GetObjectData")
        get_object_data(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext);

        @IL.name("Equals")
        equals(o: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name.read("get_Assembly") 
        assembly: System.Reflection.Assembly;

        @IL.name.read("get_FullyQualifiedName") 
        fully_qualified_name: System.String;

        @IL.name.read("get_Name") 
        name: System.String;

        @IL.name.read("get_MDStreamVersion") 
        mdstream_version: int;

        @IL.name.read("get_ModuleVersionId") 
        module_version_id: System.Guid;

        @IL.name.read("get_ScopeName") 
        scope_name: System.String;

        @IL.name.read("get_ModuleHandle") 
        module_handle: System.ModuleHandle;

        @IL.name.read("get_CustomAttributes") 
        custom_attributes: Collections.Iterable[System.Reflection.CustomAttributeData];

        @IL.name.read("get_MetadataToken") 
        metadata_token: int;

        @IL.name("FilterTypeName")
        _filter_type_name: System.Reflection.TypeFilter public;
        @IL.name("FilterTypeNameIgnoreCase")
        _filter_type_name_ignore_case: System.Reflection.TypeFilter public;
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.Reflection.MemberInfo")
    class MemberInfo: System.Object,System.Reflection.ICustomAttributeProvider is
        @IL.name("HasSameMetadataDefinitionAs")
        has_same_metadata_definition_as(other: System.Reflection.MemberInfo) -> bool;

        @IL.name("IsDefined")
        is_defined(attribute_type: System.Type, inherit: bool) -> bool;

        @IL.name("GetCustomAttributes")
        get_custom_attributes(inherit: bool) -> System.Object[];

        @IL.name("GetCustomAttributes")
        get_custom_attributes(attribute_type: System.Type, inherit: bool) -> System.Object[];

        @IL.name("GetCustomAttributesData")
        get_custom_attributes_data() -> Collections.MutableList[System.Reflection.CustomAttributeData];

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name.read("get_MemberType") 
        member_type: System.Reflection.MemberTypes;

        @IL.name.read("get_Name") 
        name: System.String;

        @IL.name.read("get_DeclaringType") 
        declaring_type: System.Type;

        @IL.name.read("get_ReflectedType") 
        reflected_type: System.Type;

        @IL.name.read("get_Module") 
        module: System.Reflection.Module;

        @IL.name.read("get_CustomAttributes") 
        custom_attributes: Collections.Iterable[System.Reflection.CustomAttributeData];

        @IL.name.read("get_IsCollectible") 
        is_collectible: bool;

        @IL.name.read("get_MetadataToken") 
        metadata_token: int;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.Reflection.MethodInfo")
    class MethodInfo: System.Reflection.MethodBase,System.Reflection.ICustomAttributeProvider is
        @IL.name("GetGenericArguments")
        get_generic_arguments() -> System.Type[];

        @IL.name("GetGenericMethodDefinition")
        get_generic_method_definition() -> System.Reflection.MethodInfo;

        @IL.name("MakeGenericMethod")
        make_generic_method(type_arguments: System.Type[]) -> System.Reflection.MethodInfo;

        @IL.name("GetBaseDefinition")
        get_base_definition() -> System.Reflection.MethodInfo;

        @IL.name("CreateDelegate")
        create_delegate(delegate_type: System.Type) -> System.Delegate;

        @IL.name("CreateDelegate")
        create_delegate(delegate_type: System.Type, target: System.Object) -> System.Delegate;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("GetParameters")
        get_parameters() -> System.Reflection.ParameterInfo[];

        @IL.name("GetMethodImplementationFlags")
        get_method_implementation_flags() -> System.Reflection.MethodImplAttributes;

        @IL.name("GetMethodBody")
        get_method_body() -> System.Reflection.MethodBody;

        @IL.name("Invoke")
        invoke(obj: System.Object, parameters: System.Object[]) -> System.Object;

        @IL.name("Invoke")
        invoke(obj: System.Object, invoke_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, parameters: System.Object[], culture: System.Globalization.CultureInfo) -> System.Object;

        @IL.name("HasSameMetadataDefinitionAs")
        has_same_metadata_definition_as(other: System.Reflection.MemberInfo) -> bool;

        @IL.name("IsDefined")
        is_defined(attribute_type: System.Type, inherit: bool) -> bool;

        @IL.name("GetCustomAttributes")
        get_custom_attributes(inherit: bool) -> System.Object[];

        @IL.name("GetCustomAttributes")
        get_custom_attributes(attribute_type: System.Type, inherit: bool) -> System.Object[];

        @IL.name("GetCustomAttributesData")
        get_custom_attributes_data() -> Collections.MutableList[System.Reflection.CustomAttributeData];

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name.read("get_MemberType") 
        member_type: System.Reflection.MemberTypes;

        @IL.name.read("get_ReturnParameter") 
        return_parameter: System.Reflection.ParameterInfo;

        @IL.name.read("get_ReturnType") 
        return_type: System.Type;

        @IL.name.read("get_ReturnTypeCustomAttributes") 
        return_type_custom_attributes: System.Reflection.ICustomAttributeProvider;

        @IL.name.read("get_Attributes") 
        attributes: System.Reflection.MethodAttributes;

        @IL.name.read("get_MethodImplementationFlags") 
        method_implementation_flags: System.Reflection.MethodImplAttributes;

        @IL.name.read("get_CallingConvention") 
        calling_convention: System.Reflection.CallingConventions;

        @IL.name.read("get_IsAbstract") 
        is_abstract: bool;

        @IL.name.read("get_IsConstructor") 
        is_constructor: bool;

        @IL.name.read("get_IsFinal") 
        is_final: bool;

        @IL.name.read("get_IsHideBySig") 
        is_hide_by_sig: bool;

        @IL.name.read("get_IsSpecialName") 
        is_special_name: bool;

        @IL.name.read("get_IsStatic") 
        is_static: bool;

        @IL.name.read("get_IsVirtual") 
        is_virtual: bool;

        @IL.name.read("get_IsAssembly") 
        is_assembly: bool;

        @IL.name.read("get_IsFamily") 
        is_family: bool;

        @IL.name.read("get_IsFamilyAndAssembly") 
        is_family_and_assembly: bool;

        @IL.name.read("get_IsFamilyOrAssembly") 
        is_family_or_assembly: bool;

        @IL.name.read("get_IsPrivate") 
        is_private: bool;

        @IL.name.read("get_IsPublic") 
        is_public: bool;

        @IL.name.read("get_IsConstructedGenericMethod") 
        is_constructed_generic_method: bool;

        @IL.name.read("get_IsGenericMethod") 
        is_generic_method: bool;

        @IL.name.read("get_IsGenericMethodDefinition") 
        is_generic_method_definition: bool;

        @IL.name.read("get_ContainsGenericParameters") 
        contains_generic_parameters: bool;

        @IL.name.read("get_MethodHandle") 
        method_handle: System.RuntimeMethodHandle;

        @IL.name.read("get_IsSecurityCritical") 
        is_security_critical: bool;

        @IL.name.read("get_IsSecuritySafeCritical") 
        is_security_safe_critical: bool;

        @IL.name.read("get_IsSecurityTransparent") 
        is_security_transparent: bool;

        @IL.name.read("get_Name") 
        name: System.String;

        @IL.name.read("get_DeclaringType") 
        declaring_type: System.Type;

        @IL.name.read("get_ReflectedType") 
        reflected_type: System.Type;

        @IL.name.read("get_Module") 
        module: System.Reflection.Module;

        @IL.name.read("get_CustomAttributes") 
        custom_attributes: Collections.Iterable[System.Reflection.CustomAttributeData];

        @IL.name.read("get_IsCollectible") 
        is_collectible: bool;

        @IL.name.read("get_MetadataToken") 
        metadata_token: int;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.Reflection.PropertyInfo")
    class PropertyInfo: System.Reflection.MemberInfo,System.Reflection.ICustomAttributeProvider is
        @IL.name("GetIndexParameters")
        get_index_parameters() -> System.Reflection.ParameterInfo[];

        @IL.name("GetAccessors")
        get_accessors() -> System.Reflection.MethodInfo[];

        @IL.name("GetAccessors")
        get_accessors(non_public: bool) -> System.Reflection.MethodInfo[];

        @IL.name("GetGetMethod")
        get_get_method() -> System.Reflection.MethodInfo;

        @IL.name("GetGetMethod")
        get_get_method(non_public: bool) -> System.Reflection.MethodInfo;

        @IL.name("GetSetMethod")
        get_set_method() -> System.Reflection.MethodInfo;

        @IL.name("GetSetMethod")
        get_set_method(non_public: bool) -> System.Reflection.MethodInfo;

        @IL.name("GetOptionalCustomModifiers")
        get_optional_custom_modifiers() -> System.Type[];

        @IL.name("GetRequiredCustomModifiers")
        get_required_custom_modifiers() -> System.Type[];

        @IL.name("GetValue")
        get_value(obj: System.Object) -> System.Object;

        @IL.name("GetValue")
        get_value(obj: System.Object, index: System.Object[]) -> System.Object;

        @IL.name("GetValue")
        get_value(obj: System.Object, invoke_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, index: System.Object[], culture: System.Globalization.CultureInfo) -> System.Object;

        @IL.name("GetConstantValue")
        get_constant_value() -> System.Object;

        @IL.name("GetRawConstantValue")
        get_raw_constant_value() -> System.Object;

        @IL.name("SetValue")
        set_value(obj: System.Object, value: System.Object);

        @IL.name("SetValue")
        set_value(obj: System.Object, value: System.Object, index: System.Object[]);

        @IL.name("SetValue")
        set_value(obj: System.Object, value: System.Object, invoke_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, index: System.Object[], culture: System.Globalization.CultureInfo);

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("HasSameMetadataDefinitionAs")
        has_same_metadata_definition_as(other: System.Reflection.MemberInfo) -> bool;

        @IL.name("IsDefined")
        is_defined(attribute_type: System.Type, inherit: bool) -> bool;

        @IL.name("GetCustomAttributes")
        get_custom_attributes(inherit: bool) -> System.Object[];

        @IL.name("GetCustomAttributes")
        get_custom_attributes(attribute_type: System.Type, inherit: bool) -> System.Object[];

        @IL.name("GetCustomAttributesData")
        get_custom_attributes_data() -> Collections.MutableList[System.Reflection.CustomAttributeData];

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name.read("get_MemberType") 
        member_type: System.Reflection.MemberTypes;

        @IL.name.read("get_PropertyType") 
        property_type: System.Type;

        @IL.name.read("get_Attributes") 
        attributes: System.Reflection.PropertyAttributes;

        @IL.name.read("get_IsSpecialName") 
        is_special_name: bool;

        @IL.name.read("get_CanRead") 
        can_read: bool;

        @IL.name.read("get_CanWrite") 
        can_write: bool;

        @IL.name.read("get_GetMethod") 
        get_method: System.Reflection.MethodInfo;

        @IL.name.read("get_SetMethod") 
        set_method: System.Reflection.MethodInfo;

        @IL.name.read("get_Name") 
        name: System.String;

        @IL.name.read("get_DeclaringType") 
        declaring_type: System.Type;

        @IL.name.read("get_ReflectedType") 
        reflected_type: System.Type;

        @IL.name.read("get_Module") 
        module: System.Reflection.Module;

        @IL.name.read("get_CustomAttributes") 
        custom_attributes: Collections.Iterable[System.Reflection.CustomAttributeData];

        @IL.name.read("get_IsCollectible") 
        is_collectible: bool;

        @IL.name.read("get_MetadataToken") 
        metadata_token: int;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.Reflection.TypeInfo")
    class TypeInfo: System.Type,System.Reflection.ICustomAttributeProvider,System.Reflection.IReflect,System.Reflection.IReflectableType is
        @IL.name("AsType")
        as_type() -> System.Type;

        @IL.name("GetDeclaredEvent")
        get_declared_event(name: System.String) -> System.Reflection.EventInfo;

        @IL.name("GetDeclaredField")
        get_declared_field(name: System.String) -> System.Reflection.FieldInfo;

        @IL.name("GetDeclaredMethod")
        get_declared_method(name: System.String) -> System.Reflection.MethodInfo;

        @IL.name("GetDeclaredNestedType")
        get_declared_nested_type(name: System.String) -> System.Reflection.TypeInfo;

        @IL.name("GetDeclaredProperty")
        get_declared_property(name: System.String) -> System.Reflection.PropertyInfo;

        @IL.name("GetDeclaredMethods")
        get_declared_methods(name: System.String) -> Collections.Iterable[System.Reflection.MethodInfo];

        @IL.name("IsAssignableFrom")
        is_assignable_from(type_info: System.Reflection.TypeInfo) -> bool;

        @IL.name("GetField")
        get_field(name: System.String) -> System.Reflection.FieldInfo;

        @IL.name("GetField")
        get_field(name: System.String, binding_attr: System.Reflection.BindingFlags) -> System.Reflection.FieldInfo;

        @IL.name("GetFields")
        get_fields() -> System.Reflection.FieldInfo[];

        @IL.name("GetFields")
        get_fields(binding_attr: System.Reflection.BindingFlags) -> System.Reflection.FieldInfo[];

        @IL.name("GetMember")
        get_member(name: System.String) -> System.Reflection.MemberInfo[];

        @IL.name("GetMember")
        get_member(name: System.String, binding_attr: System.Reflection.BindingFlags) -> System.Reflection.MemberInfo[];

        @IL.name("GetMember")
        get_member(name: System.String, type: System.Reflection.MemberTypes, binding_attr: System.Reflection.BindingFlags) -> System.Reflection.MemberInfo[];

        @IL.name("GetMembers")
        get_members() -> System.Reflection.MemberInfo[];

        @IL.name("GetMembers")
        get_members(binding_attr: System.Reflection.BindingFlags) -> System.Reflection.MemberInfo[];

        @IL.name("GetMethod")
        get_method(name: System.String) -> System.Reflection.MethodInfo;

        @IL.name("GetMethod")
        get_method(name: System.String, binding_attr: System.Reflection.BindingFlags) -> System.Reflection.MethodInfo;

        @IL.name("GetMethod")
        get_method(name: System.String, types: System.Type[]) -> System.Reflection.MethodInfo;

        @IL.name("GetMethod")
        get_method(name: System.String, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]) -> System.Reflection.MethodInfo;

        @IL.name("GetMethod")
        get_method(name: System.String, binding_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]) -> System.Reflection.MethodInfo;

        @IL.name("GetMethod")
        get_method(name: System.String, binding_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, call_convention: System.Reflection.CallingConventions, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]) -> System.Reflection.MethodInfo;

        @IL.name("GetMethod")
        get_method(name: System.String, generic_parameter_count: int, types: System.Type[]) -> System.Reflection.MethodInfo;

        @IL.name("GetMethod")
        get_method(name: System.String, generic_parameter_count: int, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]) -> System.Reflection.MethodInfo;

        @IL.name("GetMethod")
        get_method(name: System.String, generic_parameter_count: int, binding_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]) -> System.Reflection.MethodInfo;

        @IL.name("GetMethod")
        get_method(name: System.String, generic_parameter_count: int, binding_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, call_convention: System.Reflection.CallingConventions, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]) -> System.Reflection.MethodInfo;

        @IL.name("GetMethods")
        get_methods() -> System.Reflection.MethodInfo[];

        @IL.name("GetMethods")
        get_methods(binding_attr: System.Reflection.BindingFlags) -> System.Reflection.MethodInfo[];

        @IL.name("GetNestedType")
        get_nested_type(name: System.String) -> System.Type;

        @IL.name("GetNestedType")
        get_nested_type(name: System.String, binding_attr: System.Reflection.BindingFlags) -> System.Type;

        @IL.name("GetNestedTypes")
        get_nested_types() -> System.Type[];

        @IL.name("GetNestedTypes")
        get_nested_types(binding_attr: System.Reflection.BindingFlags) -> System.Type[];

        @IL.name("GetProperty")
        get_property(name: System.String) -> System.Reflection.PropertyInfo;

        @IL.name("GetProperty")
        get_property(name: System.String, binding_attr: System.Reflection.BindingFlags) -> System.Reflection.PropertyInfo;

        @IL.name("GetProperty")
        get_property(name: System.String, return_type: System.Type) -> System.Reflection.PropertyInfo;

        @IL.name("GetProperty")
        get_property(name: System.String, types: System.Type[]) -> System.Reflection.PropertyInfo;

        @IL.name("GetProperty")
        get_property(name: System.String, return_type: System.Type, types: System.Type[]) -> System.Reflection.PropertyInfo;

        @IL.name("GetProperty")
        get_property(name: System.String, return_type: System.Type, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]) -> System.Reflection.PropertyInfo;

        @IL.name("GetProperty")
        get_property(name: System.String, binding_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, return_type: System.Type, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]) -> System.Reflection.PropertyInfo;

        @IL.name("GetProperties")
        get_properties() -> System.Reflection.PropertyInfo[];

        @IL.name("GetProperties")
        get_properties(binding_attr: System.Reflection.BindingFlags) -> System.Reflection.PropertyInfo[];

        @IL.name("GetDefaultMembers")
        get_default_members() -> System.Reflection.MemberInfo[];

        @IL.name("InvokeMember")
        invoke_member(name: System.String, invoke_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, target: System.Object, args: System.Object[]) -> System.Object;

        @IL.name("InvokeMember")
        invoke_member(name: System.String, invoke_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, target: System.Object, args: System.Object[], culture: System.Globalization.CultureInfo) -> System.Object;

        @IL.name("InvokeMember")
        invoke_member(name: System.String, invoke_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, target: System.Object, args: System.Object[], modifiers: System.Reflection.ParameterModifier[], culture: System.Globalization.CultureInfo, named_parameters: System.String[]) -> System.Object;

        @IL.name("GetInterface")
        get_interface(name: System.String) -> System.Type;

        @IL.name("GetInterface")
        get_interface(name: System.String, ignore_case: bool) -> System.Type;

        @IL.name("GetInterfaces")
        get_interfaces() -> System.Type[];

        @IL.name("GetInterfaceMap")
        get_interface_map(interface_type: System.Type) -> System.Reflection.InterfaceMapping;

        @IL.name("IsInstanceOfType")
        is_instance_of_type(o: System.Object) -> bool;

        @IL.name("IsEquivalentTo")
        is_equivalent_to(other: System.Type) -> bool;

        @IL.name("GetEnumUnderlyingType")
        get_enum_underlying_type() -> System.Type;

        @IL.name("GetEnumValues")
        get_enum_values() -> System.Array;

        @IL.name("MakeArrayType")
        make_array_type() -> System.Type;

        @IL.name("MakeArrayType")
        make_array_type(rank: int) -> System.Type;

        @IL.name("MakeByRefType")
        make_by_ref_type() -> System.Type;

        @IL.name("MakeGenericType")
        make_generic_type(type_arguments: System.Type[]) -> System.Type;

        @IL.name("MakePointerType")
        make_pointer_type() -> System.Type;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(o: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("Equals")
        equals(o: System.Type) -> bool;

        @IL.name("IsEnumDefined")
        is_enum_defined(value: System.Object) -> bool;

        @IL.name("GetEnumName")
        get_enum_name(value: System.Object) -> System.String;

        @IL.name("GetEnumNames")
        get_enum_names() -> System.String[];

        @IL.name("FindInterfaces")
        find_interfaces(filter: System.Reflection.TypeFilter, filter_criteria: System.Object) -> System.Type[];

        @IL.name("FindMembers")
        find_members(member_type: System.Reflection.MemberTypes, binding_attr: System.Reflection.BindingFlags, filter: System.Reflection.MemberFilter, filter_criteria: System.Object) -> System.Reflection.MemberInfo[];

        @IL.name("IsSubclassOf")
        is_subclass_of(c: System.Type) -> bool;

        @IL.name("IsAssignableFrom")
        is_assignable_from(c: System.Type) -> bool;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("GetElementType")
        get_element_type() -> System.Type;

        @IL.name("GetArrayRank")
        get_array_rank() -> int;

        @IL.name("GetGenericTypeDefinition")
        get_generic_type_definition() -> System.Type;

        @IL.name("GetGenericArguments")
        get_generic_arguments() -> System.Type[];

        @IL.name("GetGenericParameterConstraints")
        get_generic_parameter_constraints() -> System.Type[];

        @IL.name("GetConstructor")
        get_constructor(types: System.Type[]) -> System.Reflection.ConstructorInfo;

        @IL.name("GetConstructor")
        get_constructor(binding_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]) -> System.Reflection.ConstructorInfo;

        @IL.name("GetConstructor")
        get_constructor(binding_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, call_convention: System.Reflection.CallingConventions, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]) -> System.Reflection.ConstructorInfo;

        @IL.name("GetConstructors")
        get_constructors() -> System.Reflection.ConstructorInfo[];

        @IL.name("GetConstructors")
        get_constructors(binding_attr: System.Reflection.BindingFlags) -> System.Reflection.ConstructorInfo[];

        @IL.name("GetEvent")
        get_event(name: System.String) -> System.Reflection.EventInfo;

        @IL.name("GetEvent")
        get_event(name: System.String, binding_attr: System.Reflection.BindingFlags) -> System.Reflection.EventInfo;

        @IL.name("GetEvents")
        get_events() -> System.Reflection.EventInfo[];

        @IL.name("GetEvents")
        get_events(binding_attr: System.Reflection.BindingFlags) -> System.Reflection.EventInfo[];

        @IL.name("HasSameMetadataDefinitionAs")
        has_same_metadata_definition_as(other: System.Reflection.MemberInfo) -> bool;

        @IL.name("IsDefined")
        is_defined(attribute_type: System.Type, inherit: bool) -> bool;

        @IL.name("GetCustomAttributes")
        get_custom_attributes(inherit: bool) -> System.Object[];

        @IL.name("GetCustomAttributes")
        get_custom_attributes(attribute_type: System.Type, inherit: bool) -> System.Object[];

        @IL.name("GetCustomAttributesData")
        get_custom_attributes_data() -> Collections.MutableList[System.Reflection.CustomAttributeData];

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name.read("get_GenericTypeParameters") 
        generic_type_parameters: System.Type[];

        @IL.name.read("get_DeclaredConstructors") 
        declared_constructors: Collections.Iterable[System.Reflection.ConstructorInfo];

        @IL.name.read("get_DeclaredEvents") 
        declared_events: Collections.Iterable[System.Reflection.EventInfo];

        @IL.name.read("get_DeclaredFields") 
        declared_fields: Collections.Iterable[System.Reflection.FieldInfo];

        @IL.name.read("get_DeclaredMembers") 
        declared_members: Collections.Iterable[System.Reflection.MemberInfo];

        @IL.name.read("get_DeclaredMethods") 
        declared_methods: Collections.Iterable[System.Reflection.MethodInfo];

        @IL.name.read("get_DeclaredNestedTypes") 
        declared_nested_types: Collections.Iterable[System.Reflection.TypeInfo];

        @IL.name.read("get_DeclaredProperties") 
        declared_properties: Collections.Iterable[System.Reflection.PropertyInfo];

        @IL.name.read("get_ImplementedInterfaces") 
        implemented_interfaces: Collections.Iterable[System.Type];

        @IL.name.read("get_IsInterface") 
        is_interface: bool;

        @IL.name.read("get_MemberType") 
        member_type: System.Reflection.MemberTypes;

        @IL.name.read("get_Namespace") 
        namespace_: System.String;

        @IL.name.read("get_AssemblyQualifiedName") 
        assembly_qualified_name: System.String;

        @IL.name.read("get_FullName") 
        full_name: System.String;

        @IL.name.read("get_Assembly") 
        assembly: System.Reflection.Assembly;

        @IL.name.read("get_Module") 
        module: System.Reflection.Module;

        @IL.name.read("get_IsNested") 
        is_nested: bool;

        @IL.name.read("get_DeclaringType") 
        declaring_type: System.Type;

        @IL.name.read("get_DeclaringMethod") 
        declaring_method: System.Reflection.MethodBase;

        @IL.name.read("get_ReflectedType") 
        reflected_type: System.Type;

        @IL.name.read("get_UnderlyingSystemType") 
        underlying_system_type: System.Type;

        @IL.name.read("get_IsTypeDefinition") 
        is_type_definition: bool;

        @IL.name.read("get_IsArray") 
        is_array: bool;

        @IL.name.read("get_IsByRef") 
        is_by_ref: bool;

        @IL.name.read("get_IsPointer") 
        is_pointer: bool;

        @IL.name.read("get_IsConstructedGenericType") 
        is_constructed_generic_type: bool;

        @IL.name.read("get_IsGenericParameter") 
        is_generic_parameter: bool;

        @IL.name.read("get_IsGenericTypeParameter") 
        is_generic_type_parameter: bool;

        @IL.name.read("get_IsGenericMethodParameter") 
        is_generic_method_parameter: bool;

        @IL.name.read("get_IsGenericType") 
        is_generic_type: bool;

        @IL.name.read("get_IsGenericTypeDefinition") 
        is_generic_type_definition: bool;

        @IL.name.read("get_IsSZArray") 
        is_s_z_array: bool;

        @IL.name.read("get_IsVariableBoundArray") 
        is_variable_bound_array: bool;

        @IL.name.read("get_IsByRefLike") 
        is_by_ref_like: bool;

        @IL.name.read("get_HasElementType") 
        has_element_type: bool;

        @IL.name.read("get_GenericTypeArguments") 
        generic_type_arguments: System.Type[];

        @IL.name.read("get_GenericParameterPosition") 
        generic_parameter_position: int;

        @IL.name.read("get_GenericParameterAttributes") 
        generic_parameter_attributes: System.Reflection.GenericParameterAttributes;

        @IL.name.read("get_Attributes") 
        attributes: System.Reflection.TypeAttributes;

        @IL.name.read("get_IsAbstract") 
        is_abstract: bool;

        @IL.name.read("get_IsImport") 
        is_import: bool;

        @IL.name.read("get_IsSealed") 
        is_sealed: bool;

        @IL.name.read("get_IsSpecialName") 
        is_special_name: bool;

        @IL.name.read("get_IsClass") 
        is_class: bool;

        @IL.name.read("get_IsNestedAssembly") 
        is_nested_assembly: bool;

        @IL.name.read("get_IsNestedFamANDAssem") 
        is_nested_fam_a_n_d_assem: bool;

        @IL.name.read("get_IsNestedFamily") 
        is_nested_family: bool;

        @IL.name.read("get_IsNestedFamORAssem") 
        is_nested_fam_o_r_assem: bool;

        @IL.name.read("get_IsNestedPrivate") 
        is_nested_private: bool;

        @IL.name.read("get_IsNestedPublic") 
        is_nested_public: bool;

        @IL.name.read("get_IsNotPublic") 
        is_not_public: bool;

        @IL.name.read("get_IsPublic") 
        is_public: bool;

        @IL.name.read("get_IsAutoLayout") 
        is_auto_layout: bool;

        @IL.name.read("get_IsExplicitLayout") 
        is_explicit_layout: bool;

        @IL.name.read("get_IsLayoutSequential") 
        is_layout_sequential: bool;

        @IL.name.read("get_IsAnsiClass") 
        is_ansi_class: bool;

        @IL.name.read("get_IsAutoClass") 
        is_auto_class: bool;

        @IL.name.read("get_IsUnicodeClass") 
        is_unicode_class: bool;

        @IL.name.read("get_IsCOMObject") 
        is_c_o_m_object: bool;

        @IL.name.read("get_IsContextful") 
        is_contextful: bool;

        @IL.name.read("get_IsEnum") 
        is_enum: bool;

        @IL.name.read("get_IsMarshalByRef") 
        is_marshal_by_ref: bool;

        @IL.name.read("get_IsPrimitive") 
        is_primitive: bool;

        @IL.name.read("get_IsValueType") 
        is_value_type: bool;

        @IL.name.read("get_IsSignatureType") 
        is_signature_type: bool;

        @IL.name.read("get_IsSecurityCritical") 
        is_security_critical: bool;

        @IL.name.read("get_IsSecuritySafeCritical") 
        is_security_safe_critical: bool;

        @IL.name.read("get_IsSecurityTransparent") 
        is_security_transparent: bool;

        @IL.name.read("get_StructLayoutAttribute") 
        struct_layout_attribute: System.Runtime.InteropServices.StructLayoutAttribute;

        @IL.name.read("get_TypeInitializer") 
        type_initializer: System.Reflection.ConstructorInfo;

        @IL.name.read("get_TypeHandle") 
        type_handle: System.RuntimeTypeHandle;

        @IL.name.read("get_GUID") 
        guid: System.Guid;

        @IL.name.read("get_BaseType") 
        base_type: System.Type;

        @IL.name.read("get_IsSerializable") 
        is_serializable: bool;

        @IL.name.read("get_ContainsGenericParameters") 
        contains_generic_parameters: bool;

        @IL.name.read("get_IsVisible") 
        is_visible: bool;

        @IL.name.read("get_Name") 
        name: System.String;

        @IL.name.read("get_CustomAttributes") 
        custom_attributes: Collections.Iterable[System.Reflection.CustomAttributeData];

        @IL.name.read("get_IsCollectible") 
        is_collectible: bool;

        @IL.name.read("get_MetadataToken") 
        metadata_token: int;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.Reflection.FieldInfo")
    class FieldInfo: System.Reflection.MemberInfo,System.Reflection.ICustomAttributeProvider is
        @IL.name("GetFieldFromHandle")
        get_field_from_handle(handle: System.RuntimeFieldHandle) -> System.Reflection.FieldInfo static;

        @IL.name("GetFieldFromHandle")
        get_field_from_handle(handle: System.RuntimeFieldHandle, declaring_type: System.RuntimeTypeHandle) -> System.Reflection.FieldInfo static;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("GetValue")
        get_value(obj: System.Object) -> System.Object;

        @IL.name("SetValue")
        set_value(obj: System.Object, value: System.Object);

        @IL.name("SetValue")
        set_value(obj: System.Object, value: System.Object, invoke_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, culture: System.Globalization.CultureInfo);

        @IL.name("SetValueDirect")
        set_value_direct(obj: System.TypedReference, value: System.Object);

        @IL.name("GetValueDirect")
        get_value_direct(obj: System.TypedReference) -> System.Object;

        @IL.name("GetRawConstantValue")
        get_raw_constant_value() -> System.Object;

        @IL.name("GetOptionalCustomModifiers")
        get_optional_custom_modifiers() -> System.Type[];

        @IL.name("GetRequiredCustomModifiers")
        get_required_custom_modifiers() -> System.Type[];

        @IL.name("HasSameMetadataDefinitionAs")
        has_same_metadata_definition_as(other: System.Reflection.MemberInfo) -> bool;

        @IL.name("IsDefined")
        is_defined(attribute_type: System.Type, inherit: bool) -> bool;

        @IL.name("GetCustomAttributes")
        get_custom_attributes(inherit: bool) -> System.Object[];

        @IL.name("GetCustomAttributes")
        get_custom_attributes(attribute_type: System.Type, inherit: bool) -> System.Object[];

        @IL.name("GetCustomAttributesData")
        get_custom_attributes_data() -> Collections.MutableList[System.Reflection.CustomAttributeData];

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name.read("get_MemberType") 
        member_type: System.Reflection.MemberTypes;

        @IL.name.read("get_Attributes") 
        attributes: System.Reflection.FieldAttributes;

        @IL.name.read("get_FieldType") 
        field_type: System.Type;

        @IL.name.read("get_IsInitOnly") 
        is_init_only: bool;

        @IL.name.read("get_IsLiteral") 
        is_literal: bool;

        @IL.name.read("get_IsNotSerialized") 
        is_not_serialized: bool;

        @IL.name.read("get_IsPinvokeImpl") 
        is_pinvoke_impl: bool;

        @IL.name.read("get_IsSpecialName") 
        is_special_name: bool;

        @IL.name.read("get_IsStatic") 
        is_static: bool;

        @IL.name.read("get_IsAssembly") 
        is_assembly: bool;

        @IL.name.read("get_IsFamily") 
        is_family: bool;

        @IL.name.read("get_IsFamilyAndAssembly") 
        is_family_and_assembly: bool;

        @IL.name.read("get_IsFamilyOrAssembly") 
        is_family_or_assembly: bool;

        @IL.name.read("get_IsPrivate") 
        is_private: bool;

        @IL.name.read("get_IsPublic") 
        is_public: bool;

        @IL.name.read("get_IsSecurityCritical") 
        is_security_critical: bool;

        @IL.name.read("get_IsSecuritySafeCritical") 
        is_security_safe_critical: bool;

        @IL.name.read("get_IsSecurityTransparent") 
        is_security_transparent: bool;

        @IL.name.read("get_FieldHandle") 
        field_handle: System.RuntimeFieldHandle;

        @IL.name.read("get_Name") 
        name: System.String;

        @IL.name.read("get_DeclaringType") 
        declaring_type: System.Type;

        @IL.name.read("get_ReflectedType") 
        reflected_type: System.Type;

        @IL.name.read("get_Module") 
        module: System.Reflection.Module;

        @IL.name.read("get_CustomAttributes") 
        custom_attributes: Collections.Iterable[System.Reflection.CustomAttributeData];

        @IL.name.read("get_IsCollectible") 
        is_collectible: bool;

        @IL.name.read("get_MetadataToken") 
        metadata_token: int;

    si
    @IL.stub()
    @IL.name("class [mscorlib]System.Reflection.ConstructorInfo")
    class ConstructorInfo: System.Reflection.MethodBase,System.Reflection.ICustomAttributeProvider is
        @IL.name("Invoke")
        invoke(parameters: System.Object[]) -> System.Object;

        @IL.name("Invoke")
        invoke(invoke_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, parameters: System.Object[], culture: System.Globalization.CultureInfo) -> System.Object;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("GetParameters")
        get_parameters() -> System.Reflection.ParameterInfo[];

        @IL.name("GetMethodImplementationFlags")
        get_method_implementation_flags() -> System.Reflection.MethodImplAttributes;

        @IL.name("GetMethodBody")
        get_method_body() -> System.Reflection.MethodBody;

        @IL.name("GetGenericArguments")
        get_generic_arguments() -> System.Type[];

        @IL.name("Invoke")
        invoke(obj: System.Object, parameters: System.Object[]) -> System.Object;

        @IL.name("Invoke")
        invoke(obj: System.Object, invoke_attr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, parameters: System.Object[], culture: System.Globalization.CultureInfo) -> System.Object;

        @IL.name("HasSameMetadataDefinitionAs")
        has_same_metadata_definition_as(other: System.Reflection.MemberInfo) -> bool;

        @IL.name("IsDefined")
        is_defined(attribute_type: System.Type, inherit: bool) -> bool;

        @IL.name("GetCustomAttributes")
        get_custom_attributes(inherit: bool) -> System.Object[];

        @IL.name("GetCustomAttributes")
        get_custom_attributes(attribute_type: System.Type, inherit: bool) -> System.Object[];

        @IL.name("GetCustomAttributesData")
        get_custom_attributes_data() -> Collections.MutableList[System.Reflection.CustomAttributeData];

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name.read("get_MemberType") 
        member_type: System.Reflection.MemberTypes;

        @IL.name.read("get_Attributes") 
        attributes: System.Reflection.MethodAttributes;

        @IL.name.read("get_MethodImplementationFlags") 
        method_implementation_flags: System.Reflection.MethodImplAttributes;

        @IL.name.read("get_CallingConvention") 
        calling_convention: System.Reflection.CallingConventions;

        @IL.name.read("get_IsAbstract") 
        is_abstract: bool;

        @IL.name.read("get_IsConstructor") 
        is_constructor: bool;

        @IL.name.read("get_IsFinal") 
        is_final: bool;

        @IL.name.read("get_IsHideBySig") 
        is_hide_by_sig: bool;

        @IL.name.read("get_IsSpecialName") 
        is_special_name: bool;

        @IL.name.read("get_IsStatic") 
        is_static: bool;

        @IL.name.read("get_IsVirtual") 
        is_virtual: bool;

        @IL.name.read("get_IsAssembly") 
        is_assembly: bool;

        @IL.name.read("get_IsFamily") 
        is_family: bool;

        @IL.name.read("get_IsFamilyAndAssembly") 
        is_family_and_assembly: bool;

        @IL.name.read("get_IsFamilyOrAssembly") 
        is_family_or_assembly: bool;

        @IL.name.read("get_IsPrivate") 
        is_private: bool;

        @IL.name.read("get_IsPublic") 
        is_public: bool;

        @IL.name.read("get_IsConstructedGenericMethod") 
        is_constructed_generic_method: bool;

        @IL.name.read("get_IsGenericMethod") 
        is_generic_method: bool;

        @IL.name.read("get_IsGenericMethodDefinition") 
        is_generic_method_definition: bool;

        @IL.name.read("get_ContainsGenericParameters") 
        contains_generic_parameters: bool;

        @IL.name.read("get_MethodHandle") 
        method_handle: System.RuntimeMethodHandle;

        @IL.name.read("get_IsSecurityCritical") 
        is_security_critical: bool;

        @IL.name.read("get_IsSecuritySafeCritical") 
        is_security_safe_critical: bool;

        @IL.name.read("get_IsSecurityTransparent") 
        is_security_transparent: bool;

        @IL.name.read("get_Name") 
        name: System.String;

        @IL.name.read("get_DeclaringType") 
        declaring_type: System.Type;

        @IL.name.read("get_ReflectedType") 
        reflected_type: System.Type;

        @IL.name.read("get_Module") 
        module: System.Reflection.Module;

        @IL.name.read("get_CustomAttributes") 
        custom_attributes: Collections.Iterable[System.Reflection.CustomAttributeData];

        @IL.name.read("get_IsCollectible") 
        is_collectible: bool;

        @IL.name.read("get_MetadataToken") 
        metadata_token: int;

        @IL.name("ConstructorName")
        _constructor_name: System.String public;
        @IL.name("TypeConstructorName")
        _type_constructor_name: System.String public;
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.Reflection.BindingFlags")
    struct BindingFlags is
        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("HasFlag")
        has_flag(flag: System.Enum) -> bool;

        @IL.name("CompareTo")
        compare_to(target: System.Object) -> int;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("ToString")
        to_string(format: System.String, provider: System.IFormatProvider) -> System.String;

        @IL.name("ToString")
        to_string(format: System.String) -> System.String;

        @IL.name("ToString")
        to_string(provider: System.IFormatProvider) -> System.String;

        @IL.name("GetTypeCode")
        get_type_code() -> System.TypeCode;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("Default")
        _default: System.Reflection.BindingFlags public;
        @IL.name("IgnoreCase")
        _ignore_case: System.Reflection.BindingFlags public;
        @IL.name("DeclaredOnly")
        _declared_only: System.Reflection.BindingFlags public;
        @IL.name("Instance")
        _instance: System.Reflection.BindingFlags public;
        @IL.name("Static")
        _static: System.Reflection.BindingFlags public;
        @IL.name("Public")
        _public: System.Reflection.BindingFlags public;
        @IL.name("NonPublic")
        _non_public: System.Reflection.BindingFlags public;
        @IL.name("FlattenHierarchy")
        _flatten_hierarchy: System.Reflection.BindingFlags public;
        @IL.name("InvokeMethod")
        _invoke_method: System.Reflection.BindingFlags public;
        @IL.name("CreateInstance")
        _create_instance: System.Reflection.BindingFlags public;
        @IL.name("GetField")
        _get_field: System.Reflection.BindingFlags public;
        @IL.name("SetField")
        _set_field: System.Reflection.BindingFlags public;
        @IL.name("GetProperty")
        _get_property: System.Reflection.BindingFlags public;
        @IL.name("SetProperty")
        _set_property: System.Reflection.BindingFlags public;
        @IL.name("PutDispProperty")
        _put_disp_property: System.Reflection.BindingFlags public;
        @IL.name("PutRefDispProperty")
        _put_ref_disp_property: System.Reflection.BindingFlags public;
        @IL.name("ExactBinding")
        _exact_binding: System.Reflection.BindingFlags public;
        @IL.name("SuppressChangeType")
        _suppress_change_type: System.Reflection.BindingFlags public;
        @IL.name("OptionalParamBinding")
        _optional_param_binding: System.Reflection.BindingFlags public;
        @IL.name("IgnoreReturn")
        _ignore_return: System.Reflection.BindingFlags public;
        @IL.name("DoNotWrapExceptions")
        _do_not_wrap_exceptions: System.Reflection.BindingFlags public;
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.Reflection.Binder")
    class Binder: System.Object is
        @IL.name("BindToField")
        bind_to_field(binding_attr: System.Reflection.BindingFlags, match: System.Reflection.FieldInfo[], value: System.Object, culture: System.Globalization.CultureInfo) -> System.Reflection.FieldInfo;

        @IL.name("BindToMethod")
        bind_to_method(binding_attr: System.Reflection.BindingFlags, match: System.Reflection.MethodBase[], args: System.Object[] ref, modifiers: System.Reflection.ParameterModifier[], culture: System.Globalization.CultureInfo, names: System.String[], state: System.Object ref) -> System.Reflection.MethodBase;

        @IL.name("ChangeType")
        change_type(value: System.Object, type: System.Type, culture: System.Globalization.CultureInfo) -> System.Object;

        @IL.name("ReorderArgumentArray")
        reorder_argument_array(args: System.Object[] ref, state: System.Object);

        @IL.name("SelectMethod")
        select_method(binding_attr: System.Reflection.BindingFlags, match: System.Reflection.MethodBase[], types: System.Type[], modifiers: System.Reflection.ParameterModifier[]) -> System.Reflection.MethodBase;

        @IL.name("SelectProperty")
        select_property(binding_attr: System.Reflection.BindingFlags, match: System.Reflection.PropertyInfo[], return_type: System.Type, indexes: System.Type[], modifiers: System.Reflection.ParameterModifier[]) -> System.Reflection.PropertyInfo;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.Reflection.CallingConventions")
    struct CallingConventions is
        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("HasFlag")
        has_flag(flag: System.Enum) -> bool;

        @IL.name("CompareTo")
        compare_to(target: System.Object) -> int;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("ToString")
        to_string(format: System.String, provider: System.IFormatProvider) -> System.String;

        @IL.name("ToString")
        to_string(format: System.String) -> System.String;

        @IL.name("ToString")
        to_string(provider: System.IFormatProvider) -> System.String;

        @IL.name("GetTypeCode")
        get_type_code() -> System.TypeCode;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("Standard")
        _standard: System.Reflection.CallingConventions public;
        @IL.name("VarArgs")
        _var_args: System.Reflection.CallingConventions public;
        @IL.name("Any")
        _any: System.Reflection.CallingConventions public;
        @IL.name("HasThis")
        _has_this: System.Reflection.CallingConventions public;
        @IL.name("ExplicitThis")
        _explicit_this: System.Reflection.CallingConventions public;
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.Reflection.EventInfo")
    class EventInfo: System.Reflection.MemberInfo,System.Reflection.ICustomAttributeProvider is
        @IL.name("GetOtherMethods")
        get_other_methods() -> System.Reflection.MethodInfo[];

        @IL.name("GetOtherMethods")
        get_other_methods(non_public: bool) -> System.Reflection.MethodInfo[];

        @IL.name("GetAddMethod")
        get_add_method() -> System.Reflection.MethodInfo;

        @IL.name("GetRemoveMethod")
        get_remove_method() -> System.Reflection.MethodInfo;

        @IL.name("GetRaiseMethod")
        get_raise_method() -> System.Reflection.MethodInfo;

        @IL.name("GetAddMethod")
        get_add_method(non_public: bool) -> System.Reflection.MethodInfo;

        @IL.name("GetRemoveMethod")
        get_remove_method(non_public: bool) -> System.Reflection.MethodInfo;

        @IL.name("GetRaiseMethod")
        get_raise_method(non_public: bool) -> System.Reflection.MethodInfo;

        @IL.name("AddEventHandler")
        add_event_handler(target: System.Object, handler: System.Delegate);

        @IL.name("RemoveEventHandler")
        remove_event_handler(target: System.Object, handler: System.Delegate);

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("HasSameMetadataDefinitionAs")
        has_same_metadata_definition_as(other: System.Reflection.MemberInfo) -> bool;

        @IL.name("IsDefined")
        is_defined(attribute_type: System.Type, inherit: bool) -> bool;

        @IL.name("GetCustomAttributes")
        get_custom_attributes(inherit: bool) -> System.Object[];

        @IL.name("GetCustomAttributes")
        get_custom_attributes(attribute_type: System.Type, inherit: bool) -> System.Object[];

        @IL.name("GetCustomAttributesData")
        get_custom_attributes_data() -> Collections.MutableList[System.Reflection.CustomAttributeData];

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name.read("get_MemberType") 
        member_type: System.Reflection.MemberTypes;

        @IL.name.read("get_Attributes") 
        attributes: System.Reflection.EventAttributes;

        @IL.name.read("get_IsSpecialName") 
        is_special_name: bool;

        @IL.name.read("get_AddMethod") 
        add_method: System.Reflection.MethodInfo;

        @IL.name.read("get_RemoveMethod") 
        remove_method: System.Reflection.MethodInfo;

        @IL.name.read("get_RaiseMethod") 
        raise_method: System.Reflection.MethodInfo;

        @IL.name.read("get_IsMulticast") 
        is_multicast: bool;

        @IL.name.read("get_EventHandlerType") 
        event_handler_type: System.Type;

        @IL.name.read("get_Name") 
        name: System.String;

        @IL.name.read("get_DeclaringType") 
        declaring_type: System.Type;

        @IL.name.read("get_ReflectedType") 
        reflected_type: System.Type;

        @IL.name.read("get_Module") 
        module: System.Reflection.Module;

        @IL.name.read("get_CustomAttributes") 
        custom_attributes: Collections.Iterable[System.Reflection.CustomAttributeData];

        @IL.name.read("get_IsCollectible") 
        is_collectible: bool;

        @IL.name.read("get_MetadataToken") 
        metadata_token: int;

    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.Reflection.MemberTypes")
    struct MemberTypes is
        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("HasFlag")
        has_flag(flag: System.Enum) -> bool;

        @IL.name("CompareTo")
        compare_to(target: System.Object) -> int;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("ToString")
        to_string(format: System.String, provider: System.IFormatProvider) -> System.String;

        @IL.name("ToString")
        to_string(format: System.String) -> System.String;

        @IL.name("ToString")
        to_string(provider: System.IFormatProvider) -> System.String;

        @IL.name("GetTypeCode")
        get_type_code() -> System.TypeCode;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("Constructor")
        _constructor: System.Reflection.MemberTypes public;
        @IL.name("Event")
        _event: System.Reflection.MemberTypes public;
        @IL.name("Field")
        _field: System.Reflection.MemberTypes public;
        @IL.name("Method")
        _method: System.Reflection.MemberTypes public;
        @IL.name("Property")
        _property: System.Reflection.MemberTypes public;
        @IL.name("TypeInfo")
        _type_info: System.Reflection.MemberTypes public;
        @IL.name("Custom")
        _custom: System.Reflection.MemberTypes public;
        @IL.name("NestedType")
        _nested_type: System.Reflection.MemberTypes public;
        @IL.name("All")
        _all: System.Reflection.MemberTypes public;
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.Reflection.TypeFilter")
    class TypeFilter: System.MulticastDelegate,System.ICloneable,System.Runtime.Serialization.ISerializable is
        @IL.name("Invoke")
        invoke(m: System.Type, filter_criteria: System.Object) -> bool;

        @IL.name("BeginInvoke")
        begin_invoke(m: System.Type, filter_criteria: System.Object, callback: System.AsyncCallback, object: System.Object) -> System.IAsyncResult;

        @IL.name("EndInvoke")
        end_invoke(result: System.IAsyncResult) -> bool;

        @IL.name("GetObjectData")
        get_object_data(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext);

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetInvocationList")
        get_invocation_list() -> System.Delegate[];

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("Clone")
        clone() -> System.Object;

        @IL.name("DynamicInvoke")
        dynamic_invoke(args: System.Object[]) -> System.Object;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name(".ctor")
        init(object: System.Object, method: word);
        @IL.name.read("get_Target") 
        target: System.Object;

        @IL.name.read("get_Method") 
        method: System.Reflection.MethodInfo;

    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.Reflection.InterfaceMapping")
    struct InterfaceMapping is
        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("GetType")
        get_type() -> System.Type;

        @IL.name("TargetType")
        _target_type: System.Type public;
        @IL.name("InterfaceType")
        _interface_type: System.Type public;
        @IL.name("TargetMethods")
        _target_methods: System.Reflection.MethodInfo[] public;
        @IL.name("InterfaceMethods")
        _interface_methods: System.Reflection.MethodInfo[] public;
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.Reflection.MethodBase")
    class MethodBase: System.Reflection.MemberInfo,System.Reflection.ICustomAttributeProvider is
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.Reflection.ICustomAttributeProvider")
    trait ICustomAttributeProvider is
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.Reflection.AssemblyName")
    class AssemblyName: System.Object,System.ICloneable,System.Runtime.Serialization.IDeserializationCallback,System.Runtime.Serialization.ISerializable is
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.Reflection.ManifestResourceInfo")
    class ManifestResourceInfo: System.Object is
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.Reflection.CustomAttributeData")
    class CustomAttributeData: System.Object is
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.Reflection.PortableExecutableKinds")
    struct PortableExecutableKinds is
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.Reflection.ImageFileMachine")
    struct ImageFileMachine is
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.Reflection.ParameterModifier")
    struct ParameterModifier is
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.Reflection.IReflect")
    trait IReflect is
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.Reflection.MemberFilter")
    class MemberFilter: System.MulticastDelegate,System.ICloneable,System.Runtime.Serialization.ISerializable is
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.Reflection.GenericParameterAttributes")
    struct GenericParameterAttributes is
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.Reflection.TypeAttributes")
    struct TypeAttributes is
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.Reflection.ParameterInfo")
    class ParameterInfo: System.Object,System.Reflection.ICustomAttributeProvider,System.Runtime.Serialization.IObjectReference is
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.Reflection.MethodImplAttributes")
    struct MethodImplAttributes is
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.Reflection.MethodBody")
    class MethodBody: System.Object is
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.Reflection.MethodAttributes")
    struct MethodAttributes is
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.Reflection.PropertyAttributes")
    struct PropertyAttributes is
    si
    @IL.stub()
    @IL.name("class [mscorlib]System.Reflection.IReflectableType")
    trait IReflectableType is
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.Reflection.FieldAttributes")
    struct FieldAttributes is
    si
    @IL.stub()
    @IL.name("valuetype [mscorlib]System.Reflection.EventAttributes")
    struct EventAttributes is
    si
si
