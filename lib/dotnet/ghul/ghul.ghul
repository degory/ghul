@IL.stub()
namespace Ghul is
    @IL.built_in_type("void")
    struct void is
    si

    // Boolean/bit
    @IL.built_in_type("bool")
    struct bool is
        address: bool ptr => null;
    si

    true: bool => cast bool(1);
    false: bool => cast bool(0);

    // 8 bit bytes
    @IL.built_in_type("int8")
    struct byte is
        address: byte ptr => null;
    si

    @IL.built_in_type("unsigned int8")
    struct ubyte is
        address: ubyte ptr => null;
    si

    // 16 bit shorts
    @IL.built_in_type("int16")
    struct short is
        address: short ptr => null;
    si

    @IL.built_in_type("unsigned int16")
    struct ushort is
        address: ushort ptr => null;        
    si

    // 32 bit integers
    @IL.built_in_type("int32")
    struct int is
        address: int ptr => null;
    si

    @IL.built_in_type("unsigned int32")
    struct uint is
        address: uint ptr => null;
    si

    // 64 bit longs
    @IL.built_in_type("int64")
    struct long is
        address: long ptr => null;        
    si

    @IL.built_in_type("unsigned int64")
    struct ulong is
        address: ulong ptr => null;        
    si

    // natural machine words (pointer sized, 32 or 64 bit):
    @IL.built_in_type("native int")
    struct word is
        address: word ptr => null;        
    si

    @IL.built_in_type("native unsigned int")
    struct uword is
        address: uword ptr => null;        
    si

    @IL.built_in_type("char")
    struct char is
        address: char ptr => null;        
    si

    assert(condition: bool);
    assert(condition: bool, message: System.String);

    struct ENUM[E] is
        ==(other: E) -> bool innate compare.value;
        <>(other: E) -> int innate compare.order;
    si

    struct REFERENCE[E] is
        value: E => null, = value is si
    si

    class ARRAY[E]: Generic.List[E] is
        length: int => null;
        address: E ptr => null;

        init(length: int);

        [index: int]: E
            => null,
            = value is si
    si

    struct POINTER[E] is
        address: E ptr ptr => null;
        value: E => null, = value is si
    si

    class TUPLE_1[T0] is
        item_0: T0;
    si

    class TUPLE_2[T0,T1] is
        item_0: T0;
        item_1: T1;
    si

    class TUPLE_3[T0,T1,T2] is
        item_0: T0;
        item_1: T1;
        item_2: T2;
    si

    class TUPLE_4[T0,T1,T2,T3] is
        item_0: T0;
        item_1: T1;
        item_2: T2;
        item_3: T3;
    si

    class TUPLE_5[T0,T1,T2,T3,T4] is
        item_0: T0;
        item_1: T1;
        item_2: T2;
        item_3: T3;
        item_4: T4;
    si

    class TUPLE_6[T0,T1,T2,T3,T4,T5] is
        item_0: T0;
        item_1: T1;
        item_2: T2;
        item_3: T3;
        item_4: T4;
        item_5: T5;
    si

    class TUPLE_7[T0,T1,T2,T3,T4,T5,T6] is
        item_0: T0;
        item_1: T1;
        item_2: T2;
        item_3: T3;
        item_4: T4;
        item_5: T5;
        item_6: T6;
    si

    class TUPLE_8[T0,T1,T2,T3,T4,T5,T6,T7] is
        item_0: T0;
        item_1: T1;
        item_2: T2;
        item_3: T3;
        item_4: T4;
        item_5: T5;
        item_6: T6;
        item_7: T7;
    si

    class TUPLE_9[T0,T1,T2,T3,T4,T5,T6,T7,T8] is
        item_0: T0;
        item_1: T1;
        item_2: T2;
        item_3: T3;
        item_4: T4;
        item_5: T5;
        item_6: T6;
        item_7: T7;
        item_8: T8;
    si

    class TUPLE_10[T0,T1,T2,T3,T4,T5,T6,T7,T8,T9] is
        item_0: T0;
        item_1: T1;
        item_2: T2;
        item_3: T3;
        item_4: T4;
        item_5: T5;
        item_6: T6;
        item_7: T7;
        item_8: T8;
        item_9: T9;
    si
    
    ==(a: System.Object, b: System.Object) -> bool innate compare.reference;

    // FIXME: remove on next commit
    !=(a: System.Object, b: System.Object) -> bool innate compare.reference;

    !(a: bool) -> bool innate bool.not;
    &&(a: bool, b: bool) -> bool innate bool.and_then;
    ||(a: bool, b: bool) -> bool innate bool.or_else;

    -(a: char) -> char innate arithmetic.neg;
    +(a: char, b: char) -> char innate arithmetic.add;
    -(a: char, b: char) -> char innate arithmetic.sub;
    *(a: char, b: char) -> char innate arithmetic.mul;
    /(a: char, b: char) -> char innate arithmetic.div;
    <>(a: char, b: char) -> int innate compare.order;
    ==(a: char, b: char) -> bool innate compare.value;

    -(a: byte) -> byte innate arithmetic.neg;
    +(a: byte, b: byte) -> byte innate arithmetic.add;
    -(a: byte, b: byte) -> byte innate arithmetic.sub;
    *(a: byte, b: byte) -> byte innate arithmetic.mul;
    /(a: byte, b: byte) -> byte innate arithmetic.div;
    <>(a: byte, b: byte) -> int innate compare.order;
    ==(a: byte, b: byte) -> bool innate compare.value;

    +(a: ubyte, b: ubyte) -> ubyte innate arithmetic.add;
    -(a: ubyte, b: ubyte) -> ubyte innate arithmetic.sub;
    *(a: ubyte, b: ubyte) -> ubyte innate arithmetic.mul;
    /(a: ubyte, b: ubyte) -> ubyte innate arithmetic.div;
    <>(a: ubyte, b: ubyte) -> int innate compare.uorder;
    ==(a: ubyte, b: ubyte) -> bool innate compare.value;

    -(a: short) -> short innate arithmetic.neg;
    +(a: short, b: short) -> short innate arithmetic.add;
    -(a: short, b: short) -> short innate arithmetic.sub;
    *(a: short, b: short) -> short innate arithmetic.mul;
    /(a: short, b: short) -> short innate arithmetic.div;
    <>(a: short, b: short) -> int innate compare.order;
    ==(a: short, b: short) -> bool innate compare.value;

    +(a: ushort, b: ushort) -> ushort innate arithmetic.add;
    -(a: ushort, b: ushort) -> ushort innate arithmetic.sub;
    *(a: ushort, b: ushort) -> ushort innate arithmetic.mul;
    /(a: ushort, b: ushort) -> ushort innate arithmetic.div;
    <>(a: ushort, b: ushort) -> int innate compare.uorder;
    ==(a: ushort, b: ushort) -> bool innate compare.value;

    -(a: int) -> int innate arithmetic.neg;
    +(a: int, b: int) -> int innate arithmetic.add;
    -(a: int, b: int) -> int innate arithmetic.sub;
    *(a: int, b: int) -> int innate arithmetic.mul;
    /(a: int, b: int) -> int innate arithmetic.div;
    %(a: int, b: int) -> int innate arithmetic.rem;
    <>(a: int, b: int) -> int innate compare.order;
    ==(a: int, b: int) -> bool innate compare.value;
    <<(a: int, b: int) -> int innate arithmetic.shl;
    >>(a: int, b: int) -> int innate arithmetic.shr;
    &(a: int, b: int) -> int innate arithmetic.and;
    |(a: int, b: int) -> int innate arithmetic.or;

    +(a: uint, b: uint) -> uint innate arithmetic.add;
    -(a: uint, b: uint) -> uint innate arithmetic.sub;
    *(a: uint, b: uint) -> uint innate arithmetic.mul;
    /(a: uint, b: uint) -> uint innate arithmetic.div;
    <>(a: uint, b: uint) -> int innate compare.uorder;
    ==(a: uint, b: uint) -> bool innate compare.value;

    -(a: long) -> long innate arithmetic.neg;
    +(a: long, b: long) -> long innate arithmetic.add;
    -(a: long, b: long) -> long innate arithmetic.sub;
    *(a: long, b: long) -> long innate arithmetic.mul;
    /(a: long, b: long) -> long innate arithmetic.div;
    %(a: long, b: long) -> long innate arithmetic.rem;
    <>(a: long, b: long) -> int innate compare.order;
    ==(a: long, b: long) -> bool innate compare.value;

    +(a: ulong, b: ulong) -> ulong innate arithmetic.add;
    -(a: ulong, b: ulong) -> ulong innate arithmetic.sub;
    *(a: ulong, b: ulong) -> ulong innate arithmetic.mul;
    /(a: ulong, b: ulong) -> ulong innate arithmetic.div;
    <>(a: ulong, b: ulong) -> int innate compare.uorder;
    ==(a: ulong, b: ulong) -> bool innate compare.value;

    -(a: word) -> word innate arithmetic.neg;
    +(a: word, b: word) -> word innate arithmetic.add;
    -(a: word, b: word) -> word innate arithmetic.sub;
    *(a: word, b: word) -> word innate arithmetic.mul;
    /(a: word, b: word) -> word innate arithmetic.div;
    <>(a: word, b: word) -> int innate compare.order;
    ==(a: word, b: word) -> bool innate compare.value;

    +(a: uword, b: uword) -> uword innate arithmetic.add;
    -(a: uword, b: uword) -> uword innate arithmetic.sub;
    *(a: uword, b: uword) -> uword innate arithmetic.mul;
    /(a: uword, b: uword) -> uword innate arithmetic.div;
    <>(a: uword, b: uword) -> int innate compare.uorder;
    ==(a: uword, b: uword) -> bool innate compare.value;

    +(a: System.String, b: System.Object) -> System.String innate string.add;
    =~(a: System.String, b: System.String) -> bool innate string.equals;

    ..(from: int, to: int) -> Generic.Range[int];
    ::(from: int, to: int) -> Generic.Range[int];
si

@IL.stub()
namespace System is

    // @IL.built_in_type("object")
    // class Object is
    //     // address: Object ptr => null;
    //     ClassName: String => null;

    //     @IL.name(".ctor")
    //     init();

    //     clone() -> Object;
    //     dump(object: Object) -> String static;

    //     @IL.name("ToString")
    //     toString() -> String;

    //     @IL.name("ToString")
    //     to_string() -> String;

    //     @IL.name("GetHashCode")
    //     hash() -> int;

    //     // FIXME: just to silence some false positive errors when compiling compiler itself:
    //     opCompare(other: Object) -> int;
    // si

    @IL.name("class [mscorlib]System.ValueType")
    class ValueType is
    si

    class StringBuffer: String is
        init();
        init(initial_capacity: int);
        init(s: String);
        append(value: Object) -> StringBuffer;    
        append(value: int, base: int) -> StringBuffer;
        append(value: int, base: int, length: int, pad: char) -> StringBuffer;
    si

    class Enum[T] is
    si

    class Backtrace is
    si

    class Arguments is
        ProgramArguments: String[];
        ProgramEnvironment:String[];
    si    
si

@IL.stub()
namespace Util is
    use System;

    class Process is
        fork() -> bool;
        wait() -> int;

        spawn(executable: String, arguments: String[], environment: String[]);

        run(name: String, args: System.String[], env: System.String[], want_wait: bool) -> int;
        run(name: String, args: System.String[], env: System.String[]) -> int;
        run(name: System.String, ars: System.String[]) -> int;        

        fork() -> bool;
        wait() -> int;
    si
    
    class ProgramEnvironment is
        Map: Generic.Map[String,String];
    si
si

@IL.stub()
namespace Generic is
    trait Iterable[T] is
        Iterator: Generic.Iterator[T];
        iterator: Generic.Iterator[T];
    si

    trait Iterator[T] is
        // hasMoreElements() -> bool;
        nextElement() -> T;

        @IL.name("MoveNext")
        move_next() -> bool;

        @IL.name.read("get_Current")
        current: T;
    si

    trait Deletable[K] is
        delete(k: K);
    si    

    trait List[T]: Iterable[T] is
        Length: int;

        add(v: T);
        remove(v: T);

        contains(v: T) -> bool;

        [index: int]: T
            => null,
            = value is si
    si

    class Set[T]: Iterable[T] is
        init();
        init(values: Iterable[T]);

        contains(v: T) -> bool;

        add(v: T);
        add(values: Iterable[T]);

        clear();
    si

    class Vector[T]: List[T] is
        Length: int = value;

        ReverseIterator: Generic.Iterator[T] => null;

        Array: T[];

        init() is si
        init(elements: Iterable[T]) is si
        init(initial_capacity: int) is si

        lengthen(to_at_least: int);
        
        copy() -> List[T] => null;
        clear() is si

        add(v: T);
        add(elements: Iterable[T]) is si

        pull() -> T;
        pop() -> T;

        Top: T => null;

        [index: int]: T
            => null,
            = value is si
    si

    trait Dict[K,V]: Iterable[V], Deletable[K] is
        Keys: Iterable[K];
        Pairs: Iterable[Pair[K,V]];
        Length: int;

        [index: K]: V
            => null,
            = value is si

        contains(key: K) -> bool;
    si

    class Map[K,V]: Dict[K,V] is
        init();
        init(size: int);

        clear();

        [index: K]: V
            => null,
            = value is si
    si

    class SortedMap[K,V]: Dict[K,V] is
        clear();

        [index: K]: V
            => null,
            = value is si
    si

    class Pair[K,V] is
        key: K;
        value: V;

        init(k: K, v: V);
    si

    class PairKeyIterator[K,V]: Iterator[K] is
        init(pairs: Generic.Iterator[Generic.Pair[K,V]]);
    si

    class PairValueIterator[K,V]: Iterator[V] is
        init(pairs: Generic.Iterator[Generic.Pair[K,V]]);
    si

    class Range[T]: Iterable[T] is
    si

    class Sort[T] is
        sort(values: List[T]);
        sort(values: List[T], compare: (T,T) -> int);
    si
si

@IL.stub()
namespace IO is
    use System;

    class Stream is
        Handle: int;
    si
    
    class File is
        openCreate(path: String) -> Writer;
        openCreateStream(path: String) -> Stream;
        openAppend(path: String) -> Writer;
        openRead(path: String) -> Reader;

        deleteQuiet(path: String) -> bool;

        WorkingDirectory: String;
    si    

    class Reader is
        read() -> int;
        readAll() -> String;
        readLine() -> String;
        isAtEnd() -> bool;
    si

    class Writer is
        FlushOnPrintln: bool public;

        write(c: char);
        write(c: int);
        write(s: String);

        print(r: Object);
        println(r: Object);

        close();
        flush();
    si

    namespace Std is
        input: Reader => null;

        out: Writer => null;
        output: Writer => null;

        err: Writer => null;
        error: Writer => null;
    si

    struct Stat is
        mtime: int;

        init();

        stat(path: String) -> bool;
    si
si
