@IL.stub()
namespace Ghul is

    @KEEP()
    struct ENUM[E] is
        ==(other: E) -> bool innate compare.value;
        <>(other: E) -> int innate compare.order;
    si

    @KEEP()
    struct REFERENCE[E] is
        value: E => null, = value is si

        // TODO: 
        // value: E innate reference.read, = value innate reference.assign;
    si

    @KEEP()
    trait ARRAY[E]: Collections.List[E] is
    si

    @KEEP()
    struct POINTER[E] is
        value: E => null, = value is si

        // TODO: 
        // value: E innate pointer.read, = value innate pointer.assign;
    si

    ==(a: object, b: object) -> bool innate compare.reference;

    !(a: bool) -> bool innate bool.not;
    ¬(a: bool) -> bool innate bool.not;

    /\ (a: bool, b: bool) -> bool innate bool.and_then;
    \/ (a: bool, b: bool) -> bool innate bool.or_else;

    -(a: char) -> char innate arithmetic.neg;
    +(a: char, b: char) -> char innate arithmetic.add;
    -(a: char, b: char) -> char innate arithmetic.sub;
    *(a: char, b: char) -> char innate arithmetic.mul;
    /(a: char, b: char) -> char innate arithmetic.div;
    <>(a: char, b: char) -> int innate compare.order;
    ==(a: char, b: char) -> bool innate compare.value;

    -(a: byte) -> byte innate arithmetic.neg;
    +(a: byte, b: byte) -> byte innate arithmetic.add;
    -(a: byte, b: byte) -> byte innate arithmetic.sub;
    *(a: byte, b: byte) -> byte innate arithmetic.mul;
    /(a: byte, b: byte) -> byte innate arithmetic.div;
    <>(a: byte, b: byte) -> int innate compare.order;
    ==(a: byte, b: byte) -> bool innate compare.value;

    +(a: ubyte, b: ubyte) -> ubyte innate arithmetic.add;
    -(a: ubyte, b: ubyte) -> ubyte innate arithmetic.sub;
    *(a: ubyte, b: ubyte) -> ubyte innate arithmetic.mul;
    /(a: ubyte, b: ubyte) -> ubyte innate arithmetic.div;
    <>(a: ubyte, b: ubyte) -> int innate compare.uorder;
    ==(a: ubyte, b: ubyte) -> bool innate compare.value;

    -(a: short) -> short innate arithmetic.neg;
    +(a: short, b: short) -> short innate arithmetic.add;
    -(a: short, b: short) -> short innate arithmetic.sub;
    *(a: short, b: short) -> short innate arithmetic.mul;
    /(a: short, b: short) -> short innate arithmetic.div;
    <>(a: short, b: short) -> int innate compare.order;
    ==(a: short, b: short) -> bool innate compare.value;

    +(a: ushort, b: ushort) -> ushort innate arithmetic.add;
    -(a: ushort, b: ushort) -> ushort innate arithmetic.sub;
    *(a: ushort, b: ushort) -> ushort innate arithmetic.mul;
    /(a: ushort, b: ushort) -> ushort innate arithmetic.div;
    <>(a: ushort, b: ushort) -> int innate compare.uorder;
    ==(a: ushort, b: ushort) -> bool innate compare.value;

    -(a: int) -> int innate arithmetic.neg;
    +(a: int, b: int) -> int innate arithmetic.add;
    -(a: int, b: int) -> int innate arithmetic.sub;
    *(a: int, b: int) -> int innate arithmetic.mul;
    /(a: int, b: int) -> int innate arithmetic.div;
    %(a: int, b: int) -> int innate arithmetic.rem;
    <>(a: int, b: int) -> int innate compare.order;
    ==(a: int, b: int) -> bool innate compare.value;
    <<(a: int, b: int) -> int innate arithmetic.shl;
    >>(a: int, b: int) -> int innate arithmetic.shr;
    ∩(a: int, b: int) -> int innate arithmetic.and;
    ∪(a: int, b: int) -> int innate arithmetic.or;

    +(a: uint, b: uint) -> uint innate arithmetic.add;
    -(a: uint, b: uint) -> uint innate arithmetic.sub;
    *(a: uint, b: uint) -> uint innate arithmetic.mul;
    /(a: uint, b: uint) -> uint innate arithmetic.div;
    <>(a: uint, b: uint) -> int innate compare.uorder;
    ==(a: uint, b: uint) -> bool innate compare.value;

    -(a: long) -> long innate arithmetic.neg;
    +(a: long, b: long) -> long innate arithmetic.add;
    -(a: long, b: long) -> long innate arithmetic.sub;
    *(a: long, b: long) -> long innate arithmetic.mul;
    /(a: long, b: long) -> long innate arithmetic.div;
    %(a: long, b: long) -> long innate arithmetic.rem;
    <>(a: long, b: long) -> int innate compare.order;
    ==(a: long, b: long) -> bool innate compare.value;

    +(a: ulong, b: ulong) -> ulong innate arithmetic.add;
    -(a: ulong, b: ulong) -> ulong innate arithmetic.sub;
    *(a: ulong, b: ulong) -> ulong innate arithmetic.mul;
    /(a: ulong, b: ulong) -> ulong innate arithmetic.div;
    <>(a: ulong, b: ulong) -> int innate compare.uorder;
    ==(a: ulong, b: ulong) -> bool innate compare.value;

    -(a: word) -> word innate arithmetic.neg;
    +(a: word, b: word) -> word innate arithmetic.add;
    -(a: word, b: word) -> word innate arithmetic.sub;
    *(a: word, b: word) -> word innate arithmetic.mul;
    /(a: word, b: word) -> word innate arithmetic.div;
    <>(a: word, b: word) -> int innate compare.order;
    ==(a: word, b: word) -> bool innate compare.value;

    +(a: uword, b: uword) -> uword innate arithmetic.add;
    -(a: uword, b: uword) -> uword innate arithmetic.sub;
    *(a: uword, b: uword) -> uword innate arithmetic.mul;
    /(a: uword, b: uword) -> uword innate arithmetic.div;
    <>(a: uword, b: uword) -> int innate compare.uorder;
    ==(a: uword, b: uword) -> bool innate compare.value;

    -(a: single) -> single innate arithmetic.neg;
    +(a: single, b: single) -> single innate arithmetic.add;
    -(a: single, b: single) -> single innate arithmetic.sub;
    *(a: single, b: single) -> single innate arithmetic.mul;
    /(a: single, b: single) -> single innate arithmetic.div;
    <>(a: single, b: single) -> int innate compare.order;
    ==(a: single, b: single) -> bool innate compare.value;

    -(a: double) -> double innate arithmetic.neg;
    +(a: double, b: double) -> double innate arithmetic.add;
    -(a: double, b: double) -> double innate arithmetic.sub;
    *(a: double, b: double) -> double innate arithmetic.mul;
    /(a: double, b: double) -> double innate arithmetic.div;
    <>(a: double, b: double) -> int innate compare.order;
    ==(a: double, b: double) -> bool innate compare.value;

    +(a: string, b: object) -> string innate string.add;
    =~(a: string, b: string) -> bool innate string.equals;

    ..(from: int, to: int) -> INT_RANGE innate range.exclusive;
    ::(from: int, to: int) -> INT_RANGE_INCLUSIVE innate range.inclusive;
si
