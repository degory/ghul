namespace Ghul is
    // no type_expression
    class void is
    si

    // Boolean/bit
    class bool is
    si

    true: bool;
    false: bool;

    // 8 bit bytes
    class byte is
    si

    class ubyte is
    si

    // 16 bit shorts
    class short is
    si

    class ushort is
    si

    // 32 bit integers
    class int is
    si

    class uint is
    si

    // 64 bit longs
    class long is
    si

    class ulong is
    si

    // natural machine words (pointer sized, 32 or 64 bit):
    class word is
    si

    class uword is
    si

    // unicode character (probably 32 bit unsigned opaque):
    class char is
    si

    assert(condition: bool);
    assert(condition: bool, message: System.String);

    class ENUM[E] is
        ==(other: E) -> bool;
        >(other: E) -> bool;
    si

    class REFERENCE[E] is
        value: E => null, = value is si
    si

    class ARRAY[E]: Generic.List[E] is
        length: int => null;

        init(length: int);

        [index: int]: E
            => null,
            = value is si
    si

    class POINTER[E] is
        value: E => null, = value is si
    si

    class TUPLE_0 is
    si

    class TUPLE_1[T0] is
        item_0: T0;
        __de_tuple() -> T0 => item_0;
    si

    class TUPLE_2[T0,T1] is
        item_0: T0;
        item_1: T1;
    si

    class TUPLE_3[T0,T1,T2] is
        item_0: T0;
        item_1: T1;
        item_2: T2;
    si

    class TUPLE_4[T0,T1,T2,T3] is
        item_0: T0;
        item_1: T1;
        item_2: T2;
        item_3: T3;
    si

    class TUPLE_5[T0,T1,T2,T3,T4] is
        item_0: T0;
        item_1: T1;
        item_2: T2;
        item_3: T3;
        item_4: T4;
    si

    class TUPLE_6[T0,T1,T2,T3,T4,T5] is
        item_0: T0;
        item_1: T1;
        item_2: T2;
        item_3: T3;
        item_4: T4;
        item_5: T5;
    si

    class TUPLE_7[T0,T1,T2,T3,T4,T5,T6] is
        item_0: T0;
        item_1: T1;
        item_2: T2;
        item_3: T3;
        item_4: T4;
        item_5: T5;
        item_6: T6;
    si

    class TUPLE_8[T0,T1,T2,T3,T4,T5,T6,T7] is
        item_0: T0;
        item_1: T1;
        item_2: T2;
        item_3: T3;
        item_4: T4;
        item_5: T5;
        item_6: T6;
        item_7: T7;
    si

    class TUPLE_9[T0,T1,T2,T3,T4,T5,T6,T7,T8] is
        item_0: T0;
        item_1: T1;
        item_2: T2;
        item_3: T3;
        item_4: T4;
        item_5: T5;
        item_6: T6;
        item_7: T7;
        item_8: T8;
    si

    class TUPLE_10[T0,T1,T2,T3,T4,T5,T6,T7,T8,T9] is
        item_0: T0;
        item_1: T1;
        item_2: T2;
        item_3: T3;
        item_4: T4;
        item_5: T5;
        item_6: T6;
        item_7: T7;
        item_8: T8;
        item_9: T9;
    si

    class FUNCTION_0[TR] is
        call() -> TR => null;
    si

    class FUNCTION_1[T0,TR] is
        call(a0: T0) -> TR => null;
    si

    class FUNCTION_2[T0,T1,TR] is
        call(
            a0: T0,
            a1: T1
        ) -> TR => null;
    si

    class FUNCTION_3[T0,T1,T2,TR] is
        call(
            a0: T0,
            a1: T1,
            a2: T2
        ) -> TR => null;
    si

    class FUNCTION_4[T0,T1,T2,T3,TR] is
        call(
            a0: T0,
            a1: T1,
            a2: T2,
            a3: T3
        ) -> TR => null;
    si

    class FUNCTION_5[T0,T1,T2,T3,T4,TR] is
        call(
            a0: T0,
            a1: T1,
            a2: T2,
            a3: T3,
            a4: T4
        ) -> TR => null;
    si

    class FUNCTION_6[T0,T1,T2,T3,T4,T5,TR] is
        call(
            a0: T0,
            a1: T1,
            a2: T2,
            a3: T3,
            a4: T4,
            a5: T5
        ) -> TR => null;
    si

    class FUNCTION_7[T0,T1,T2,T3,T4,T5,T6,TR] is
        call(
            a0: T0,
            a1: T1,
            a2: T2,
            a3: T3,
            a4: T4,
            a5: T5,
            a6: T6
        ) -> TR => null;
    si

    class FUNCTION_8[T0,T1,T2,T3,T4,T5,T6,T7,TR] is
        call(
            a0: T0,
            a1: T1,
            a2: T2,
            a3: T3,
            a4: T4,
            a5: T5,
            a6: T6,
            a7: T7
        ) -> TR => null;
    si

    class FUNCTION_9[T0,T1,T2,T3,T4,T5,T6,T7,T8,TR] is
        call(
            a0: T0,
            a1: T1,
            a2: T2,
            a3: T3,
            a4: T4,
            a5: T5,
            a6: T6,
            a7: T7,
            a8: T8
        ) -> TR => null;
    si

    class FUNCTION_10[T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,TR] is
        call(
            a0: T0,
            a1: T1,
            a2: T2,
            a3: T3,
            a4: T4,
            a5: T5,
            a6: T6,
            a7: T7,
            a8: T8,
            a9: T9
        ) -> TR => null;
    si

    !(a: bool) -> bool;
    &&(a: bool, b: bool) -> bool;
    ||(a: bool, b: bool) -> bool;

    -(a: byte) -> byte;
    +(a: byte, b: byte) -> byte;
    -(a: byte, b: byte) -> byte;
    *(a: byte, b: byte) -> byte;
    /(a: byte, b: byte) -> byte;
    >(a: byte, b: byte) -> bool;
    ==(a: byte, b: byte) -> bool;

    +(a: ubyte, b: ubyte) -> ubyte;
    -(a: ubyte, b: ubyte) -> ubyte;
    *(a: ubyte, b: ubyte) -> ubyte;
    /(a: ubyte, b: ubyte) -> ubyte;
    >(a: ubyte, b: ubyte) -> bool;
    ==(a: ubyte, b: ubyte) -> bool;

    -(a: short) -> short;
    +(a: short, b: short) -> short;
    -(a: short, b: short) -> short;
    *(a: short, b: short) -> short;
    /(a: short, b: short) -> short;
    >(a: short, b: short) -> bool;
    ==(a: short, b: short) -> bool;

    +(a: ushort, b: ushort) -> ushort;
    -(a: ushort, b: ushort) -> ushort;
    *(a: ushort, b: ushort) -> ushort;
    /(a: ushort, b: ushort) -> ushort;
    >(a: ushort, b: ushort) -> bool;
    ==(a: ushort, b: ushort) -> bool;

    -(a: int) -> int;
    +(a: int, b: int) -> int;
    -(a: int, b: int) -> int;
    *(a: int, b: int) -> int;
    /(a: int, b: int) -> int;
    >(a: int, b: int) -> bool;
    ==(a: int, b: int) -> bool;
    <<(a: int, b: int) -> int;
    >>(a: int, b: int) -> int;
    &(a: int, b: int) -> int;
    |(a: int, b: int) -> int;

    +(a: uint, b: uint) -> uint;
    -(a: uint, b: uint) -> uint;
    *(a: uint, b: uint) -> uint;
    /(a: uint, b: uint) -> uint;
    >(a: uint, b: uint) -> bool;
    ==(a: uint, b: uint) -> bool;

    -(a: long) -> long;
    +(a: long, b: long) -> long;
    -(a: long, b: long) -> long;
    *(a: long, b: long) -> long;
    /(a: long, b: long) -> long;
    >(a: long, b: long) -> bool;
    ==(a: long, b: long) -> bool;

    +(a: ulong, b: ulong) -> ulong;
    -(a: ulong, b: ulong) -> ulong;
    *(a: ulong, b: ulong) -> ulong;
    /(a: ulong, b: ulong) -> ulong;
    >(a: ulong, b: ulong) -> bool;
    ==(a: ulong, b: ulong) -> bool;

    -(a: word) -> word;
    +(a: word, b: word) -> word;
    -(a: word, b: word) -> word;
    *(a: word, b: word) -> word;
    /(a: word, b: word) -> word;
    >(a: word, b: word) -> bool;
    ==(a: word, b: word) -> bool;

    +(a: uword, b: uword) -> uword;
    -(a: uword, b: uword) -> uword;
    *(a: uword, b: uword) -> uword;
    /(a: uword, b: uword) -> uword;
    >(a: uword, b: uword) -> bool;
    ==(a: uword, b: uword) -> bool;

    ..(from: int, to: int) -> Generic.Range[int];
    ::(from: int, to: int) -> Generic.Range[int];
si

namespace System is
    class String: Object, Generic.Iterable[char] is
        Length: int;

        =~(other: String) -> bool => null;
        !~(other: String) -> bool => null;

        [index: int]: char => null;

        +(other: Root) -> String => null;
        %(values: Generic.Iterable[Root]) -> String => null;

        indexOf(c: char) -> int;
        indexOf(s: String) -> int;

        lastIndexOf(c: char) -> int;

        substring(from: int) -> String;
        substring(from: int, to: int) -> String;

        split(delimiter: char) -> Generic.List[String];
        trim() -> String;

        startsWith(string: String) -> bool;
        endsWith(string: String) -> bool;

        toInt() -> int;
        toCString() -> char ptr;

        parseInt() -> int static;
    si

    trait Root is
        ClassName: String => null;
        init();
        clone() -> Object;
        dump(object: Object) -> String static;
        toString() -> String;
        hash() -> int;
    si

    class Object: Root is
    si

    class StringBuffer: String is
        init(initial_capacity: int);
        init(s: String);
        append(value: Root) -> StringBuffer;    
        append(value: int, base: int) -> StringBuffer;
        append(value: int, base: int, length: int, pad: char) -> StringBuffer;
    si

    class Enum[T] is
    si

    class Backtrace is
    si

    class Exception is
        init(message: String);
    si

    class NullPointerException is
        init(message: String);
    si

    class NotImplementedException is
        init(message: String);
    si

    class BoundsException is
        init(message: String);
    si    

    ==(a: Root, b: Root) -> bool;
    !=(a: Root, b: Root) -> bool;

    class Arguments is
        ProgramArguments: String[];
        ProgramEnvironment:String[];
    si
    
si

namespace Util is
    use System;

    class Process is
        fork() -> bool;
        wait() -> int;

        spawn(executable: String, arguments: String[], environment: String[]);

        run(name: String, args: System.String[], env: System.String[], want_wait: bool) -> int;
        run(name: String, args: System.String[], env: System.String[]) -> int;
        run(name: System.String, ars: System.String[]) -> int;        

        fork() -> bool;
        wait() -> int;
    si
    
    class ProgramEnvironment is
        Map: Generic.Map[String,String];
    si
si

namespace Generic is
    trait Iterable[T] is
        Iterator: Generic.Iterator[T];
        elements() -> Generic.Iterator[T];
    si

    trait Iterator[T] is
        hasMoreElements() -> bool;
        nextElement() -> T;
    si

    trait Deletable[K] is
        delete(k: K);
    si    

    trait List[T]: Iterable[T] is
        Length: int;

        add(v: T);
        remove(v: T);

        contains(v: T) -> bool;

        [index: int]: T
            => null,
            = value is si
    si

    class Set[T]: Iterable[T] is
        init();
        init(values: Iterable[T]);

        contains(v: T) -> bool;

        add(v: T);
        add(values: Iterable[T]);

        clear();
    si

    class Vector[T]: List[T] is
        Length: int => 0;

        ReverseIterator: Generic.Iterator[T] => null;

        Array: T[];

        init() is si
        init(elements: Iterable[T]) is si
        init(initial_capacity: int) is si

        copy() -> List[T] => null;
        clear() is si

        add(v: T);
        add(elements: Iterable[T]) is si

        pull() -> T;
        pop() -> T;

        Top: T => null;

        [index: int]: T
            => null,
            = value is si
    si

    trait Dict[K,V]: Iterable[V], Deletable[K] is
        Keys: Iterator[K];
        Pairs: Iterator[Pair[K,V]];

        [index: K]: V
            => null,
            = value is si

        delete(key: K);
        contains(key: K) -> bool;
    si

    class Map[K,V]: Dict[K,V] is
        init(size: int);

        clear();

        [index: K]: V
            => null,
            = value is si
    si

    class SortedMap[K,V]: Dict[K,V] is
        clear();

        [index: K]: V
            => null,
            = value is si
    si

    class Pair[K,V] is
        key: K;
        value: V;

        init(k: K, v: V);
    si

    class PairKeyIterator[K,V]: Iterator[K] is
        init(pairs: Generic.Iterator[Generic.Pair[K,V]]);
    si

    class PairValueIterator[K,V]: Iterator[V] is
        init(pairs: Generic.Iterator[Generic.Pair[K,V]]);
    si

    class Range[T]: Iterable[T] is
    si

    class Sort[T] is
        sort(values: List[T]);
        sort(values: List[T], compare: (T,T) -> int);
    si
si

namespace IO is
    use System;

    class File is
        openCreate(path: String) -> Writer;
        openRead(path: String) -> Reader;

        deleteQuiet(path: String) -> bool;

        WorkingDirectory: String;
    si    

    class Reader is
        read() -> int;
        readAll() -> String;
        readLine() -> String;
        isAtEnd() -> bool;
    si

    class Writer is
        FlushOnPrintln: bool public;

        write(c: char);
        write(c: int);
        write(s: String);

        print(r: Root);
        println(r: Root);

        close();
        flush();
    si

    namespace Std is
        input: Reader => null;

        out: Writer => null;
        output: Writer => null;

        err: Writer => null;
        error: Writer => null;
    si

    struct Stat is
        mtime: int;

        init();

        stat(path: String) -> bool;
    si
si
