namespace Collections is
    @IL.name("System.Collections.Generic.IReadOnlyDictionary`2")
    trait Map[TKey,TValue]: Bag[PAIR[TKey,TValue]],Iterable[PAIR[TKey,TValue]] is
        @IL.name("ContainsKey")
        contains_key(key: TKey) -> bool;

        @IL.name("TryGetValue")
        try_get_value(key: TKey, value: TValue ref) -> bool;

        @IL.name.read("get_Item") 
        [key: TKey]: TValue,;

        @IL.name.read("get_Keys") 
        keys: Iterable[TKey];

        @IL.name.read("get_Values") 
        values: Iterable[TValue];
    si

    @IL.name("System.Collections.Generic.IDictionary`2")
    trait MutableMap[TKey,TValue]: MutableBag[PAIR[TKey,TValue]],Iterable[PAIR[TKey,TValue]] is
        @IL.name("ContainsKey")
        contains_key(key: TKey) -> bool;

        @IL.name("Add")
        add(key: TKey, value: TValue);

        @IL.name("Remove")
        remove(key: TKey) -> bool;

        @IL.name("TryGetValue")
        try_get_value(key: TKey, value: TValue ref) -> bool;

        @IL.name.read("get_Item") @IL.name.assign("set_Item") 
        [key: TKey]: TValue, = value;

        @IL.name.read("get_Keys") 
        keys: MutableBag[TKey];

        @IL.name.read("get_Values") 
        values: MutableBag[TValue];
    si

    @IL.name("System.Collections.Generic.Dictionary`2")
    class MAP[TKey,TValue]: 
        MutableMap[TKey,TValue], // ,MutableBag[PAIR[TKey,TValue]],
        Iterable[PAIR[TKey,TValue]],
        Map[TKey,TValue] // ,Bag[PAIR[TKey,TValue]]
    is
        @IL.name("Add")
        add(key: TKey, value: TValue);

        @IL.name("Clear")
        clear();

        @IL.name("ContainsKey")
        contains_key(key: TKey) -> bool;

        @IL.name("ContainsValue")
        contains_value(value: TValue) -> bool;

        @IL.name.read("GetEnumerator")
        iterator: Iterator[PAIR[TKey,TValue]];

        @IL.name("Remove")
        remove(key: TKey) -> bool;

        @IL.name("Remove")
        remove(key: TKey, value: TValue ref) -> bool;

        @IL.name("TryGetValue")
        try_get_value(key: TKey, value: TValue ref) -> bool;

        @IL.name("TryAdd")
        try_add(key: TKey, value: TValue) -> bool;

        @IL.name("EnsureCapacity")
        ensure_capacity(capacity: int) -> int;

        @IL.name("TrimExcess")
        trim_excess();

        @IL.name("TrimExcess")
        trim_excess(capacity: int);

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        hash() -> int;

        @IL.name(".ctor")
        init();

        @IL.name(".ctor")
        init(capacity: int);

        @IL.name(".ctor")
        init(comparer: EqualityComparer[TKey]);

        @IL.name(".ctor")
        init(capacity: int, comparer: EqualityComparer[TKey]);

        @IL.name(".ctor")
        init(dictionary: MutableMap[TKey,TValue]);

        @IL.name(".ctor")
        init(dictionary: MutableMap[TKey,TValue], comparer: EqualityComparer[TKey]);

        @IL.name(".ctor")
        init(collection: Iterable[PAIR[TKey,TValue]]);

        @IL.name(".ctor")
        init(collection: Iterable[PAIR[TKey,TValue]], comparer: EqualityComparer[TKey]);

        @IL.name.read("get_Comparer") 
        comparer: EqualityComparer[TKey];

        @IL.name.read("get_Count") 
        count: int;

        @IL.name.read("get_Keys") 
        keys: Iterable[PAIR[TKey,TValue]];

        @IL.name.read("get_Values") 
        values: Iterable[PAIR[TKey,TValue]];

        @IL.name.read("get_Item") @IL.name.assign("set_Item") 
        [key: TKey]: TValue, = value;
    si
si
