namespace Semantic is
    use System;

    use Logging;

    class SYMBOL_LOADER is
        _logger: LOGGER;
        _symbol_table: SYMBOL_TABLE;

        _int_type: Type.BASE;
    
        init(logger: LOGGER, symbol_table: SYMBOL_TABLE, int_type: Type.BASE) is
            super.init();

            _logger = logger;
            _symbol_table = symbol_table;            
            _int_type = int_type;
        si

        // FIXME: these should do more specific stuff:

        load_integer_literal(value: String) -> Graph.Value.BASE =>
            new Graph.Value.Literal.INTEGER(value, _int_type);

        load_class(symbol: Symbol.CLASS) -> Graph.Value.BASE =>
            new Graph.Value.Load.SYMBOL(null, symbol);

        load_trait(symbol: Symbol.TRAIT) -> Graph.Value.BASE =>
            new Graph.Value.Load.SYMBOL(null, symbol);

        load_global_function(symbol: Symbol.BASE) -> Graph.Value.BASE =>
            new Graph.Value.Load.SYMBOL(null, symbol);

        load_instance_function(from: Graph.Value.BASE, symbol: Symbol.BASE) -> Graph.Value.BASE is
            if from == null then
                from = new Graph.Value.Load.SELF(_symbol_table.current_instance_context);
            fi

            return new Graph.Value.Load.SYMBOL(from, symbol);
        si
        
        load_local_variable(symbol: Symbol.BASE) -> Graph.Value.BASE =>
            new Graph.Value.Load.SYMBOL(null, symbol);

        store_local_variable(symbol: Symbol.BASE, value: Graph.Value.BASE) -> Graph.Value.BASE =>
            new Graph.Value.Store.SYMBOL(null, symbol, value);

        load_global_variable(symbol: Symbol.BASE) -> Graph.Value.BASE =>
            new Graph.Value.Load.SYMBOL(null, symbol);

        store_global_variable(symbol: Symbol.BASE, value: Graph.Value.BASE) -> Graph.Value.BASE =>
            new Graph.Value.Store.SYMBOL(null, symbol, value);
            
        load_instance_variable(from: Graph.Value.BASE, symbol: Symbol.BASE) -> Graph.Value.BASE is
            if from == null then
                from = new Graph.Value.Load.SELF(_symbol_table.current_instance_context);
            fi

            return new Graph.Value.Load.SYMBOL(from, symbol);
        si

        store_instance_variable(from: Graph.Value.BASE, symbol: Symbol.BASE, value: Graph.Value.BASE) -> Graph.Value.BASE is
            if from == null then
                from = new Graph.Value.Load.SELF(_symbol_table.current_instance_context);
            fi
        
            return new Graph.Value.Store.SYMBOL(from, symbol, value);
        si

        load_instance_property(from: Graph.Value.BASE, symbol: Symbol.BASE) -> Graph.Value.BASE is
            if from == null then
                from = new Graph.Value.Load.SELF(_symbol_table.current_instance_context);
            fi

            return new Graph.Value.Load.SYMBOL(from, symbol);
        si

        store_instance_property(from: Graph.Value.BASE, symbol: Symbol.BASE, value: Graph.Value.BASE) -> Graph.Value.BASE is
            if from == null then
                from = new Graph.Value.Load.SELF(_symbol_table.current_instance_context);
            fi
        
            return new Graph.Value.Store.SYMBOL(from, symbol, value);
        si

        load_global_property(symbol: Symbol.BASE) -> Graph.Value.BASE =>
            new Graph.Value.Load.SYMBOL(null, symbol);

        store_global_property(symbol: Symbol.BASE, value: Graph.Value.BASE) -> Graph.Value.BASE =>
            new Graph.Value.Store.SYMBOL(null, symbol, value);        
    si
si