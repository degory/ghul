namespace Semantic is
    use System;
    use Generic;
    use Logging;
    use Source;

    use Syntax.Tree;

    class SYMBOL_TABLE is
        _logger: LOGGER;
        _scopes: Map[NODE,Scope];
        _stack: Vector[Scope];

        current_scope: Scope is
            if _stack.Length > 0 then
                return _stack.Top;
            else
                return null;
            fi
        si

        global_scope: Scope => _stack[0];

        current_namespace_context: NamespaceContext is
            for scope in _stack.ReverseIterator do
                if isa NamespaceContext(scope) then
                    return cast NamespaceContext(scope);
                fi
            od
            
            assert(false, "no current namespace");
        si

        current_declaration_context: DeclarationContext is
            for scope in _stack.ReverseIterator do
                if isa DeclarationContext(scope) then
                    return cast DeclarationContext(scope);
                fi
            od
        si

        current_instance_context: Symbol.BASE is
            for scope in _stack.ReverseIterator do
                if isa Symbol.CLASS(scope) || isa Symbol.TRAIT(scope) then
                    return cast Symbol.BASE(scope);
                fi
            od
        si
        
        current_function: Symbol.Function is
            for scope in _stack.ReverseIterator do
                if isa Symbol.Function(scope) then
                    return cast Symbol.Function(scope);
                fi
            od
        si

        current_function_group: Symbol.FUNCTION_GROUP is
            for scope in _stack.ReverseIterator do
                if isa Symbol.FUNCTION_GROUP(scope) then
                    return cast Symbol.FUNCTION_GROUP(scope);
                fi
            od
        si

        current_property: Symbol.Property is
            for scope in _stack.ReverseIterator do
                if isa Symbol.Property(scope) then
                    return cast Symbol.Property(scope);
                fi
            od
        si

        init(logger: LOGGER) is
            _logger = logger;
            _stack = new Vector[Scope](50);
            _scopes = new Map[NODE,Scope](65521);
            enter_scope(new Symbol.NAMESPACE(LOCATION.dummy, "", null, ""));
        si

        scope_for(node: NODE) -> Scope is
            return _scopes[node];
        si

        associate_node_with_scope(node: NODE, scope: Scope) is
            _scopes[node] = scope;
        si

        enter_scope(node: Syntax.Tree.NODE) is
            var scope = _scopes[node];
            if scope == null then
                _logger.fatal(node.location, "no scope found for " + node);
            fi
            enter_scope(scope);
        si

        enter_scope(scope: Scope) is
            _stack.add(scope);
        si

        leave_scope(node: Syntax.Tree.NODE) is
            var scope = _scopes[node];
            if scope == null then
                _logger.fatal(node.location, "no scope found for " + node);
            fi
            leave_scope(scope);
        si

        leave_scope(scope: Scope) is
            if current_scope != scope then
                _logger._trace("find-symbol", "current scope: " + current_scope);
                _logger._trace("find-symbol", "scope to pop:  " + scope);
            fi
            assert(current_scope == scope, "scope stack corrupt");
            _stack.pop();
        si

        toString() -> String is
            var result = new StringBuffer();
            result.append("symbol table:\n");
            for scope in _stack.ReverseIterator do
                result.append(scope).append("\n");
            od
            result.append("\n");
            return result;
        si

        dump_stack() -> String is
            var result = new StringBuffer();
            result.append("scope stack:\n");
            for scope in _stack.ReverseIterator do
                result.append(Object.dump(scope) + "\n");
            od
            result.append("\n");
            return result;
        si
    si
si
