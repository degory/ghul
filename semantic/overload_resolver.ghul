namespace Semantic is
    use System;
    use Generic;

    use Logging;
    use Source;

    class OVERLOAD_RESOLVER is
        _logger: Logger;

        init(logger: Logger) is
            super.init();

            _logger = logger;
        si

        resolve(
            location: LOCATION,
            group: Symbol.FUNCTION_GROUP,
            arguments: List[Type.BASE]
        ) -> Symbol.Function
        is
            try
                return _resolve(location, group, arguments);
            catch e: Exception
                IO.Std.err.println("something went wrong resolving overload: " + group);
                return null;
            yrt
        si

        _resolve(
            location: LOCATION,
            group: Symbol.FUNCTION_GROUP,
            arguments: List[Type.BASE]
        ) -> Symbol.Function
        is
            if group == null then
                return null;
            fi

            for f in group.functions do
                if f.arguments.Length == 0 && arguments.Length == 0 then
                    return f;
                elif f.arguments.Length == arguments.Length then
                    var found = true;

                    // TODO: this is all or nothing match. We actually need to do
                    // an assignment compatibility check for each argument, compute
                    // a match score for each possible matching function overload,
                    // and return best match:

                    for i in 0..f.arguments.Length do
                        var match = f.arguments[i] =~ arguments[i];

                        if !match then
                            found = false;
                            break;
                        fi
                    od

                    if found then
                        return f;
                    fi
                fi
            od

            _logger.error(location, "no overload found for " + group.name + "(" + arguments + ")");

            for f in group.functions do
                if f.arguments.Length == arguments.Length then
                    _logger.info(location, "tried " + group.name + "(" + f.arguments + ")");
                fi
            od

            return null;
        si        
    si
si