namespace Semantic is
    use System;
    use Generic;

    use Logging;
    use Source;

    class OVERLOAD_RESOLVER_RESULT is
        function: Symbol.Function;
        score: Type.MATCH;

        init(function: Symbol.Function, score: Type.MATCH) is
            self.function = function;
            self.score = score;
        si
    si

    class OVERLOAD_RESOLVER is
        _logger: Logger;

        init(logger: Logger) is
            super.init();

            _logger = logger;
        si

        resolve(
            location: LOCATION,
            group: Symbol.FUNCTION_GROUP,
            arguments: List[Type.BASE],
            want_error: bool
        ) -> OVERLOAD_RESOLVER_RESULT
        is
            try
                return _resolve(location, group, arguments, want_error);
            catch e: Exception
                IO.Std.err.println("something went wrong resolving overload: " + group);
                return null;
            yrt
        si

        _resolve(
            location: LOCATION,
            group: Symbol.FUNCTION_GROUP,
            arguments: List[Type.BASE],
            want_error: bool
        ) -> OVERLOAD_RESOLVER_RESULT
        is
            if group == null || group.functions == null || arguments == null then
                return null;
            fi

            let best_score = Type.MATCH.DIFFERENT;
            var result: Symbol.Function;

            for f in group.functions do
                if f.arguments.Length == 0 && arguments.Length == 0 then
                    return new OVERLOAD_RESOLVER_RESULT(f, Type.MATCH.SAME);
                elif f.arguments.Length == arguments.Length then
                    var score = Type.MATCH.SAME;

                    for i in 0..f.arguments.Length do
                        var match: Type.MATCH;

                        if f.arguments[i]? && arguments[i]? then
                            match = f.arguments[i].compare(arguments[i]);

                            if match == Type.MATCH.DIFFERENT then
                                score = Type.MATCH.DIFFERENT;
                                break;
                            fi
                        else
                            match = Type.MATCH.ASSIGNABLE;
                        fi

                        score = cast Type.MATCH(cast int(score) + cast int(match));
                    od

                    if score < best_score then
                        best_score = score;
                        result = f;
                    fi
                fi
            od

            if result? then
                return new OVERLOAD_RESOLVER_RESULT(result, best_score);
            fi

            if want_error then
                let tried = new StringBuffer();

                for f in group.functions do
                    if f.arguments.Length == arguments.Length then
                        if tried.Length > 0 then
                            tried.append(", ");
                        fi

                        tried
                            .append(f.qualified_name)
                            .append("(")
                            .append(f.arguments)
                            .append(")");
                    fi
                od

                if tried.Length > 0 then
                    _logger.error(location, "no overload found for " + group.name + "(" + arguments + "), tried " + tried);
                else
                    _logger.error(location, "no overload found for " + group.name + "(" + arguments + ")");
                fi
            fi

            return null;
        si        
    si
si