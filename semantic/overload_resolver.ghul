namespace Semantic is
    use System;
    use Generic;

    use Logging;
    use Source;

    class OVERLOAD_RESOLVE_RESULT is
        function: Symbol.Function;
        score: Type.MATCH;

        init(function: Symbol.Function, score: Type.MATCH) is
            self.function = function;
            self.score = score;
        si
    si

    class OVERLOAD_MATCHES_RESULT is
        results: List[Symbol.Function];
        best_result_index: int;
        current_parameter_index: int public;

        init(
            results: List[Symbol.Function],
            best_result_index: int,
            current_parameter_index: int
        )
        is
            self.results = results;
            self.best_result_index = best_result_index;
            self.current_parameter_index = current_parameter_index;
        si
    si

    class OVERLOAD_RESOLVER is
        _logger: Logger;

        init(logger: Logger) is
            super.init();

            _logger = logger;
        si

        resolve(
            location: LOCATION,
            group: Symbol.FUNCTION_GROUP,
            arguments: List[Type.BASE],
            want_error: bool
        ) -> OVERLOAD_RESOLVE_RESULT
        is
            try
                return _resolve(location, group, arguments, want_error);
            catch e: Exception
                IO.Std.err.println("something went wrong resolving overload: " + group + " arguments " + arguments);
                IO.Std.err.println("caught: " + e);
                return null;
            yrt
        si

        find_matches(
            group: Symbol.FUNCTION_GROUP,
            arguments: List[Type.BASE]
        ) -> OVERLOAD_MATCHES_RESULT
        is
            try
                return _find_matches(group, arguments);
            catch e: Exception
                IO.Std.err.println("something went wrong resolving overload: " + group + " arguments " + arguments);
                IO.Std.err.println("caught: " + e);
                return null;
            yrt            
        si

        _resolve(
            location: LOCATION,
            group: Symbol.FUNCTION_GROUP,
            arguments: List[Type.BASE],
            want_error: bool            
        ) -> OVERLOAD_RESOLVE_RESULT
        is
            if group == null || group.functions == null || arguments == null then
                return null;
            fi

            let best_score = Type.MATCH.DIFFERENT;
            var result: Symbol.Function;

            group.resolve_overrides();

            for f in group.functions do
                if f.arguments.Length == 0 && arguments.Length == 0 then
                    return new OVERLOAD_RESOLVE_RESULT(f, Type.MATCH.SAME);
                elif f.arguments.Length == arguments.Length then
                    var score = Type.MATCH.SAME;

                    for i in 0..f.arguments.Length do
                        var match: Type.MATCH;

                        if f.arguments[i]? && arguments[i]? then
                            match = f.arguments[i].compare(arguments[i]);

                            if match == Type.MATCH.DIFFERENT then
                                score = Type.MATCH.DIFFERENT;
                                break;
                            fi
                        else
                            match = Type.MATCH.ASSIGNABLE;
                        fi

                        score = cast Type.MATCH(cast int(score) + cast int(match));
                    od

                    if score < best_score then
                        best_score = score;
                        result = f;
                    fi
                fi
            od

            if result? then
                return new OVERLOAD_RESOLVE_RESULT(result, best_score);
            fi

            if want_error then
                let tried = new StringBuffer();

                for f in group.functions do
                    if f.arguments.Length == arguments.Length then
                        if tried.Length > 0 then
                            tried.append(", ");
                        fi

                        tried
                            .append(f.qualified_name)
                            .append("(")
                            .append(f.arguments)
                            .append(")");
                    fi
                od

                if tried.Length > 0 then
                    _logger.error(location, "no overload found for " + group.name + "(" + arguments + "), tried " + tried);
                else
                    _logger.error(location, "no overload found for " + group.name + "(" + arguments + ")");
                fi
            fi

            return null;
        si        

        _find_matches(
            group: Symbol.FUNCTION_GROUP,
            arguments: List[Type.BASE]
        ) -> OVERLOAD_MATCHES_RESULT
        is
            if group == null || group.functions == null || arguments == null then
                return null;
            fi

            let results = new Vector[Symbol.Function]();

            let best_score = Type.MATCH.DIFFERENT;
            var best_index = -1;

            group.resolve_overrides();

            for f in group.functions do
                if f.arguments.Length >= arguments.Length then
                    var score = Type.MATCH.SAME;

                    for i in 0..arguments.Length do
                        var match: Type.MATCH;

                        if f.arguments[i]? && arguments[i]? then
                            match = f.arguments[i].compare(arguments[i]);

                            if match == Type.MATCH.DIFFERENT then
                                score = Type.MATCH.DIFFERENT;
                                break;
                            fi
                        else
                            match = Type.MATCH.ASSIGNABLE;
                        fi

                        score = cast Type.MATCH(cast int(score) + cast int(match));
                    od

                    if score < Type.MATCH.DIFFERENT then
                        results.add(f);

                        if score < best_score then
                            best_score = score;
                            best_index = results.Length - 1;
                        fi
                    fi
                fi
            od

            return
                new OVERLOAD_MATCHES_RESULT(
                    results,
                    best_index,
                    -1
                );
        si                
    si
si