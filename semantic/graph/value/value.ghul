namespace Semantic.Graph.Value is
    use System;

    use Generic;

    class BASE: Object, Semantic.Type.Typed is
        has_type: bool => false;

        type: Type.BASE is
            throw new NotImplementedException(Object.dump(self) + " has no type");
        si

        gen(context: IR.CONTEXT) is
            throw new NotImplementedException(Object.dump(self));
        si
        
        gen(value: BASE, context: IR.CONTEXT) static is
            if value? then
                value.gen(context);
            else
                // context.println("null value: " + new Backtrace());
                context.println("null value");
            fi
        si

        init() is si
    si

    class SKIP: BASE is
        init() is
            super.init();
        si
    si

    class NEW: BASE is
        has_type: bool => type?;
        type: Type.BASE;
        constructor: Symbol.Function;
        arguments: Iterable[BASE];

        init(
            type: Type.BASE,
            constructor: Symbol.Function,
            arguments: Iterable[BASE]
        ) is
            super.init();

            self.type = type;
            self.constructor = constructor;
            self.arguments = arguments;
        si

        gen(context: IR.CONTEXT) is
            for a in arguments do
                gen(a, context);
            od
            
            context.println("newobj " + constructor, type);
        si

        toString() -> String =>
            "new:[[" + type + "](\"" + constructor.name + "\"," + arguments + ")";
    si

    class CAST: BASE is
        has_type: bool => type?;
        type: Type.BASE;
        value: BASE;

        init(
            type: Type.BASE,
            value: BASE
        ) is
            super.init();

            self.type = type;
            self.value = value;
        si

        gen(context: IR.CONTEXT) is
            gen(value, context);

            context.println("cast " + type);
        si

        toString() -> String =>
            "cast:[" + type + "](" + value + ")";
    si

    class ISA: BASE is
        has_type: bool => type?;
        type: Type.BASE;
        isa_type: Type.BASE;
        value: BASE;

        init(
            type: Type.BASE,
            isa_type: Type.BASE,
            value: BASE
        ) is
            super.init();

            self.type = type;
            self.isa_type = type;
            self.value = value;
        si

        gen(context: IR.CONTEXT) is
            gen(value, context);

            context.println("isa " + type);
        si

        toString() -> String =>
            "isa:[" + isa_type + "](" + value + ")";
    si


    class DUMMY: BASE, Type.Typed is
        has_type: bool => type?;
        type: Type.BASE;

        init(type: Type.BASE) is
            super.init();

            self.type = type;
        si

        gen(context: IR.CONTEXT) is
            context.println("dummy " + type);
        si
    si

    class NATIVE: BASE, Type.Typed is
        has_type: bool => type?;
        type: Type.BASE;

        init(type: Type.BASE) is
            super.init();

            self.type = type;
        si

        gen(context: IR.CONTEXT) is
            context.println("native" + type);
        si
    si

    class TUPLE: BASE, Type.Typed is
        has_type: bool => type?;
        type: Type.BASE;

        values: Iterable[BASE];

        init(type: Type.BASE, values: Iterable[BASE]) is
            super.init();

            self.type = type;
            self.values = values;
        si

        gen(context: IR.CONTEXT) is
            for v in values do
                gen(v, context);

                context.println("tuple " + type);
            od
            
        si

        toString() -> String => "tuple:[" + type + "](" + values + ")";
    si

    namespace Need is
        class STORE: BASE is
            has_type: bool => value? && value.has_type;
            type: Type.BASE => value.type;
            value: BASE;

            init(value: BASE) is
                super.init();

                self.value = value;
            si

            gen(context: IR.CONTEXT) is
                gen(value, context);
                context.println("unresolved need store");
            si

            toString() -> String =>
                "need-store:[" + type + "]";
        si
    si

    namespace Expect is
        class STORABLE: BASE is
            has_type: bool => type?;
            type: Type.BASE;

            init(type: Type.BASE) is
                super.init();

                self.type = type;
            si

            gen(context: IR.CONTEXT) is
                context.println("unresolved expect");
            si

            toString() -> String =>
                "expect-storable:[" + type + "]";
        si
    si

    namespace Load is
        class SELF: BASE, Type.Typed is
            self_: Symbol.BASE;
            type: Type.BASE;

            init(self_: Symbol.BASE) is
                init(self_, null);
            si
            
            init(self_: Symbol.BASE, type: Type.BASE) is
                super.init();

                assert(self_?, ClassName + " arg is null");

                self.self_ = self_;

                if type? then
                    self.type = type;
                elif isa Semantic.Type.Typed(self_) then
                    self.type = cast Semantic.Type.Typed(self_).type;
                fi
            si

            gen(context: IR.CONTEXT) is
                context.println("ldarg.0", "self " + type);
            si

            toString() -> String => "self:[" + type + "]";
        si

        class SYMBOL: BASE, Type.Typed is
            symbol: Symbol.BASE;
            symbol_as_typed: Type.Typed => cast Type.Typed(symbol);
            type: Type.BASE => symbol_as_typed.type;
            from: BASE;

            init(from: BASE, symbol: Symbol.BASE) is
                super.init();

                assert(symbol?, ClassName + " arg is null");

                self.from = from;
                self.symbol = symbol;
            si

            gen(context: IR.CONTEXT) is
                gen(from, context);
                context.println("load member " + symbol);
            si

            toString() -> String =>
                "load:[" + type + "](" + from + ",\"" + symbol.name + "\")";
        si

        class LOCAL_VARIABLE: SYMBOL, Type.Typed is
            init(symbol: Symbol.BASE) is
                super.init(null, symbol);
            si

            gen(context: IR.CONTEXT) is
                context.println("ldloc " + symbol.name, symbol);
            si

            toString() -> String =>
                "load:[" + type + "](" + from + ",\"" + symbol.name + "\")";
        si

        class LOCAL_ARGUMENT: SYMBOL, Type.Typed is
            init(symbol: Symbol.BASE) is
                super.init(null, symbol);
            si

            gen(context: IR.CONTEXT) is
                context.println("ldarg " + symbol.name, symbol);
            si

            toString() -> String =>
                "load:[" + type + "](" + from + ",\"" + symbol.name + "\")";
        si


        class INSTANCE_VARIABLE: SYMBOL, Type.Typed is
            init(from: BASE, symbol: Symbol.BASE) is
                super.init(from, symbol);
            si

            gen(context: IR.CONTEXT) is
                gen(from, context);
                context.println("ldfld " + symbol.name, symbol);
            si

            toString() -> String =>
                "load:[" + type + "](" + from + ",\"" + symbol.name + "\")";
        si


    si

    namespace Store is
        class SYMBOL: BASE, Type.Typed is
            symbol: Symbol.BASE;
            symbol_as_typed: Type.Typed => cast Type.Typed(symbol);
            type: Type.BASE => symbol_as_typed.type;
            from: BASE;
            value: Graph.Value.BASE;

            init(from: BASE, symbol: Symbol.BASE, value: Graph.Value.BASE) is
                super.init();

                assert(symbol?, ClassName + " arg is null");

                self.from = from;
                self.symbol = symbol;
                self.value = value;
            si

            gen(context: IR.CONTEXT) is
                gen(from, context);
                gen(value, context);

                context.println("store member " + symbol);
            si            

            toString() -> String =>
                "store:[" + type + "](" + from + ",\"" + symbol.name + "\"," + value + ")";
        si

        class LOCAL_VARIABLE: SYMBOL is
            init(symbol: Symbol.BASE, value: Graph.Value.BASE) is
                super.init(null, symbol, value);
            si

            gen(context: IR.CONTEXT) is
                gen(value, context);
                
                context.println("stloc " + symbol.name, symbol);
            si            

            toString() -> String =>
                "store:[" + type + "](" + from + ",\"" + symbol.name + "\"," + value + ")";
        si

        class LOCAL_ARGUMENT: SYMBOL, Type.Typed is
            init(symbol: Symbol.BASE, value: Graph.Value.BASE) is
                super.init(null, symbol, value);
            si

            gen(context: IR.CONTEXT) is
                gen(value, context);

                context.println("starg " + symbol.name, symbol);
            si

            toString() -> String =>
                "load:[" + type + "](" + from + ",\"" + symbol.name + "\")";
        si

        class INSTANCE_VARIABLE: SYMBOL is
            init(from: Graph.Value.BASE, symbol: Symbol.BASE, value: Graph.Value.BASE) is
                super.init(from, symbol, value);
            si

            gen(context: IR.CONTEXT) is
                gen(from, context);
                gen(value, context);

                context.println("stfld " + symbol.name, symbol);
            si            

            toString() -> String =>
                "store:[" + type + "](" + from + ",\"" + symbol.name + "\"," + value + ")";
        si
    si

    namespace Call is
        class INNATE: BASE, Type.Typed is
            function: Semantic.Symbol.INNATE_FUNCTION;
            operation: String public;
            arguments: Iterable[BASE];
            type: Type.BASE;

            init(function: Semantic.Symbol.INNATE_FUNCTION, arguments: Iterable[BASE], type: Type.BASE) is
                super.init();

                self.function = function;
                self.arguments = arguments;

                if type? then
                    self.type = type;
                else
                    self.type = function.type;
                fi
            si

            gen(context: IR.CONTEXT) is
                for a in arguments do
                    gen(a, context);
                od

                context.println("innate operation " + function.innate_name + " " + operation);                
            si

            toString() -> String =>
                "innate-call:[" + type + "](\"" + function.name + "\"," + arguments + ")";
        si


        class GLOBAL: BASE, Type.Typed is
            function: Symbol.Function;
            arguments: Iterable[BASE];
            type: Type.BASE;

            init(function: Symbol.Function, arguments: Iterable[BASE], type: Type.BASE) is
                super.init();

                self.function = function;
                self.arguments = arguments;

                if type? then
                    self.type = type;
                else
                    self.type = function.type;
                fi
            si

            gen(context: IR.CONTEXT) is
                for a in arguments do
                    gen(a, context);
                od

                context.println("call " + function);                
            si

            toString() -> String =>
                "global-call:[" + type + "](\"" + function.name + "\"," + arguments + ")";
        si

        class INSTANCE: BASE, Type.Typed is
            from: Value.BASE;
            function: Symbol.Function;
            arguments: Iterable[BASE];
            type: Type.BASE;

            init(from: Value.BASE, function: Symbol.Function, arguments: Iterable[BASE], type: Type.BASE) is
                super.init();

                self.from = from;
                self.function = function;
                self.arguments = arguments;

                if type? then
                    self.type = type;
                else
                    self.type = function.type;
                fi
            si

            gen(context: IR.CONTEXT) is
                gen(from, context);

                for a in arguments do
                    gen(a, context);
                od

                context.println("callvirt " + function);
            si

            toString() -> String =>
                "instance-call:[" + type + "](" + from + ",\"" + function.name + "\"," +  arguments + ")";
        si

        class CLOSURE: BASE, Type.Typed is
            from: BASE;
            type: Type.BASE;
            arguments: Iterable[BASE];

            init(from: BASE, type: Type.BASE, arguments: Iterable[BASE]) is
                super.init();

                self.from = from;
                self.type = type;
                self.arguments = arguments;
            si

            gen(context: IR.CONTEXT) is
                for a in arguments do
                    gen(a, context);
                od

                gen(from, context);

                context.println("call closure");                
            si
            

            toString() -> String =>
                "closure-call:[" + type + "](" + from + "," + arguments + ")";
        si
    si

    namespace Literal is
        class INTEGER: BASE, Type.Typed is
            string: String;
            type: Type.BASE;

            init(string: String, type: Type.BASE) is
                super.init();

                self.string = string;
                self.type = type;
            si

            gen(context: IR.CONTEXT) is
                context.println("int " + string);
            si

            toString() -> String =>
                "literal:[" + type + "](" + string + ")";
        si

        class STRING: BASE, Type.Typed is
            string: String;
            type: Type.BASE;

            init(string: String, type: Type.BASE) is
                super.init();

                self.string = string;
                self.type = type;
            si

            gen(context: IR.CONTEXT) is
                context.println("ldstr \"" + string + "\"");
            si

            toString() -> String =>
                "literal:[" + type + "](\"" + string + "\")";
        si
    si
si
