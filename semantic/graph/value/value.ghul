namespace Semantic.Graph.Value is
    use System;

    class BASE: Object, Semantic.Type.Typed is
        has_type: bool => false;

        type: Type.BASE is
            throw new NotImplementedException(Object.dump(self) + " has no type");
        si

        init() is si
    si

    class DUMMY: BASE, Type.Typed is
        has_type: bool => type != null;
        type: Type.BASE;

        init(type: Type.BASE) is
            super.init();

            self.type = type;
        si
    si

    namespace Load is
        class SELF: BASE, Type.Typed is
            self_: Symbol.BASE;
            self_as_typed: Type.Typed => cast Type.Typed(self_);
            type: Type.BASE => self_as_typed.type;

            init(self_: Symbol.BASE) is
                super.init();

                self.self_ = self_;
            si
        si

        class LOCAL: BASE is
            init() is
                super.init();
            si
        si
        
        class SYMBOL: BASE, Type.Typed is
            symbol: Symbol.BASE;
            symbol_as_typed: Type.Typed => cast Type.Typed(symbol);
            type: Type.BASE => symbol_as_typed.type;
            from: BASE;

            init(from: BASE, symbol: Symbol.BASE) is
                super.init();

                self.symbol = symbol;
            si

            toString() -> String => "From " + from + " " + ClassName + ": " + symbol;
        si
    si

    namespace Store is
        class SYMBOL: BASE, Type.Typed is
            symbol: Symbol.BASE;
            symbol_as_typed: Type.Typed => cast Type.Typed(symbol);
            type: Type.BASE => symbol_as_typed.type;
            from: BASE;
            value: Graph.Value.BASE;

            init(from: BASE, symbol: Symbol.BASE, value: Graph.Value.BASE) is
                super.init();

                self.symbol = symbol;
                self.value = value;
            si

            toString() -> String is
                return "From " + from + " " + ClassName + ": " + symbol + " store " + value;
            si
        si        
    si

    namespace Literal is
        class INTEGER: BASE, Type.Typed is
            string: String;
            type: Type.BASE;

            init(string: String, type: Type.BASE) is
                super.init();

                self.string = string;
                self.type = type;
            si
        si
    si
si
