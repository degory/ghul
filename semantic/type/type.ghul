namespace Semantic.Type is
    use System;
    use Generic;

    class BASE: Object, Typed is
        type: BASE => self;

        init() is
        si

        =~(other: BASE) -> bool is
            return false;
        si

        specialize(arguments: Dict[String,Symbol.BASE]) -> Type.BASE
            => self;        
    si

    class NAMED: BASE is
        name: String;

        scope: Scope => symbol;

        symbol: Symbol.Scoped;

        init(name: String, symbol: Symbol.Scoped) is
            super.init();

            self.name = name;
            self.symbol = symbol;
        si

        =~(other: BASE) -> bool is
            if isa NAMED(other) then
                let other_symbol = cast NAMED(other);
                return symbol == other_symbol.symbol;
            fi
        si

        specialize(arguments: Dict[String,Symbol.BASE]) -> NAMED is
            let result = arguments[name];

            if result? then
                return new NAMED(name, cast Symbol.Scoped(result));
            else
                return self;
            fi
        si        

        toString() -> String => name;
    si

    class FUNCTION_GROUP: BASE is
        name: String;

        function_group: Symbol.FUNCTION_GROUP;

        init(name: String, function_group: Symbol.FUNCTION_GROUP) is
            super.init();

            self.name = name;
            self.function_group = function_group;
        si

        =~(other: BASE) -> bool is
            if isa FUNCTION_GROUP(other) then
                let other_function_group = cast FUNCTION_GROUP(other);
                return function_group == other_function_group.function_group;
            fi
        si

        specialize(arguments: Dict[String,Symbol.BASE]) -> FUNCTION_GROUP is
            return new FUNCTION_GROUP(
                name,
                function_group.specialize(arguments)
            );
        si

        toString() -> String => name + "(...)";
    si    
si