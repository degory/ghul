namespace Semantic.Type is
    use System;
    use Generic;

    use Source;
    
    trait SettableTyped: Typed is
        type: BASE public
            = value;
    si
    
    trait Typed is
        type: BASE;
    si

    enum MATCH is
        SAME = 0,
        ASSIGNABLE = 1,
        CONVERTABLE = 2,
        DIFFERENT = 100000
    si

    class BASE: Object, Typed is
        scope: Scope => null;
    
        type: BASE => self;

        short_description: String => toString();

        init() is
        si

        =~(other: BASE) -> bool => false;

        compare(other: BASE) -> MATCH
            => MATCH.DIFFERENT;

        find_member(name: String) -> Symbol.BASE
            => null;

        specialize(type_map: Dict[String,Type.BASE]) -> BASE is
            IO.Std.err.println("specialize " + ClassName + " " + self + " with " + type_map + " does nothing ");
            return self;
        si            
    si

    class ANY: BASE is
        init() is
            super.init();
        si

        =~(other: BASE) -> bool
            => true;

        compare(other: BASE) -> Type.MATCH
            => MATCH.ASSIGNABLE;
    si

    class NAMED: BASE is
        name: String => symbol.name;

        scope: Scope => symbol;

        symbol: Symbol.BASE;

        arguments: List[BASE] => new BASE[](0);

        short_description: String is
            if symbol? then
                return symbol.name;
            else
                return "(undefined)";
            fi
        si

        init(symbol: Symbol.BASE) is
            self.symbol = symbol;
        si

        specialize(type_map: Dict[String,BASE]) -> Type.BASE is
            let result = type_map[name];

            if result? then
                return result;
            else
                return self;
            fi
        si        

        =~(other: BASE) -> bool is
            if isa NAMED(other) then
                let other_symbol = cast NAMED(other);
                return symbol == other_symbol.symbol;
            fi
        si

        compare_tuple(other: GENERIC) -> Type.MATCH is

        si

        compare(other: BASE) -> Type.MATCH is
            if isa ANY(other) then
                return Type.MATCH.ASSIGNABLE;
            fi            

            if symbol == null || other == null then
                return Type.MATCH.DIFFERENT;
            elif isa NAMED(other) then
                let other_named = cast NAMED(other);

                if symbol == other_named.symbol then
                    return Type.MATCH.SAME;
                fi
                
                for a in other_named.symbol.ancestors do
                    let match = self.compare(a);

                    if match <= Type.MATCH.ASSIGNABLE then
                        return Type.MATCH.ASSIGNABLE;
                    elif match == Type.MATCH.CONVERTABLE then
                        return Type.MATCH.CONVERTABLE;
                    fi
                od

                if other_named.name =~ "TUPLE_1" && isa GENERIC(other) then
                    let other_generic = cast GENERIC(other);

                    let match = self.compare(other_generic.arguments[0]);

                    if match <= Type.MATCH.ASSIGNABLE then
                        return Type.MATCH.ASSIGNABLE;
                    elif match == Type.MATCH.CONVERTABLE then
                        return Type.MATCH.CONVERTABLE;
                    fi
                fi
                                                
                return symbol.compare_type(other_named.symbol);
            fi

            return Type.MATCH.DIFFERENT;            
        si        

        find_member(name: String) -> Symbol.BASE is
            if symbol? then
                return symbol.find_member(name);
            fi
        si

        hash() -> int => symbol.hash();

        toString() -> String is
            if symbol? then
                return symbol.qualified_name;
            else
                return "(null symbol) " + name;
            fi
        si
    si

    class GENERIC: NAMED is
        arguments: List[BASE] => cast Symbol.GENERIC(symbol).arguments;
        ancestors: List[BASE] => cast Symbol.GENERIC(symbol).ancestors;

        short_description: String is
            let result = new StringBuffer();

            result
                .append(symbol.name)
                .append('[');

            var seen_any = false;

            for a in arguments do
                if seen_any then
                    result.append(',');
                fi

                if a? then
                    result.append(a.short_description);
                else
                fi
            od

            result.append(']');

            return result;
        si

        init(
            location: LOCATION,
            symbol: Symbol.ScopedWithInheritance,
            arguments: List[BASE]
        ) is
            super.init(new Symbol.GENERIC(location, symbol, arguments));
        si

        create(
            location: LOCATION,
            symbol: Symbol.ScopedWithInheritance,
            arguments: List[BASE]
        ) -> GENERIC
        is
            return new GENERIC(location, symbol, arguments);
        si
        
        specialize(type_map: Dict[String,BASE]) -> Type.GENERIC is
            var seen_any_new = false;

            let generic_symbol = cast Symbol.GENERIC(symbol);

            let new_arguments = new Vector[BASE](generic_symbol.arguments.Length);

            for i in 0..arguments.Length do
                let argument_name
                    = generic_symbol.symbol.argument_names[i];

                let mapped_type = type_map[argument_name];

                if mapped_type? then
                    new_arguments[i] = mapped_type;

                    seen_any_new = true;
                else
                    let oa = generic_symbol.arguments[i];
                    let na = oa.specialize(type_map);
                    new_arguments[i] = na;

                    if oa != na then
                        seen_any_new = true;
                    fi
                fi
            od

            if seen_any_new then
                let result = create(symbol.location, generic_symbol.symbol, new_arguments);

                return result;
            else
               return self;
            fi
        si

        =~(other: BASE) -> bool is
            if !isa GENERIC(other) then
                return false;
            fi

            let generic_other = cast GENERIC(other);

            if symbol == generic_other.symbol then
                return true;
            fi

            let generic_symbol = cast Symbol.GENERIC(symbol);
            let generic_other_symbol = cast Symbol.GENERIC(generic_other.symbol);

            if generic_symbol.symbol != generic_other_symbol.symbol then
                return false;
            fi

            if generic_symbol.arguments.Length != generic_other_symbol.arguments.Length then
                return false;
            fi

            for i in 0..generic_symbol.arguments.Length do
                // TODO: implement type variance here:
                if generic_symbol.arguments[i] !~ generic_other_symbol.arguments[i] then                
                    return false;
                fi
            od

            return true;
        si

        compare(other: BASE) -> Type.MATCH is
            if isa ANY(other) then
                return Type.MATCH.ASSIGNABLE;
            elif symbol == null || other == null then
                return Type.MATCH.DIFFERENT;
            /*
            elif isa GENERIC(other) then
                let other_generic = cast GENERIC(other);
            */
            elif isa NAMED(other) then
                let other_named = cast NAMED(other);
                
                if self =~ other then
                    return Type.MATCH.SAME;
                fi
                                    
                for i in 0..other_named.symbol.ancestors.Length do
                    let a = other_named.symbol.get_ancestor(i);

                    let match = self.compare(a);

                    if match <= Type.MATCH.ASSIGNABLE then
                        return Type.MATCH.ASSIGNABLE;
                    elif match == Type.MATCH.CONVERTABLE then
                        return Type.MATCH.CONVERTABLE;
                    fi
                od

                if other_named.name =~ "TUPLE_1" then
                    IO.Std.err.println("possible tuple match: " + self + " vs " + other);

                    let match = self.compare(other_named.arguments[0]);

                    IO.Std.err.println("tuple match score: " + self + " vs " + other_named.arguments[0] + " = " + match);

                    if match <= Type.MATCH.ASSIGNABLE then
                        return Type.MATCH.ASSIGNABLE;
                    elif match == Type.MATCH.CONVERTABLE then
                        return Type.MATCH.CONVERTABLE;
                    fi
                fi
            fi

            return Type.MATCH.DIFFERENT;
        si

        hash() -> int => symbol.hash();

        toString() -> String is 
            return symbol.toString();
        si
    si

    class FUNCTION: GENERIC is
        init(
            location: LOCATION,
            symbol: Symbol.ScopedWithInheritance,
            arguments: List[BASE]
        ) is
            super.init(location, symbol, arguments);
        si

        create(
            location: LOCATION,
            symbol: Symbol.ScopedWithInheritance,
            arguments: List[BASE]
        ) -> FUNCTION is
            return new FUNCTION(location, symbol, arguments);
        si

        toString() -> String is
            let result = new System.StringBuffer();

            if arguments.Length == 2 then
                result
                    .append(arguments[0])
                    .append(" -> ")
                    .append(arguments[1]);
            elif arguments.Length == 1 then
                result
                    .append("() -> ")
                    .append(arguments[0]);
            else
                result.append('(');

                for i in 0..arguments.Length do
                    result.append(arguments[i]);

                    if i == arguments.Length - 2 then
                        result.append(") -> ");
                    elif i != arguments.Length - 1 then
                        result.append(',');
                    fi
                od
            fi

            return result;
        si
    si

    class TUPLE: GENERIC is
        init(
            location: LOCATION,
            symbol: Symbol.ScopedWithInheritance,
            arguments: List[BASE]
        ) is
            super.init(location, symbol, arguments);
        si

        create(
            location: LOCATION,
            symbol: Symbol.ScopedWithInheritance,
            arguments: List[BASE]
        ) -> TUPLE is
            return new TUPLE(location, symbol, arguments);
        si        

        toString() -> String =>
            "(" + arguments + ")";
    si

    class ARRAY: GENERIC is
        init(
            location: LOCATION,
            symbol: Symbol.ScopedWithInheritance,
            arguments: List[BASE]
        ) is
            super.init(location, symbol, arguments);
        si

        create(
            location: LOCATION,
            symbol: Symbol.ScopedWithInheritance,
            arguments: List[BASE]
        ) -> Type.ARRAY is
            return new Type.ARRAY(location, symbol, arguments);
        si

        toString() -> String =>
            arguments[0].toString() + "[]";        
    si    

    class POINTER: GENERIC is
        init(
            location: LOCATION,
            symbol: Symbol.ScopedWithInheritance,
            arguments: List[BASE]
        ) is
            super.init(location, symbol, arguments);
        si

        create(
            location: LOCATION,
            symbol: Symbol.ScopedWithInheritance,
            arguments: List[BASE]
        ) -> Type.POINTER is
            return new Type.POINTER(location, symbol, arguments);
        si

        toString() -> String =>
            arguments[0].toString() + " ptr";        
    si        

    class REFERENCE: GENERIC is
        init(
            location: LOCATION,
            symbol: Symbol.ScopedWithInheritance,
            arguments: List[BASE]
        ) is
            super.init(location, symbol, arguments);
        si

        create(
            location: LOCATION,
            symbol: Symbol.ScopedWithInheritance,
            arguments: List[BASE]
        ) -> Type.REFERENCE is
            return new Type.REFERENCE(location, symbol, arguments);
        si

        toString() -> String =>
            arguments[0].toString() + " ref";        
    si        

    class ENUM: GENERIC is
        init(
            location: LOCATION,
            symbol: Symbol.ScopedWithInheritance,
            arguments: List[BASE]
        ) is
            super.init(location, symbol, arguments);
        si

        create(
            location: LOCATION,
            symbol: Symbol.ScopedWithInheritance,
            arguments: List[BASE]
        ) -> Type.ENUM is
            return new Type.ENUM(location, symbol, arguments);
        si

        toString() -> String =>
            arguments[0].toString();        
    si        

    class FUNCTION_GROUP: BASE is
        name: String;

        function_group: Symbol.FUNCTION_GROUP;

        init(name: String, function_group: Symbol.FUNCTION_GROUP) is
            super.init();

            self.name = name;
            self.function_group = function_group;
        si

        =~(other: BASE) -> bool is
            if isa FUNCTION_GROUP(other) then
                let other_function_group = cast FUNCTION_GROUP(other);
                return function_group == other_function_group.function_group;
            fi
        si

        specialize(generic_cache: GENERIC_CACHE, arguments: Dict[String,Type.BASE]) -> FUNCTION_GROUP is
            return new FUNCTION_GROUP(
                name,
                function_group.specialize(arguments)
            );
        si

        toString() -> String => name + "(...)";
    si    
si