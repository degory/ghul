namespace Semantic is
    use System;
    use Generic;

    class GENERIC_SPECIALIZER is
        specializations: Map[Type.GENERIC,Type.NAMED];

        init() is
            super.init();

            specializations = new Map[Type.GENERIC,Type.NAMED]();
        si

        /*
        [type: Type.GENERIC]: Type.NAMED public
            => specializations[type],
            = specialized_type is
                specializations[type] = specialized_type;
            si
        */

        [type: Type.GENERIC]: Type.NAMED public
            is
                let result = specializations[type];

                if type? && type.symbol? && type.symbol.qualified_name =~ "Generic.Iterable" then
                    if result? then
                        IO.Std.err.println(
                            "SPEC MAP: looking up generic " + type + " with hash " + type.hash()
                                + " => " + result + " (" + cast int(result.symbol) + ")");
                    else
                        IO.Std.err.println(
                            "SPEC MAP: looking up generic " + type + " with hash " + type.hash()
                                + " => null");
                    fi
                fi

                return result;
            si,
            = specialized_type is
                IO.Std.err.FlushOnPrintln = true;

                if self == null then
                    IO.Std.err.println("SPEC MAP: self if null");
                fi

                IO.Std.err.println("A");

                if type == null then
                    IO.Std.err.println("B");
                    IO.Std.err.println("SPEC MAP: attempting to store type at null index: " + specialized_type);
                    IO.Std.err.println("C");

                elif type.symbol? && type.symbol.qualified_name =~ "Generic.Iterable" then
                    IO.Std.err.println("D");
                    let old = specializations[type];

                    IO.Std.err.println("E");

                    if old? then
                        IO.Std.err.println("F");
                    
                        if specialized_type? then
                            IO.Std.err.println(
                                "SPEC MAP: replacing generic " + type + " with hash " + type.hash() + ": "
                                    + old + " (" + cast int(old.symbol) + ") => "
                                    + specialized_type + " (" + cast int(specialized_type.symbol) + ")");
                        else 
                            IO.Std.err.println(
                                "SPEC MAP: replacing generic " + type + " with hash " + type.hash() + ": "
                                    + old + " (" + cast int(old.symbol) + ") => null");                        
                        fi
                    else
                        IO.Std.err.println("G");
                    
                        if specialized_type? then
                            IO.Std.err.println(
                                "SPEC MAP: storing generic " + type + " with hash " + type.hash() + ": "
                                    + specialized_type + " (" + cast int(specialized_type.symbol) + ")");
                        else
                            IO.Std.err.println(
                                "SPEC MAP: storing generic " + type + " with hash " + type.hash() + ": null");
                        fi
                    fi
                fi

                IO.Std.err.println("H");

                specializations[type] = specialized_type;

                // IO.Std.err.println("I");
            si

        toString() -> String =>
            "generics: " + specializations.toString();
    si
si