namespace Semantic is
    use System;

    class SYMBOL_MAP: Collection.SortedMap[String,Symbol.BASE] is
        init() is
            super.init();
        si

        find_matches(
            prefix: String,
            matches: Generic.Dict[String,Semantic.Symbol.BASE])
        is
            IO.Std.err.println("symbol map, find prefix matches: '" + prefix + "'...");
        
            var n = find_first_match(prefix);

            IO.Std.err.println("first match is: " + n);

            if n == null then return; fi

            fin

            add_match(n.key, n.value, matches);

            for i in new Collection.SortedMapIterator[String,Semantic.Symbol.BASE](n) do
                if i.key.startsWith(prefix) then
                    IO.Std.err.println("symbol map, next match: " + i.value);

                    add_match(i.key, i.value, matches);
                else
                    IO.Std.err.println("symbol map, no longer matches: " + i.key);
                
                    return;
                fi
            od
        si

        add_match(name: String, match: Semantic.Symbol.BASE, matches: Generic.Dict[String,Semantic.Symbol.BASE]) is
            if !matches.contains(name) then
                matches[name] = match;            
            fi
        si

        find_first_match(
            prefix: String
        ) -> Collection.TreeNode[String,Semantic.Symbol.BASE] is
            var n = root;

            while n != null do
                IO.Std.err.println("symbol map, find first match, try: " + n.key);
            
                if n.key.startsWith(prefix) then
                    IO.Std.err.println("symbol map, found first match: " + n.key);
                    return n;
                fi

                let compResult = prefix.opCompare(n.key);

                if compResult == 0 then
                    IO.Std.err.println("symbol map, wierd: found exact match: " + n.key);

                    return n;
                elif compResult < 0 then
                    IO.Std.err.println("symbol map, find first, try left of: " + n.key);

                    n = n.left;
                else
                    IO.Std.err.println("symbol map, find first, try right of: " + n.key);
                
                    n = n.right;
                fi
            od

            IO.Std.err.println("symbol map, find first, no first match found for prefix: '" + prefix + "'");
            return n;
        si        
    si    
si