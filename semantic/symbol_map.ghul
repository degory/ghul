namespace Semantic is
    use System;

    class SYMBOL_MAP: Collection.SortedMap[String,Symbol.BASE] is
        init() is
            super.init();
        si

        find_matches(
            prefix: String,
            matches: Generic.Dict[String,Semantic.Symbol.BASE])
        is        
            var n = find_first_match(prefix);

            if n == null then return; fi

            add_match(n.key, n.value, matches);

            for i in new Collection.SortedMapIterator[String,Semantic.Symbol.BASE](n) do
                if i.key.startsWith(prefix) then
                    add_match(i.key, i.value, matches);
                else
                    return;
                fi
            od
        si

        add_match(name: String, match: Semantic.Symbol.BASE, matches: Generic.Dict[String,Semantic.Symbol.BASE]) is
            if !name.startsWith("__") && !matches.contains(name) then
                matches[name] = match.collapse_group_if_single_member();
            fi
        si

        find_first_match(
            prefix: String
        ) -> Collection.TreeNode[String,Semantic.Symbol.BASE] is
            var n = root;

            while n != null do
                if n.key.startsWith(prefix) then
                    return n;
                fi

                let compResult = prefix.opCompare(n.key);

                if compResult == 0 then
                    IO.Std.err.println("symbol map, weird: found exact match: " + n.key);

                    return n;
                elif compResult < 0 then
                    n = n.left;
                else
                    n = n.right;
                fi
            od

            return n;
        si        
    si
si