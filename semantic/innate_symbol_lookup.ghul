namespace Semantic is
    use System;
    use Generic;

    class InnateSymbolLookup is
        _symbol_table: SYMBOL_TABLE;
        _namespace_name: String;

        namespace_scope: Scope => _symbol_table.global_scope.find_direct(_namespace_name);

        init(symbol_table: SYMBOL_TABLE, namespace_name: String) is
            _symbol_table = symbol_table;
            _namespace_name = namespace_name;
        si

        get_type(name: String, type: Type.BASE) -> Semantic.Type.NAMED is
            let symbol = get_class(name);

            return new Semantic.Type.GENERIC(
                Source.LOCATION.dummy,
                symbol,
                [type]
            );
        si        

        get_type(name: String, types: List[Type.BASE]) -> Semantic.Type.NAMED =>
            get_type(name, types, 0);

        get_type(name: String, types: List[Type.BASE], exclude_count: int) -> Semantic.Type.NAMED is
            if types.Length > 0 then
                let symbol = get_class(name + "_" + (types.Length - exclude_count));

                return new Semantic.Type.GENERIC(
                    Source.LOCATION.dummy,
                    symbol,
                    types
                );
            else
                return get_type(name + "_0");
            fi
        si

        get_type(name: String) -> Semantic.Type.NAMED is
            let symbol = get_class(name);

            return new Semantic.Type.NAMED(
                symbol
            );
        si        

        get_class(name: String) -> Semantic.Symbol.ScopedWithInheritance
            => cast Semantic.Symbol.ScopedWithInheritance(get_symbol(name));

        get_symbol(name: String) -> Semantic.Symbol.BASE is
            if namespace_scope == null then
                IO.Std.err.println("oops: innate symbol lookup has no namespace for '" + _namespace_name + "'");
                return null;
            fi
            
            let result = namespace_scope.find_direct(name);

            assert(result?, "could not find innate symbol " + _namespace_name + "." + name);

            return result;
        si
    si

    class GHUL_SYMBOL_LOOKUP: InnateSymbolLookup is
        init(symbol_table: SYMBOL_TABLE) is
            super.init(symbol_table, "Ghul");    
        si

        get_enum_type(type: Type.BASE) -> Semantic.Type.NAMED =>
            get_type("ENUM", type);

        get_tuple_type(types: List[Type.BASE]) -> Semantic.Type.NAMED =>
            get_type("TUPLE", types);

        get_function_type(types: List[Type.BASE]) -> Semantic.Type.NAMED =>
            get_type("FUNCTION", types, 1);

        get_array_type(type: Type.BASE) -> Semantic.Type.NAMED =>
            get_type("ARRAY", type);            

        get_int_type() -> Semantic.Type.NAMED =>
            get_type("int");
        
        get_void_type() -> Semantic.Type.NAMED =>
            get_type("void");
    si

    class SYSTEM_SYMBOL_LOOKUP: InnateSymbolLookup is
        init(symbol_table: SYMBOL_TABLE) is
            super.init(symbol_table, "System");            
        si

        get_object_type() -> Semantic.Type.NAMED =>
            get_type("Object");

        get_root_type() -> Semantic.Type.NAMED =>
            get_type("Root");            

        get_string_type() -> Semantic.Type.NAMED =>
            get_type("String");
    si    
si