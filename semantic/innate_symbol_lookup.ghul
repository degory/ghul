namespace Semantic is
    use System;
    use Generic;

    class INNATE_SYMBOL_LOOKUP is
        _symbol_table: SYMBOL_TABLE;

        ghul_namespace: Scope => _symbol_table.global_scope.find_direct("Ghul");

        init(symbol_table: SYMBOL_TABLE) is
            _symbol_table = symbol_table;
        si

        get_tuple_type(types: List[Type.BASE]) -> Semantic.Type.NAMED =>
            get_type("TUPLE", types);

        get_function_type(types: List[Type.BASE]) -> Semantic.Type.NAMED =>
            get_type("FUNCTION", types, 1);

        get_int_type() -> Semantic.Type.NAMED =>
            get_type("int");
        
        get_void_type() -> Semantic.Type.NAMED =>
            get_type("void");

        get_type(name: String, types: List[Type.BASE]) -> Semantic.Type.NAMED =>
            get_type(name, types, 0);

        get_type(name: String, types: List[Type.BASE], exclude_count: int) -> Semantic.Type.NAMED is
            if types.Length > 0 then
                let symbol = get_class(name + '_' + (types.Length - exclude_count));

                return new Semantic.Type.GENERIC(
                    symbol.name,
                    symbol,
                    types
                );
            else
                return get_type(name + "_0");
            fi
        si

        get_type(name: String) -> Semantic.Type.NAMED is
            let symbol = get_class(name);

            return new Semantic.Type.NAMED(
                symbol.name,
                symbol
            );
        si        

        get_class(name: String) -> Semantic.Symbol.ScopedWithInheritance
            => cast Semantic.Symbol.ScopedWithInheritance(get_symbol(name));

        get_symbol(name: String) -> Semantic.Symbol.BASE is
            let result = ghul_namespace.find_direct(name);

            assert(result?, "could not find innate symbol Ghul." + name);

            return result;
        si
    si
si