namespace Semantic is
    use System;
    use Generic;

    use Logging;
    use Source;

    use Syntax.Tree;

    class NAMESPACES  is
        _logger: Logger;
        _symbol_table: SYMBOL_TABLE;
        _namespaces: Map[String,Symbol.NAMESPACE];
        _prefixes: Vector[String];
        current_prefix: String => _prefixes.Top;

        get_qualified_name(name: String) -> String is
            return current_prefix + '.' + name;
        si

        init(logger: Logger, symbol_table: SYMBOL_TABLE) is
            _logger = logger;
            _symbol_table = symbol_table;

            clear();
        si

        clear() is
            IO.Std.err.println("clear namespaces...");
            _namespaces = new Map[String,Symbol.NAMESPACE](65521);
            _prefixes = new Vector[String]();
            _prefixes.add("");
        si

        declare_and_enter_namespace(location: LOCATION, name: String) is
            var qualified_name = get_qualified_name(name);
            var ns = find_or_add_namespace(name, qualified_name);

            var existing = _symbol_table.current_scope.find_direct(name);

            if existing == null then
                _symbol_table.current_namespace_context.add_namespace(location, name, ns);
            else
                if existing != ns then
                    _logger.error(location, "redefining symbol " + name + " as a namespace, originally defined at " + existing.location);
                    _logger.error(existing.location, "symbol " + name + " is redefined as namespace at " + location);
                fi
            fi

            _symbol_table.enter_scope(ns);
            _prefixes.add(qualified_name);
        si

        enter_namespace(location: LOCATION, name: String) is
            var qualified_name = get_qualified_name(name);
            var ns = find_namespace(qualified_name);

            assert(ns != null, "No pre-existing aggregate namespace found for: " + name);

            _symbol_table.enter_scope(ns);
            _prefixes.add(qualified_name);
        si

        leave_namespace(location: LOCATION, name: String) is
            var ns = find_namespace(current_prefix);

            assert(ns != null, "could not find aggregate namespace " + name);
            _prefixes.pop();
            _symbol_table.leave_scope(ns);
        si

        find_or_add_namespace(name: String, qualified_name: String) -> Symbol.NAMESPACE is
            var result = _namespaces[qualified_name];

            if result == null then
                result = new Symbol.NAMESPACE(LOCATION.dummy, name, _symbol_table.current_scope, qualified_name);
                _namespaces[qualified_name] = result;
            fi

            return result;
        si

        find_namespace(qualified_name: String) -> Symbol.NAMESPACE is
            var result = _namespaces[qualified_name];

            assert(result != null, "aggregate namespace " + qualified_name + " should already exist");

            return result;
        si
    si
si
