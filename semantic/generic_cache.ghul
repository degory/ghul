namespace Semantic is
    use System;
    use Generic;

    class GENERIC_KEY is
        // FIXME: if symbol.owner is correct, then we don't need this
        _specialized_for: Symbol.BASE;
        _symbol: Symbol.BASE;
        _arguments: List[Type.BASE];

        init(specialized_for: Symbol.BASE, symbol: Symbol.BASE, arguments: List[Type.BASE]) is
            /*
            if specialized_for != symbol.owner then
                IO.Std.err.println(
                    "unexpected owner for symbol " + symbol.qualified_name
                        + " (" + specialized_for.qualified_name + ")");
            fi
            */

            _specialized_for = specialized_for;
            _symbol = symbol;
            _arguments = arguments;
        si

        hash() -> int is
            var result = _symbol.hash();

            result = result + _specialized_for.hash();

            for a in _arguments do
                result = result + a.hash();
            od

            return result;
        si

        =~(other: GENERIC_KEY) -> bool is
            if _symbol != other._symbol then
                return false;
            fi

            for i in 0.._arguments.Length do
                if _arguments[i] !~ other._arguments[i] then
                    return false;
                fi
            od

            return true;
        si
    si

    class GENERIC_CACHE is
        specializations: Map[GENERIC_KEY,Symbol.BASE];

        init() is
            super.init();

            specializations = new Map[GENERIC_KEY,Symbol.BASE]();
        si

        [key: GENERIC_KEY]: Symbol.BASE public
            => specializations[key],
            = value is
                specializations[key] = value;
            si
            
        clear() is
            specializations.clear();
        si

        toString() -> String =>
            "generics: " + specializations.toString();
    si
si