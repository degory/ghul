namespace Driver is
    use System;
    use Generic;

    use IoC;
    use Logging;

    class Main is
        init() is
            try 
                if Arguments.ProgramArguments.Length == 1 then
                    IO.Std.out.println("ghul build " + Source.BUILD.number);
                    IO.Std.out.flush();
                    native.exit(0);
                fi  

                let container = IoC.CONTAINER.instance;
                let logger = container.logger;

                let legacy_compiler_flags = new LEGACY_COMPILER_FLAGS();
                let flags = new BUILD_FLAGS();
                let compiler = new COMPILER();
                let output_file_name_generator = new OUTPUT_FILE_NAME_GENERATOR();

                var project_name: String;

                if Arguments.ProgramArguments.Length >= 2 && Arguments.ProgramArguments[1] =~ "-A" then
                    let analyser = new ANALYSER(
                        compiler,
                        container.symbol_table,
                        container.symbol_locations,
                        IO.Std.input,
                        IO.Std.out,
                        flags
                    );

                    IO.Std.err.println("Running in analyse mode, awaiting requests...");                    

                    analyser.run();

                    native.exit(0);
                fi                

                var output: String;       
            
                IO.Std.err.FlushOnPrintln = true;

                let args = Arguments.ProgramArguments.Iterator;

                let legacy_source_files = new Vector[String]();

                args.nextElement();

                for s in args do
                    if s =~ "-L" then
                        flags.want_legacy = true;
                    elif s =~ "-P" then
                        project_name = args.nextElement().trim();
                    elif s =~ "-G" then
                        flags.want_legacy = false;
                    elif s =~ "-E" then
                        flags.ignore_errors = true;
                    elif s =~ "-X" then
                        flags.want_experiments = true;
                    elif s =~ "-D" then
                        flags.want_docker = true;
                    elif s =~ "-T" then
                        logger.enable_trace = true;
                        logger.trace_channels.add(args.nextElement().split(','));
                    elif s =~ "-P" then
                        flags.enabled_passes = args.nextElement().split(',');
                    elif s =~ "-o" then
                        output_file_name_generator.force(args.nextElement().trim());
                    elif SOURCE_FILE_CATEGORIZER.is_legacy(s) then
                        output_file_name_generator.seen_file(s);
                        legacy_source_files.add(s);
                    elif SOURCE_FILE_CATEGORIZER.is_ghul(s) then
                        output_file_name_generator.seen_file(s);
                        compiler.parse_and_queue(s, IO.File.openRead(s), flags.copy());
                    fi
                od

                compiler.build();

                IO.Std.err.flush();

                if flags.ignore_errors || !logger.any_errors then
                    if compiler.generated_source_files.Length > 0 || legacy_source_files.Length > 0 then
                        var to_run: String;

                        let to_build = new Vector[String]();

                        var lcache_name: String;

                        if project_name? then
                            lcache_name = "lcache-" + project_name;
                        else
                            lcache_name = "lcache";
                        fi

                        if flags.want_docker then
                            let create_volume_process = new Util.Process();
                        
                            let lcache_result =
                                create_volume_process.run(
                                    "/usr/bin/docker",
                                    ["docker", "volume", "create", lcache_name],
                                    Arguments.ProgramEnvironment,
                                    true);

                            if lcache_result != 0 then
                                throw new Exception("failed to create lcache Docker volume '" + lcache_name + "'");
                            fi

                            to_run = "/usr/bin/docker";
                            to_build.add(to_run);

                            to_build.add([
                                "run",
                                "--rm",
                                "-v",
                                lcache_name + ":/tmp/lcache",
                                "-v",
                                IO.File.WorkingDirectory + ":/home/dev/source",
                                "-w",
                                "/home/dev/source",
                                "-t",
                                "ghul/compiler:stable"
                            ]);
                        else
                            to_run = "/usr/bin/lc";
                        fi

                        to_build.add("/usr/bin/lc");

                        if !flags.want_docker && project_name? then
                            let mkdir_process = new Util.Process();
                        
                            let lcache_result = mkdir_process.run("/bin/mkdir", ["-p", "/tmp/" + lcache_name], Arguments.ProgramEnvironment, true);

                            if lcache_result != 0 then
                                throw new Exception("failed to create lcache directory '/tmp/" + lcache_name + "'");
                            fi
                        
                            to_build.add(["-P", project_name]);
                        fi

                        to_build.add(compiler.generated_source_files);

                        to_build.add(legacy_source_files);                        

                        to_build.add(legacy_compiler_flags.flags);

                        to_build.add("-o");

                        to_build.add(output_file_name_generator.result);

                        let process = new Util.Process();

                        let result = process.run(to_run, to_build.Array, Arguments.ProgramEnvironment, true);

                        if result == 0 then
                            for f in compiler.generated_source_files do
                                if f.endsWith(".lo") then
                                    IO.File.deleteQuiet(f);
                                fi
                            od
                        fi

                        native.exit(result);
                    else
                        native.exit(0);
                    fi
                else
                    native.exit(1);
                fi
            catch e: Exception
                IO.Std.err.println(e);
                IO.Std.err.flush();
                native.exit(1);
            yrt
        si
    si
si

