namespace Test is
    @IF.not.v3()
    use Std = System.Console;
    @IF.not.v3()
    use object = System.Object;
    @IF.not.v3()
    use string = System.String;

    @IF.v3()
    use Std = IO.Std;

            
    class Main is
        entry() static is
            @IL.entrypoint()

            let sb: byte;
            let ub: ubyte;

            let ss: short;
            let us: ushort;

            let si_: int;
            let ui: uint;

            let sl: long;
            let ul: ulong;

            let sw: word;
            let uw: uword;

            Std.out.write_line("signed byte");

            test("0B", 0B, "{0}");
            sb = 123b;
            test("123b", sb, "{0}");

            test("87sb", 87sb, "{0}");
            test("0x0sb", 0x0sB, "{0}");
            test("0x6B_Sb", 0x6B_Sb, "{0:X}");
            
            Std.out.write_line("unsigned byte");

            test("0Ub", 0Ub, "{0}");

            ub = 123ub;
            test("123uB", ub, "{0}");
            test("0xA_1_uB", 0xA_1_uB, "{0:X}");

            Std.out.write_line("signed short");

            test("0s", 0s, "{0}");

            ss = 4567s;
            test("4567s", ss, "{0}");
            test("0x52_CD_s", 0x52CDs, "{0:X}");

            Std.out.write_line("unsigned short");
            test("0us", 0us, "{0}");

            us = 7890uS;
            test("7890uS", us, "{0}");
            test("0xABCDUs", 0xABCDUs, "{0:X}");

            Std.out.write_line("signed int");
            test("0", 0, "{0}");

            si_ = 123;
            test("123", si_, "{0}");
            test("123_456", 123_456, "{0}");

            test("0i", 0i, "{0}");
            test("222I", 222I, "{0}");
            test("33__44__55__si", 33__44__55__si, "{0}");

            Std.out.write_line("unsigned int");
            test("0u", 0u, "{0}");

            ui = 123u;
            test("123u", ui, "{0}");
            test("123_456u", 123_456u, "{0}");

            test("0ui", 0ui, "{0}");
            test("333UI", 333UI, "{0}");
            test("33__44__55_ui", 33__44__55_ui, "{0}");

            Std.out.write_line("signed long");
            test("0l", 0l, "{0}");

            sl = 1234567890123456l;
            test("1234567890123456l", sl, "{0}");
            test("1_234_567_890_123_456L", 1_234_567_890_123_456L, "{0}");

            test("0sl", 0sl, "{0}");
            test("222sL", 222sL, "{0}");
            test("3344__55Sl", 3344__55Sl, "{0}");

            Std.out.write_line("unsigned long");
            test("0ul", 0ul, "{0}");

            ul = 123uL;
            test("123uL", ul, "{0}");
            test("123_456Ul", 123_456Ul, "{0}");

            test("0UL", 0UL, "{0}");
            test("444UL", 444UL, "{0}");
            test("33__44__55__UL", 33__44__55__UL, "{0}");
            
            Std.out.write_line("signed word");
            test("0w", 0w, "{0}");

            sw = 123W;
            test("123W", sw, "{0}");
            test("0x1234_5678_ABCD_EF01w", 0x1234_5678_ABCD_EF01w, "{0}");

            test("0sw", 0sw, "{0}");
            test("222sW", 222sW, "{0}");
            test("3344__55Sw", 3344__55Sw, "{0}");

            Std.out.write_line("unsigned word");
            test("0uw", 0uw, "{0}");

            uw = 123uW;
            test("123uW", uw, "{0}");
            test("123_456Uw", 123_456Uw, "{0}");

            test("0uw", 0UW, "{0}");
            test("222uw", 123UW, "{0}");
            test("33__44__55__uw", 33__44__55__UW, "{0}");
        si

        test(expected_string: string, value: object, format: string) static is
            Std.out.write_line(expected_string + ": " + string.format(format, value) + " type: " + value.get_type());
        si
    si
si