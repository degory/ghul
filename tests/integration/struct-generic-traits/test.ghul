namespace Test is
    @IF.not.v3()
    use Std = System.Console;
    @IF.not.v3()
    use object = System.Object;
    @IF.not.v3()
    use string = System.String;

    @IF.v3()
    use Std = IO.Std;
        
    use Collections.MutableList;
    use Collections.LIST;
    use Collections.Iterable;

    class Main is
        entry() static is
            @IL.entrypoint()

            test_integers();
            test_longs();
        si

        test_integers() static is
            let incrementer = new INCREMENTER[int](
                (current: int, inc_by: int) -> int => current + inc_by,
                (current: int, dec_by: int) -> int => current - dec_by,
                (value: int) -> string => "" + value
            );

            incrementer.increment_all([1, 2, 3, 4, 5]);
            incrementer.increment_all([1, 2, 3, 4, 5]);

            incrementer.decrement_all([1, 2, 3, 4, 5]);
            incrementer.decrement_all([1, 2, 3, 4, 5]);
        si

        test_longs() static is
            let incrementer = new INCREMENTER[long](
                (current: long, inc_by: long) -> long => current + inc_by,
                (current: long, dec_by: long) -> long => current - dec_by,
                (value: long) -> string => "" + value
            );

            incrementer.increment_all([1L, 2L, 3L, 4L, 5L]);
            incrementer.increment_all([1L, 2L, 3L, 4L, 5L]);

            incrementer.decrement_all([1L, 2L, 3L, 4L, 5L]);
            incrementer.decrement_all([1L, 2L, 3L, 4L, 5L]);
        si
    si

    class INCREMENTER[T] is
        _number: NUMBER[T];
        _convert: T -> string;

        init(
            increment: (T, T) -> T,
            decrement: (T, T) -> T,
            convert: T -> string
        ) is
            _number = new NUMBER[T](increment, decrement);
            _convert = convert;
        si
        
        increment_all(values: Iterable[T]) is
            for value in values do
                Std.out.write_line("increment " + _convert(_number.current) + " by " + _convert(value));
                _number.increment(value);
            od

            Std.out.write_line("number is now " + _convert(_number.current));            
        si

        decrement_all(values: Iterable[T]) is
            for value in values do
                Std.out.write_line("decrement " + _convert(_number.current) + " by " + _convert(value));
                _number.decrement(value);
            od

            Std.out.write_line("number is now " + _convert(_number.current));            
        si
    si
    
    trait Incrementable[T] is
        current: T;
        increment(t: T);
    si

    trait Decrementable[T] is
        current: T;
        decrement(t: T);
    si
    
    struct NUMBER[T]: Incrementable[T], Decrementable[T] is
        current: T;

        _increment: (T, T) -> T;
        _decrement: (T, T) -> T;

        init(
            increment: (T, T) -> T,
            decrement: (T, T) -> T
        ) is
            _increment = increment;
            _decrement = decrement;            
        si

        get_curent() -> T => current;

        increment(t: T) is
            current = _increment(current, t);
        si
        
        decrement(t: T) is
            current = _decrement(current, t);
        si        
    si
si