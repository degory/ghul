use IO.Std.write_line;
        
entry() is
    // expect object overload: exact match for object type
    test(new object());

    // expect string overload: exact match for string type
    test("string");

    // expect generic overload: prefer generic over object for inexact match:
    test(123);

    // expect object string overload: exact matches
    test(new object(), "string");

    // expect generic overload: prefer generic over object for inexact match:
    test(123, "hello");

    // expect string object overload: exact matches
    test("string", new object());

    // expect generic overload: prefer generic over object for inexact match:
    test("hello", "world");

    // expect object int int overload: no generic method available so object match acceptable: 
    test(123, 456, 789);

    test("string", 123, 456);
    test(new object(), 123, 456);
si

test(o: object) is
    write_line("test(s: object): " + o);            
si

test(s: string) is
    write_line("test(s: string): " + s);
si

test(a: object[]) is
    write_line("test(a: object[]): " + a);
si

test[T](t: T) is
    write_line("test(t: T)");
si

test[T,U](t: T, u: U) is
    write_line("test(t: T, u: U)");
si

test(o: object, p: string) is
    write_line("test(o: object, p: string): " + o + ", " + p);
si

test(s: string, t: object) is          
    write_line("test(s: string, t: object): " + s + ", " + t);
si

test(i: string, j: int, k: int) is            
    write_line("test(i: string, j: int, k: int): " + i + ", " + j + ", " + k);
si    

test(i: object, j: int, k: int) is
    write_line("test(i: object, j: int, k: int): " + i + ", " + j + ", " + k);
si        
