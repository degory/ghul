namespace Test is
    @IF.not.v3()
    use Std = System.Console;
    @IF.not.v3()
    use object = System.Object;
    @IF.not.v3()
    use string = System.String;

    @IF.v3()
    use Std = IO.Std;

        
    use Collections.MutableList;
    use Collections.LIST;
    use Collections.Iterable;

    class Main is
        entry() static is
            @IL.entrypoint()

            test_integers();
            test_strings();

            return;
        si

        test_integers() static is
            let integers = [1, 2, 3, 4, 5];

            let small_int_stack = new TWO_ELEMENT_STACK[int]();
            let large_int_stack = new LIST_STACK[int]();

            let pp = new PUSHER_POPPER[int]();

            pp.push_all(small_int_stack, integers);
            pp.pop_all(small_int_stack);

            pp.push_all(large_int_stack, integers);
            pp.pop_all(large_int_stack);
        si

        test_strings() static is
            let strings = ["one", "two", "three", "four", "chicken"];

            let small_string_stack = new TWO_ELEMENT_STACK[string]();
            let large_string_stack = new LIST_STACK[string]();

            let pp = new PUSHER_POPPER[string]();

            pp.push_all(small_string_stack, strings);
            pp.pop_all(small_string_stack);
            pp.push_all(large_string_stack, strings);
            pp.pop_all(large_string_stack);
        si
    si

    class PUSHER_POPPER[T] is
        init() is
        si
        
        push_all(stack: Pushable[T], values: Iterable[T]) is
            Std.out.write_line("pushing values on " + stack.get_type().name);

            for value in values do
                if !stack.is_full then
                    stack.push(value);
                    Std.out.write_line("pushed: " + value);
                else
                    Std.out.write_line("stack full, cannot push: " + value);
                fi
            od
        si

        pop_all(stack: Poppable[T]) is
            Std.out.write_line("popping values from " + stack.get_type().name);

            while !stack.is_empty do
                let value = stack.pop();

                Std.out.write_line("popped: " + value);
            od

            Std.out.write_line("stack is now empty");
        si
    si
    
    trait Pushable[T] is
        is_full: bool;
        push(t: T);
    si

    trait Poppable[T] is
        is_empty: bool;
        pop() -> T;
    si
    
    class TWO_ELEMENT_STACK[T]: Pushable[T], Poppable[T] is
        _top: T;
        _bottom: T;
        _count: int;

        is_full: bool => _count >= 2;
        is_empty: bool => _count <= 0;

        init() is
        si

        push(t: T) is
            _bottom = _top;
            _top = t;
            
            _count = _count + 1;
        si
        
        pop() -> T is
            let result = _top;

            _top = _bottom;
            _count = _count - 1;

            return result;
        si
    si

    class LIST_STACK[T]: Pushable[T], Poppable[T] is
        _list: MutableList[T];

        is_full: bool => false;
        is_empty: bool => _list.count == 0;

        init() is
            _list = new LIST[T]();
        si

        push(t: T) is
            _list.add(t);
        si

        pop() -> T is
            let result = _list[_list.count - 1];

            _list.remove_at(_list.count - 1);

            return result;
        si    
    si
si