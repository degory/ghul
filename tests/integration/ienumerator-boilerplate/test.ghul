namespace Test is
    use Std = IO.Std;
        
    use Collections.Iterable;
    use Collections.Iterator;
    use Collections.List;
    use Collections.LIST;

    class Main is
        entry() static is
            @IL.entrypoint()

            let gci = new GENERIC_CLASS[int]([1, 2, 3, 4, 5]);
            let gsi = new GENERIC_STRUCT[int]([5, 4, 3, 2, 1]);
            let ic = new INT_CLASS([1, 2, 3, 4, 5]);
            let is_ = new INT_STRUCT([1, 2, 3, 4, 5]);

            let gcs = new GENERIC_CLASS[string](["one", "two", "three", "four", "five"]);
            let gss = new GENERIC_STRUCT[string](["one", "two", "three", "four", "five"]);
            let sc = new STRING_CLASS(["one", "two", "three", "four", "five"]);
            let ss = new STRING_STRUCT(["one", "two", "three", "four", "five"]);

            check("generic int class", gci, [1, 2, 3, 4, 5]);
            check("generic int struct", gsi, [5, 4, 3, 2, 1]);
            check("int class", ic, [1, 2, 3, 4, 5]);
            check("int struct", is_, [1, 2, 3, 4, 5]);

            check("generic string class", gcs, ["one", "two", "three", "four", "five"]);
            check("generic string struct", gss, ["one", "two", "three", "four", "five"]);
            check("string class", sc, ["one", "two", "three", "four", "five"]);
            check("string struct", ss, ["one", "two", "three", "four", "five"]);
        si

        check(scenario: string, values: Iterator[int], expected: Iterable[int]) static is
            Std.out.write_line(scenario);

            let i = expected.iterator;

            for v in values do
                i.move_next();
                Std.out.write_line("have int: " + v + " expected: " + i.current);
            od

            Std.out.write_line();
        si

        check(scenario: string, values: Iterator[string], expected: Iterable[string]) static is
            Std.out.write_line(scenario);

            let i = expected.iterator;

            for v in values do
                i.move_next();
                Std.out.write_line("have string: " + v + " expected: " + i.current);
            od

            Std.out.write_line();
        si
    si

    class GENERIC_CLASS[T]: Iterator[T] is
        _values: List[T];
        _index: int;

        current: T => _values[_index];

        init(values: List[T]) is
            _index = -1;
            _values = values;
        si

        move_next() -> bool is
            _index = _index + 1;

            return _index < _values.count;
        si
        
        reset();
    si

    struct GENERIC_STRUCT[T]: Iterator[T] is
        _values: List[T];
        _index: int;

        current: T => _values[_index];

        init(values: List[T]) is
            _index = -1;
            _values = values;
        si

        move_next() -> bool is
            _index = _index + 1;

            return _index < _values.count;
        si
        
        reset();
    si

    class INT_CLASS: Iterator[int] is
        _values: List[int];
        _index: int;

        current: int => _values[_index];

        init(values: List[int]) is
            _index = -1;
            _values = values;
        si

        move_next() -> bool is
            _index = _index + 1;

            return _index < _values.count;
        si
        
        reset();
    si

    class STRING_CLASS: Iterator[string] is
        _values: List[string];
        _index: int;

        current: string => _values[_index];

        init(values: List[string]) is
            _index = -1;
            _values = values;
        si

        move_next() -> bool is
            _index = _index + 1;

            return _index < _values.count;
        si
        
        reset();
    si

    struct INT_STRUCT: Iterator[int] is
        _values: List[int];
        _index: int;

        current: int => _values[_index];

        init(values: List[int]) is
            _index = -1;
            _values = values;
        si

        move_next() -> bool is
            _index = _index + 1;

            return _index < _values.count;
        si
        
        reset();
    si

    struct STRING_STRUCT: Iterator[string] is
        _values: List[string];
        _index: int;

        current: string => _values[_index];

        init(values: List[string]) is
            _index = -1;
            _values = values;
        si

        move_next() -> bool is
            _index = _index + 1;

            return _index < _values.count;
        si

        reset();
    si
si