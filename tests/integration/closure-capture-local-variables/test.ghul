namespace Test is
    use Std = IO.Std;

    class Main is
        _static_field: int static;
        static_property: int static;

        _instance_field: int;
        instance_property: int;

        init() is
            _instance_field = 5;
            instance_property = 6;
        si

        entry() static is
            @IL.entrypoint()

            _static_field = 2;
            static_property = 4;

            test_static_field();
            test_static_property();
            test_static_local_variable();

            new Main().test_instance_field();
            new Main().test_instance_local_variable();
        si        

        test_static_field() static is
            let by = 3;

            // static anonymous function - does not need to capture any values:
            let times = (i: int => i * _static_field);

            for i in [1, 2, 3, 4] do
                Std.write_line("" + i + " x " + _static_field + " = " + times(i));
            od            
        si

        test_static_property() static is
            let by = 3;

            // static anonymous function - does not need to capture any values:
            let times = (i: int => i * static_property);

            for i in [1, 2, 3, 4] do
                Std.write_line("" + i + " x " + static_property + " = " + times(i));
            od            
        si

        test_static_local_variable() static is
            let by = 3;

            // static anonymous function - does not need to capture any values:
            let times = (i: int => i * by);

            for i in [1, 2, 3, 4] do
                Std.write_line("" + i + " x " + by + " = " + times(i));
            od            
        si

        test_instance_field() is
            let by = 3;

            // static anonymous function - does not need to capture any values:
            let times = (i: int => i * _instance_field);

            for i in [1, 2, 3, 4] do
                Std.write_line("" + i + " x " + _instance_field + " = " + times(i));
            od            
        si

        test_instance_local_variable() is
            let by = 3;

            // static anonymous function - does not need to capture any values:
            let times = (i: int => i * _instance_field);

            for i in [1, 2, 3, 4] do
                Std.write_line("" + i + " x " + _instance_field + " x " + by + " = " + times(i));
            od            
        si

    si
si