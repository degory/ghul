namespace Test is
    use Collections.Iterable;
    use Collections.Iterator;

    use IO.Std;

    class Main is
        entry() static is
            @IL.entrypoint()

            // expect error: no overload int > char
            let f: Iterable[int] = filter([1, 2, 3, 4], i => i > 'a');

            let g: Iterable[int] = filter([1, 2, 3, 4], i => i > 20);

            // expect error: no overload int / string
            let h = filter([(1, 2), (a = 3, b = 4)], p => p.a / "hello");
 
            let c = filter("hello", c => char.is_letter(c));

            // expect error: no overload iterable, iterable
            let d = filter(f, g);

            // expect error: no overload int.try_format(int)
            let anon = (i: int) => i.try_format(123);

            let t: int = map([123], i => i);

            let u: int = map([123], j => j + j);

            let v: int = map(["hello"], s => s.length);

            let w: int = map([456], k => 1 + k);

            let x: () -> int = map([() => 123], f => () => 456);

            let y: Iterator[char] = map(["hello"], f => f.iterator);

            let aa: (int, string) = map([(1, 2), (a = 3, b = 4)], pair => (pair._0, "blah"));

            let z: (int, string) = woot("hello", (x, y) => x + y);
        si
    si
 
    map[T,U](l: Iterable[T], func: T -> U) -> U;

    filter(l: Iterable[int], func: int -> bool) -> Iterable[int];
    filter[T](l: Iterable[T], func: T -> bool) -> Iterable[T];

    woot[T,U](t: T, func: (T, int) -> U) -> (int, U);
si
