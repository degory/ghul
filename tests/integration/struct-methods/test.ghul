namespace Test is
    @IF.not.v3()
    use Std = System.Console;
    @IF.not.v3()
    use object = System.Object;
    @IF.not.v3()
    use string = System.String;

    @IF.v3()
    use Std = IO.Std;

    class Main is
        entry() static is
            

            let sm = new StructWithMethod(111);
            test_struct_with_method(sm);

            let sp = new StructWithProperty(333);
            test_struct_with_property(sp);
        si

        test_struct_with_method(sm: StructWithMethod) static is
            let v = sm.get_value();
            Std.out.write_line("sm get value, expect 111: " + v);

            sm.set_value(222);
            Std.out.write_line("sm get value, expect 222: " + sm.get_value());            

            sm.set_value(333);
            v = sm.get_value();
            Std.out.write_line("sm get value, expect 333: " + v);            

            sm.set_value(444);
            Std.out.write_line("sm get value, expect 444: " + sm.get_value());            

            if sm =~ new StructWithMethod(444) then
                Std.out.write_line("sm =~ 444, expected");
            else
                Std.out.write_line("sm !~ 444, NOT expected");
            fi            

            if sm !~ new StructWithMethod(444) then
                Std.out.write_line("sm !~ 444, NOT expected");
            else
                Std.out.write_line("sm =~ 444, expected");
            fi            
        si

        test_struct_with_property(sp: StructWithProperty) static is
            let v = sp.value;
            Std.out.write_line("sp read value, expect 333: " + v);

            sp.value = 666;
            Std.out.write_line("sp assign value, expect 666: " + sp.value);            
        si
    si

    struct StructWithMethod is
        _value: int;

        get_value() -> int is
            return _value;            
        si

        =~(other: StructWithMethod) -> bool is
            let result = _value == other._value;

            Std.out.write_line("compare: " + _value + " == " + other._value + " => " + result);

            return result;
        si

        set_value(value: int) is
            self._value = value;
        si
        
        init(value: int) is
            self._value = value;
        si
    si

    struct StructWithProperty is
        value: int;

        init(value: int) is
            self.value = value;
        si
    si    
si