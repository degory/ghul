namespace Test.ParseUnary is
    use System; 
    use Collections;

    class Test is
        get_self() -> Test => self;

        fn_bool() -> bool;
        prop_bool: bool;
        indexed_bool: List[bool];

        check_bool(v: bool);
        check_char(c: char);

        ^(a: bool, b: bool) -> char;

        test() is
            check_bool(fn_bool());

            check_bool(!fn_bool());

            check_bool(! !fn_bool());

            check_bool(prop_bool);

            check_bool(!prop_bool);

            check_bool(! !prop_bool);

            check_bool(indexed_bool[0]);

            check_bool(!indexed_bool[0]);

            check_bool(! !indexed_bool[0]);

            check_char(fn_bool() ^ fn_bool());

            check_char(!fn_bool() ^ !fn_bool());

            check_char(! !fn_bool() ^ ! !fn_bool());

            check_char(prop_bool ^ prop_bool);

            check_char(!prop_bool ^ !prop_bool);

            check_char(! !prop_bool ^ ! !prop_bool);

            check_char(indexed_bool[0] ^ indexed_bool[0]);

            check_char(!indexed_bool[0] ^ !indexed_bool[0]);

            check_char(! !indexed_bool[0] ^ ! !indexed_bool[0]);

            check_bool(!self.fn_bool());

            check_bool(! !self.fn_bool());

            check_bool(self.prop_bool);

            check_bool(!self.prop_bool);

            check_bool(! !self.prop_bool);

            check_bool(self.indexed_bool[0]);

            check_bool(!self.indexed_bool[0]);

            check_bool(! !self.indexed_bool[0]);

            check_char(self.fn_bool() ^ self.fn_bool());

            check_char(!self.fn_bool() ^ !self.fn_bool());

            check_char(! !self.fn_bool() ^ ! !self.fn_bool());

            check_char(self.prop_bool ^ self.prop_bool);

            check_char(!self.prop_bool ^ !self.prop_bool);

            check_char(! !self.prop_bool ^ ! !self.prop_bool);

            check_char(self.indexed_bool[0] ^ self.indexed_bool[0]);

            check_char(!self.indexed_bool[0] ^ !self.indexed_bool[0]);

            check_char(! !self.indexed_bool[0] ^ ! !self.indexed_bool[0]);

            check_bool(!get_self().fn_bool());

            check_bool(! !get_self().fn_bool());

            check_bool(get_self().prop_bool);

            check_bool(!get_self().prop_bool);

            check_bool(! !get_self().prop_bool);

            check_bool(get_self().indexed_bool[0]);

            check_bool(!get_self().indexed_bool[0]);

            check_bool(! !get_self().indexed_bool[0]);

            check_char(get_self().fn_bool() ^ get_self().fn_bool());

            check_char(!get_self().fn_bool() ^ !get_self().fn_bool());

            check_char(! !get_self().fn_bool() ^ ! !get_self().fn_bool());

            check_char(get_self().prop_bool ^ get_self().prop_bool);

            check_char(!get_self().prop_bool ^ !get_self().prop_bool);

            check_char(! !get_self().prop_bool ^ ! !get_self().prop_bool);

            check_char(get_self().indexed_bool[0] ^ get_self().indexed_bool[0]);

            check_char(!get_self().indexed_bool[0] ^ !get_self().indexed_bool[0]);

            check_char(! !get_self().indexed_bool[0] ^ ! !get_self().indexed_bool[0]);
            
        si
    si
si