@IL.stub()
namespace Collections is
    use System;
    use Ghul;
        
    @IL.name("class [mscorlib]System.Collections.Generic.IReadOnlyList`1")
    trait List[T]: Bag[T],Iterable[T] is
        @IL.name.read("get_Item") @IL.name.assign("set_Item")
        [index: int]: T
            => null,
            = value is si
    si

    @IL.name("class [mscorlib]System.Collections.Generic.IList`1")
    trait MutableList[T]: MutableBag[T],Iterable[T] is
        @IL.name("IndexOf")
        index_of(item: T) -> int;

        @IL.name("Insert")
        insert(index: int, item: T);

        @IL.name("RemoveAt")
        remove_at(index: int);

        @IL.name.read("get_Item") @IL.name.assign("set_Item") 
        [index: int]: T
            => null,
            = value is si
    si

    @IL.name("valuetype [mscorlib]System.Collections.Generic.List`1/Enumerator")
    struct LIST_ITERATOR[T]: Iterator[T] is
        @IL.name("MoveNext")
        move_next() -> bool;

        @IL.name.read("get_Current")
        current: T;
    si
        
    @IL.name("class [mscorlib]System.Collections.Generic.List`1")
    class LIST[T: System.IEquatable[T]]: System.Object,MutableList[T],MutableBag[T],Iterable[T],List[T],Bag[T] is
        @IL.name("Add")
        add(item: T);

        @IL.name("AddRange")
        add_range(collection: Iterable[T]);

        @IL.name("AsReadOnly")
        as_read_only() -> Bag[T];

        @IL.name("BinarySearch")
        binary_search(index: int, count: int, item: T, comparer: Comparer[T]) -> int;

        @IL.name("BinarySearch")
        binary_search(item: T) -> int;

        @IL.name("BinarySearch")
        binary_search(item: T, comparer: Comparer[T]) -> int;

        @IL.name("Clear")
        clear();

        @IL.name("Contains")
        contains(item: T) -> bool;

        // convert_all[TOutput](converter: System.Converter[T,TOutput]) -> LIST[TOutput];

        @IL.name("CopyTo")
        copy_to(array: T[]);

        @IL.name("CopyTo")
        copy_to(index: int, array: T[], array_index: int, count: int);

        @IL.name("CopyTo")
        copy_to(array: T[], array_index: int);

        @IL.name("Exists")
        exists(match: PREDICATE[T]) -> bool;

        @IL.name("Find")
        find(match: PREDICATE[T]) -> T;

        @IL.name("FindAll")
        find_all(match: PREDICATE[T]) -> LIST[T];

        @IL.name("FindIndex")
        find_index(match: PREDICATE[T]) -> int;

        @IL.name("FindIndex")
        find_index(start_index: int, match: PREDICATE[T]) -> int;

        @IL.name("FindIndex")
        find_index(start_index: int, count: int, match: PREDICATE[T]) -> int;

        @IL.name("FindLast")
        find_last(match: PREDICATE[T]) -> T;

        @IL.name("FindLastIndex")
        find_last_index(match: PREDICATE[T]) -> int;

        @IL.name("FindLastIndex")
        find_last_index(start_index: int, match: PREDICATE[T]) -> int;

        @IL.name("FindLastIndex")
        find_last_index(start_index: int, count: int, match: PREDICATE[T]) -> int;

        @IL.name("ForEach")
        for_each(action: Ghul.ACTION_1[T]);

        @IL.name.read("GetEnumerator")
        iterator: LIST_ITERATOR[T];

        @IL.name("GetRange")
        get_range(index: int, count: int) -> LIST[T];

        @IL.name("IndexOf")
        index_of(item: T) -> int;

        @IL.name("IndexOf")
        index_of(item: T, index: int) -> int;

        @IL.name("IndexOf")
        index_of(item: T, index: int, count: int) -> int;

        @IL.name("Insert")
        insert(index: int, item: T);

        @IL.name("InsertRange")
        insert_range(index: int, collection: Iterable[T]);

        @IL.name("LastIndexOf")
        last_index_of(item: T) -> int;

        @IL.name("LastIndexOf")
        last_index_of(item: T, index: int) -> int;

        @IL.name("LastIndexOf")
        last_index_of(item: T, index: int, count: int) -> int;

        @IL.name("Remove")
        remove(item: T) -> bool;

        @IL.name("RemoveAll")
        remove_all(match: PREDICATE[T]) -> int;

        @IL.name("RemoveAt")
        remove_at(index: int);

        @IL.name("RemoveRange")
        remove_range(index: int, count: int);

        @IL.name("Reverse")
        reverse();

        @IL.name("Reverse")
        reverse(index: int, count: int);

        @IL.name("Sort")
        sort();

        @IL.name("Sort")
        sort(comparer: Comparer[T]);

        @IL.name("Sort")
        sort(index: int, count: int, comparer: Comparer[T]);

        @IL.name("Sort")
        sort(comparison: Comparison[T]);

        @IL.name("ToArray")
        to_array() -> T[];

        @IL.name("TrimExcess")
        trim_excess();

        @IL.name("TrueForAll")
        true_for_all(match: PREDICATE[T]) -> bool;

        // @IL.name("GetType")
        // get_type() -> System.Type;

        @IL.name("ToString")
        to_string() -> System.String;

        @IL.name("Equals")
        equals(obj: System.Object) -> bool;

        @IL.name("GetHashCode")
        get_hash_code() -> int;

        @IL.name(".ctor")
        init();
        @IL.name(".ctor")
        init(capacity: int);
        @IL.name(".ctor")
        init(collection: Iterable[T]);
        @IL.name.read("get_Capacity") @IL.name.assign("set_Capacity") 
        capacity: int;

        @IL.name.read("get_Count") 
        count: int;

        @IL.name.read("get_Item") @IL.name.assign("set_Item") 
        [index: int]: T, = value;    
    si
si