namespace Test is
    use System.String;
    use System.Console;

    use Collections.Iterable;
    use Collections.Iterator;
    use Collections.LIST;

    class Main is
        entry() static is
            @IL.entrypoint()

            let gci = new GENERIC_CLASS[int]([1, 2, 3, 4, 5]);
            let gsi = new GENERIC_STRUCT[int]([5, 4, 3, 2, 1]);
            let ic = new INT_CLASS([1, 2, 3, 4, 5]);
            let is_ = new INT_STRUCT([1, 2, 3, 4, 5]);

            let gcs = new GENERIC_CLASS[String](["one", "two", "three", "four", "five"]);
            let gss = new GENERIC_STRUCT[String](["one", "two", "three", "four", "five"]);
            let sc = new STRING_CLASS(["one", "two", "three", "four", "five"]);
            let ss = new STRING_STRUCT(["one", "two", "three", "four", "five"]);

            check("generic integer class", gci, [1, 2, 3, 4, 5]);
            check("generic integer struct", gsi, [5, 4, 3, 2, 1]);
            check("integer class", ic, [1, 2, 3, 4, 5]);
            check("integer struct", is_, [1, 2, 3, 4, 5]);

            check("generic string class", gcs, ["one", "two", "three", "four", "five"]);
            check("generic string struct", gss, ["one", "two", "three", "four", "five"]);
            check("string class", sc, ["one", "two", "three", "four", "five"]);
            check("string struct", ss, ["one", "two", "three", "four", "five"]);
        si

        check(scenario: String, values: Iterable[int], expected: Iterable[int]) static is
            Console.write_line(scenario);
            let i = expected.iterator;

            for v in values do
                i.move_next();
                Console.write_line("have int: " + v + " expected: " + i.current);
            od

            Console.write_line();
        si

        check(scenario: String, values: Iterable[String], expected: Iterable[String]) static is
            Console.write_line(scenario);
            let i = expected.iterator;

            for v in values do
                i.move_next();
                Console.write_line("have string: " + v + " expected: " + i.current);
            od

            Console.write_line();
        si
    si

    class GENERIC_CLASS[T]: Iterable[T] is
        _values: Iterable[T];
        init(values: Iterable[T]) is
            _values = values;
        si

        @IL.name.read("GetEnumerator") // FIXME: should not be neccessary
        iterator: Iterator[T] => new LIST[T](_values).iterator;
    si

    struct GENERIC_STRUCT[T]: Iterable[T] is
        _values: Iterable[T];
        init(values: Iterable[T]) is
            _values = values;
        si

        @IL.name.read("GetEnumerator") // FIXME: should not be neccessary
        iterator: Iterator[T] => new LIST[T](_values).iterator;
    si

    class INT_CLASS: Iterable[int] is
        _values: Iterable[int];
        init(values: Iterable[int]) is
            _values = values;
        si

        @IL.name.read("GetEnumerator") // FIXME: should not be neccessary
        iterator: Iterator[int] => new LIST[int](_values).iterator;        
    si
    

    class STRING_CLASS: Iterable[String] is
        _values: Iterable[String];
        init(values: Iterable[String]) is
            _values = values;
        si

        @IL.name.read("GetEnumerator") // FIXME: should not be neccessary
        iterator: Iterator[String] => new LIST[String](_values).iterator;        
    si

    struct INT_STRUCT: Iterable[int] is
        _values: Iterable[int];
        init(values: Iterable[int]) is
            _values = values;
        si

        @IL.name.read("GetEnumerator") // FIXME: should not be neccessary
        iterator: Iterator[int] => new LIST[int](_values).iterator;        
    si

    struct STRING_STRUCT: Iterable[String] is
        _values: Iterable[String];
        init(values: Iterable[String]) is
            _values = values;
        si

        @IL.name.read("GetEnumerator") // FIXME: should not be neccessary
        iterator: Iterator[String] => new LIST[String](_values).iterator;        
    si
si