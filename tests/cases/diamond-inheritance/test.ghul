namespace Test is
    class Main is
        entry() static is
            @IL.entrypoint()

            let g_i: GGGG[int];

            g_i.test(1234);

            let g_s: GGGG[System.String];

            g_s.test("hello");

            let i: JJJJ;
            i.test(1234);

            // let j: J;
            // j.test(1234);

            let ii_i: GGGG[int];
            ii_i.test(1234);

            let ii_s: GGGG[System.String];
            ii_s.test("hello");

            // let iii: III;

            // let iiii: IIII;

            // let jj: JJ;

            // let k: K;

            // let kk: KK;

            // let c: C;

            // let d: D;

            // let e: E;



            return;
        si
    si

    trait GGGG[T] is
        test(value: T);
    si    

    trait JJJJ is
        test(value: int);
    si

    // trait J is
    //     test(value: int);
    // si

    trait IIII[U]: JJJJ, GGGG[U] is
        
        blah() is
            let t: U;
            
            self.test(t);
        si
        
    si

    // trait III: GGGG[int] is
    //     // gets test(int) twice from GGGG, once indirectly from I and once indirectly from GGGG[int] 
    // si

    // trait IIII: I, I is
    //     // gets test(int) twice, once from each copy of I
    // si

    // trait JJ: J, GGGG[int] is
        
    // si
        
    // trait K: I, J is
        
    // si

    // trait KK: GGGG, JJ is
        
    // si
    
    // class C is
    //     test(value: int);
    // si

    // class D: C is        
    // si

    // class E: D is
    //     test(value: int);
    // si
    
    // class DiamondA: I, J is
        
    // si
    
    // class DiamondB: C, I is
        
    // si
    
    // class DiamondC: D, I is
        
    // si    

    // class DiamondD: C, I, J is
        
    // si
    
si