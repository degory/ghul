namespace Test is
    test() is
        let object_in_object_out: object -> object;
        let int_in_int_out: int -> int;
        let object_in_int_out: object -> int;
        let int_in_object_out: int -> object;

        let base_in_base_out: Base -> Base;
        let derived_in_derived_out: Derived -> Derived;
        let base_in_derived_out: Base -> Derived;
        let derived_in_base_out: Derived -> Base;

        let oo: object;
        let ii: int;

        let bb: Base;
        let dd: Derived;

        // invariant - no errors expected:
        object_in_object_out = (o: object) => o;
        int_in_int_out = (i: int) => i;
        object_in_int_out = (o: object) => ii;
        int_in_object_out =(i: int) => oo;

        // expect error: input type more derived: 
        object_in_object_out = (i: int) => oo;

        // OK: output type less derived:
        object_in_object_out = (o: object) => ii;

        // OK: input type less derived:
        int_in_int_out = (o: object) => ii;

        // expect error: output type more derived:
        int_in_int_out = (i: int) => oo;


        // expect error: input type more derived:
        object_in_int_out = (i: int) => i;

        // expect error: input type more derived and output type less derived:
        object_in_int_out = (i: int) => oo;

        // expect error: output type less derived:
        object_in_int_out = (o: object) => oo;

        // OK: input and output exact match:
        object_in_int_out = (o: object) => ii;

        // OK: output type more derived: 
        base_in_base_out = (b: Base) => dd;

        // expect error: input type more derived:
        base_in_base_out = (d: Derived) => dd;

        // OK: input type less derived:
        derived_in_derived_out = (b: Base) => dd;

        // expect error: output type less derived:
        derived_in_derived_out = (d: Derived) => bb;

        // expect error: input type more derived:
        base_in_derived_out = (d: Derived) => dd;

        // expect error: output type less derived:
        base_in_derived_out = (b: Base) => bb;

        // OK: output type more derived:
        derived_in_base_out = (d: Derived) => dd;

        // OK: input type less derived:
        derived_in_base_out = (b: Base) => bb;

        // OK: input type less derived + output type more derived:
        derived_in_base_out = (b: Derived) => dd;
    si

    class Base is
        init() is
        si
    si

    class Derived: Base is
        init() is
        si
    si

si