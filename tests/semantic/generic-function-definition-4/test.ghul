namespace Test is
    use Std = IO.Std;

    use Collections;

    structured_li[T](list: List[T], iterable: Iterable[T]) -> T;
    structured_li(list: List[string], iterable: Iterable[int]) -> bool;
    structured_li(list: List[double], iterable: Iterable[double]) -> single;

    class Main is
        test() is
            let t: Test[int];

            // expect no errors:
            expect_char([structured_li(['a', 'b', 'x'], "hello")]);

            structured_li(["a", "b", "c"], [1, 2, 3]);

            structured_li([0.0D, 0.1D], [0.2D, 0.3D]);
            
            return;
        si        
    si

    // arrays are not covariant, so by wrapping in an array type
    // we avoid false negatives where a derived type is wrongly accepted 
    expect_char(c: char[]);
    expect_bool(b: bool[]);
    expect_int(i: int[]);
    expect_string(s: string[]);
    expect_test_int(t: Test[int][]);

    // doesn't need wrapping in an array to defeat type variance - we don't have covariant generic types yet:
    expect_int_list(l: Collections.LIST[int]);
    expect_char_list(l: Collections.LIST[char]);


    class Test[T] is
    si
si