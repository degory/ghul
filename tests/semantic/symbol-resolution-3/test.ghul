namespace Root is
    @IF.not.v3()
    use Std = System.Console;
    @IF.not.v3()
    use object = System.Object;
    @IF.not.v3()
    use string = System.String;

    @IF.not.v3()
    use System.NullPointerException;

    @IF.v3()
    use Std = IO.Std;

    @IF.v3()
    use NullPointerException = System.NullReferenceException;

    use Exception = System.Exception;
    
    use Test12;
    use Test34.TEST_3;

    use Outer.Test56.test_65;

    namespace Nested is
        class Main is
            entry() static is
                @IL.entrypoint()

                return;
            si
        si

        test() is
            let t1: TEST_1; // OK - no qualifier needed
            let t2: Test12.TEST_2; // redundant qualifier is OK though
            let t3: TEST_3;
            let t4: Test34.TEST_4; // OK - qualifier required
            let t4_2: TEST_4; // ERROR - whole namespace not imported, so qualifier required

            let i: int;
            i = t2.test_2();
            i = t3.test_2();

            let s: string;
            s = t2.test_3();
            s = t3.test_3();
        si
        
    si

    test() is
        test_12(); // OK - whole namespace is used
        Test12.test_12(); // OK - qualifier redundant but acceptable
        test_34(); // ERROR - not used        
        Test34.test_34(); // OK - explicit qualifier required
        test_56(); // ERROR - not used
        Test56.test_56(); // ERROR
        Outer.Test56.test_56();
        Outer.test_56(); // ERROR

        let t5: Outer.Test56.TEST_5;
        let t6: Outer.Test56.TEST_6;

        t5.test_5(); // OK
        t5.test_6(); // doesn't exist
        t6.test_5(); // doesn't exist
        t6.test_6(); // OK

        test_65(); // OK - used
   si
si

namespace Test12 is
    @IF.not.v3()
    use Std = System.Console;
    @IF.not.v3()
    use object = System.Object;
    @IF.not.v3()
    use string = System.String;

    @IF.v3()
    use Std = IO.Std;

    class TEST_1 is
        test_1() -> int => 111;
    si
    
    class TEST_2 is
        test_2() -> int => 222;
    si

    test_12() -> int => 1212;
si

namespace Test34 is
    @IF.not.v3()
    use Std = System.Console;
    @IF.not.v3()
    use object = System.Object;
    @IF.not.v3()
    use string = System.String;

    @IF.v3()
    use Std = IO.Std;

    
    class TEST_3 is
        test_3() -> string => "333";
    si
 
    class TEST_4 is
        test_4() -> string => "444";
    si
    
    test_34() -> string => "3434";

    test_broken() -> Exception => new Exception("blah"); // error System.Exception not in scope here
si

namespace Outer is
    @IF.not.v3()
    use Std = System.Console;
    @IF.not.v3()
    use object = System.Object;
    @IF.not.v3()
    use string = System.String;

    @IF.v3()
    use Std = IO.Std;

    
    namespace Test56 is
        @IF.not.v3()
        use System.NullPointerException;
    
        @IF.v3()
        use NullPointerException = System.NullReferenceException;

        class TEST_5 is
            test_5() -> int => 555;
        si
        
        class TEST_6 is
            test_6() -> int => 666;
        si

        // use of string and System.NullPointerException should be in scope here:
        test_56() -> string is
            throw new NullPointerException("oops");
        si

        test_65() -> string => "6565";
        
        // but System.Exception should not be in scope here:
        test_broken() -> Exception => new Exception("blah");
    si
si


