namespace Test.GenericInheritance is
    use Std = IO.Std;

    use Collections;

    class Other is
        main: Main;

        test_main() is
            let expect_list_thing_int_1 = main.f_list_thing_int();
            let expect_thing_int_1 = expect_list_thing_int_1[5];
            Main.check_thing_int(expect_thing_int_1);

            let expect_list_thing_int_2 = main.list_thing_int;
            let expect_thing_int_2 = expect_list_thing_int_2[5];
            Main.check_thing_int(expect_thing_int_2);
        si
    si

    class Main is
        thing_int: Thing[int];
        thing_char: Thing[char];

        list_thing_int: List[Thing[int]];
        list_thing_char: List[Thing[char]];

        f_thing_int() -> Thing[int];
        f_list_thing_int() -> List[Thing[int]];

        check_int(i: int) static;
        check_char(c: char) static;
        check_string(s: string) static;
        check_thing_int(ti: Thing[int]) static;
        check_thing_char(tc: Thing[char]) static;
        check_list_int(li: List[int]) static;
        check_list_char(lc: List[char]) static;

        test_thing_long() is
            let tl = new ThingLong();

            let l = tl.read_t();            
        si

        test_prop_simple_member() is
            var it: Main;

            let ti = it.thing_int;
            check_thing_int(ti);
            let tc = it.thing_char;

            let expect_int = ti.read_t();
            check_int(expect_int);
            let expect_char = tc.read_t();
            check_char(expect_char);

            let expect_thing_int = ti.read_thing();
            check_thing_int(expect_thing_int);
        si

        test_prop_simple() is
            let ti = thing_int;
            check_thing_int(ti);
            let tc = thing_char;

            let expect_int = ti.read_t();
            check_int(expect_int);
            let expect_char = tc.read_t();
            check_char(expect_char);

            let expect_thing_int = ti.read_thing();
            check_thing_int(expect_thing_int);
        si

        test_func_simple() is
            let ti = f_thing_int();
            check_thing_int(ti);
            let lti = f_list_thing_int();

            let expect_int = ti.read_t();
            check_int(expect_int);
            let expect_thing_int = lti[5];
            check_thing_int(expect_thing_int);
        si        

        test_prop_generic_direct() is
            let expect_thing_int = list_thing_int[5];
            check_thing_int(expect_thing_int);
        si

        test_prop_generic_indirect() is 
            let expect_list_thing_int = list_thing_int;

            let expect_thing_int = expect_list_thing_int[5];
            check_thing_int(expect_thing_int);

            let expect_iterator_thing_int = expect_list_thing_int.iterator;

            let expect_thing_int_2 = expect_iterator_thing_int.current;
            check_thing_int(expect_thing_int_2);

            let ti = list_thing_int[5];
            check_thing_int(ti);   
        si

        test_local_generic() is
            var list_thing_int: List[Thing[int]]; 

            let expect_thing_int_1 = list_thing_int[5];
            check_thing_int(expect_thing_int_1);

            let expect_iterator_thing_int = list_thing_int.iterator;
            
            let expect_thing_int_2 = expect_iterator_thing_int.current;
            check_thing_int(expect_thing_int_2);

            let ti = list_thing_int[5];
            check_thing_int(ti);   
        si

        test_prop_generic_indirect_explicit_type() is
            let expect_list_int: List[Thing[int]] = list_thing_int;

            let expect_thing_int = expect_list_int[5];

            check_thing_int(expect_thing_int);
        si        
        
        test(it: DirectInheritNoParameters) is
            let expect_int = it.read_t();
            check_int(expect_int);
            it.write_t(expect_int);

            let expect_thing_int = it.read_thing();
            check_thing_int(expect_thing_int);
            it.write_thing(expect_thing_int);

            let expect_list = it.read_list();
            check_list_int(expect_list);
            it.write_list(expect_list);

            let prop_int = it.stuff_t;
            check_int(prop_int);

            let prop_thing = it.stuff_thing;
            check_thing_int(prop_thing);

            let prop_list = it.stuff_list;
            check_list_int(prop_list);

            let ii = prop_list[5];
            check_int(ii);

            let indexed_iterable_int = it[prop_thing];
            check_int(indexed_iterable_int.iterator.current);
        si

        testDirectInheritNoParameters() is
            let it = new DirectInheritNoParameters();

            let expect_int = it.read_t();
            check_int(expect_int);
            it.write_t(expect_int);

            let expect_thing_int = it.read_thing();
            check_thing_int(expect_thing_int);
            it.write_thing(expect_thing_int); 

            let expect_list = it.read_list();
            check_list_int(expect_list); 
            it.write_list(expect_list); 

            let prop_int = it.stuff_t;
            check_int(prop_int);
            let prop_thing = it.stuff_thing;
            check_thing_int(prop_thing);
            let prop_list = it.stuff_list;            
            check_list_int(prop_list);

            let ii = prop_list[5];
            check_int(ii);            

            let indexed_iterable_int = it[prop_thing];
            check_int(indexed_iterable_int.iterator.current); // wrong T
        si        

        testDirectInheritDummyParameter() is
            let it = new DirectInheritDummyParameter[short]();

            let expect_int = it.read_t();
            check_int(expect_int);
            it.write_t(expect_int);

            let expect_thing_int = it.read_thing();
            check_thing_int(expect_thing_int);
            it.write_thing(expect_thing_int); 

            let expect_list = it.read_list();
            check_list_int(expect_list);
            it.write_list(expect_list);

            let prop_int = it.stuff_t;
            check_int(prop_int);
            let prop_thing = it.stuff_thing;
            check_thing_int(prop_thing);
            let prop_list = it.stuff_list; 
            check_list_int(prop_list);            

            let ii = prop_list[5];
            check_int(ii);

            let indexed_iterable_int = it[prop_thing];                        
            check_int(indexed_iterable_int.iterator.current);
        si

        testIndirectInheritDummyParameter() is
            let it = new IndirectInheritDummyParameter[long]();

            let expect_int = it.read_t();
            check_int(expect_int);
            it.write_t(expect_int);

            let expect_thing_int = it.read_thing();
            check_thing_int(expect_thing_int);
            it.write_thing(expect_thing_int); 

            let expect_list = it.read_list();
            check_list_int(expect_list);
            it.write_list(expect_list);

            let prop_int = it.stuff_t;
            check_int(prop_int);
            let prop_thing = it.stuff_thing;
            check_thing_int(prop_thing);
            let prop_list = it.stuff_list;
            check_list_int(prop_list);

            let ii = prop_list[5];
            check_int(ii);

            let indexed_iterable_int = it[prop_thing];
            check_int(indexed_iterable_int.iterator.current);
        si

        testIndirectInheritTwoDummyParameters() is
            let it = new IndirectInheritTwoDummyParameters[bool]();

            let expect_int = it.read_t();
            check_int(expect_int);
            it.write_t(expect_int);

            let expect_thing_int = it.read_thing();
            check_thing_int(expect_thing_int);
            it.write_thing(expect_thing_int); 

            let expect_list = it.read_list();
            check_list_int(expect_list);
            it.write_list(expect_list); 

            let prop_int = it.stuff_t;
            check_int(prop_int);
            let prop_thing = it.stuff_thing;
            check_thing_int(prop_thing);
            let prop_list = it.stuff_list;
            check_list_int(prop_list);

            let ii = prop_list[5];
            check_int(ii);
            
            let indexed_iterable_int = it[prop_thing];
            check_int(indexed_iterable_int.iterator.current);
        si
                
/*
        // suspect this one makes other ones work

        test(it: DirectInheritWithParameter[int]) is
            let expect_int = it.read_t(); // correct int
            it.write_t(expect_int); // correct int

            let expect_thing_int = it.read_thing();  // correct Thing[int]
            it.write_thing(expect_thing_int); // correct Thing[int]

            let expect_list = it.read_list(); // correct List[int]
            it.write_list(expect_list); // correct List[int]
        si
*/

        // this one makes the one below work:
/*
        test(it: DirectInheritWithParameter[char]) is
            let expect_char = it.read_t(); // correct char
            it.write_t(expect_char); // correct char

            let expect_thing_char = it.read_thing();  // correct Thing[char]
            it.write_thing(expect_thing_char); // correct Thing[char]

            let expect_list = it.read_list(); // correct List[char]
            it.write_list(expect_list); // correct List[char]
        si
*/

        testIndirectInheritWithParameterChar() is
            let it = new IndirectInheritWithParameter[char]();

            let expect_char = it.read_t();
            check_char(expect_char);
            it.write_t(expect_char);

            let expect_thing_char = it.read_thing();
            it.write_thing(expect_thing_char);
            check_thing_char(expect_thing_char);

            let expect_list_char = it.read_list();
            it.write_list(expect_list_char);
            check_list_char(expect_list_char);

            let prop_char = it.stuff_t;
            check_char(prop_char);
            let prop_thing = it.stuff_thing;
            let prop_list = it.stuff_list;

            let ic = prop_list[5];
            check_char(ic);
            
            let indexed_iterable_char = it[prop_thing];            
            check_char(indexed_iterable_char.iterator.current);            
        si

        testIndirectInheritWithParameterInt() is
            let it = new IndirectInheritWithParameter[int]();

            let expect_int = it.read_t();
            check_int(expect_int);
            it.write_t(expect_int);

            let expect_thing_int = it.read_thing();
            check_thing_int(expect_thing_int);
            it.write_thing(expect_thing_int); 

            let expect_list = it.read_list();
            check_list_int(expect_list);
            it.write_list(expect_list); 

            let prop_int = it.stuff_t;
            check_int(prop_int);
            let prop_thing = it.stuff_thing;
            check_thing_int(prop_thing);
            let prop_list = it.stuff_list;
            check_list_int(prop_list);

            let ii = prop_list[5];
            check_int(ii);

            let indexed_iterable_int = it.stuff_iterable; // it[prop_thing];
            check_int(indexed_iterable_int.iterator.current); // wrong T  
        si                

        testIndirectInheritWithParameterInt2() is
            let it = new IndirectInheritWithParameter[int]();
            let ct = new IndirectInheritWithParameter[char]();

            let expect_int = it.read_t();
            check_int(expect_int);
            it.write_t(expect_int);

            let expect_thing_int = it.read_thing();
            check_thing_int(expect_thing_int);
            it.write_thing(expect_thing_int); 

            let expect_thing_char = ct.read_thing();
            

            let expect_list = it.read_list();
            check_list_int(expect_list);
            it.write_list(expect_list); 

            let prop_int = it.stuff_t;
            check_int(prop_int);
            let prop_thing = it.stuff_thing;
            check_thing_int(prop_thing);
            let prop_list = it.stuff_list;
            check_list_int(prop_list);

            let ii = prop_list[5];
            check_int(ii);

            let indexed_iterable_int = it.stuff_iterable; // it[prop_thing];
            check_int(indexed_iterable_int.iterator.current); // wrong T  
        si                        

        testIndirectInheritWithBoundParameter() is
            let it = new IndirectInheritWithBoundParameter();

            let expect_char = it.read_t();
            check_char(expect_char);
            it.write_t(expect_char);

            let expect_thing_char = it.read_thing();

            it.write_thing(expect_thing_char); 

            let expect_list_char = it.read_list(); 
            it.write_list(expect_list_char);

            let prop_char = it.stuff_t;
            check_char(prop_char);
            let prop_thing = it.stuff_thing;
            let prop_list = it.stuff_list;            

            let ic = prop_list[5];
            check_char(ic);

            let indexed_iterable_char = it[prop_thing];            
            check_char(indexed_iterable_char.iterator.current);            
        si
        
        /*
        // uncommenting this function makes some functions below work:
        testDirectInheritWithParameterExplicitType() is
            var it: DirectInheritWithParameter[char];

            let expect_char = it.read_t();
            it.write_t(expect_char);

            let expect_thing_char = it.read_thing();
            it.write_thing(expect_thing_char);

            let expect_list_char = it.read_list();
            it.write_list(expect_list_char);
        si
        */

        testDirectInheritWithParameterInferredType() is
            let it = new DirectInheritWithParameter[char]();

            let expect_char = it.read_t();
            it.write_t(expect_char);

            let expect_thing_char = it.read_thing();
            it.write_thing(expect_thing_char);

            let expect_list_char = it.read_list();
            it.write_list(expect_list_char);

            let prop_char = it.stuff_t;
            let prop_thing = it.stuff_thing;
            let prop_list = it.stuff_list;            
        si

        testIndirectInheritWithParameterString() is
            let it = new IndirectInheritWithParameter[string]();

            let expect_string = it.read_t();
            it.write_t(expect_string);

            let expect_thing_string = it.read_thing();
            it.write_thing(expect_thing_string); 

            let expect_list = it.read_list();
            it.write_list(expect_list);
            
            let prop_string = it.stuff_t;
            let prop_thing = it.stuff_thing;
            let prop_list = it.stuff_list;             
        si
        
        /*
        // uncommenting this function makes some functions above work:
        testDirectInheritWithParameterExplicitType() is
            var it: DirectInheritWithParameter[char];

            let expect_char = it.read_t();
            it.write_t(expect_char);

            let expect_thing_char = it.read_thing();
            it.write_thing(expect_thing_char);

            let expect_list_char = it.read_list();
            it.write_list(expect_list_char);
        si
        */

        testIndirectInheritNoParametersInferredType() is
            let it = new IndirectInheritNoParameters();

            let expect_int = it.read_t();
            it.write_t(expect_int);

            let expect_thing_int = it.read_thing();
            it.write_thing(expect_thing_int); 

            let expect_list_int = it.read_list();
            it.write_list(expect_list_int);

            let prop_int = it.stuff_t;
            let prop_thing = it.stuff_thing;
            let prop_list = it.stuff_list;            
        si
    si

    class Thing[T] is
        stuff_thing: Thing[T] => null;
        stuff_t: T => null;
        stuff_list: List[T] => null;
        stuff_iterable: Iterable[T] => null;

        [index: Thing[T]]: Iterable[T] => null;

        read_thing() -> Thing[T] => null;
        read_t() -> T => null;
        read_list() -> List[T] => null;

        write_thing(t: Thing[T]);
        write_t(t: T);
        write_list(l: List[T]);
    si

    class ThingLong: Thing[long] is
        init() is si
    si

    class DirectInheritNoParameters: Thing[int] is
        init() is si

        test() is
            let expect_int = read_t();
            write_t(expect_int);

            let expect_thing_int = read_thing();
            write_thing(expect_thing_int);

            let expect_list = read_list();
            write_list(expect_list);

            let prop_int = stuff_t;
            let prop_thing = stuff_thing;
            let prop_list = stuff_list;            
        si
    si

    class DirectInheritDummyParameter[X]: Thing[int] is
        init() is si

        test() is
            let expect_int = read_t();
            Main.check_int(expect_int);
            write_t(expect_int);

            let expect_thing_int = read_thing();
            Main.check_thing_int(expect_thing_int);
            write_thing(expect_thing_int);

            let expect_list = read_list();
            Main.check_list_int(expect_list);            
            write_list(expect_list);

            let prop_int = stuff_t;
            let prop_thing = stuff_thing;
            let prop_list = stuff_list;            
        si
    si

    class IndirectInheritNoParameters: DirectInheritNoParameters is
        init() is si

        test() is
            let expect_int = read_t();
            write_t(expect_int);

            let expect_thing_int = read_thing();
            write_thing(expect_thing_int);

            let expect_list = read_list();
            write_list(expect_list);

            let prop_int = stuff_t;
            let prop_thing = stuff_thing;
            let prop_list = stuff_list;            
        si
    si

    class DoubleIndirectNoParameters: IndirectInheritNoParameters is
        test() is
            let expect_int = read_t();
            Main.check_int(expect_int);
            write_t(expect_int);

            let expect_thing_int = read_thing();
            Main.check_thing_int(expect_thing_int);
            write_thing(expect_thing_int);

            let expect_list = read_list();
            Main.check_list_int(expect_list);
            write_list(expect_list);

            let prop_int = stuff_t;
            let prop_thing = stuff_thing;
            let prop_list = stuff_list;            
        si
    si

    class IndirectInheritTwoDummyParameters[Y]: DirectInheritDummyParameter[Y] is
        init() is si

        test() is
            let expect_int = read_t();
            write_t(expect_int);

            let expect_thing_int = read_thing();
            write_thing(expect_thing_int);

            let expect_list = read_list();
            write_list(expect_list);

            let prop_int = stuff_t;
            let prop_thing = stuff_thing;
            let prop_list = stuff_list;            
        si
    si

    class IndirectInheritDummyParameter[Y]: DirectInheritNoParameters is
        init() is si

        test() is
            let expect_int = read_t();
            write_t(expect_int);

            let expect_thing_int = read_thing();
            write_thing(expect_thing_int);

            let expect_list = read_list();
            write_list(expect_list);

            let prop_int = stuff_t;
            let prop_thing = stuff_thing;
            let prop_list = stuff_list;            
        si
    si

    class DirectInheritWithParameter[U]: Thing[U] is
        init() is si

        test() is
            let expect_u = read_t();
            write_t(expect_u);

            let expect_thing_u = read_thing();
            write_thing(expect_thing_u);

            let expect_list = read_list();
            write_list(expect_list);

            let prop_u = stuff_t;
            let prop_thing = stuff_thing;
            let prop_list = stuff_list;            
        si
    si

    class IndirectInheritWithParameter[V]: DirectInheritWithParameter[V] is
        init() is si

        test() is
            let expect_v = read_t();
            write_t(expect_v);

            let expect_thing_v = read_thing();
            write_thing(expect_thing_v);

            let expect_list = read_list();
            write_list(expect_list);

            let prop_v = stuff_t;
            let prop_thing = stuff_thing;
            let prop_list = stuff_list;                        
        si
    si

    class IndirectInheritWithBoundParameter: DirectInheritWithParameter[char] is
        init() is si

        test() is
            let expect_char = read_t();
            write_t(expect_char);

            let expect_thing_char = read_thing();
            write_thing(expect_thing_char);

            let expect_list = read_list();
            write_list(expect_list);

            let prop_char = stuff_t;
            let prop_thing = stuff_thing;
            let prop_list = stuff_list;
        si
    si
si