namespace Test is
    @IF.not.v3()
    use Std = System.Console;
    @IF.not.v3()
    use object = System.Object;
    @IF.not.v3()
    use string = System.String;

    @IF.v3()
    use Std = IO.Std;

    class Main is
        entry() static is
            @IL.entrypoint()

            return;
        si
    si
si

namespace TestA is
    @IF.not.v3()
    use Std = System.Console;
    @IF.not.v3()
    use object = System.Object;
    @IF.not.v3()
    use string = System.String;

    @IF.v3()
    use Std = IO.Std;

    test(test_a: int) -> int => test_a;
si

namespace TestB is
    @IF.not.v3()
    use Std = System.Console;
    @IF.not.v3()
    use object = System.Object;
    @IF.not.v3()
    use string = System.String;

    @IF.v3()
    use Std = IO.Std;

    
    test(test_b: string) -> string => test_b;
si

namespace UseAAndB is
    @IF.not.v3()
    use Std = System.Console;
    @IF.not.v3()
    use object = System.Object;
    @IF.not.v3()
    use string = System.String;

    @IF.v3()
    use Std = IO.Std;

        use TestA;
    use TestB;

    test(test_c: char) -> char is
        let should_find_test_a: int = test(1234);
        let should_find_test_b: string = test("hello");
        let should_find_test_c: char = test('x');
    si
si

namespace TestA is
    @IF.not.v3()
    use Std = System.Console;
    @IF.not.v3()
    use object = System.Object;
    @IF.not.v3()
    use string = System.String;

    @IF.v3()
    use Std = IO.Std;

    use TestB.test;

    other() is
        let should_be_a: int = test(1234);
        let should_be_b: string = test("hello");

        let should_not_find_test_c = test('x');

        let should_find_test_c: char = UseAAndB.test('x');

        let should_not_find_test_a = UseAAndB.test(1234);
        let should_not_find_test_b = UseAAndB.test("hello");
    si
si


