namespace Test is
    class Main is
        entry() static is
            

            return;
        si
    si
si

namespace Root is
    use Outside;

    namespace InsideA is
        use InsideB;

        class TestA is
            init(s: string) is si
            test(a: A) -> A => a;
        si

        // InsideA.TestA should hide used Outside.TestA here:
        do_stuff(a: A) -> A is
            let should_be_inside_a_test_a = new TestA("hello");

            // expect error: InsideA.TestA does not have test(O):
            should_be_inside_a_test_a.test(new O());

            // InsideA.TestA does have test(A):
            should_be_inside_a_test_a.test(new A());

            let inside_a_test_a_doesnt_have_this_constructor = new TestA(a);
        si
    si

    namespace InsideB is
        class TestB is
            test(b: B) -> B => b;
        si

        // used Outside.TestA should be in scope here:
        do_stuff(a: A) -> A is
            let should_be_outside_test_a = new TestA(a);

            // Outside.TestA has test(O):
            should_be_outside_test_a.test(new O());

            // expected error: Outside.TestA does not have test(A):
            should_be_outside_test_a.test(new A());

            // expect error:
            let outside_test_a_doesnt_have_this_constructor = new TestA("hello");
        si        
    si

si

namespace Outside is
    class TestA is
        init(a: A) is si
        test(o: O) -> O => o;
    si    
si

class A is
    init() is si
si

class B is
    init() is si
si

class O is
    init() is si
si

class P is
    init() is si
si
