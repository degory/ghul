class Base is    
    _static_field: int static;
    static_auto: int static;
    static_auto_public: int public static;

    _instance_field: int;
    instance_auto: int;
    instance_auto_public: int public;

    // All OK: accessed from within declaring class:
    test_unqualified_instance() is
        _static_field = 123;
        static_auto = 123;
        static_auto_public = 123;

        _instance_field = 123;
        instance_auto = 123;
        instance_auto_public = 123;
        
    si

    // All OK: accessed from within declaring class:
    test_unqualified_static() static is
        _static_field = 123;
        static_auto = 123;
        static_auto_public = 123;
    si

    // All OK: accessed from within declaring class:
    test_self_qualified_instance() is
        self._static_field = 123;
        self.static_auto = 123;
        self.static_auto_public = 123;

        self._instance_field = 123;
        self.instance_auto = 123;
        self.instance_auto_public = 123;        
    si
    
    // All OK: accessed from within declaring class:
    test_class_qualified_base_static() static is
        Base._static_field = 123;
        Base.static_auto = 123;
        Base.static_auto_public = 123;
    si

    test_class_qualified_derived_static() static is
        Derived._static_field = 123;
        Derived.static_auto = 123;
        Derived.static_auto_public = 123;
    si

    // All OK: accessed from within declaring class:
    test_expression_base_qualified_instance() is
        let from: Base;

        from._static_field = 123;
        from.static_auto = 123;
        from.static_auto_public = 123;

        from._instance_field = 123;
        from.instance_auto = 123;
        from.instance_auto_public = 123;        
    si

    // All OK: accessed through derived class from declaring class:
    test_expression_derived_qualified_instance() is
        let from: Derived;

        from._static_field = 123;
        from.static_auto = 123;
        from.static_auto_public = 123;

        from._instance_field = 123;
        from.instance_auto = 123;
        from.instance_auto_public = 123;        
    si

si

class Derived: Base is
    test_class_qualified_base_static() static is
        // Expect error: not accessible through base class from derived class:
        Base._static_field = 123;
        // Expect error: not accessible through base class from derived class:
        Base.static_auto = 123;
        // OK: publicly assignable
        Base.static_auto_public = 123;
    si

    test_class_qualified_derived_static() static is
        // OK: publicly assignable
        Derived._static_field = 123;
        // OK: accessible through derived class from that derived class:
        Derived.static_auto = 123;
        // OK: publicly assignable
        Derived.static_auto_public = 123;
    si

    test_expression_base_qualified_instance() is
        let from: Base;

        // Expect error: not accessible through base class from derived class:
        from._static_field = 123;
        // Expect error: not accessible through base class from derived class:
        from.static_auto = 123;
        // OK: publicly assignable
        from.static_auto_public = 123;

        // Expect error: not accessible through base class from derived class:
        from._instance_field = 123;
        // Expect error: not accessible through base class from derived class:
        from.instance_auto = 123;
        // OK: publicly assignable
        from.instance_auto_public = 123;        
    si

    test_expression_derived_qualified_instance() is
        let from: Derived;

        // OK: accessible through derived class from that derived class:
        from._static_field = 123;
        // OK: accessible through derived class from that derived class:
        from.static_auto = 123;
        // OK: publicly assignable
        from.static_auto_public = 123;

        // OK: accessible through derived class from that derived class:
        from._instance_field = 123;
        // OK: accessible through derived class from that derived class:
        from.instance_auto = 123;
        // OK: publicly assignable
        from.instance_auto_public = 123;        
    si
si


class Other is        
    test_class_qualified_static() static is
        // Expect error: not accessible through base class from unrelated class:
        Base._static_field = 123;
        // Expect error: not accessible through base class from unrelated class:
        Base.static_auto = 123;
        // OK: publicly assignable
        Base.static_auto_public = 123;
    si

    test_expression_qualified_instance() is
        let from: Base;

        // Expect error: not accessible through base class from unrelated class:
        from._static_field = 123;
        // Expect error: not accessible through base class from unrelated class:
        from.static_auto = 123;
        // OK: publicly assignable
        from.static_auto_public = 123;

        // Expect error: not accessible through base class from unrelated class:
        from._instance_field = 123;
        // Expect error: not accessible through base class from unrelated class:
        from.instance_auto = 123;
        // OK: publicly assignable
        from.instance_auto_public = 123;        
    si
si

test_class_qualified_static() static is
    // Expect error: not accessible through base class from global scope:
    Base._static_field = 123;
    // Expect error: not accessible through base class from global scope:
    Base.static_auto = 123;
    // OK: publicly assignable
    Base.static_auto_public = 123;
si

test_expression_base_qualified_instance() is
    let from: Base;

    // Expect error: not accessible through base class from global scope:
    from._static_field = 123;
    // Expect error: not accessible through base class from global scope:
    from.static_auto = 123;
    // OK: publicly assignable
    from.static_auto_public = 123;

    // Expect error: not accessible through base class from global scope:
    from._instance_field = 123;
    // Expect error: not accessible through base class from global scope:
    from.instance_auto = 123;
    // OK: publicly assignable
    from.instance_auto_public = 123;        
si

test_expression_derived_qualified_instance() is
    let from: Derived;

    // Expect error: not accessible through derived class from global scope:
    from._static_field = 123;
    // Expect error: not accessible through derived class from global scope:
    from.static_auto = 123;
    // OK: publicly assignable
    from.static_auto_public = 123;

    // Expect error: not accessible through derived class from global scope:
    from._instance_field = 123;
    // Expect error: not accessible through derived class from global scope:
    from.instance_auto = 123;
    // OK: publicly assignable
    from.instance_auto_public = 123;        
si
