namespace IoC is
    use Syntax;
    use Parser.LAZY_PARSER;

    class CONTAINER  is
        _instance: CONTAINER static;

        instance: CONTAINER static is
            if _instance == null then
                _instance = new CONTAINER();
            fi

            return _instance;
        si

        _logger_wrapper: Logging.LOGGER_WRAPPER;
        logger: Logging.Logger => _logger_wrapper;

        identifier_parser: Syntax.Parser.Parser[Tree.Identifier.NODE];
        identifier_qualified_parser: Syntax.Parser.Parser[Tree.Identifier.NODE];
        identifier_function_name_parser: Syntax.Parser.Parser[Tree.Identifier.NODE];
        modifier_parser: Syntax.Parser.Parser[Tree.Modifier.NODE];
        type_parser: LAZY_PARSER[Tree.TypeExpression.NODE];
        type_list_parser: LAZY_PARSER[Tree.TypeExpression.LIST];
        variable_parser: LAZY_PARSER[Tree.Variable.NODE];
        variable_list_parser: LAZY_PARSER[Tree.Variable.LIST];
        modifier_list_parser: LAZY_PARSER[Tree.Modifier.LIST];
        definition_parser: LAZY_PARSER[Tree.Definition.NODE];
        definition_list_parser: LAZY_PARSER[Tree.Definition.LIST];
        definition_import_parser: LAZY_PARSER[Tree.Definition.IMPORT];
        definition_namespace_parser: LAZY_PARSER[Tree.Definition.NAMESPACE];
        definition_class_parser: LAZY_PARSER[Tree.Definition.CLASS];
        definition_use_parser: LAZY_PARSER[Tree.Definition.USE];
        definition_trait_parser: LAZY_PARSER[Tree.Definition.TRAIT];
        definition_struct_parser: LAZY_PARSER[Tree.Definition.STRUCT];
        definition_enum_parser: LAZY_PARSER[Tree.Definition.ENUM];
        definition_member_parser: LAZY_PARSER[Tree.Definition.NODE];
        definition_function_parser: LAZY_PARSER[Tree.Definition.FUNCTION];
        definition_property_parser: LAZY_PARSER[Tree.Definition.PROPERTY];
        definition_indexer_parser: LAZY_PARSER[Tree.Definition.INDEXER];
        definition_pragma_parser: LAZY_PARSER[Tree.Definition.PRAGMA];
        pragma_node_parser: LAZY_PARSER[Tree.Pragma.NODE];
        expression_parser: LAZY_PARSER[Tree.Expression.NODE];
        expression_list_parser: LAZY_PARSER[Tree.Expression.LIST];
        expression_primary_parser: LAZY_PARSER[Tree.Expression.NODE];
        expression_secondary_parser: LAZY_PARSER[Tree.Expression.NODE];
        expression_tertiary_parser: LAZY_PARSER[Tree.Expression.NODE];
        expression_tuple_parser: LAZY_PARSER[Tree.Expression.TUPLE];
        statement_parser: LAZY_PARSER[Tree.Statement.NODE];
        statement_list_parser: LAZY_PARSER[Tree.Statement.LIST];
        statement_pragma_parser: LAZY_PARSER[Tree.Statement.PRAGMA];
        body_parser: LAZY_PARSER[Tree.Body.NODE];

        symbol_table: Semantic.SYMBOL_TABLE;
        namespaces: Semantic.NAMESPACES;
        symbol_loader: Semantic.SYMBOL_LOADER;
        ghul_symbol_lookup: Semantic.GHUL_SYMBOL_LOOKUP;
        system_symbol_lookup: Semantic.SYSTEM_SYMBOL_LOOKUP;
        function_caller: Semantic.FUNCTION_CALLER;
        overload_resolver: Semantic.OVERLOAD_RESOLVER;
        generic_cache: Semantic.GENERIC_CACHE;

        symbol_use_locations: Semantic.SYMBOL_USE_LOCATIONS;
        symbol_definition_locations: Semantic.SYMBOL_DEFINITION_LOCATIONS;

        value_boxer: IR.VALUE_BOXER;
        ir_context: IR.CONTEXT;
        brancher: IR.BRANCHER;
        innate_operation_generator: IR.INNATE_OPERATION_GENERATOR;
        local_id_generator: IR.LOCAL_ID_GENERATOR;

        expand_namespaces: Syntax.Process.EXPAND_NAMESPACES;
        add_accessors_for_properties: Syntax.Process.ADD_ACCESSORS_FOR_PROPERTIES;
        declare_symbols: Syntax.Process.DECLARE_SYMBOLS;
        resolve_uses: Syntax.Process.RESOLVE_USES;
        resolve_ancestors: Syntax.Process.RESOLVE_ANCESTORS;
        resolve_type_expressions: Syntax.Process.RESOLVE_TYPE_EXPRESSIONS;
        resolve_explicit_types: Syntax.Process.RESOLVE_EXPLICIT_TYPES;
        compile_expressions: Syntax.Process.COMPILE_EXPRESSIONS;
        resolve_overrides: Syntax.Process.RESOLVE_OVERRIDES;
        generate_il: Syntax.Process.GENERATE_IL;

        legacy_printer: Syntax.Process.Printer.LEGACY => new Syntax.Process.Printer.LEGACY(logger);
        ghul_printer: Syntax.Process.Printer.GHUL => new Syntax.Process.Printer.GHUL();

        completer: Syntax.Process.COMPLETER;
        signature_help: Syntax.Process.SIGNATURE_HELP;

        init() is
            _logger_wrapper = new Logging.LOGGER_WRAPPER(new Logging.HUMAN_READABLE_LOGGER(IO.Std.error));

            value_boxer = new IR.VALUE_BOXER();

            ir_context = new IR.CONTEXT();
            brancher = new IR.BRANCHER(ir_context);
            innate_operation_generator = new IR.INNATE_OPERATION_GENERATOR(value_boxer, brancher);
            local_id_generator = new IR.LOCAL_ID_GENERATOR();

            identifier_parser = new Parser.Identifier.NODE();
            identifier_qualified_parser = new Parser.Identifier.QUALIFIED();
            identifier_function_name_parser = new Parser.Identifier.FUNCTION_NAME();
            modifier_parser = new Parser.Modifier.NODE();
            type_parser = new LAZY_PARSER[Tree.TypeExpression.NODE]();
            type_list_parser = new LAZY_PARSER[Tree.TypeExpression.LIST]();
            variable_parser = new LAZY_PARSER[Tree.Variable.NODE]();
            variable_list_parser = new LAZY_PARSER[Tree.Variable.LIST]();
            modifier_list_parser = new LAZY_PARSER[Tree.Modifier.LIST]();
            definition_parser = new LAZY_PARSER[Tree.Definition.NODE]();
            definition_list_parser = new LAZY_PARSER[Tree.Definition.LIST]();
            definition_import_parser = new LAZY_PARSER[Tree.Definition.IMPORT]();
            definition_namespace_parser = new LAZY_PARSER[Tree.Definition.NAMESPACE]();
            definition_use_parser = new LAZY_PARSER[Tree.Definition.USE]();
            definition_class_parser = new LAZY_PARSER[Tree.Definition.CLASS]();
            definition_trait_parser = new LAZY_PARSER[Tree.Definition.TRAIT]();
            definition_struct_parser = new LAZY_PARSER[Tree.Definition.STRUCT]();
            definition_enum_parser = new LAZY_PARSER[Tree.Definition.ENUM]();
            definition_member_parser = new LAZY_PARSER[Tree.Definition.NODE]();
            definition_function_parser = new LAZY_PARSER[Tree.Definition.FUNCTION]();
            definition_property_parser = new LAZY_PARSER[Tree.Definition.PROPERTY]();
            definition_indexer_parser = new LAZY_PARSER[Tree.Definition.INDEXER]();
            definition_pragma_parser = new LAZY_PARSER[Tree.Definition.PRAGMA]();
            pragma_node_parser = new LAZY_PARSER[Tree.Pragma.NODE]();
            expression_parser = new LAZY_PARSER[Tree.Expression.NODE]();
            expression_list_parser = new LAZY_PARSER[Tree.Expression.LIST]();
            expression_primary_parser = new LAZY_PARSER[Tree.Expression.NODE]();
            expression_secondary_parser = new LAZY_PARSER[Tree.Expression.NODE]();
            expression_tertiary_parser = new LAZY_PARSER[Tree.Expression.NODE]();
            expression_tuple_parser = new LAZY_PARSER[Tree.Expression.TUPLE]();
            statement_parser = new LAZY_PARSER[Tree.Statement.NODE]();
            statement_list_parser = new LAZY_PARSER[Tree.Statement.LIST]();
            statement_pragma_parser = new LAZY_PARSER[Tree.Statement.PRAGMA]();
            body_parser = new LAZY_PARSER[Tree.Body.NODE]();

            type_parser.create = () -> Parser.Parser[Tree.TypeExpression.NODE] =>
                new Parser.TypeExpression.NODE(identifier_qualified_parser, type_list_parser);

            type_list_parser.create = () -> Parser.Parser[Tree.TypeExpression.LIST] =>
                new Parser.TypeExpression.LIST(type_parser);

            variable_parser.create = () -> Parser.Parser[Tree.Variable.NODE] =>
                new Parser.Variable.NODE(identifier_parser, type_parser, expression_parser);

            variable_list_parser.create = () -> Parser.Parser[Tree.Variable.LIST] =>
                new Parser.Variable.LIST(variable_parser);

            modifier_list_parser.create = () -> Parser.Parser[Tree.Modifier.LIST] =>
                new Parser.Modifier.LIST(modifier_parser);

            definition_parser.create = () -> Parser.Parser[Tree.Definition.NODE] =>
                new Parser.Definition.NODE(
                    definition_import_parser,
                    definition_namespace_parser,
                    definition_use_parser,
                    definition_class_parser,
                    definition_trait_parser,
                    definition_struct_parser,
                    definition_enum_parser,
                    definition_member_parser,
                    definition_pragma_parser
                );

            definition_list_parser.create = () -> Parser.Parser[Tree.Definition.LIST] =>
                new Parser.Definition.LIST(definition_parser);

            definition_import_parser.create = () -> Parser.Parser[Tree.Definition.IMPORT] =>
                new Parser.Definition.IMPORT(identifier_parser);

            definition_namespace_parser.create = () -> Parser.Parser[Tree.Definition.NAMESPACE] =>
                new Parser.Definition.NAMESPACE(identifier_qualified_parser, definition_list_parser);

            definition_use_parser.create = () -> Parser.Parser[Tree.Definition.USE] =>
                new Parser.Definition.USE(identifier_qualified_parser);

            definition_class_parser.create = () -> Parser.Parser[Tree.Definition.CLASS] =>
                new Parser.Definition.CLASS(
                    identifier_parser,
                    type_parser,
                    type_list_parser,
                    modifier_list_parser,
                    definition_list_parser
                );

            definition_trait_parser.create = () -> Parser.Parser[Tree.Definition.TRAIT] =>
                new Parser.Definition.TRAIT(
                    identifier_parser,
                    type_parser,
                    type_list_parser,
                    modifier_list_parser,
                    definition_list_parser
                );

            definition_struct_parser.create = () -> Parser.Parser[Tree.Definition.STRUCT] =>
                new Parser.Definition.STRUCT(
                    identifier_parser,
                    type_parser,
                    type_list_parser,
                    modifier_list_parser,
                    definition_list_parser
                );

            definition_enum_parser.create = () -> Parser.Parser[Tree.Definition.ENUM] =>
                new Parser.Definition.ENUM(identifier_parser, modifier_list_parser, expression_parser);

            definition_member_parser.create = () -> Parser.Parser[Tree.Definition.NODE] =>
                new Parser.Definition.MEMBER(definition_function_parser, definition_property_parser, definition_indexer_parser);

            definition_function_parser.create = () -> Parser.Parser[Tree.Definition.FUNCTION] =>
                new Parser.Definition.FUNCTION(
                    identifier_function_name_parser,
                    type_parser,
                    type_list_parser,
                    modifier_list_parser,
                    body_parser,
                    variable_list_parser
                );

            definition_property_parser.create = () -> Parser.Parser[Tree.Definition.PROPERTY] =>
                new Parser.Definition.PROPERTY(
                    identifier_parser,
                    type_parser,
                    modifier_list_parser,
                    definition_list_parser,
                    body_parser
                );

            definition_indexer_parser.create = () -> Parser.Parser[Tree.Definition.INDEXER] =>
                new Parser.Definition.INDEXER(
                    identifier_parser,
                    type_parser,
                    modifier_list_parser,
                    variable_parser,
                    body_parser
                );

            definition_pragma_parser.create = () -> Parser.Parser[Tree.Definition.PRAGMA] =>
                new Parser.Definition.PRAGMA(pragma_node_parser, definition_parser);

            pragma_node_parser.create = () -> Parser.Parser[Tree.Pragma.NODE] =>
                new Parser.Pragma.NODE(identifier_qualified_parser, expression_list_parser);

            expression_parser.create = () -> Parser.Parser[Tree.Expression.NODE] =>
                new Parser.Expression.NODE(expression_tertiary_parser);

            expression_list_parser.create = () -> Parser.Parser[Tree.Expression.LIST] =>
                new Parser.Expression.LIST(expression_parser);

            expression_primary_parser.create = () -> Parser.Parser[Tree.Expression.NODE] =>
                new Parser.Expression.PRIMARY(
                    identifier_parser,
                    type_parser,
                    expression_parser,
                    expression_list_parser,
                    expression_tuple_parser
                );

            expression_secondary_parser.create = () -> Parser.Parser[Tree.Expression.NODE] =>
                new Parser.Expression.SECONDARY(
                    identifier_parser,
                    type_parser,
                    expression_parser,
                    expression_primary_parser,
                    expression_list_parser,
                    body_parser
                );

            expression_tertiary_parser.create = () -> Parser.Parser[Tree.Expression.NODE] =>
                new Parser.Expression.TERTIARY(
                    expression_secondary_parser
                );

            expression_tuple_parser.create = () -> Parser.Parser[Tree.Expression.TUPLE] =>
                new Parser.Expression.TUPLE(expression_list_parser);

            statement_parser.create = () -> Parser.Parser[Tree.Statement.NODE] =>
                new Parser.Statement.NODE(
                    [Lexical.TOKEN.FOR, Lexical.TOKEN.WHILE, Lexical.TOKEN.DO],
                    identifier_parser,
                    expression_parser,
                    expression_list_parser,
                    variable_parser,
                    variable_list_parser,
                    statement_list_parser,
                    statement_pragma_parser
                );

            statement_list_parser.create = () -> Parser.Parser[Tree.Statement.LIST] =>
                new Parser.Statement.LIST(
                    [
                        Lexical.TOKEN.ELSE,
                        Lexical.TOKEN.ELIF,
                        Lexical.TOKEN.FI,
                        Lexical.TOKEN.OD,
                        Lexical.TOKEN.CATCH,
                        Lexical.TOKEN.FINALLY,
                        Lexical.TOKEN.YRT,
                        Lexical.TOKEN.WHEN,
                        Lexical.TOKEN.DEFAULT,
                        Lexical.TOKEN.ESAC,
                        Lexical.TOKEN.SI,
                        Lexical.TOKEN.COMMA
                    ],
                    statement_parser
                );

            statement_pragma_parser.create = () -> Parser.Parser[Tree.Statement.PRAGMA] =>
                new Parser.Statement.PRAGMA(pragma_node_parser, statement_parser);

            body_parser.create = () -> Parser.Parser[Tree.Body.NODE] =>
                new Parser.Body.NODE(
                    expression_parser,
                    statement_parser,
                    statement_list_parser,
                    identifier_qualified_parser);

            symbol_table = new Semantic.SYMBOL_TABLE(logger);

            namespaces = new Semantic.NAMESPACES(logger, symbol_table);

            ghul_symbol_lookup = new Semantic.GHUL_SYMBOL_LOOKUP(symbol_table);
            system_symbol_lookup = new Semantic.SYSTEM_SYMBOL_LOOKUP(symbol_table);

            function_caller = new Semantic.FUNCTION_CALLER(symbol_table, value_boxer);

            symbol_loader =
                new Semantic.SYMBOL_LOADER(logger, symbol_table, function_caller, ghul_symbol_lookup);

            overload_resolver = new Semantic.OVERLOAD_RESOLVER(logger);

            generic_cache = new Semantic.GENERIC_CACHE();

            symbol_use_locations = new Semantic.SYMBOL_USE_LOCATIONS();

            symbol_definition_locations = new Semantic.SYMBOL_DEFINITION_LOCATIONS(symbol_use_locations);

            expand_namespaces = new Syntax.Process.EXPAND_NAMESPACES();

            add_accessors_for_properties = new Syntax.Process.ADD_ACCESSORS_FOR_PROPERTIES();

            declare_symbols = 
                new Syntax.Process.DECLARE_SYMBOLS(
                    logger, 
                    symbol_table, 
                    namespaces, 
                    symbol_definition_locations,
                    local_id_generator);

            resolve_uses = new Syntax.Process.RESOLVE_USES(logger, symbol_table, namespaces);

            resolve_ancestors =
                new Syntax.Process.RESOLVE_ANCESTORS(logger, symbol_table, namespaces, ghul_symbol_lookup, system_symbol_lookup);

            resolve_type_expressions =
                new Syntax.Process.RESOLVE_TYPE_EXPRESSIONS(
                    logger,
                    symbol_table,
                    namespaces,
                    symbol_use_locations,
                    ghul_symbol_lookup,
                    system_symbol_lookup);

            resolve_explicit_types =
                new Syntax.Process.RESOLVE_EXPLICIT_TYPES(
                    logger,
                    symbol_table,
                    namespaces,
                    generic_cache,
                    system_symbol_lookup
                );

            compile_expressions =
                new Syntax.Process.COMPILE_EXPRESSIONS(
                    logger,
                    symbol_table,
                    namespaces,
                    symbol_loader,
                    ghul_symbol_lookup,
                    system_symbol_lookup,
                    function_caller,
                    overload_resolver,
                    generic_cache,
                    symbol_use_locations
                );

            resolve_overrides =
                new Syntax.Process.RESOLVE_OVERRIDES(
                    logger,
                    symbol_table,
                    namespaces
                );

            generate_il =
                new Syntax.Process.GENERATE_IL(
                    logger,
                    symbol_table,
                    namespaces,
                    symbol_loader,
                    ghul_symbol_lookup,
                    system_symbol_lookup,
                    function_caller,
                    overload_resolver,
                    generic_cache,
                    symbol_use_locations,
                    ir_context,
                    brancher
                );

            completer =
                new Syntax.Process.COMPLETER(
                    logger,
                    symbol_table,
                    namespaces
                );

            signature_help =
                new Syntax.Process.SIGNATURE_HELP(
                    logger,
                    symbol_table,
                    namespaces,
                    overload_resolver
                );
        si

        want_tab_delimited_logger(writer: IO.Writer) is
            _logger_wrapper.logger = new Logging.TAB_DELIMITED_LOGGER(writer);
        si
    si
si
