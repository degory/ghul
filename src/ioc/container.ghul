namespace IoC is
    use IO.Std;

    use Syntax;
    use Parsers.LAZY_PARSER;

    class CONTAINER is
        _instance: CONTAINER static;

        instance: CONTAINER static is
            if _instance == null then
                _instance = new CONTAINER();
            fi

            return _instance;
        si

        logger: Logging.Logger;
        logger_formatter: Logging.DiagnosticFormatter;
        logger_writer: IO.TextWriter;

        timers: Logging.TIMERS;
        watchdog: Analysis.WATCHDOG;

        path_config: Driver.PATH_CONFIG;
        build_flags: Compiler.BUILD_FLAGS;

        precedence_map: Collections.MutableMap[string,Syntax.Parsers.Expressions.PRECEDENCE];
        identifier_parser: Syntax.Parsers.Parser[Trees.Identifiers.Identifier];
        identifier_qualified_parser: Syntax.Parsers.Parser[Trees.Identifiers.Identifier];
        identifier_function_name_parser: Syntax.Parsers.Parser[Trees.Identifiers.Identifier];
        modifier_parser: Syntax.Parsers.Parser[Trees.Modifiers.Modifier];
        type_parser: LAZY_PARSER[Trees.TypeExpressions.TypeExpression];
        type_list_parser: LAZY_PARSER[Trees.TypeExpressions.LIST];
        variable_parser: LAZY_PARSER[Trees.Variables.VARIABLE];
        variable_list_parser: LAZY_PARSER[Trees.Variables.LIST];
        variable_destructure_left_parser: LAZY_PARSER[Trees.Variables.DESTRUCTURING_VARIABLE_LEFT];
        modifier_list_parser: LAZY_PARSER[Trees.Modifiers.LIST];
        definition_parser: LAZY_PARSER[Trees.Definitions.Definition];
        definition_global_list_parser: LAZY_PARSER[Trees.Definitions.LIST];
        definition_member_list_parser: LAZY_PARSER[Trees.Definitions.LIST];
        definition_namespace_parser: LAZY_PARSER[Trees.Definitions.NAMESPACE];
        definition_class_parser: LAZY_PARSER[Trees.Definitions.CLASS];
        definition_use_parser: LAZY_PARSER[Trees.Definitions.USE];
        definition_trait_parser: LAZY_PARSER[Trees.Definitions.TRAIT];
        definition_struct_parser: LAZY_PARSER[Trees.Definitions.STRUCT];
        definition_enum_parser: LAZY_PARSER[Trees.Definitions.ENUM];
        definition_member_parser: LAZY_PARSER[Trees.Definitions.Definition];
        definition_function_parser: LAZY_PARSER[Trees.Definitions.FUNCTION];
        definition_property_parser: LAZY_PARSER[Trees.Definitions.PROPERTY];
        definition_indexer_parser: LAZY_PARSER[Trees.Definitions.INDEXER];
        definition_pragma_parser: LAZY_PARSER[Trees.Definitions.PRAGMA];
        pragma_node_parser: LAZY_PARSER[Trees.Pragmas.PRAGMA];
        expression_parser: LAZY_PARSER[Trees.Expressions.Expression];
        expression_list_parser: LAZY_PARSER[Trees.Expressions.LIST];
        expression_primary_parser: LAZY_PARSER[Trees.Expressions.Expression];
        expression_secondary_parser: LAZY_PARSER[Trees.Expressions.Expression];
        expression_tertiary_parser: LAZY_PARSER[Trees.Expressions.Expression];
        expression_tuple_parser: LAZY_PARSER[Trees.Expressions.TUPLE];
        statement_parser: LAZY_PARSER[Trees.Statements.Statement];
        statement_list_parser: LAZY_PARSER[Trees.Statements.LIST];
        statement_pragma_parser: LAZY_PARSER[Trees.Statements.PRAGMA];
        body_parser: LAZY_PARSER[Trees.Bodies.Body];

        type_details_lookup: Semantic.DotNet.TYPE_DETAILS_LOOKUP;

        ghul_namespace_creator: Semantic.DotNet.GHUL_NAMESPACE_CREATOR;
        referenced_assemblies: Semantic.DotNet.REFERENCED_ASSEMBLIES;
        assembly_info: Semantic.DotNet.ASSEMBLY_INFO;

        dotnet_symbol_table: System.Lazy`1[Semantic.DotNet.SYMBOL_TABLE];
        symbol_factory: Semantic.DotNet.SYMBOL_FACTORY;
        type_mapper: Semantic.DotNet.TYPE_MAPPER;
        type_name_map: Semantic.DotNet.TYPE_NAME_MAP;
        assemblies: Semantic.DotNet.ASSEMBLIES;

        stable_symbols: Semantic.STABLE_SYMBOLS;
        symbol_table: Semantic.SYMBOL_TABLE;
        namespaces: Semantic.NAMESPACES;
        symbol_loader: Semantic.SYMBOL_LOADER;
        innate_symbol_lookup: Semantic.Lookups.InnateSymbolLookup;
        function_caller: Semantic.FUNCTION_CALLER;
        overload_resolver: Semantic.OVERLOAD_RESOLVER;

        symbol_use_locations: Semantic.SYMBOL_USE_LOCATIONS;
        symbol_definition_locations: Semantic.SYMBOL_DEFINITION_LOCATIONS;

        value_boxer: IR.VALUE_BOXER;
        value_converter: IR.VALUE_CONVERTER;
        block_stack: IR.BLOCK_STACK;
        ir_context: IR.CONTEXT;
        brancher: IR.BRANCHER;
        innate_operation_generator: IR.INNATE_OPERATION_GENERATOR;
        local_id_generator: IR.LOCAL_ID_GENERATOR;
        boilerplate_generator: IR.BOILERPLATE_GENERATOR;

        conditional_compilation: Syntax.Process.CONDITIONAL_COMPILATION;
        expand_namespaces: Syntax.Process.EXPAND_NAMESPACES;
        add_accessors_for_properties: Syntax.Process.ADD_ACCESSORS_FOR_PROPERTIES;
        declare_symbols: Syntax.Process.DECLARE_SYMBOLS;
        resolve_uses: Syntax.Process.RESOLVE_USES;
        resolve_ancestors: Syntax.Process.RESOLVE_ANCESTORS;
        resolve_type_expressions: Syntax.Process.RESOLVE_TYPE_EXPRESSIONS;
        resolve_explicit_types: Syntax.Process.RESOLVE_EXPLICIT_TYPES;
        compile_expressions: Syntax.Process.COMPILE_EXPRESSIONS;
        resolve_overrides: Syntax.Process.RESOLVE_OVERRIDES;
        generate_il: Syntax.Process.GENERATE_IL;

        ghul_printer: Syntax.Process.Printer.GHUL => new Syntax.Process.Printer.GHUL();

        completer: Syntax.Process.COMPLETER;
        signature_help: Syntax.Process.SIGNATURE_HELP;

        init() is
            Source.LOCATION.init_static();

            logger = new Logging.DIAGNOSTICS_STORE();

            want_human_readable_logger(Std.error);

            timers = new Logging.TIMERS();
            watchdog = new Analysis.WATCHDOG();

            path_config = new Driver.PATH_CONFIG();
            build_flags = new Compiler.BUILD_FLAGS();

            value_boxer = new IR.VALUE_BOXER(logger);

            ir_context = new IR.CONTEXT(logger, "entry");
            block_stack = new IR.BLOCK_STACK();
            brancher = new IR.BRANCHER();
            innate_operation_generator = new IR.INNATE_OPERATION_GENERATOR(logger, value_boxer, brancher, build_flags);
            local_id_generator = new IR.LOCAL_ID_GENERATOR();
            boilerplate_generator = new IR.BOILERPLATE_GENERATOR(ir_context, path_config);

            precedence_map = new Collections.MAP[string,Syntax.Parsers.Expressions.PRECEDENCE]();

            identifier_parser = new Parsers.Identifiers.IDENTIFIER();
            identifier_qualified_parser = new Parsers.Identifiers.QUALIFIED();
            identifier_function_name_parser = new Parsers.Identifiers.FUNCTION_NAME();
            modifier_parser = new Parsers.Modifiers.MODIFIER();
            type_parser = new LAZY_PARSER[Trees.TypeExpressions.TypeExpression]();
            type_list_parser = new LAZY_PARSER[Trees.TypeExpressions.LIST]();
            variable_parser = new LAZY_PARSER[Trees.Variables.VARIABLE]();
            variable_list_parser = new LAZY_PARSER[Trees.Variables.LIST]();
            variable_destructure_left_parser = new LAZY_PARSER[Trees.Variables.DESTRUCTURING_VARIABLE_LEFT]();
            modifier_list_parser = new LAZY_PARSER[Trees.Modifiers.LIST]();
            definition_parser = new LAZY_PARSER[Trees.Definitions.Definition]();
            definition_global_list_parser = new LAZY_PARSER[Trees.Definitions.LIST]();
            definition_member_list_parser = new LAZY_PARSER[Trees.Definitions.LIST]();
            definition_namespace_parser = new LAZY_PARSER[Trees.Definitions.NAMESPACE]();
            definition_use_parser = new LAZY_PARSER[Trees.Definitions.USE]();
            definition_class_parser = new LAZY_PARSER[Trees.Definitions.CLASS]();
            definition_trait_parser = new LAZY_PARSER[Trees.Definitions.TRAIT]();
            definition_struct_parser = new LAZY_PARSER[Trees.Definitions.STRUCT]();
            definition_enum_parser = new LAZY_PARSER[Trees.Definitions.ENUM]();
            definition_member_parser = new LAZY_PARSER[Trees.Definitions.Definition]();
            definition_function_parser = new LAZY_PARSER[Trees.Definitions.FUNCTION]();
            definition_property_parser = new LAZY_PARSER[Trees.Definitions.PROPERTY]();
            definition_indexer_parser = new LAZY_PARSER[Trees.Definitions.INDEXER]();
            definition_pragma_parser = new LAZY_PARSER[Trees.Definitions.PRAGMA]();
            pragma_node_parser = new LAZY_PARSER[Trees.Pragmas.PRAGMA]();
            expression_parser = new LAZY_PARSER[Trees.Expressions.Expression]();
            expression_list_parser = new LAZY_PARSER[Trees.Expressions.LIST]();
            expression_primary_parser = new LAZY_PARSER[Trees.Expressions.Expression]();
            expression_secondary_parser = new LAZY_PARSER[Trees.Expressions.Expression]();
            expression_tertiary_parser = new LAZY_PARSER[Trees.Expressions.Expression]();
            expression_tuple_parser = new LAZY_PARSER[Trees.Expressions.TUPLE]();
            statement_parser = new LAZY_PARSER[Trees.Statements.Statement]();
            statement_list_parser = new LAZY_PARSER[Trees.Statements.LIST]();
            statement_pragma_parser = new LAZY_PARSER[Trees.Statements.PRAGMA]();
            body_parser = new LAZY_PARSER[Trees.Bodies.Body]();

            type_parser.create = () =>
                new Parsers.TypeExpressions.TYPE_EXPRESSION(identifier_qualified_parser, type_list_parser);

            type_list_parser.create = () =>
                new Parsers.TypeExpressions.LIST(type_parser);

            variable_parser.create = () =>
                new Parsers.Variables.VARIABLE(
                    identifier_parser, 
                    variable_destructure_left_parser, 
                    type_parser, 
                    expression_parser);

            variable_list_parser.create = () =>
                new Parsers.Variables.LIST(variable_parser);

            variable_destructure_left_parser.create = () =>
                new Parsers.Variables.DESTRUCTURING_VARIABLE_LEFT(identifier_parser);

            modifier_list_parser.create = () =>
                new Parsers.Modifiers.LIST(modifier_parser);

            definition_parser.create = () =>
                new Parsers.Definitions.DEFINITION(
                    definition_namespace_parser,
                    definition_use_parser,
                    definition_class_parser,
                    definition_trait_parser,
                    definition_struct_parser,
                    definition_enum_parser,
                    definition_member_parser,
                    definition_pragma_parser
                );

            definition_global_list_parser.create = () =>
                new Parsers.Definitions.GLOBAL_LIST(definition_parser);

            definition_member_list_parser.create = () =>
                new Parsers.Definitions.MEMBER_LIST(definition_member_parser);

            definition_namespace_parser.create = () is
                let result = new Parsers.Definitions.NAMESPACE(identifier_qualified_parser, definition_global_list_parser);

                return result;
            si;            

            definition_use_parser.create = () =>
                new Parsers.Definitions.USE(identifier_qualified_parser);

            definition_class_parser.create = () =>
                new Parsers.Definitions.CLASS(
                    identifier_parser,
                    type_parser,
                    type_list_parser,
                    modifier_list_parser,
                    definition_member_list_parser
                );

            definition_trait_parser.create = () =>
                new Parsers.Definitions.TRAIT(
                    identifier_parser,
                    type_parser,
                    type_list_parser,
                    modifier_list_parser,
                    definition_member_list_parser
                );

            definition_struct_parser.create = () =>
                new Parsers.Definitions.STRUCT(
                    identifier_parser,
                    type_parser,
                    type_list_parser,
                    modifier_list_parser,
                    definition_member_list_parser
                );

            definition_enum_parser.create = () =>
                new Parsers.Definitions.ENUM(identifier_parser, modifier_list_parser, expression_parser);

            definition_member_parser.create = () =>
                new Parsers.Definitions.MEMBER(definition_function_parser, definition_property_parser, definition_indexer_parser, definition_pragma_parser);

            definition_function_parser.create = () =>
                new Parsers.Definitions.FUNCTION(
                    identifier_function_name_parser,
                    type_parser,
                    type_list_parser,
                    modifier_list_parser,
                    body_parser,
                    variable_list_parser
                );

            definition_property_parser.create = () =>
                new Parsers.Definitions.PROPERTY(
                    identifier_parser,
                    type_parser,
                    modifier_list_parser,
                    body_parser
                );

            definition_indexer_parser.create = () =>
                new Parsers.Definitions.INDEXER(
                    identifier_parser,
                    type_parser,
                    modifier_list_parser,
                    variable_parser,
                    body_parser
                );

            definition_pragma_parser.create = () =>
                new Parsers.Definitions.PRAGMA(pragma_node_parser, definition_parser, precedence_map);

            pragma_node_parser.create = () =>
                new Parsers.Pragmas.PRAGMA(identifier_qualified_parser, expression_list_parser);

            expression_parser.create = () =>
                new Parsers.Expressions.EXPRESSION(expression_tertiary_parser, precedence_map);

            expression_list_parser.create = () =>
                new Parsers.Expressions.LIST(expression_parser);

            expression_primary_parser.create = () =>
                new Parsers.Expressions.PRIMARY(
                    identifier_parser,
                    type_parser,
                    expression_parser,
                    expression_list_parser,
                    expression_tuple_parser,
                    statement_parser,
                    variable_list_parser
                );

            expression_secondary_parser.create = () =>
                new Parsers.Expressions.SECONDARY(
                    identifier_parser,
                    type_parser,
                    type_list_parser,
                    expression_parser,
                    expression_primary_parser,
                    expression_list_parser,
                    body_parser
                );

            expression_tertiary_parser.create = () =>
                new Parsers.Expressions.TERTIARY(
                    expression_secondary_parser
                );

            expression_tuple_parser.create = () =>
                new Parsers.Expressions.TUPLE(expression_list_parser);

            statement_parser.create = () =>
                new Parsers.Statements.STATEMENT(
                    new Collections.LIST[Lexical.TOKEN]([Lexical.TOKEN.FOR, Lexical.TOKEN.WHILE, Lexical.TOKEN.DO]),
                    identifier_parser,
                    expression_parser,
                    expression_list_parser,
                    variable_parser,
                    variable_list_parser,
                    statement_list_parser,
                    statement_pragma_parser
                );

            statement_list_parser.create = () =>
                new Parsers.Statements.LIST(
                    new Collections.LIST[Lexical.TOKEN]([
                        Lexical.TOKEN.ELSE,
                        Lexical.TOKEN.ELIF,
                        Lexical.TOKEN.FI,
                        Lexical.TOKEN.OD,
                        Lexical.TOKEN.CATCH,
                        Lexical.TOKEN.FINALLY,
                        Lexical.TOKEN.YRT,
                        Lexical.TOKEN.WHEN,
                        Lexical.TOKEN.DEFAULT,
                        Lexical.TOKEN.ESAC,
                        Lexical.TOKEN.SI,
                        Lexical.TOKEN.COMMA
                    ]),
                    statement_parser
                );

            statement_pragma_parser.create = () =>
                new Parsers.Statements.PRAGMA(pragma_node_parser, statement_parser);

            body_parser.create = () =>
                new Parsers.Bodies.BODY(
                    expression_parser,
                    statement_parser,
                    statement_list_parser,
                    identifier_qualified_parser);

            stable_symbols = new Semantic.STABLE_SYMBOLS();

            type_details_lookup = new Semantic.DotNet.TYPE_DETAILS_LOOKUP();

            symbol_table = new Semantic.SYMBOL_TABLE(logger);
            namespaces = new Semantic.NAMESPACES(logger, symbol_table);

            ghul_namespace_creator = new Semantic.DotNet.GHUL_NAMESPACE_CREATOR(timers, symbol_table, namespaces, type_details_lookup);

            dotnet_symbol_table =
                new System.Lazy`1[Semantic.DotNet.SYMBOL_TABLE](
                    () =>
                        new Semantic.DotNet.SYMBOL_TABLE(type_details_lookup, symbol_factory)
                );

            type_name_map = new Semantic.DotNet.TYPE_NAME_MAP(build_flags, type_details_lookup);

            assemblies = new Semantic.DotNet.ASSEMBLIES(
                timers,
                build_flags,
                path_config, 
                symbol_table, 
                namespaces, 
                type_name_map,
                type_details_lookup
            );

            referenced_assemblies = new Semantic.DotNet.REFERENCED_ASSEMBLIES(boilerplate_generator, assemblies);

            innate_symbol_lookup = new Semantic.Lookups.LAZY_INNATE_SYMBOL_LOOKUP(
                () =>
                    new Semantic.Lookups.REFLECTION_INNATE_SYMBOL_LOOKUP(
                        type_mapper, 
                        dotnet_symbol_table.value,
                        new Semantic.Lookups.GHUL_STUBS_SYMBOL_LOOKUP(logger, symbol_table),
                        assemblies
                    )
            );

            type_mapper = new Semantic.DotNet.TYPE_MAPPER(dotnet_symbol_table, innate_symbol_lookup, type_name_map, assemblies);

            symbol_factory = new Semantic.DotNet.SYMBOL_FACTORY(namespaces, type_name_map, type_mapper, referenced_assemblies, assemblies, logger);

            assembly_info = new Semantic.DotNet.ASSEMBLY_INFO(ir_context);

            value_converter = new IR.VALUE_CONVERTER(logger, innate_symbol_lookup);

            function_caller = new Semantic.FUNCTION_CALLER(symbol_table, value_boxer, block_stack);

            symbol_loader =
                new Semantic.SYMBOL_LOADER(
                    logger, 
                    symbol_table, 
                    function_caller, 
                    value_boxer, 
                    innate_symbol_lookup);

            function_caller.loader = symbol_loader;

            overload_resolver = new Semantic.OVERLOAD_RESOLVER(logger);

            symbol_use_locations = new Semantic.SYMBOL_USE_LOCATIONS();

            symbol_definition_locations = new Semantic.SYMBOL_DEFINITION_LOCATIONS(symbol_use_locations);

            conditional_compilation = new Syntax.Process.CONDITIONAL_COMPILATION();

            expand_namespaces = new Syntax.Process.EXPAND_NAMESPACES(new System.IO.Abstractions.FileSystem());

            add_accessors_for_properties = new Syntax.Process.ADD_ACCESSORS_FOR_PROPERTIES();

            declare_symbols = 
                new Syntax.Process.DECLARE_SYMBOLS(
                    logger, 
                    stable_symbols,
                    symbol_table, 
                    namespaces, 
                    symbol_definition_locations,
                    local_id_generator);

            resolve_uses = new Syntax.Process.RESOLVE_USES(logger, symbol_table, namespaces, symbol_use_locations);

            resolve_ancestors =
                new Syntax.Process.RESOLVE_ANCESTORS(logger, stable_symbols, symbol_table, namespaces, innate_symbol_lookup);

            resolve_type_expressions =
                new Syntax.Process.RESOLVE_TYPE_EXPRESSIONS(
                    logger,
                    stable_symbols,
                    symbol_table,                    
                    namespaces,
                    symbol_use_locations,
                    innate_symbol_lookup);

            resolve_explicit_types =
                new Syntax.Process.RESOLVE_EXPLICIT_TYPES(
                    logger,
                    stable_symbols,
                    symbol_table,
                    namespaces,
                    innate_symbol_lookup
                );

            compile_expressions =
                new Syntax.Process.COMPILE_EXPRESSIONS(
                    logger,
                    stable_symbols,
                    symbol_table,
                    namespaces,
                    symbol_loader,
                    innate_symbol_lookup,
                    function_caller,
                    overload_resolver,
                    symbol_use_locations,
                    ir_context,
                    value_converter,
                    value_boxer
                );

            resolve_overrides =
                new Syntax.Process.RESOLVE_OVERRIDES(
                    logger,
                    stable_symbols,                    
                    symbol_table,
                    namespaces
                );

            generate_il =
                new Syntax.Process.GENERATE_IL(
                    logger,
                    symbol_table,
                    namespaces,
                    symbol_loader,
                    innate_symbol_lookup,
                    function_caller,
                    overload_resolver,
                    symbol_use_locations,
                    ir_context,
                    block_stack,
                    brancher,
                    boilerplate_generator,
                    value_boxer
                );

            completer =
                new Syntax.Process.COMPLETER(
                    logger,
                    symbol_table,
                    namespaces,
                    dotnet_symbol_table
                );

            signature_help =
                new Syntax.Process.SIGNATURE_HELP(
                    logger,
                    symbol_table,
                    namespaces,
                    overload_resolver
                );
        si

        want_tab_delimited_logger(writer: IO.TextWriter) is
            logger_writer = writer;

            logger_formatter = new Logging.TAB_DELIMITED_DIAGNOSTIC_FORMATTER();
        si

        want_human_readable_logger(writer: IO.TextWriter) is
            logger_writer = writer;

            logger_formatter = new Logging.HUMAN_READABLE_DIAGNOSTIC_FORMATTER();
        si

        want_msbuild_logger(writer: IO.TextWriter) is
            logger_writer = writer;

            logger_formatter = new Logging.MSBUILD_DIAGNOSTIC_FORMATTER();
        si        
    si
si
