namespace Driver is
    use System.Exception;

    use IO.Std;
    use IO.Path;
    use IO.File;
    use IO.Directory;

    use Collections.Iterable;
    use Collections.LIST;
    use Collections.SET;

    use System.Text.RegularExpressions.Regex;
    use System.Text.RegularExpressions.Match;

    use System.Runtime.InteropServices.RuntimeInformation;
    use System.Runtime.InteropServices.OSPlatform;

    use IoC;
    use Logging;
    use Compiler;
    
    use Analysis.ANALYSER;

    class Main is
        paths: Driver.PATH_CONFIG;
        project_name: string;
        container: IoC.CONTAINER;
        compiler: COMPILER;
        flags: BUILD_FLAGS;
        output_file_name_generator: OUTPUT_FILE_NAME_GENERATOR;
        assemblies: LIST[string];
        library_locations: LIST[string];
        ghul_source_files: LIST[string];
        analyse_files: LIST[string];
        module_version: string;
        assembly_info: Semantic.DotNet.ASSEMBLY_INFO;

        emit_boilerplate_il: string;

        compiler_version: string is
            let assembly_version = 
                System.Reflection.Assembly.get_entry_assembly().get_custom_attributes(typeof System.Reflection.AssemblyInformationalVersionAttribute, false) |
                    .map(va => cast System.Reflection.AssemblyInformationalVersionAttribute(va)).first();

            if assembly_version.has_value then
                return "{assembly_version.value.informational_version}";
            else
                return "v0.0.0-unknown.1";
            fi            
        si        

        standard_ghul_library_locations: Iterable[string] is
            if flags.want_stubs then
                return ["dotnet/ghul", "dotnet/stubs"];
            else
                return ["dotnet/ghul"];
            fi
        si

        entry(arguments: string[]) static is
            let full_arguments = new LIST[string](arguments.count + 1);

            add_arguments(full_arguments, arguments);

            let instance = new Main(new LIST[string](full_arguments));
        si

        add_arguments(result: LIST[string], source: Iterable[string]) static is
            let seen_files = new SET[string]();

            add_arguments(seen_files, result, source);
        si
        
        add_arguments(seen_files: SET[string], result: LIST[string], source: Iterable[string]) static is
            for argument in source do
                if argument.starts_with('@') then
                    read_arguments_from_file(seen_files, result, argument.substring(1));
                elif argument.length > 0 then
                    result.add(argument);
                fi
            od            
        si

        read_arguments_from_file(seen_files: SET[string], result: LIST[string], path: string) static is
            if seen_files.contains(path) then
                return;
            fi

            let parser = new ARGUMENTS_PARSER();

            let text = File.read_all_text(path);

            let arguments = parser.parse_arguments(text);

            add_arguments(seen_files, result, arguments);
        si

        init(arguments: LIST[string]) is
            let result = 1;

            try
                Std.input_encoding = new System.Text.UTF8Encoding(false);
                Std.output_encoding = new System.Text.UTF8Encoding(false);

                if arguments.count == 0 then
                    Std.out.write("ghÅ«l {compiler_version}\n");
                    Std.out.flush();

                    System.Environment.exit(0);
                fi

                container = IoC.CONTAINER.instance;

                paths = container.path_config;
                flags = container.build_flags;
                compiler = new COMPILER();
                output_file_name_generator = new OUTPUT_FILE_NAME_GENERATOR();
                assembly_info = container.assembly_info;
                module_version = "0:0:0:0";

                parse_flags(arguments);

                IoC.CONTAINER.instance.assemblies.import(assemblies);                

                if flags.want_analyse then
                    analyse();

                    System.Environment.exit(0);
                fi

                start_build();

                compiler.post_parse();

                compiler.build();

                result = finish_build();
            catch e: Exception
                Std.error.write(e);
                Std.error.write("\n");
                Std.error.flush();

                result = 1;
            yrt

            if result == 0 then
                Std.error.write("*** succeeded ***");
            else
                Std.error.write("!!! failed !!!");
            fi

            Std.error.write("\n");
            
            System.Environment.exit(result);
        si

        parse_flags(args: Iterable[string]) is
            assemblies = new LIST[string]();
            ghul_source_files = new LIST[string]();
            library_locations = new LIST[string]();

            let args_iterator = args.iterator;

            flags.want_compile_up_to_expressions = true;
            flags.want_compile_expressions = true;
            flags.want_assembler = true;
            flags.want_executable = true;

            let want_type_check = false;
            let do_not_want_type_check = false;

            let get_next_argument = (a: Collections.Iterator[string]) is
                a.move_next();
                return a.current.trim();
            si;

            let conditional_defines = new Collections.LIST[string]();
            let emit_boilerplate_il_path: string;

            for s in args_iterator do
                if s =~ "-A" \/ s =~ "--analyse" then
                    flags.want_analyse = true;
                    flags.want_assembler = false;
                    flags.want_executable = false;
                elif s =~ "-G" \/ s =~ "--type-check" then
                    flags.want_assembler = false;
                    flags.want_executable = false;
                elif s =~ "-g" \/ s =~ "--no-type-check" then   
                    flags.want_compile_up_to_expressions = false;
                    flags.want_compile_expressions = false;                    
                    flags.want_assembler = false;
                    flags.want_executable = false;
                elif s =~ "-E" \/ s =~ "--ignore-errors" then
                    flags.ignore_errors = true;
                elif s =~ "-S" \/ s =~ "--assembler" then
                    flags.want_executable = false;
                elif s =~ "--debug" then
                    flags.want_debug = true;
                elif s =~ "--define" then
                    conditional_defines.add(get_next_argument(args_iterator));
                elif s =~ "--entry" then
                    container.ir_context.entry_point_name  = get_next_argument(args_iterator);
                elif s =~ "--v3" then
                    flags.want_stubs = false;
                    conditional_defines.add("v3");
                elif s =~ "--test-run" then
                    flags.is_test_run = true;
                elif s =~ "-N" \/ s =~ "--dotnet" then
                    // do nothing - .NET is the only supported option
                elif s =~ "-o" \/ s =~ "--output" then
                    output_file_name_generator.force(get_next_argument(args_iterator));
                elif s =~ "-p" \/ s =~ "--library-prefix" then
                    paths.library_prefix = get_next_argument(args_iterator);
                elif s =~ "-l" \/ s =~ "--library" then
                    library_locations.add(get_next_argument(args_iterator));
                elif s =~ "-a" \/ s =~ "--assembly" then
                    assemblies.add(get_next_argument(args_iterator));
                elif s =~ "--assembly-info-string" then
                    let info_arg = get_next_argument(args_iterator);
                    let info = info_arg.split(['=']);

                    if info.count == 2 then
                        assembly_info.add_attribute(info[0].trim(), info[1].trim());
                    else
                        Std.error.write_line("warning: ignoring garbled assembly info: {info_arg}");                        
                    fi
                elif s =~ "--version" then
                    let version_string = get_next_argument(args_iterator);
                    
                    let version_string_first_part = version_string.split(['-', '+']) | .first();

                    let version: System.Version;

                    try

                        if 
                            version_string_first_part.has_value
                        then
                            let version_parts = version_string_first_part.value.split(['.']);

                            if version_parts.count > 4 then
                                throw new Exception("invalid version number");
                            fi

                            let b = new System.Text.StringBuilder();
                            let seen_any = false;

                            for p in version_parts do
                                if seen_any then
                                    b.append(":");
                                fi

                                b.append(int.parse(p));

                                seen_any = true;
                            od

                            for i in version_parts.count..4 do
                                b.append(":0");
                            od                 
                            
                            module_version = b.to_string();
                        else
                            throw new Exception("invalid version number");
                        fi

                    catch ex: Exception
                        Std.error.write_line("warning: ignoring garbled version number: {version_string}");
                    yrt
                elif s =~ "--ilasm-packages" then
                    let package_paths = get_next_argument(args_iterator);

                    paths.add_ilasm_packages(package_paths.split([';']));
                elif s =~ "--exclude-runtime-symbols" then
                    flags.exclude_runtime_symbols = true;
                elif s =~ "--keep-out-il" then
                    flags.want_keep_out_il = true;
                elif s =~ "--emit-boilerplate-il" then
                    emit_boilerplate_il_path = get_next_argument(args_iterator);
                elif s =~ "--show-analysis-stats" then
                    flags.want_analysis_stats = true;
                elif s.starts_with('-') then
                    Std.error.write_line("warning: ignoring unknown option: {s}");
                elif SOURCE_FILE_CATEGORIZER.is_ghul(s) then
                    output_file_name_generator.seen_file(s);
                    ghul_source_files.add(s);
                else
                    Std.error.write_line("warning: ignoring unrecognized argument: {s}");
                fi
            od

            if emit_boilerplate_il_path? then
                if !File.exists(emit_boilerplate_il_path) then
                    Std.error.write_line("warning: library boilerplate IL file not found: {emit_boilerplate_il_path}");
                else
                    emit_boilerplate_il = File.read_all_text(emit_boilerplate_il_path);
                fi
            fi

            flags.mark_valid();

            if !flags.want_stubs then
                container.stable_symbols.enable();
            fi

            if flags.is_test_run then
                container.want_human_readable_logger(Std.error);
            fi
            
            container.conditional_compilation.set_is_enabled(conditional_defines);
        si

        start_build() is
            queue_library_locations();
            queue_source_files();

            if flags.want_assembler then
                container.value_boxer.want_boxing = true;
                container.ir_context.enter_file("out.il", true);

                let module_name = Path.get_file_name_without_extension(output_file_name_generator.result);

                container.boilerplate_generator.gen(
                    "header-top", 
                    [module_name, module_version]
                );

                assembly_info.gen();

                container.boilerplate_generator.gen(
                    "header-tail", 
                    [module_name]
                );
            fi
        si

        finish_build() -> int is
            container.logger.write_all_diagnostics(container.logger_writer, container.logger_formatter);

            if container.logger.any_errors /\ !flags.ignore_errors then
                return 1;
            elif container.logger.is_poisoned then
                @IF.release()
                container.logger.write_poison_messages();

                Std.error.write_line("internal error");
                return 2;
            fi
            
            if flags.want_assembler then
                return finish_build_dotnet();
            else
                return 0;
            fi
        si

        finish_build_dotnet() -> int is
            let ir_context = container.ir_context;
            let output_file = output_file_name_generator.result;

            if emit_boilerplate_il? then
                container.ir_context.write(emit_boilerplate_il);
            fi

            if output_file.last_index_of('.') < 0 then
                output_file = output_file + ".exe";
            fi
            
            ir_context.leave_file("out.il");

            if !flags.want_executable then
                return 0;
            fi

            let ilasm_path = paths.ilasm_path;

            if !File.exists(ilasm_path) then
                Std.error.write_line("error: ilasm not found at '{ilasm_path}'");
                return 0;
            fi

            let ilasm_args = 
                "-quiet out.il -output={output_file}";

            if flags.want_debug then
                ilasm_args = "{ilasm_args} -debug -pdbfmt=portable";
            fi
            
            let ilasm = System.Diagnostics.Process.start(ilasm_path, ilasm_args);

            ilasm.wait_for_exit();

            let result = ilasm.exit_code;

            if result != 0 then
                Std.error.write_line("error: ilasm failed");
    
                return result;
            fi

            let runtime_config_file =
                if output_file.last_index_of('.') == output_file.length - 4 then
                    output_file.substring(0, output_file.last_index_of('.')) + ".runtimeconfig.json";
                else
                    output_file + ".runtimeconfig.json";
                fi;

            let runtime_config = File.create_text(runtime_config_file);
            runtime_config.write("{{\"runtimeOptions\":{{\"tfm\":\"netcoreapp8.0\",\"framework\":{{\"name\":\"Microsoft.NETCore.App\",\"version\":\"8.0.0\"}} }} }}");
            runtime_config.close();

            if !RuntimeInformation.is_o_s_platform(OSPlatform.windows) then
                let chmod = System.Diagnostics.Process.start("/bin/chmod", "+x {output_file}");

                chmod.wait_for_exit();

                result = chmod.exit_code;

                if result != 0 then
                    Std.error.write_line("compiled successfully but failed to set executable bit on resulting binary: {output_file}");
                fi
            fi

            @IF.release()
            if !flags.want_keep_out_il then
                File.delete("out.il");
            fi

            return result;
        si
        
        queue_library_locations() is            
            let locations_to_queue =
                if library_locations.count > 0 then
                    let explicit_locations = new LIST[string](library_locations.count);
                    
                    for location in library_locations do
                        explicit_locations.add(paths.get_library_location(location));
                    od

                    explicit_locations;
                else
                    paths.get_library_locations(standard_ghul_library_locations);
                fi;
            
            for directory in locations_to_queue do
                queue_library_location(directory);
            od
        si

        queue_library_location(directory: string) is
            if !directory.ends_with('/') then
                directory = directory + '/';
            fi

            let files: Iterable[string] = Directory.get_files(directory);
            
            for file in files do
                if file.ends_with(".ghul") then
                    queue_source_file(file, true);
                fi
            od
        si

        queue_source_files() is
            for file in ghul_source_files do
                if file.ends_with(".ghul") then
                    queue_source_file(file, false);                    
                fi
            od            
        si
        
        queue_source_file(path: string, is_internal_file: bool) is
            if flags.want_analyse then
                analyse_files.add(path);
                
                return;
            fi

            let use reader = File.open_text(path);

            compiler.parse_and_queue(path, reader, flags.copy(), is_internal_file);
        si

        analyse() is
            analyse_files = new LIST[string]();

            queue_library_locations();

            let analyser = new ANALYSER(
                compiler,
                container.timers,
                container.symbol_table,
                container.symbol_use_locations,
                container.symbol_definition_locations,
                container.completer,
                container.signature_help,
                Std.`in,
                Std.out,
                analyse_files,
                flags,
                container.watchdog
            );

            Std.error.write_line("ghÅ«l compiler {compiler_version}: serving analysis requests");

            analyser.run();
        si
    si
si

