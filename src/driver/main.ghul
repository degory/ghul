namespace Driver is
    use System;
    
    use IoC;
    use Logging;

    class Main is
        paths: Driver.PATH_CONFIG;
        project_name: String;
        container: IoC.CONTAINER;
        compiler: COMPILER;
        flags: BUILD_FLAGS;
        output_file_name_generator: OUTPUT_FILE_NAME_GENERATOR;
        library_locations: Collections.LIST[String];
        ghul_source_files: Collections.LIST[String];
        legacy_source_files: Collections.LIST[String];
        legacy_compiler_flags: LEGACY_COMPILER_FLAGS;

        standard_ghul_library_locations: Collections.Iterable[String] => new Collections.LIST[String](["dotnet/ghul", "dotnet/stubs"]);
        standard_legacy_library_locations: Collections.Iterable[String] => new Collections.LIST[String](["legacy/ghul"]);

        @IF.dotnet()
        entry(arguments: String[]) static is
            @IL.entrypoint()

            let full_arguments = new Collections.LIST[String](arguments.count + 1);

            full_arguments.add("ghul.exe");

            full_arguments.add_range(arguments);

            let instance = new Main(new Collections.LIST[String](full_arguments));
        si
        
        init(arguments: Collections.LIST[String]) is
            let result = 1;

            try
                if arguments.count <= 1 then
                    @IF.dotnet()
                    System.Console.write_line("gh" + cast char(363) + "l " + Source.BUILD.number);

                    System.Console.output.flush();

                    Shim.EXIT.exit(0);
                fi

                container = IoC.CONTAINER.instance;

                paths = container.path_config;
                flags = new BUILD_FLAGS();
                compiler = new COMPILER();
                output_file_name_generator = new OUTPUT_FILE_NAME_GENERATOR();

                parse_flags(arguments);

                if flags.want_analyse then
                    if flags.want_legacy then
                        container.conditional_compilation.set_analysis_want_legacy(true);
                    else
                        container.conditional_compilation.set_analysis_want_legacy(false);                    
                    fi

                    analyse();

                    Shim.EXIT.exit(0);
                fi

                start_build();

                compiler.build();

                result = finish_build();
            catch e: Exception
                System.Console.error.write_line(e);
                System.Console.error.flush();

                result = 1;
            yrt

            if result == 0 then
                System.Console.error.write_line("*** succeeded ***");
            else
                System.Console.error.write_line("!!! failed !!!");
            fi
            
            // FIXME: the runtime should be doing this - wrapping the L stderr + stdout IO.Writers should not prevent them getting flushed:
            System.Console.error.flush();
            System.Console.output.flush();

            Shim.EXIT.exit(result);
        si

        parse_flags(args: Collections.Iterable[String]) is
            legacy_compiler_flags = new LEGACY_COMPILER_FLAGS();
            legacy_source_files = new Collections.LIST[String]();
            ghul_source_files = new Collections.LIST[String]();
            library_locations = new Collections.LIST[String]();

            let args_iterator = args.iterator;

            args_iterator.move_next();

            flags.want_dotnet = true;
            flags.want_compile_expressions = true;
            flags.want_assembler = true;
            flags.want_executable = true;

            let want_type_check = false;
            let do_not_want_type_check = false;

            let get_next_argument = (a: Collections.Iterator[String]) -> String is
                a.move_next();
                return a.current.trim();
            si;

            for s in args_iterator do
                if s =~ "-A" || s =~ "--analyse" then
                    flags.want_analyse = true;
                    flags.want_assembler = false;
                    flags.want_executable = false;
                elif s =~ "-L" || s =~ "--legacy" then
                    flags.want_legacy = true;
                    flags.want_dotnet = false;
                    // flags.want_executable = true;
                elif s =~ "-P" || s =~ "--legacy-project" then
                    project_name = get_next_argument(args_iterator);
                elif s =~ "-G" || s =~ "--type-check" then
                    flags.want_assembler = false;
                    flags.want_executable = false;
                elif s =~ "-g" || s =~ "--no-type-check" then
                    flags.want_compile_expressions = false;
                elif s =~ "-E" || s =~ "--ignore-errors" then
                    flags.ignore_errors = true;
                elif s =~ "-S" || s =~ "--assembler" then
                    flags.want_executable = false;
                elif s =~ "-D" || s =~ "--use-docker" then
                    flags.want_docker = true;
                elif s =~ "--debug" then
                    flags.want_debug = true;
                elif s =~ "-N" || s =~ "--dotnet" then
                    flags.want_legacy = false;
                    flags.want_dotnet = true;
                elif s =~ "-o" || s =~ "--output" then
                    output_file_name_generator.force(get_next_argument(args_iterator));
                elif s =~ "-p" || s =~ "--library-prefix" then
                    paths.library_prefix = get_next_argument(args_iterator);
                elif s =~ "-l" || s =~ "--library" then
                    library_locations.add(get_next_argument(args_iterator));
                elif Shim.STR.starts_with(s, '-') then
                    System.Console.error.write_line("warning: ignoring unknown option: " + s);
                elif SOURCE_FILE_CATEGORIZER.is_legacy(s) then
                    output_file_name_generator.seen_file(s);
                    legacy_source_files.add(s);
                elif SOURCE_FILE_CATEGORIZER.is_ghul(s) then
                    output_file_name_generator.seen_file(s);
                    ghul_source_files.add(s);
                fi
            od
        si

        start_build() is
            queue_library_locations();

            queue_source_files();

            if flags.want_dotnet && flags.want_assembler then
                container.value_boxer.want_boxing = true;
                container.ir_context.enter_file("out.il", true);

                container.boilerplate_generator.gen("header");
            fi
        si

        finish_build() -> int is
            if container.logger.any_errors && !flags.ignore_errors then
                return 1;
            fi

            if flags.want_dotnet && flags.want_assembler then
                return finish_build_dotnet();
            elif flags.want_legacy && flags.want_executable then
                return finish_build_legacy();
            else
                return 0;
            fi
        si

        finish_build_legacy() -> int is
            throw new System.NotImplementedException("legacy build");
        si

        finish_build_dotnet() -> int is
            let ir_context = container.ir_context;
            let output_file = output_file_name_generator.result;

            if Shim.STR.last_index_of(output_file, '.') < 0 then
                output_file = output_file + ".exe";
            fi            

            ir_context.leave_file("out.il");

            if !flags.want_executable then
                return 0;
            fi
            
            let ilasm_args = 
                "-debug -quiet out.il -output:" + output_file;
            
            let ilasm = System.Diagnostics.Process.start("/usr/bin/ilasm", ilasm_args);

            ilasm.wait_for_exit();

            let result = ilasm.exit_code;

            if result != 0 then
                System.Console.error.write_line("error: ilasm failed");
    
                return result;
            fi

            let runtime_config_file: String;

            if Shim.STR.last_index_of(output_file, '.') == Shim.STR.length(output_file) - 4 then
                runtime_config_file = output_file.substring(0, Shim.STR.last_index_of(output_file, '.')) + ".runtimeconfig.json";
            else
                runtime_config_file = output_file + ".runtimeconfig.json";
            fi
            
            let runtime_config = System.IO2.File.create_text(runtime_config_file);
            runtime_config.write("{\"runtimeOptions\":{\"tfm\":\"netcoreapp3.1\",\"framework\":{\"name\":\"Microsoft.NETCore.App\",\"version\":\"3.1.0\"}}}");
            runtime_config.close();

            let chmod = System.Diagnostics.Process.start("/bin/chmod", "+x " + output_file);

            chmod.wait_for_exit();

            result = chmod.exit_code;

            if result != 0 then
                System.Console.error.write_line("compiled successfully but failed to set executable bit on resulting binary: " + output_file);
            fi

            return result;
        si
        
        queue_library_locations() is
            let cuttoff = 0;
            
            let locations_to_queue: Collections.Iterable[String];

            if library_locations.count > 0 then
                let explicit_locations = new Collections.LIST[String](library_locations.count);
                
                for location in library_locations do
                    explicit_locations.add(get_library_location(location));
                od

                locations_to_queue = explicit_locations;

            elif flags.want_legacy then
                locations_to_queue = get_library_locations(standard_legacy_library_locations);
            else
                locations_to_queue = get_library_locations(standard_ghul_library_locations);
            fi

            // @IF.debug() 
            locations_to_queue = new Shim.SORT[String](locations_to_queue);
            
            for directory in locations_to_queue do
                queue_library_location(directory);
            od
        si

        queue_library_location(directory: String) is
            if !Shim.STR.ends_with(directory, '/') then
                directory = directory + '/';
            fi

            let files = new IO.DIRECTORY(directory).files;
            
            // @IF.debug() 
            files = new Shim.SORT[String](files);

            for file in files do
                if Shim.STR.ends_with(file, ".ghul") then
                    queue_source_file(file);
                fi
            od
        si

        queue_source_files() is
            // @IF.debug() 
            // ghul_source_files.sort();

            for file in ghul_source_files do
                if Shim.STR.ends_with(file, ".ghul") then
                    queue_source_file(file);                    
                fi
            od            
        si
        
        queue_source_file(path: String) is
            let reader = Shim.FILE.open_read(path);

            compiler.parse_and_queue(path, reader, flags.copy());
        si

        get_library_locations(directories: Collections.Iterable[String]) -> Collections.Iterable[String] is
            let result = new Collections.LIST[String]();
            
            for directory in directories do
                result.add(get_library_location(directory));
            od

            return result;            
        si

        get_library_location(directory: System.String) -> System.String is
            if !Shim.STR.starts_with(directory, '/') then
                directory = paths.library_prefix + directory;
            fi

            if !Shim.STR.ends_with(directory, '/') then
                directory = directory + '/';
            fi

            return directory;
        si        

        analyse() is
            let analyser = new ANALYSER(
                compiler,
                container.symbol_table,
                container.symbol_use_locations,
                container.symbol_definition_locations,
                container.completer,
                container.signature_help,
                System.Console.input,
                System.Console.output,
                flags
            );

            System.Console.error.write_line("ghūl: build " + Source.BUILD.number + " await analysis requests...");

            analyser.run();
        si
    si
si

