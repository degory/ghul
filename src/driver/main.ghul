namespace Driver is
    use System;
    use Generic;

    use IoC;
    use Logging;

    class Main is
        project_name: String;
        container: IoC.CONTAINER;
        compiler: COMPILER;
        flags: BUILD_FLAGS;
        output_file_name_generator: OUTPUT_FILE_NAME_GENERATOR;
        legacy_source_files: List[String];     
        legacy_compiler_flags: LEGACY_COMPILER_FLAGS;   

        init() is
            let result = 1;

            try
                if Arguments.ProgramArguments.Length == 1 then
                    IO.Std.out.println("ghūl " + Source.BUILD.number);
                    IO.Std.out.flush();
                    native.exit(0);
                fi

                container = IoC.CONTAINER.instance;

                flags = new BUILD_FLAGS();
                compiler = new COMPILER();
                output_file_name_generator = new OUTPUT_FILE_NAME_GENERATOR();

                if Arguments.ProgramArguments.Length >= 2 && Arguments.ProgramArguments[1] =~ "-A" then
                    analyse();

                    native.exit(0);
                fi

                IO.Std.err.FlushOnPrintln = true;

                parse_flags();

                start_build();

                compiler.build();

                IO.Std.err.flush();

                result = finish_build();
            catch e: Exception                
                IO.Std.err.println(e);
                IO.Std.err.flush();

                result = 1;
            yrt

            native.exit(result);
        si

        parse_flags() is
            legacy_compiler_flags = new LEGACY_COMPILER_FLAGS();
            legacy_source_files = new Vector[String]();

            let args = Arguments.ProgramArguments.Iterator;
            args.nextElement();

            for s in args do
                if s =~ "-L" then
                    flags.want_legacy = true;
                    flags.want_dotnet = false;
                    flags.want_infer_types = false;
                elif s =~ "-P" then
                    project_name = args.nextElement().trim();
                elif s =~ "-G" then
                    flags.want_legacy = false;
                    flags.want_infer_types = true;
                elif s =~ "-E" then
                    flags.ignore_errors = true;
                elif s =~ "-X" then
                    flags.want_cil = true;
                elif s =~ "-D" then
                    flags.want_docker = true;
                elif s =~ "-N" then
                    flags.want_dotnet = true;
                    flags.want_cil = true;
                    flags.want_legacy = false;
                elif s =~ "-p" then
                    flags.enabled_passes = args.nextElement().split(',');
                elif s =~ "-o" then
                    output_file_name_generator.force(args.nextElement().trim());
                elif SOURCE_FILE_CATEGORIZER.is_legacy(s) then
                    output_file_name_generator.seen_file(s);
                    legacy_source_files.add(s);
                elif SOURCE_FILE_CATEGORIZER.is_ghul(s) then
                    output_file_name_generator.seen_file(s);
                    compiler.parse_and_queue(s, IO.File.openRead(s), flags.copy());
                fi
            od        
        si

        start_build() is
            if flags.want_dotnet then
                container.ir_context.enter_file("out.il");
            fi
        si

        finish_build() -> int is
            if container.logger.any_errors && !flags.ignore_errors then
                return 1;
            fi

            if flags.want_legacy then
                return finish_build_legacy();
            elif flags.want_dotnet then
                return finish_build_dotnet();
            else
                return 0;
            fi
        si

        finish_build_legacy() -> int is
            if  (compiler.generated_source_files.Length > 0 || legacy_source_files.Length > 0) then
                var to_run: String;

                let to_build = new Vector[String]();

                var lcache_name: String;

                if project_name? then
                    lcache_name = "lcache-" + project_name;
                else
                    lcache_name = "lcache";
                fi

                if flags.want_docker then
                    let uid = cast int(native.getuid());
                    let gid = cast int(native.getgid());

                    lcache_name = lcache_name + "-" + uid;

                    let create_volume_process = new Util.Process();

                    let lcache_result =
                        create_volume_process.run(
                            "/usr/bin/docker",
                            ["docker", "volume", "create", lcache_name],
                            Arguments.ProgramEnvironment,
                            true);

                    if lcache_result != 0 then
                        throw new Exception("failed to create lcache Docker volume '" + lcache_name + "'");
                    fi

                    to_run = "/usr/bin/docker";
                    to_build.add(to_run);

                    to_build.add([
                        "run",
                        "--rm",
                        "-t",
                        "-u",
                        "" + uid + ":" + gid,
                        "-v",
                        lcache_name + ":/tmp/lcache",
                        "-v",
                        IO.File.WorkingDirectory + ":/home/dev/source",
                        "-w",
                        "/home/dev/source",
                        "ghul/compiler:stable"
                    ]);
                else
                    to_run = "/usr/bin/lc";
                fi

                to_build.add("/usr/bin/lc");

                if !flags.want_docker && project_name? then
                    let mkdir_process = new Util.Process();

                    let lcache_result = mkdir_process.run("/bin/mkdir", ["-p", "/tmp/" + lcache_name], Arguments.ProgramEnvironment, true);

                    if lcache_result != 0 then
                        throw new Exception("failed to create lcache directory '/tmp/" + lcache_name + "'");
                    fi

                    to_build.add(["-P", project_name]);
                fi

                to_build.add(compiler.generated_source_files);

                to_build.add(legacy_source_files);

                to_build.add(legacy_compiler_flags.flags);

                to_build.add("-o");

                to_build.add(output_file_name_generator.result);

                let process = new Util.Process();

                let result = process.run(to_run, to_build.Array, Arguments.ProgramEnvironment, true);

                if result == 0 then
                    for f in compiler.generated_source_files do
                        if f.endsWith(".lo") then
                            IO.File.deleteQuiet(f);
                        fi
                    od
                fi

                return result;
            else
                return 0;
            fi
        si
        
        finish_build_dotnet() -> int is
            let ir_context = container.ir_context;
            let output_file = output_file_name_generator.result;

            ir_context.leave_file("out.il");

            var to_run: String;

            let to_build = new Vector[String]();

            if flags.want_docker then
                let uid = cast int(native.getuid());
                let gid = cast int(native.getgid());

                let create_volume_process = new Util.Process();

                to_run = "/usr/bin/docker";
                to_build.add(to_run);

                to_build.add([
                    "run",
                    "--rm",
                    "-t",
                    "-u",
                    "" + uid + ":" + gid,
                    "-v",
                    IO.File.WorkingDirectory + ":/home/dev/source",
                    "-w",
                    "/home/dev/source",
                    "ghul/mono:stable"
                ]);
            else
                to_run = "/usr/bin/ilasm";
            fi

            to_build.add("ilasm");
            to_build.add("-quiet");
            to_build.add("/usr/lib/ghul/header.il");
            to_build.add("out.il");
            to_build.add("-output:" + output_file);

            let ilasm = new Util.Process();
            let result = ilasm.run(to_run, to_build.Array, Arguments.ProgramEnvironment, true);

            if result != 0 then
                return result;
            fi

            let chmod = new Util.Process();
            result = chmod.run("/usr/bin/chmod", ["chmod", "+x", output_file]);

            if result != 0 then
                IO.Std.err.println("compiled successfully but failed to set executable bit on resulting binary: " + output_file);
            fi

            return result;
        si
        
        analyse() is
            let analyser = new ANALYSER(
                compiler,
                container.symbol_table,
                container.symbol_use_locations,
                container.symbol_definition_locations,
                container.completer,
                container.signature_help,
                IO.Std.input,
                IO.Std.out,
                flags
            );

            IO.Std.err.println("ghūl: build " + Source.BUILD.number + " await analysis requests...");

            analyser.run();
        si
    si
si

