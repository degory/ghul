namespace Driver is
    use IO.Std;

    use Collections.Iterable;
    use Collections.LIST;

    class PATH_CONFIG is
        _default_library_prefix: string;
        _library_prefix: string;

        install_folder: string;

        library_prefix: string public is
            if _library_prefix? then
                return _library_prefix;
            else
                return _default_library_prefix;    
            fi
        si,
        = value is
            _library_prefix = value;

            if library_prefix? && !library_prefix.ends_with('/') then
                library_prefix = library_prefix + '/';
            fi
        si

        ilasm_path: string;

        init() is
            super.init();

            let executing_assembly = System.Reflection.Assembly.get_executing_assembly();

            let assembly_path = IO.Path.get_full_path(executing_assembly.location);

            install_folder = IO.Path.get_directory_name(assembly_path);

            if !install_folder.ends_with('/') then
                install_folder = install_folder + '/';
            fi

            _default_library_prefix = install_folder + "lib/";
            ilasm_path = install_folder + "runtimes/linux-x64/native/ilasm";
        si

        get_library_locations(directories: Iterable[string]) -> Iterable[string] is
            let result = new LIST[string]();
            
            for directory in directories do
                result.add(get_library_location(directory));
            od

            return result;            
        si

        get_library_location(directory: string) -> string is
            if !directory.starts_with('/') then
                directory = library_prefix + directory;
            fi

            if !directory.ends_with('/') then
                directory = directory + '/';
            fi

            return directory;
        si        
    si    
si
