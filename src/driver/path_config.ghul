namespace Driver is
    use System.Runtime.InteropServices.RuntimeInformation;
    use System.Runtime.InteropServices.OSPlatform;
    use System.Runtime.InteropServices.Architecture;

    use IO.Std;

    use Collections.Iterable;
    use Collections.LIST;

    class PATH_CONFIG is
        _default_library_prefix: string;
        _library_prefix: string;

        _ilasm_package_paths: LIST[string];
        install_folder: string;

        library_prefix: string public is
            if _library_prefix? then
                return _library_prefix;
            else
                return _default_library_prefix;    
            fi
        si,
        = value is
            _library_prefix = value;

            if library_prefix? /\ !library_prefix.ends_with('/') then
                library_prefix = library_prefix + '/';
            fi
        si

        _ilasm_path: string;        

        ilasm_path: string is
            if _ilasm_path? then
                return _ilasm_path;
            fi
            
            let os: string;
            let file_extension: string = "";
            if RuntimeInformation.is_o_s_platform(OSPlatform.linux) then
                os = "linux";
            elif RuntimeInformation.is_o_s_platform(OSPlatform.osx) then
                os = "osx";
            elif RuntimeInformation.is_o_s_platform(OSPlatform.windows) then
                os = "win";
                file_extension = ".exe";
            else
                throw new System.Exception("Unsupported host {RuntimeInformation.osdescription}");
            fi
            
            let architecture = 
                if RuntimeInformation.osarchitecture == Architecture.ARM then
                    "arm";
                elif RuntimeInformation.osarchitecture == Architecture.ARM64 then
                    "arm64";
                elif RuntimeInformation.osarchitecture == Architecture.X86 then
                    "x86";
                elif RuntimeInformation.osarchitecture == Architecture.X64 then
                    "x64";
                else
                    throw new System.Exception("Unsupported host {RuntimeInformation.osdescription}");
                fi;

            // FIXME: we have a method for this, why are we not calling it?
            _ilasm_path = "{install_folder}runtimes/{os}-{architecture}/native/ilasm{file_extension}";
            
            if !IO.File.exists(_ilasm_path) then
                _ilasm_path = _try_find_ilasm_package(os, architecture, file_extension);
            fi

            if !_ilasm_path? \/ !IO.File.exists(_ilasm_path) then
                Std.error.write_line(
                    "error: ILAsm not found. Try adding the ILAsm package for your host to your .ghulproj: <PackageReference " + 
                    "Include=\"runtime.{os}-{architecture}.Microsoft.NETCore.ILAsm\" Version=\"8.0.0\" GeneratePathProperty=\"true\" />");

                System.Environment.exit(1);
            fi

            return _ilasm_path;
        si

        init() is
            super.init();

            let executing_assembly = System.Reflection.Assembly.get_executing_assembly();

            let assembly_path = IO.Path.get_full_path(executing_assembly.location);

            install_folder = IO.Path.get_directory_name(assembly_path);

            if !install_folder.ends_with('/') then
                install_folder = install_folder + '/';
            fi

            _default_library_prefix = install_folder + "lib/";

            _ilasm_package_paths = new LIST[string]();
        si

        add_ilasm_packages(package_paths: Iterable[string]) is
            _ilasm_path = null;

            for path in package_paths do
                _ilasm_package_paths.add(path);
            od            
        si

        get_library_locations(directories: Iterable[string]) -> Iterable[string] is
            let result = new LIST[string]();
            
            for directory in directories do
                result.add(get_library_location(directory));
            od

            return result;            
        si

        get_library_location(directory: string) -> string is
            if !directory.starts_with('/') then
                directory = library_prefix + directory;
            fi

            if !directory.ends_with('/') then
                directory = directory + '/';
            fi

            return directory;
        si
        
        _try_find_ilasm_package(os: string, architecture: string, file_extension: string) -> string is
            let match = _ilasm_package_paths | .find(p => p.contains("{os}-{architecture}"));

            if match.has_value then
                // FIXME this works on Windows despite wrong path separator but should use path join
                return "{match.value}/runtimes/{os}-{architecture}/native/ilasm{file_extension}";
            fi
        si
    si    
si
