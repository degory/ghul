namespace IR is
    use Generic;
    use System;

    use Semantic.Graph.Value.Call;

    class FILE is
        path: String;
        writer: IO.Writer;
        want_comments: bool;

        init(
            path: String,
            writer: IO.Writer,
            want_comments: bool
        ) is
            super.init();

            self.path = path;
            self.writer = writer;
            self.want_comments = want_comments;
        si

        close() is
            writer.close();
        si

        println(indent: int, value: Object) is
            if !writer? then
                return;
            elif want_comments then
                print_indent(indent);
                writer.println(value);
            else
                writer.println(value);
            fi
        si

        println(indent: int, value: Object, comment: Object) is
            if !writer? then
                return;
            elif want_comments then
                print_indent(indent);
                writer.println("" + value + "        // " + comment);
            else
                writer.println(value);
            fi
        si

        print_indent(indent: int) is
            for i in 0..indent do
                writer.print("  ");
            od            
        si
                
    si

    class CONTEXT is
        _indent: int;

        _seen: Set[String];
        _files: Vector[FILE];

        init() is
            _seen = new Set[String]();
            _files = new Vector[FILE]();
            _files.add(new FILE("(stderr)", IO.Std.out, true));
        si

        current_file: FILE => _files.Top;

        println(value: Object) is
            current_file.println(_indent, value);
        si

        println(value: Object, comment: Object) is
            current_file.println(_indent, value, comment);
        si

        indent() is
            _indent = _indent + 1;
        si

        outdent() is
            _indent = _indent - 1;
        si

        enter_stub() is
            _files.add(new FILE("stub", null, false));
        si

        leave_stub() is
            _files.pop();
        si

        enter_file(path: String) is
            let writer: IO.Writer;

            if _seen.contains(path) then
                writer = IO.File.openAppend(path);
            else
                writer = IO.File.openCreate(path);
                _seen.add(path);
            fi
            
            _files.add(new FILE(path, writer, false));
        si

        leave_file(path: String) is
            while _files.Length > 0 do                
                if current_file.path =~ path then
                    current_file.close();
                    _files.pop();
                    return;
                else
                    IO.Std.err.println("oops: IL output context stack corrupt");
                fi

                _files.pop();
            od
            IO.Std.err.println("oops: IL output context stack corrupt");
        si        
    si
si
