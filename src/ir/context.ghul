namespace IR is
    use System.NotImplementedException;
    use IO.File;

    use Values.Call;

    class AssemblyOutput is
        want_comments: bool;
        
        init(want_comments: bool) is
            self.want_comments = want_comments;
        si

        write(value: object) is
            throw new NotImplementedException("assembly output must implement write_line");            
        si
        
        write_line(value: object) is
            write(value);
            write("\n");
        si
        
        write_line(indent: int, value: object) is
            if want_comments then
                write_indent(indent);
                write_line(value);
            else
                write_line(value);
            fi
        si

        write_line(indent: int, value: object, comment: object) is
            if want_comments then
                write_indent(indent);
                write_line("" + value + "        // " + comment);
            else
                write_line(value);
            fi
        si

        write_comment_line(indent: int, comment: object) is
            if want_comments then
                write_indent(indent);
                write_line("// " + comment);
            fi
        si

        write_indent(indent: int) is
            for i in 0..indent do
                write("  ");
            od            
        si

        close() is
            
        si
    si

    class FILE_ASSEMBLER_OUTPUT: AssemblyOutput is
        path: string;
        writer: IO.TextWriter;

        init(
            path: string,
            writer: IO.TextWriter,
            want_comments: bool
        ) is
            super.init(want_comments);

            self.path = path;
            self.writer = writer;
        si

        write(value: object) is
            writer.write(value);
        si

        close() is
            writer.close();
        si
    si

    class STUB_ASSEMBLER_OUTPUT: AssemblyOutput is
        init() is
            super.init(false);
        si

        write(value: object) is
            // do nothing
        si
    si

    class BUFFER_ASSEMBLER_OUTPUT: AssemblyOutput is
        buffer: System.Text.StringBuilder;

        init(want_comments: bool) is
            super.init(want_comments);

            buffer = new System.Text.StringBuilder();
        si

        write(value: object) is
            buffer.append(value);
        si
    si
    
    class CONTEXT is
        _logger: Logging.Logger;
        _indent: int;

        _seen: Collections.SET[string];
        _outputs: Collections.STACK[AssemblyOutput];

        throw_on_fixme: bool public;

        init(logger: Logging.Logger) is
            _logger = logger;
            _seen = new Collections.SET[string]();
            _outputs = new Collections.STACK[AssemblyOutput]();
            _outputs.push(new STUB_ASSEMBLER_OUTPUT());
        si

        current_output: AssemblyOutput => _outputs.peek();

        fixme(value: object) is
            if throw_on_fixme then
                throw new System.NotImplementedException("FIXME: " + value);
            else
                write_line("// FIXME: " + value);
            fi            
        si

        write(value: string) is
            current_output.write(value);
        si
            
        write_line(value: object) is
            current_output.write_line(_indent, value);
        si

        write_line(value: object, comment: object) is            
            current_output.write_line(_indent, value, comment);
        si

        write_comment_line(comment: object) is
            current_output.write_comment_line(_indent, comment);
        si
        
        indent() is
            _indent = _indent + 1;
        si

        outdent() is
            _indent = _indent - 1;
        si

        enter_stub() is
            _outputs.push(new STUB_ASSEMBLER_OUTPUT());
        si

        leave_stub() is
            assert
                _outputs.count > 0 &&
                isa STUB_ASSEMBLER_OUTPUT(current_output)
            else
                "IL output context stack corrupt";

            _outputs.pop();
        si

        enter_file(path: string, want_comments: bool) is
            let writer: IO.TextWriter;

            if _seen.contains(path) then
                writer = File.append_text(path);
            else
                writer = File.create_text(path);
                _seen.add(path);
            fi
            
            _outputs.push(new FILE_ASSEMBLER_OUTPUT(path, writer, want_comments));
        si

        leave_file(path: string) is
            assert
                _outputs.count > 0 &&
                isa FILE_ASSEMBLER_OUTPUT(current_output) &&
                cast FILE_ASSEMBLER_OUTPUT(current_output).path =~ path
            else
                "IL output context stack corrupt";
            
            current_output.close();
            _outputs.pop();
        si
        
        enter_buffer(want_comments: bool) is
            _outputs.push(new BUFFER_ASSEMBLER_OUTPUT(want_comments));
        si

        leave_buffer() -> string is
            assert
                _outputs.count > 0 &&
                isa BUFFER_ASSEMBLER_OUTPUT(current_output)
            else
                "IL output context stack corrupt";

            let result = cast BUFFER_ASSEMBLER_OUTPUT(current_output).buffer;

            _outputs.pop();

            return result.to_string();
        si        
    si
si
