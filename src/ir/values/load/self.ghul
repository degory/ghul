namespace IR.Values.Load is
    use TypeTyped = Semantic.Types.Typed;
    use Semantic.Types.Type;
    use SymbolBase = Semantic.Symbols.Symbol;

    class SELF: Value, TypeTyped is
        `self: SymbolBase;
        has_type: bool => type?;
        type: Type;

        is_self: bool => true;
        has_address: bool => true;
        is_lightweight_pure: bool => true;

        init(`self: SymbolBase) is
            init(`self, null);
        si
        
        init(`self: SymbolBase, type: Type) is
            super.init();
            assert `self?;

            self.`self = `self;

            if type? then
                self.type = type;
            elif isa TypeTyped(`self) then
                self.type = cast TypeTyped(`self).type;
            fi
        si

        gen(context: IR.CONTEXT) is
            context.write_line("ldarg.0");
        si

        gen_address(context: IR.CONTEXT) is
            context.write_line("ldarg.0");
        si

        to_string() -> string =>
            "self:[{type}]";
    si
si
