namespace IR.Values.Load is
    use IO.Std;

    use System.NotImplementedException;
    use System.Text.StringBuilder;

    use TypeTyped = Semantic.Types.Typed;
    use Semantic.Types.Type;
    use SymbolBase = Semantic.Symbols.Symbol;

    class CLOSURE: SYMBOL, TypeTyped is
        frame: Value;
        func_type: Type;

        has_address: bool => false;
        is_consumable: bool => true;

        init(symbol: Semantic.Symbols.Closure, frame: Value, func_type: Type) is
            super.init(null, symbol);
            
            assert frame?;
            assert func_type?;
            
            self.frame = frame;
            self.func_type = func_type;
        si

        gen(context: IR.CONTEXT) is
            frame.gen(context);
            context.write_line("ldftn instance {symbol.get_il_reference()}");
            context.write_line("newobj instance void {func_type.get_il_type()}::'.ctor'(object, native int)");
        si

        to_string() -> string =>
            "closure:[{type}]({frame},\"{symbol.name}\")";
    si
si
