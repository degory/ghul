namespace IR.Values.Load is
    use TypeTyped = Semantic.Types.Typed;
    use Semantic.Types.Type;
    use SymbolBase = Semantic.Symbols.Symbol;

    class GLOBAL_ANONYMOUS_FUNCTION: SYMBOL, TypeTyped is
        is_consumable: bool => true;

        func_type: Type;

        has_address: bool => false;

        init(symbol: SymbolBase, func_type: Type) is
            super.init(null, symbol);

            assert func_type?;
            
            self.func_type = func_type;
        si

        gen(context: IR.CONTEXT) is
            context.write_line("ldnull");
            context.write_line("ldftn {symbol.get_il_reference()}", symbol);
            context.write_line("newobj instance void {func_type.get_il_type()}::'.ctor'(object, native int)");
        si

        to_string() -> string =>
            "load:[{type}]({from},\"{symbol.name}\")";
    si
si