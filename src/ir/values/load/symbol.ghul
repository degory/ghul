namespace IR.Values.Load is
    use TypeTyped = Semantic.Types.Typed;
    use Semantic.Types.Type;
    use SymbolBase = Semantic.Symbols.Symbol;

    class SYMBOL: Value, TypeTyped is
        symbol: SymbolBase;
        symbol_as_typed: TypeTyped => cast TypeTyped(symbol);
        has_type: bool => type?;
        has_symbol: bool => symbol?;
        has_address: bool => true;
        is_consumable: bool => false;
        type: Type => symbol_as_typed.type;
        from: Value;

        init(from: Value, symbol: SymbolBase) is
            super.init();

            assert symbol?;

            self.from = from;
            self.symbol = symbol;
        si

        gen(context: IR.CONTEXT) is
            gen(from, context);
            context.fixme("load member {symbol.get_il_reference()}");
        si

        gen_address(context: IR.CONTEXT) is
            gen(from, context);
            context.fixme("load member address {symbol.get_il_reference()}");
        si

        to_string() -> string =>
            "load:[{type}]({from},\"{symbol.name}\")";
    si
si