namespace IR.Values is
    use TypeTyped = Semantic.Types.Typed;
    use Semantic.Types.Type;

    class TUPLE: Value, TypeTyped is
        has_type: bool => type?;
        type: Type;

        values: Collections.Iterable[Value];

        init(type: Type, values: Collections.Iterable[Value]) is
            super.init();

            assert type?;
            assert values?;

            self.type = type;
            self.values = values;
        si

        gen(context: IR.CONTEXT) is
            let call = new System.Text.StringBuilder();

            call
                .append("newobj instance void ");

            type.gen_type(call);

            call
                .append(" ::'.ctor'(");

            let i = 0;
            let seen_any = false;

            for v in values do
                gen(v, context);

                if seen_any then
                    call.append(',');
                fi

                call.append('!').append(i);
                
                seen_any = true;

                i = i + 1;
            od

            call.append(")");
            
            context.write_line(call, "tuple {type}");
        si

        to_string() -> string =>
            "tuple:[{type}]({values})";
    si
si