namespace IR.Values is
    use Semantic.Types.Type;

    class BOX: Value is
        value: Value;
        has_type: bool => type?;
        type: Type => value.type;
        is_value_type: bool => false;

        init(
            value: Value
        ) is
            super.init();

            assert value?;

            self.value = value;
        si

        gen(context: IR.CONTEXT) is
            gen(value, context);

            let il_type = type.get_il_type();

            // FIXME: this is very specific - could there be other circumstances where the left value is actually an address?
            if value.is_self then
                context.write_line("ldobj " + il_type);
            fi
            
            context.write_line("box " + il_type);
        si

        to_string() -> string =>
            "box:[" + type + "](" + value + ")";        
    si
si