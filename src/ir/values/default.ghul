namespace IR.Values is
    use Semantic.Types.Type;

    class DEFAULT: Value is
        has_type: bool => type?;
        type: Type;
        is_value_type: bool => type.is_value_type;
        is_value_tuple: bool => type.is_value_tuple;

        has_address: bool => true;

        init(
            type: Type
        ) is
            super.init();

            assert type? else "type is null";

            self.type = type;
        si

        gen(context: IR.CONTEXT) is
            let id = TEMP.get_next_id();

            context.write_line(".locals init ({type.get_il_type()} '.default.{id}')");
            context.write_line("ldloc '.default.{id}'");
        si

        gen_address(context: IR.CONTEXT) is
            let id = TEMP.get_next_id();

            context.write_line(".locals init ({type.get_il_type()} '.default.{id}')");
            context.write_line("ldloca '.default.{id}'");
        si

        to_string() -> string =>
            "default:[{type}]()";
    si
si