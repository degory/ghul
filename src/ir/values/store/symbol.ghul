namespace IR.Values.Store is
    use TypeTyped = Semantic.Types.Typed;
    use Semantic.Types.Type;
    use SymbolBase = Semantic.Symbols.Symbol;

    class SYMBOL: Value, TypeTyped is
        symbol: SymbolBase;
        symbol_as_typed: TypeTyped => cast TypeTyped(symbol);
        type: Type => symbol_as_typed.type;
        from: Value;
        value: IR.Values.Value;
        is_consumable: bool => false;

        init(from: Value, symbol: SymbolBase, value: IR.Values.Value) is
            super.init();

            assert symbol?;
            assert value?;

            self.from = from;
            self.symbol = symbol;
            self.value = value;
        si

        gen(context: IR.CONTEXT) is
            gen(from, context);
            gen(value, context);

            context.write_line("store member " + symbol);
        si            

        to_string() -> string =>
            "store:[" + type + "](" + from + ",\"" + symbol.name + "\"," + value + ")";
    si
si