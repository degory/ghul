namespace IR.Values is
    use Semantic.Types.Type;

    class ADDRESS: Value is
        _next_id: int static;

        has_type: bool => type?;
        type: Type;
        value: Value;

        name: string;

        next_name: string static is
            let result = "'.address.{_next_id}'";

            _next_id = _next_id + 1;

            return result;
        si

        init(
            value: Value,
            type: Type
        ) is
            super.init();

            assert value?;

            self.value = value;
            self.type = type;
        si

        init(
            value: Value
        ) is
            init(value, value.type);
        si

        reset_id() static is
            _next_id = 0;
        si

        gen(context: IR.CONTEXT) is
            if value.has_address then
                value.gen_address(context);
            else
                if !name? then
                    name = next_name;
                fi

                let buffer = new System.Text.StringBuilder();

                buffer
                    .append(".locals init (");
    
                type.gen_type(buffer);
    
                buffer
                    .append(' ')
                    .append(name)
                    .append(')');
    
                context.write_line(buffer);
    
                value.gen(context);
                context.write_line("stloc {name}");
                context.write_line("ldloca {name}");
            fi
        si

        to_string() -> string =>
            "type_wrapper:[{type}]({value})";        
    si
si
