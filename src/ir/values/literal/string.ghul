namespace IR.Values.Literal is
    use TypeTyped = Semantic.Types.Typed;
    use Semantic.Types.Type;

    class STRING: Value, TypeTyped is
        value: string;
        type: Type;
        has_type: bool => type?;

        init(value: string, type: Type) is
            super.init();

            assert value?;
            assert type?;

            self.value = value;
            self.type = type;
        si

        gen(context: IR.CONTEXT) is
            context.write_line("ldstr bytearray ({get_hex_bytes(value)})");
        si

        get_hex_bytes(value: string) -> string static is
            let result = System.Text.StringBuilder(value.length * 8);

            for c in value do
                let uc = cast uint(c); 

                let high = uc / cast uint(256);
                let low = uc - (high * cast uint(256));

                result
                    .append(low.to_string("X02"))
                    .append(" ")
                    .append(high.to_string("X02"))
                    .append(" ");
            od
            
            return result.to_string();
        si        

        to_string() -> string =>
            "literal:[{type}](\"{value}\")";
    si
si
