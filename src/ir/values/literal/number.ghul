namespace IR.Values.Literal is
    use TypeTyped = Semantic.Types.Typed;
    use Semantic.Types.Type;

    class NUMBER: Value, TypeTyped is
        value: string;
        type: Type;
        suffix: string;
        conv: string;
        has_type: bool => type?;
        is_lightweight_pure: bool => true;

        init(value: string, type: Type, suffix: string, conv: string) is
            super.init();

            assert value?;
            assert type?;
            assert suffix?;

            self.value = value;
            self.type = type;
            self.suffix = suffix;
            self.conv = conv;
        si

        init(value: string, type: Type, suffix: string) is
            self.init(value, type, suffix, null);
        si

        gen(context: IR.CONTEXT) is
            context.write_line("ldc.{suffix} {value}");

            if conv? then
                context.write_line(conv);                    
            fi
        si

        to_string() -> string =>
            "literal:[{type}]({value})";
    si
si