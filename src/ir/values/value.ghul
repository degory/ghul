namespace IR.Values is
    use System.NotImplementedException;

    use TypeTyped = Semantic.Types.Typed;
    use Semantic.Types.Type;
    use Semantic.Symbols.Symbol;

    class Value: TypeTyped is
        has_type: bool => false;
        has_symbol: bool => false;
        is_value_type: bool => has_type /\ type.is_value_type;
        is_self: bool => false;
        is_super: bool => false;
        is_deref: bool => false;
        has_address: bool => false;
        is_consumable: bool => true;
        is_need_store: bool => false;
        is_block: bool => false;
        is_lightweight_pure: bool => false;
        is_type_expression: bool => false;

        has_location: bool => false;
        location: Source.LOCATION => Source.LOCATION.internal;

        non_consumable_message: string => "cannot use this here";

        type: Type is
            throw NotImplementedException("value has no type");
        si

        symbol: Symbol is
            throw NotImplementedException("value has no symbol");
        si

        check_is_consumable(logger: Logging.Logger, location: Source.LOCATION, value: Value) -> bool static => 
            value? /\
            value.check_is_consumable(logger, location);
        
        check_is_consumable(logger: Logging.Logger, location: Source.LOCATION) -> bool is
            if !is_consumable then
                logger.error(location, non_consumable_message);
                return false;
            fi

            if !type? then
                logger.mark_consumed_error();
                return false;
            elif type.is_error then
                logger.mark_consumed_error();
                return true;
            elif type.any_count > 0 then
                logger.mark_consumed_any();
                return true;
            elif type.is_void then
                logger.error(location, "cannot use void value here");
                return false;
            fi

            return true;
        si        

        check_is_consumable_allow_void(logger: Logging.Logger, location: Source.LOCATION, value: Value) -> bool static => 
            value? /\
            value.check_is_consumable_allow_void(logger, location);

        check_is_consumable_allow_void(logger: Logging.Logger, location: Source.LOCATION) -> bool is
            if !is_consumable then
                logger.error(location, non_consumable_message);
                return false;
            fi

            if !type? then
                logger.mark_consumed_error();
                return false;
            elif type.is_error then
                logger.mark_consumed_error();
            elif type.is_any then
                logger.mark_consumed_any();
            fi

            return true;
        si

        get_temp_copier(block: IR.Values.BLOCK, prefix: string) -> (() -> Value) =>
            if is_lightweight_pure then
                () => self;
            elif type.is_error then
                () => DUMMY(type, location);
            else
                let temp = TEMP(block, prefix, self);
                () => temp.load();
            fi;
        
        gen(context: IR.CONTEXT) is
            throw NotImplementedException("value gen: {get_type()} {self}");
        si

        gen_address(context: IR.CONTEXT) is            
            throw NotImplementedException("value gen address: {get_type()} {self}");
        si
        
        gen(value: Value, context: IR.CONTEXT) static is
            if value? then
                value.gen(context);
            else
                context.fixme("null value");
            fi
        si

        freeze() -> Value is
            let context = IR.CONTEXT(IoC.CONTAINER.instance.logger, null);

            context.enter_buffer(false);

            gen(context);

            let result = context.leave_buffer();

            return RAW(type, result);
        si

        init() is si

        to_string() -> string => "IR.Value {get_type()}";
    si
si
