namespace IR.Values is
    use TypeTyped = Semantic.Types.Typed;
    use Semantic.Types.Type;

    class BLOCK: Value, TypeTyped is
        _values: Collections.MutableList[Value];

        has_type: bool => type?;
        type: Type;
        is_block: bool => true;

        is_closed: bool;
        is_emitted: bool;

        is_consumable: bool => true;

        init(type: Type) is
            super.init();

            assert type? else "oops: can't create block with null type";

            _values = Collections.LIST[Value]();

            self.type = type;
        si

        init() is
            super.init();

            _values = Collections.LIST[Value]();

            self.type = Semantic.Types.ERROR();
        si

        close() is
            assert !self.is_emitted else "oops: block value already emitted";
            assert !self.is_closed else "oops: block is already closed";

            self.is_closed = true;
        si        

        add(type: Semantic.Types.Type, value: string) is
            add(RAW(type, value));
        si

        add(value: string) is
            add(RAW(value));
        si

        add(value: Value) is
            assert !self.is_emitted else "oops: block value already emitted";
            assert !self.is_closed else "oops: block is closed, can't add more values";
            assert value? else "oops: can't add null value to block";

            _values.add(value);
        si

        gen(context: IR.CONTEXT) is
            assert !self.is_emitted else "oops: block value already emitted";

            // TODO close blocks when we've finished with them
            // as a sanity check
            // assert self.is_closed else "oops: block is not closed";
            is_emitted = true;

            context.indent();

            for value in _values do
                value.gen(context);
            od

            context.outdent();
        si

        to_string() -> string =>
            "block:[{type}]({_values | .join("; ")})";
    si

    class DUMMY_BLOCK: BLOCK is
        location: Source.LOCATION;
        why: string;

        init(type: Type, location: Source.LOCATION, why: string) is
            super.init(type);

            self.location = location;
            self.why = why;
        si
        
        gen(context: IR.CONTEXT) is
            throw System.InvalidOperationException("oops: dummy block generated, created at: {location} because: {why}");
        si
    si
si