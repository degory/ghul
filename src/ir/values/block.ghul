namespace IR.Values is
    use TypeTyped = Semantic.Types.Typed;
    use Semantic.Types.Type;

    use Logging;

    class BLOCK: Value, TypeTyped is
        _emitted: bool;

        has_type: bool => type?;
        type: Type;

        block: string;

        init(type: Type) is
            super.init();

            assert type? else "oops: can't create block with null type";

            self.type = type;
        si

        init(
            type: Type,
            block: string
        ) is
            super.init();

            assert type?;
            assert block?;

            self.type = type;
            self.block = block;
        si

        set_block(block: string) is
            assert block? else "oops: null block";

            self.block = block;
        si

        gen(context: IR.CONTEXT) is
            assert !self._emitted else "oops: block value already emitted";

            assert block? else "oops: null block";

            context.write(self.block);

            _emitted = true;
        si

        to_string() -> string =>
            "block:[{type}]({block.replace_line_endings("; ")})";
    si

    class DUMMY_BLOCK: BLOCK is
        where: Source.LOCATION;
        why: string;

        init(type: Type, where: Source.LOCATION, why: string) is
            super.init(type);

            self.where = where;
            self.why = why;
        si
        
        gen(context: IR.CONTEXT) is
            throw new System.InvalidOperationException("oops: dummy block generated, created at: {where} because: {why}");
        si
    si
si