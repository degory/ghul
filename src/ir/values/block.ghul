namespace IR.Values is
    use TypeTyped = Semantic.Types.Typed;
    use Semantic.Types.Type;

    use Logging;

    class BLOCK: Value, TypeTyped is
        _emitted: bool;

        has_type: bool => type?;
        type: Type;

        block: string;

        init(type: Type) is
            super.init();

            assert type?;

            self.type = type;
        si

        init(
            type: Type,
            block: string
        ) is
            super.init();

            assert type?;
            assert block?;

            self.type = type;
            self.block = block;
        si

        set_block(block: string) is
            assert block?;
            
            debug("set_block: " + block.replace_line_endings("; "));

            self.block = block;
        si

        gen(context: IR.CONTEXT) is
            debug("gen BLOCK: " + self.to_string());

            assert !self._emitted else "oops: block value already emitted";

            assert block? else "oops: block value has no block";

            context.write_comment_line("block {");

            context.write(self.block);

            context.write_comment_line("}");

            _emitted = true;
        si

        to_string() -> string =>
            "block:[" + type + "](" + block.replace_line_endings("; ") + ")";
    si
si