namespace IR.Values is
    use IO.Std;

    use System.NotImplementedException;
    use System.Text.StringBuilder;

    use TypeTyped = Semantic.Types.Typed;
    use Semantic.Types.Type;
    use SymbolBase = Semantic.Symbols.Symbol;

    class SEQUENCE: Value, TypeTyped is
        has_type: bool => type?;
        type: Type;
        element_type: Type;

        values: Collections.List[Value];

        init(
            type: Type,
            element_type: Type,
            values: Collections.List[Value]
        ) is
            super.init();

            assert type?;
            assert element_type?;
            assert values?;

            self.type = type;
            self.element_type = element_type;
            self.values = values;
        si

        gen(context: IR.CONTEXT) is
            let boxer = IoC.CONTAINER.instance.value_boxer;

            context.write_line("ldc.i4 " + values.count);
            context.write_line("newarr " + element_type.get_il_type());

            let element_type_il_type = element_type.get_il_type();

            for i in 0..values.count do
                context.write_line("dup");

                let v = boxer.box_if_needed(values[i], element_type);

                context.write_line("ldc.i4 " + i);
                gen(v, context);

                context.write_line("stelem " + element_type_il_type);
            od            
        si

        to_string() -> string =>
            "sequence:[" + type + "](" + values + ")";
    si
si