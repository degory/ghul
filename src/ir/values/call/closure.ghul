namespace IR.Values.Call is
    use TypeTyped = Semantic.Types.Typed;
    use Semantic.Types.Type;

    class CLOSURE: Value, TypeTyped is
        from: Value;
        type: Type;
        has_type: bool => type?;

        is_action: bool;
        func_type: Type;
        arguments: Collections.List[Value];            

        init(
            from: Value,
            type: Type,
            is_action: bool,
            func_type: Type,
            arguments: Collections.List[Value]
        ) is
            super.init();

            assert type?;
            assert func_type?;
            assert arguments?;

            self.from = from;
            self.type = type;
            self.is_action = is_action;
            self.func_type = func_type;
            self.arguments = arguments;
        si

        gen(context: IR.CONTEXT) is
            gen(from, context);

            let count = 0;
            for a in arguments do
                gen(a, context);

                count = count + 1;
            od

            let call = System.Text.StringBuilder();

            call
                .append("callvirt instance ");

            if is_action then
                call
                    .append("void");
            else
                call
                    .append("!")
                    .append(count);
            fi
                                
            call
                .append(" ");

            func_type.gen_type(call);

            call
                .append("::Invoke(");

            for i in 0..count do
                if i > 0 then
                    call.append(",");
                fi
                
                call
                    .append("!")
                    .append(i);                    
            od

            call.append(")");
            
            context.write_line(call.to_string());
        si
        
        to_string() -> string =>
            "closure-call:[{type}]({from}{arguments})";
    si
si
