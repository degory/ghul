namespace IR.Values.Call is
    use TypeTyped = Semantic.Types.Typed;
    use Semantic.Types.Type;

    class INSTANCE: Value, TypeTyped is
        from: Value;
        function: Semantic.Symbols.Function;
        arguments: Collections.List[Value];
        type: Type;
        has_type: bool => type?;

        init(from: Value, function: Semantic.Symbols.Function, arguments: Collections.List[Value], type: Type) is
            super.init();

            self.from = from;
            self.function = function;
            self.arguments = arguments;

            if type? then
                self.type = type;
            else
                self.type = function.return_type;
            fi

            assert self.type?;                
        si

        gen(context: IR.CONTEXT) is
            gen(from, context);

            for a in arguments do
                gen(a, context);
            od

            let il_ref = function.get_il_reference();

            if from.is_super then
                context.write_line("call {il_ref}");
            else
                context.write_line("callvirt {il_ref}");                 
            fi
        si

        to_string() -> string =>
            "instance-call:[{type}]({from},\"{function.name}\",{arguments})";
    si

si