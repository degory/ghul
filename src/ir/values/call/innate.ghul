namespace IR.Values.Call is
    use TypeTyped = Semantic.Types.Typed;
    use Semantic.Types.Type;

    class INNATE: Value, TypeTyped is
        function: Semantic.Symbols.InnateFunction;
        from: Value;
        arguments: Collections.List[Value];
        type: Type;
        has_type: bool => type?;
        is_lowered: bool;

        actual_operation: string public;
        
        innate_name: string => function.innate_name;
        type_name: string => innate_name.substring(0, innate_name.index_of('.'));
        op_name: string => innate_name.substring(innate_name.index_of('.') + 1);    

        init(
            function: Semantic.Symbols.InnateFunction,
            from: Value,
            arguments: Collections.List[Value],
            type: Type) is
            super.init();

            assert function?;
            assert arguments?;

            self.function = function;
            self.arguments = arguments;

            if type? then
                self.type = type;
            else
                self.type = function.return_type;
            fi
        si

        lower() -> Value is
            assert !is_lowered else "innate operation is already lowered: {self}";

            is_lowered = true;

            let result = IR.Values.BLOCK(type);

            IoC.CONTAINER.instance.innate_operation_generator.lower(self, result);

            return result;
        si

        gen(context: CONTEXT) is
            if !is_lowered then
                lower().gen(context);
            fi
        si
        
        to_string() -> string =>
            "innate:[{type}](\"{function.name}\",{from},{arguments})";
    si
si