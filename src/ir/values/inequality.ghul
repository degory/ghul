namespace IR.Values is
    use Semantic.Types.Type;

    class INEQUALITY: Value is
        has_type: bool => type?;
        type: Type;
        operation: string;
        value: Value;

        init(
            type: Type,
            operation: string,
            value: Value
        ) is
            super.init();

            assert type?;
            assert operation?;
            assert value?;

            self.type = type;
            self.operation = operation;
            self.value = value;
        si

        gen(context: IR.CONTEXT) is
            if operation =~ "<" then
                gen(value, context);
                context.write_line("ldc.i4.0");
                context.write_line("clt");
            elif operation =~ ">" then
                gen(value, context);
                context.write_line("ldc.i4.0");
                context.write_line("cgt");
            elif operation =~ "<=" then
                gen(value, context);
                context.write_line("ldc.i4.0");
                context.write_line("cgt");
                context.write_line("ldc.i4 0");
                context.write_line("ceq");
            elif operation =~ ">=" then
                gen(value, context);
                context.write_line("ldc.i4.0");
                context.write_line("clt");
                context.write_line("ldc.i4 0");
                context.write_line("ceq");
            elif operation =~ "=~" then
                gen(value, context);
                context.write_line("ldc.i4.0");
                context.write_line("ceq");
            elif operation =~ "!~" then
                gen(value, context);
                context.write_line("ldc.i4.0");
                context.write_line("ceq");
                context.write_line("ldc.i4 0");
                context.write_line("ceq");    
            else
                throw new System.Exception("Unsupported inequality operation " + operation);
            fi
        si

        to_string() -> string =>
            "inequality:[" + type + "](" + operation + " " + value + ")";
    si
si