namespace IR.Values is
    use TypeTyped = Semantic.Types.Typed;
    use Semantic.Types.Type;

    // poisoning error value. It's OK to create this, for example speculatively,
    // provided it's never converted to actual IL assembly language via 'gen()'

    // TODO rename this to POISON or ERROR
    class DUMMY: Value, TypeTyped is
        has_type: bool => type?;
        type: Type;
        location: Source.LOCATION;
        has_location: bool => true;

        init(
            type: Type,
            location: Source.LOCATION
        ) is
            super.init();

            assert type?;
            assert location?;

            self.type = type;
            self.location = location;
        si

        // we're actually attempting to generate this poison value: that
        // indicates a bug, so we need block generating an object file
        gen(context: IR.CONTEXT) is
            IoC.CONTAINER.instance.logger.poison(location, "generated dummy value: {type} from {location}");
            context.fixme("dummy {type} from {location}");
        si

        // may have been called from a process that will subsequently
        // backtrack so, don't poison, yet. Leave as signalling error
        // value that will still throw if we attempt to emit actual IL
        freeze() -> Value => self;

        to_string() -> string =>
            "dummy:[{type}]()";
    si
si