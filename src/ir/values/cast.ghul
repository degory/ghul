namespace IR.Values is
    use Semantic.Types.Type;

    class CAST: Value is
        has_type: bool => type?;
        type: Type;
        value: Value;

        init(
            type: Type,
            value: Value
        ) is
            super.init();

            assert type?;

            // native generates null values, which cannot easily be prevented and which propogate, and must be cast before use: 
            // assert value?;

            self.type = type;
            self.value = value;
        si

        gen(context: IR.CONTEXT) is
            gen(value, context);

            context.write_line("castclass " + type.get_il_type());
        si

        to_string() -> string =>
            "cast:[" + type + "](" + value + ")";
    si
si