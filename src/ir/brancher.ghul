namespace IR is
    use Generic;
    use System;


    class LABEL is
        _next_id: int static;

        id: int;

        init()  is
            id = _next_id;

            _next_id = _next_id + 1;
        si

        toString() -> String => "L_" + id;
    si

    enum COMPARE is
        NONE,
        EQ,
        GE,
        GEU,
        GT,
        GTU,
        LE,
        LEU,
        LT,
        LTU,
        NE,
        Z,
        NZ
    si

    enum BRANCH is
        NONE,
        EQ,
        GE,
        GEU,
        GT,
        GTU,
        LE,
        LEU,
        LT,
        LTU,
        NE,
        Z,
        NZ,
        ALWAYS
    si
    
    class BRANCHER is
        _context: CONTEXT;

        _branch_instructions: Dict[BRANCH, System.String];
        _compare_instructions: Dict[COMPARE, System.String];

        init(context: CONTEXT) is
            _context = context;

            _branch_instructions = new Map[BRANCH, System.String]();
            _compare_instructions = new Map[COMPARE, System.String]();

            _branch_instructions[BRANCH.EQ] = "beq";
            _branch_instructions[BRANCH.GE] = "bge";
            _branch_instructions[BRANCH.GEU] = "bge.un";
            _branch_instructions[BRANCH.GT] = "bgt";
            _branch_instructions[BRANCH.GTU] = "bgt.un";
            _branch_instructions[BRANCH.LE] = "ble";
            _branch_instructions[BRANCH.LEU] = "ble.un";
            _branch_instructions[BRANCH.LT] = "blt";
            _branch_instructions[BRANCH.LTU] = "blt.un";
            _branch_instructions[BRANCH.NE] = "bne.un";
            _branch_instructions[BRANCH.Z] = "brfalse";
            _branch_instructions[BRANCH.NZ] = "brtrue";
            _branch_instructions[BRANCH.ALWAYS] = "br";

            _compare_instructions[COMPARE.EQ] = "ceq";
            _compare_instructions[COMPARE.GE] = "cge";
            _compare_instructions[COMPARE.GEU] = "cge.un";
            _compare_instructions[COMPARE.GT] = "cgt";
            _compare_instructions[COMPARE.GTU] = "cgt.un";
            _compare_instructions[COMPARE.LE] = "cle";
            _compare_instructions[COMPARE.LEU] = "cle.un";
            _compare_instructions[COMPARE.LT] = "clt";
            _compare_instructions[COMPARE.LTU] = "clt.un";
            _compare_instructions[COMPARE.NE] = "cne.un";
            _compare_instructions[COMPARE.Z] = "ctrue";
            _compare_instructions[COMPARE.NZ] = "cfalse";
        si
        
        label(l: LABEL, comment: System.String) is
            _context.write_line("" + l + ":", comment);
        si

        label(l: LABEL) is
            _context.write_line("" + l + ":");
        si

        branch(b: BRANCH, value: Semantic.Graph.Value.BASE, l: LABEL, comment: System.String) is
            Semantic.Graph.Value.BASE.gen(value, _context);
            
            _context.write_line(get_branch_instruction(b) + " " + l, comment);
        si

        branch(b: BRANCH, value: Semantic.Graph.Value.BASE, l: LABEL) is
            Semantic.Graph.Value.BASE.gen(value, _context);
            
            _context.write_line(get_branch_instruction(b) + " " + l);
        si

        branch(b: BRANCH, left: Semantic.Graph.Value.BASE, right: Semantic.Graph.Value.BASE, l: LABEL, comment: System.String) is
            Semantic.Graph.Value.BASE.gen(left, _context);
            Semantic.Graph.Value.BASE.gen(right, _context);
            
            _context.write_line(get_branch_instruction(b) + " " + l, comment);
        si

        branch(b: BRANCH, left: Semantic.Graph.Value.BASE, right: Semantic.Graph.Value.BASE, l: LABEL) is
            Semantic.Graph.Value.BASE.gen(left, _context);
            Semantic.Graph.Value.BASE.gen(right, _context);
            
            _context.write_line(get_branch_instruction(b) + " " + l);
        si

        branch(l: LABEL, comment: System.String) is
            _context.write_line(_branch_instructions[BRANCH.ALWAYS] + " " + l, comment);
        si

        branch(l: LABEL) is
            _context.write_line(_branch_instructions[BRANCH.ALWAYS] + " " + l);
        si

        get_branch_instruction(b: BRANCH) -> String is
            let instruction = _branch_instructions[b];

            if instruction? then
                return instruction;
            fi

            return "unknown branch instruction: " + cast int(b);
        si
    si
si