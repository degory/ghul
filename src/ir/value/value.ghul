namespace IR.Values is
    @IF.not.v3() use object = System.Object;
    @IF.not.v3() use string = System.String;
    @IF.not.v3() use Std = System.Console;

    use System;

    use TypeTyped = Semantic.Types.Typed;
    use Semantic.Types.Type;
    use SymbolBase = Semantic.Symbols.Symbol;
    
    class Value: object, TypeTyped is
        has_type: bool => false;
        is_value_type: bool => has_type && type.is_value_type;
        is_self: bool => false;
        is_super: bool => false;
        has_address: bool => false;

        type: Type is
            throw new NotImplementedException("value has no type");
        si

        gen(context: IR.CONTEXT) is
            throw new NotImplementedException("value gen");
        si

        gen_address(context: IR.CONTEXT) is            
            throw new NotImplementedException("value gen addres");
        si
        
        gen(value: Value, context: IR.CONTEXT) static is
            if value? then
                value.gen(context);
            else
                context.fixme("null value");
            fi
        si

        init() is si
    si

    class SKIP: Value is
        init() is
            super.init();
        si
    si

    class NEW: Value is
        has_type: bool => type?;
        type: Type;
        constructor: Semantic.Symbols.Function;
        arguments: Collections.LIST[Value];

        init(
            type: Type,
            constructor: Semantic.Symbols.Function,
            arguments: Collections.LIST[Value]
        ) is
            super.init();

            assert type?;
            assert constructor?;
            assert arguments?;

            self.type = type;
            self.constructor = constructor;
            self.arguments = arguments;
        si

        gen(context: IR.CONTEXT) is
            for a in arguments do
                gen(a, context);
            od
            
            context.write_line("newobj instance " + constructor.il_type_name, type);
        si

        to_string() -> string =>
            "new:[" + type + "](\"" + constructor.name + "\"," + new Shim.JOIN[Value](arguments) + ")";
    si

    class TYPE_WRAPPER: Value is
        has_type: bool => type?;
        type: Type;
        value: Value;

        init(
            type: Type,
            value: Value
        ) is
            super.init();

            assert type?;
            assert value?;

            self.type = type;
            self.value = value;
        si

        gen(context: IR.CONTEXT) is
            gen(value, context);
        si

        to_string() -> string =>
            "type_wrapper:[" + type + "](" + value + ")";        
    si

    class ADDRESS: Value is
        _next_id: int static;

        has_type: bool => type?;
        type: Type;
        value: Value;

        name: string;

        next_name: string static is
            let result = "'.address." + _next_id + "'";

            _next_id = _next_id + 1;

            return result;
        si

        init(
            value: Value,
            type: Type
        ) is
            super.init();

            assert value?;

            self.value = value;
            self.type = type;
        si

        init(
            value: Value
        ) is
            init(value, value.type);
        si

        gen(context: IR.CONTEXT) is
            if value.has_address then
                value.gen_address(context);
            else
                if !name? then
                    name = next_name;
                fi

                context.write_line(".locals init (" + type.il_type_name + " " + name + ")");

                value.gen(context);
                context.write_line("stloc " + name);
                context.write_line("ldloca " + name);
            fi
        si

        to_string() -> string =>
            "type_wrapper:[" + type + "](" + value + ")";        
    si

    class BOX: Value is
        value: Value;
        has_type: bool => type?;
        type: Type => value.type;
        is_value_type: bool => false;

        init(
            value: Value
        ) is
            super.init();

            assert value?;

            self.value = value;
        si

        gen(context: IR.CONTEXT) is
            gen(value, context);

            // FIXME: this is very specific - could there be other circumstances where the left value is actually an address?
            if value.is_self then
                context.write_line("ldobj " + type.il_type_name);
            fi
            
            context.write_line("box " + type.il_type_name);
        si

        to_string() -> string =>
            "box:[" + type + "](" + value + ")";        
    si

    class UNBOX: Value is
        value: Value;
        has_type: bool => type?;
        type: Type => value.type;
        is_value_type: bool => true;

        init(
            value: Value
        ) is
            super.init();

            assert value?;

            self.value = value;
        si

        gen(context: IR.CONTEXT) is
            gen(value, context);

            context.write_line("unbox.any " + type.il_type_name);
        si

        to_string() -> string =>
            "unbox:[" + type + "](" + value + ")";        
    si

    class CONVERT: Value is
        has_type: bool => type?;
        type: Type;
        value: Value;
        instruction: string;

        init(
            type: Type,
            value: Value,
            instruction: string
        ) is
            super.init();

            assert type?;

            // native generates null values, which cannot easily be prevented and which propogate, and must be cast before use: 
            // assert value?;

            self.type = type;
            self.value = value;
            self.instruction = instruction;
        si

        gen(context: IR.CONTEXT) is
            gen(value, context);

            context.write_line(instruction, "convert to " + type);
        si

        to_string() -> string =>
            "cast:[" + type + "](" + value + ")";
    si

    class CAST: Value is
        has_type: bool => type?;
        type: Type;
        value: Value;

        init(
            type: Type,
            value: Value
        ) is
            super.init();

            assert type?;

            // native generates null values, which cannot easily be prevented and which propogate, and must be cast before use: 
            // assert value?;

            self.type = type;
            self.value = value;
        si

        gen(context: IR.CONTEXT) is
            gen(value, context);

            context.write_line("castclass " + type.il_type_name);
        si

        to_string() -> string =>
            "cast:[" + type + "](" + value + ")";
    si

    class ISA: Value is
        has_type: bool => type?;
        type: Type;
        isa_type: Type;
        value: Value;

        init(
            type: Type,
            isa_type: Type,
            value: Value
        ) is
            super.init();

            assert type?;
            assert isa_type?;
            assert value?;

            self.type = type;
            self.isa_type = isa_type;
            self.value = value;
        si

        gen(context: IR.CONTEXT) is
            gen(value, context);

            context.write_line("isinst " + isa_type.il_type_name);
            context.write_line("ldnull");
            context.write_line("cgt.un");
        si

        to_string() -> string =>
            "isa:[" + isa_type + "](" + value + ")";
    si

    class TYPEOF: Value is
        has_type: bool => type?;
        type: Type;
        typeof_type: Type;

        init(
            type: Type,
            typeof_type: Type
        ) is
            super.init();

            assert type?;
            assert typeof_type?;

            self.type = type;
            self.typeof_type = typeof_type;
        si

        gen(context: IR.CONTEXT) is
            context.write_line("ldtoken " + typeof_type.il_token_name, typeof_type);
            context.write_line("call class [mscorlib]System.Type class [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)");
        si

        to_string() -> string =>
            "typeof:[" + type + "](" + typeof_type + ")";
    si

    class HAS_VALUE: Value, TypeTyped is
        has_type: bool => type?;
        type: Type;

        value: Value;

        init(
            value: Value,
            type: Type
        ) is
            super.init();

            assert type?;
            assert value?;

            self.value = value;
            self.type = type;
        si

        gen(context: IR.CONTEXT) is
            gen(value, context);

            context.write_line("ldnull");
            context.write_line("cgt.un");
        si

        to_string() -> string =>
            "has-value:[" + type + "](" + value + ")";
    si

    class NOT: Value, TypeTyped is
        value: Value;

        has_Type: bool => type?;
        type: Type => value.type;
        is_value_type: bool => value.is_value_type;

        init(value: Value) is
            super.init();

            assert value?;

            self.value = value;
        si

        gen(context: IR.CONTEXT) is
            Value.gen(value, context);

            context.write_line("ldc.i4 0");
            context.write_line("ceq");
        si

        to_string() -> string =>
            "not:[" + type + "](" + value + ")";
    si

    class NULL: Value, TypeTyped is
        has_type: bool => type?;
        type: Type;

        init(
            type: Type
        ) is
            super.init();

            assert type?;

            self.type = type;
        si

        gen(context: IR.CONTEXT) is
            context.write_line("ldnull");
        si

        to_string() -> string =>
            "null:[" + type + "]()";
    si

    class DUMMY: Value, TypeTyped is        
        has_type: bool => type?;
        type: Type;
        location: Source.LOCATION;

        init(
            type: Type,
            location: Source.LOCATION
        ) is
            super.init();

            assert type?;
            assert location?;

            self.type = type;
            self.location = location;
        si

        gen(context: IR.CONTEXT) is
            IoC.CONTAINER.instance.logger.poison(location, "generated dummy value");
            context.fixme("dummy " + type + " from " + location);
        si

        to_string() -> string =>
            "isa:[" + type + "]()";
    si

    class TUPLE: Value, TypeTyped is
        has_type: bool => type?;
        type: Type;

        values: Collections.Iterable[Value];

        init(type: Type, values: Collections.Iterable[Value]) is
            super.init();

            assert type?;
            assert values?;

            self.type = type;
            self.values = values;
        si

        gen(context: IR.CONTEXT) is
            let call = new System.Text.StringBuilder();

            call
                .append("newobj instance void ")
                .append(type.il_type_name)
                .append(" ::'.ctor'(");

            let i = 0;
            let seen_any = false;

            for v in values do
                gen(v, context);

                if seen_any then
                    call.append(',');
                fi

                call.append('!').append(i);
                
                seen_any = true;

                i = i + 1;
            od

            call.append(")");
            
            context.write_line(call, "tuple " + type);
        si

        to_string() -> string =>
            "tuple:[" + type + "](" + values + ")";
    si

    class SEQUENCE: Value, TypeTyped is
        has_type: bool => type?;
        type: Type;
        element_type: Type;

        values: Collections.LIST[Value];

        init(
            type: Type,
            element_type: Type,
            values: Collections.LIST[Value]
        ) is
            super.init();

            assert type?;
            assert element_type?;
            assert values?;

            self.type = type;
            self.element_type = element_type;
            self.values = values;
        si

        gen(context: IR.CONTEXT) is
            let boxer = IoC.CONTAINER.instance.value_boxer;

            context.write_line("ldc.i4 " + values.count);
            context.write_line("newarr " + element_type.il_type_name);

            for i in 0..values.count do
                context.write_line("dup");

                let v = boxer.box_if_needed(values[i], element_type);

                context.write_line("ldc.i4 " + i);
                gen(v, context);

                context.write_line("stelem " + element_type.il_type_name);
            od
            
        si

        to_string() -> string =>
            "sequence:[" + type + "](" + values + ")";
    si

    namespace Need is
        class STORE: Value is
            has_type: bool => value? && value.has_type;
            type: Type => value.type;
            value: Value;

            init(value: Value) is
                super.init();

                assert value?;    

                self.value = value;
            si

            gen(context: IR.CONTEXT) is
                gen(value, context);
                context.write_line("unresolved need store");
            si

            to_string() -> string =>
                "need-store:[" + type + "]";
        si
    si

    namespace Expect is
        class STORABLE: Value is
            has_type: bool => type?;
            type: Type;

            init(type: Type) is
                super.init();

                assert type?;
                    
                self.type = type;
            si

            gen(context: IR.CONTEXT) is
                context.write_line("unresolved expect");
            si

            to_string() -> string =>
                "expect-storable:[" + type + "]";
        si
    si

    namespace Load is
        class SELF: Value, TypeTyped is
            self_: SymbolBase;
            has_type: bool => type?;
            type: Type;

            is_self: bool => true;
            has_address: bool => true;

            init(self_: SymbolBase) is
                init(self_, null);
            si
            
            init(self_: SymbolBase, type: Type) is
                super.init();
                assert self_?;
 
                self.self_ = self_;

                if type? then
                    self.type = type;
                elif isa TypeTyped(self_) then
                    self.type = cast TypeTyped(self_).type;
                fi
            si

            gen(context: IR.CONTEXT) is
                context.write_line("ldarg.0", "self " + type);
            si

            gen_address(context: IR.CONTEXT) is
                context.write_line("ldarg.0", "self " + type);
            si

            to_string() -> string =>
                "self:[" + type + "]";
        si

        class SUPER: SELF is
            is_super: bool => true;

            init(self_: SymbolBase) is
                init(self_, null);
            si
            
            init(self_: SymbolBase, type: Type) is
                super.init(self_, type);
            si

            to_string() -> string =>
                "super:[" + type + "]";
        si

        class TEMP: Value, TypeTyped is
            name: string;

            type: Type;
            has_type: bool => type?;

            has_address: bool => true;

            init(name: string, type: Type) is
                self.name = name;
                self.type = type;
            si

            gen(context: IR.CONTEXT) is
                context.write_line("ldloc " + name, "temp " + type);
            si

            gen_address(context: IR.CONTEXT) is
                context.write_line("ldloca " + name, "temp " + type);
            si

            to_string() -> string =>
                "load:[" + type + "](" + name + "\")";
        si

        class SYMBOL: Value, TypeTyped is
            symbol: SymbolBase;
            symbol_as_typed: TypeTyped => cast TypeTyped(symbol);
            has_type: bool => type?;
            has_address: bool => true;
            type: Type => symbol_as_typed.type;
            from: Value;

            init(from: Value, symbol: SymbolBase) is
                super.init();

                assert symbol?;

                self.from = from;
                self.symbol = symbol;
            si

            gen(context: IR.CONTEXT) is
                gen(from, context);
                context.fixme("load member " + symbol.il_qualified_name);
            si

            gen_address(context: IR.CONTEXT) is
                gen(from, context);
                context.fixme("load member address " + symbol.il_qualified_name);
            si

            to_string() -> string =>
                "load:[" + type + "](" + from + ",\"" + symbol.name + "\")";
        si

        class LOCAL_VARIABLE: SYMBOL, TypeTyped is
            init(symbol: SymbolBase) is
                super.init(null, symbol);
            si

            gen(context: IR.CONTEXT) is
                context.write_line("ldloc " + symbol.il_name, symbol);
            si

            gen_address(context: IR.CONTEXT) is
                context.write_line("ldloca " + symbol.il_name, symbol);
            si

            to_string() -> string =>
                "load:[" + type + "](" + from + ",\"" + symbol.name + "\")";
        si

        class LOCAL_ARGUMENT: SYMBOL, TypeTyped is
            init(symbol: SymbolBase) is
                super.init(null, symbol);
            si

            gen(context: IR.CONTEXT) is
                context.write_line("ldarg " + symbol.il_name, symbol);
            si

            gen_address(context: IR.CONTEXT) is
                context.write_line("ldarga " + symbol.il_name, symbol);
            si

            to_string() -> string =>
                "load:[" + type + "](" + from + ",\"" + symbol.name + "\")";
        si

        class INSTANCE_FIELD: SYMBOL, TypeTyped is
            init(from: Value, symbol: SymbolBase) is
                super.init(from, symbol);

                assert from?;
            si

            gen(context: IR.CONTEXT) is
                gen(from, context);
                context.write_line("ldfld " + symbol.il_type_name, symbol);
            si

            gen_address(context: IR.CONTEXT) is
                gen(from, context);
                context.write_line("ldflda " + symbol.il_type_name, symbol);
            si

            to_string() -> string =>
                "load:[" + type + "](" + from + ",\"" + symbol.name + "\")";
        si

        class STATIC_FIELD: SYMBOL, TypeTyped is
            init(symbol: SymbolBase) is
                super.init(null, symbol);
            si

            gen(context: IR.CONTEXT) is
                context.write_line("ldsfld " + symbol.il_type_name, symbol);
            si

            gen_address(context: IR.CONTEXT) is
                context.write_line("ldsflda " + symbol.il_type_name, symbol);
            si

            to_string() -> string =>
                "load:[" + type + "](\"" + symbol.name + "\")";
        si

        class INSTANCE_CLOSURE: SYMBOL, TypeTyped is
            func_type: Type;

            has_address: bool => false;

            init(symbol: SymbolBase, func_type: Type) is
                super.init(null, symbol);

                assert func_type?;
                
                self.func_type = func_type;
            si

            gen(context: IR.CONTEXT) is
                context.write_line("ldarg.0");
                context.write_line("ldftn instance " + symbol.il_type_name, symbol);
                context.write_line("newobj instance void " + func_type.il_type_name + "::'.ctor'(object, native int)");
            si

            to_string() -> string =>
                "load:[" + type + "](" + from + ",\"" + symbol.name + "\")";
        si

        class STATIC_CLOSURE: SYMBOL, TypeTyped is
            func_type: Type;

            has_address: bool => false;

            init(symbol: SymbolBase, func_type: Type) is
                super.init(null, symbol);

                assert func_type?;
                
                self.func_type = func_type;
            si

            gen(context: IR.CONTEXT) is
                context.write_line("ldnull");
                context.write_line("ldftn " + symbol.il_type_name, symbol);
                context.write_line("newobj instance void " + func_type.il_type_name + "::'.ctor'(object, native int)");
            si

            to_string() -> string =>
                "load:[" + type + "](" + from + ",\"" + symbol.name + "\")";
        si

        class CAPTURED_VALUE: SYMBOL, TypeTyped is
            has_address: bool => false;

            init(symbol: SymbolBase) is
                super.init(null, symbol);
            si

            gen(context: IR.CONTEXT) is
                context.fixme("captured value");
            si

            to_string() -> string =>
                "load:[" + type + "](" + from + ",\"" + symbol.name + "\")";
        si
    si

    namespace Store is
        class SYMBOL: Value, TypeTyped is
            symbol: SymbolBase;
            symbol_as_typed: TypeTyped => cast TypeTyped(symbol);
            type: Type => symbol_as_typed.type;
            from: Value;
            value: IR.Values.Value;

            init(from: Value, symbol: SymbolBase, value: IR.Values.Value) is
                super.init();

                assert symbol?;
                assert value?;

                self.from = from;
                self.symbol = symbol;
                self.value = value;
            si

            gen(context: IR.CONTEXT) is
                gen(from, context);
                gen(value, context);

                context.write_line("store member " + symbol);
            si            

            to_string() -> string =>
                "store:[" + type + "](" + from + ",\"" + symbol.name + "\"," + value + ")";
        si

        class LOCAL_VARIABLE: SYMBOL is
            init(symbol: SymbolBase, value: IR.Values.Value) is
                super.init(null, symbol, value);
            si

            gen(context: IR.CONTEXT) is
                gen(value, context);
                
                context.write_line("stloc " + symbol.il_name, symbol);
            si            

            to_string() -> string =>
                "store:[" + type + "](" + from + ",\"" + symbol.name + "\"," + value + ")";
        si

        class LOCAL_ARGUMENT: SYMBOL, TypeTyped is
            init(symbol: SymbolBase, value: IR.Values.Value) is
                super.init(null, symbol, value);
            si

            gen(context: IR.CONTEXT) is
                gen(value, context);

                context.write_line("starg " + symbol.il_name, symbol);
            si

            to_string() -> string =>
                "load:[" + type + "](" + from + ",\"" + symbol.name + "\")";
        si

        class INSTANCE_FIELD: SYMBOL is
            init(from: IR.Values.Value, symbol: SymbolBase, value: IR.Values.Value) is
                super.init(from, symbol, value);

                assert from?;
            si

            gen(context: IR.CONTEXT) is
                gen(from, context);
                gen(value, context);

                context.write_line("stfld " + symbol.il_type_name, symbol);
            si            

            to_string() -> string =>
                "store:[" + type + "](" + from + ",\"" + symbol.name + "\"," + value + ")";
        si

        class STATIC_FIELD: SYMBOL is
            init(symbol: SymbolBase, value: IR.Values.Value) is
                super.init(null, symbol, value);
            si

            gen(context: IR.CONTEXT) is
                gen(value, context);

                context.write_line("stsfld " + symbol.il_type_name, symbol);
            si            

            to_string() -> string =>
                "store:[" + type + "](\"" + symbol.name + "\"," + value + ")";
        si
    si

    namespace Call is
        class INNATE: Value, TypeTyped is
            function: Semantic.Symbols.InnateFunction;
            from: Value;
            arguments: Collections.LIST[Value];
            type: Type;
            has_type: bool => type?;

            actual_operation: string public;
            
            innate_name: string => function.innate_name;
            type_name: string => innate_name.substring(0, innate_name.index_of('.'));
            op_name: string => innate_name.substring(innate_name.index_of('.') + 1);    

            init(
                function: Semantic.Symbols.InnateFunction,
                from: Value,
                arguments: Collections.LIST[Value],
                type: Type) is
                super.init();

                assert function?;
                assert arguments?;

                self.function = function;
                self.arguments = arguments;

                if type? then
                    self.type = type;
                else
                    self.type = function.return_type;
                fi
            si

            gen(context: IR.CONTEXT) is
                IoC.CONTAINER.instance.innate_operation_generator.gen(self, context);
            si

            to_string() -> string =>
                "innate-call:[" + type + "](\"" + function.name + "\"," + from + "," + arguments + ")";
        si

        class GLOBAL: Value, TypeTyped is
            function: Semantic.Symbols.Function;
            arguments: Collections.LIST[Value];
            type: Type;
            has_type: bool => type?;

            init(function: Semantic.Symbols.Function, arguments: Collections.LIST[Value], type: Type) is
                super.init();

                self.function = function;
                self.arguments = arguments;

                if type? then
                    self.type = type;
                else
                    self.type = function.return_type;
                fi

                assert self.type?;
            si

            gen(context: IR.CONTEXT) is
                for a in arguments do
                    gen(a, context);
                od

                context.write_line("call " + function.il_type_name);                
            si

            to_string() -> string =>
                "global-call:[" + type + "](\"" + function.name + "\"," + arguments + ")";
        si

        class INSTANCE: Value, TypeTyped is
            from: Value;
            function: Semantic.Symbols.Function;
            arguments: Collections.LIST[Value];
            type: Type;
            has_type: bool => type?;

            init(from: Value, function: Semantic.Symbols.Function, arguments: Collections.LIST[Value], type: Type) is
                super.init();

                self.from = from;
                self.function = function;
                self.arguments = arguments;

                if type? then
                    self.type = type;
                else
                    self.type = function.return_type;
                fi

                assert self.type?;                
            si

            gen(context: IR.CONTEXT) is
                gen(from, context);

                for a in arguments do
                    gen(a, context);
                od

                if from.is_super then
                    context.write_line("call instance " + function.il_type_name, function);                     
                else
                    // FIXME: #544 should be 'callvirt instance' 
                    context.write_line("callvirt instance " + function.il_type_name, function);                     
                fi
            si

            to_string() -> string =>
                "instance-call:[" + type + "](" + from + ",\"" + function.name + "\"," +  arguments + ")";
        si

        class STRUCT: Value, TypeTyped is
            from: Value;
            function: Semantic.Symbols.Function;
            arguments: Collections.LIST[Value];
            type: Type;
            has_type: bool => type?;

            init(from: Value, function: Semantic.Symbols.Function, arguments: Collections.LIST[Value], type: Type) is
                super.init();

                self.from = from;
                self.function = function;
                self.arguments = arguments;

                if type? then
                    self.type = type;
                else
                    self.type = function.return_type;
                fi

                assert self.type?;                
            si

            gen(context: IR.CONTEXT) is
                gen(from, context);

                for a in arguments do
                    gen(a, context);
                od
   
                context.write_line("call instance " + function.il_type_name);
            si

            to_string() -> string =>
                "struct-call:[" + type + "](" + from + ",\"" + function.name + "\"," +  arguments + ")";
        si

        class STATIC: Value, TypeTyped is
            function: Semantic.Symbols.Function;
            arguments: Collections.LIST[Value];
            type: Type;
            has_type: bool => type?;

            init(function: Semantic.Symbols.Function, arguments: Collections.LIST[Value], type: Type) is
                super.init();

                self.function = function;
                self.arguments = arguments;

                if type? then
                    self.type = type;
                else
                    self.type = function.return_type;
                fi

                assert self.type?;
            si

            gen(context: IR.CONTEXT) is
                for a in arguments do
                    gen(a, context);
                od

                context.write_line("call " + function.il_type_name);
            si

            to_string() -> string =>
                "static-call:[" + type + "](\"" + function.name + "\"," +  arguments + ")";
        si

        class CLOSURE: Value, TypeTyped is
            from: Value;
            type: Type;
            has_type: bool => type?;

            is_function: bool;
            func_type: Type;
            arguments: Collections.LIST[Value];

            init(
                from: Value,
                type: Type,
                is_function: bool,
                func_type: Type,
                arguments: Collections.LIST[Value]
            ) is
                super.init();

                assert type?;
                assert func_type?;
                assert arguments?;

                self.from = from;
                self.type = type;
                self.is_function = is_function;
                self.func_type = func_type;
                self.arguments = arguments;
            si

            gen(context: IR.CONTEXT) is
                gen(from, context);

                let count = 0;
                for a in arguments do
                    gen(a, context);

                    count = count + 1;
                od

                let call = new System.Text.StringBuilder();

                call
                    .append("callvirt instance ");

                if is_function then
                    call
                        .append("!")
                        .append(count);
                else
                    call
                        .append("void");
                fi
                                    
                call
                    .append(" ")
                    .append(func_type.il_type_name)
                    .append("::Invoke(");

                for i in 0..count do
                    if i > 0 then
                        call.append(",");
                    fi
                    
                    call
                        .append("!")
                        .append(i);                    
                od

                call.append(")");
                
                context.write_line(call.to_string());
            si
            
            to_string() -> string =>
                "closure-call:[" + type + "](" + from + "," + arguments + ")";
        si
    si

    namespace Literal is
        class NUMBER: Value, TypeTyped is
            value: string;
            type: Type;
            suffix: string;
            conv: string;
            has_type: bool => type?;

            init(value: string, type: Type, suffix: string, conv: string) is
                super.init();

                assert value?;
                assert type?;
                assert suffix?;

                self.value = value;
                self.type = type;
                self.suffix = suffix;
                self.conv = conv;
            si

            init(value: string, type: Type, suffix: string) is
                self.init(value, type, suffix, null);
            si

            gen(context: IR.CONTEXT) is
                context.write_line("ldc." + suffix + " " + value);

                if conv? then
                    context.write_line(conv);                    
                fi
            si

            to_string() -> string =>
                "literal:[" + type + "](" + string + ")";
        si

        class STRING: Value, TypeTyped is
            value: string;
            type: Type;
            has_type: bool => type?;

            init(value: string, type: Type) is
                super.init();

                assert value?;
                assert type?;

                self.value = value;
                self.type = type;
            si

            gen(context: IR.CONTEXT) is
                let result = new System.Text.StringBuilder(value.length * 8);

                for c in value do
                    let uc = cast uint(c); 

                    let high = uc / cast uint(256);
                    let low = uc - (high * cast uint(256));

                    result
                        .append(low.to_string("X02"))
                        .append(" ")
                        .append(high.to_string("X02"))
                        .append(" ");
                od
                
                context.write_line("ldstr bytearray (" + result + ")");
            si

            to_string() -> string =>
                "literal:[" + type + "](\"" + string + "\")";
        si
    si
si
