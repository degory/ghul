namespace IR is
    use System;
    use Generic;
    use Semantic.Graph.Value.Call;

    class INNATE_OPERATION_GENERATOR is
        _boxer: VALUE_BOXER;
        _brancher: IR.BRANCHER;
        _type_and_operation_handlers: Dict[String,(INNATE,CONTEXT) -> void];
        _operation_handlers: Dict[String,(INNATE,CONTEXT) -> void];
        _type_handlers: Dict[String,(INNATE,CONTEXT) -> void];

        init(
            boxer: VALUE_BOXER,
            brancher: IR.BRANCHER
        ) is
            _boxer = boxer;
            _brancher = brancher;

            _type_and_operation_handlers = new Map[String,(INNATE,CONTEXT) -> void]();
            _operation_handlers = new Map[String,(INNATE,CONTEXT) -> void]();
            _type_handlers = new Map[String,(INNATE,CONTEXT) -> void]();

            _type_and_operation_handlers["string.add"] = (value: INNATE, context: CONTEXT) -> void is gen_string(value, context); si;

            _type_and_operation_handlers["compare.order"] = (value: INNATE, context: CONTEXT) -> void is gen_compare_order(value, false, context); si;
            _type_and_operation_handlers["compare.uorder"] = (value: INNATE, context: CONTEXT) -> void is gen_compare_order(value, true, context); si;

            _type_handlers["bool"] = (value: INNATE, context: CONTEXT) -> void is gen_short_circuit_bool(value, context); si;
            _type_handlers["arithmetic"] = (value: INNATE, context: CONTEXT) -> void is gen_arithmetic(value, context); si;
        si

        gen(value: INNATE, context: CONTEXT) is
            if !value? || !value.function? then
                context.println("oops: innate operation function is null: " + value);
                return;
            fi

            let innate_name = value.innate_name;

            if !innate_name? then
                context.println("oops: innate operation function has no innate operation name: " + value);
                return;
            fi

            if try_handle(innate_name, _type_and_operation_handlers, value, context) then
                return;
            fi
            
            let operation_name = value.op_name;

            if try_handle(operation_name, _operation_handlers, value, context) then
                return;
            fi
            
            let type_name = value.type_name;

            if try_handle(type_name, _type_handlers, value, context) then
                return;
            fi
            
            for a in value.arguments do
                INNATE.gen(a, context);
            od

            context.println("unknown innate operation: " + value.function.innate_name);
        si     
        
        try_handle(
            key: String,
            handlers: Dict[String,(INNATE,CONTEXT) -> void],
            value: INNATE,
            context: IR.CONTEXT) -> bool is
            let handler = handlers[key];

            if handler? then
                handler(value, context);
                return true;
            fi
        si

        gen_arithmetic(value: INNATE, context: CONTEXT) is
            gen_arguments(value, context);

            let operation = value.op_name;

            // FIXME: do we need to convert the inputs or outputs?
            context.println(operation);
        si

        gen_short_circuit_bool(value: INNATE, context: CONTEXT) is
            let exit = new IR.LABEL();
            let operation = value.op_name;

            // push speculative result:
            if operation =~ "and_then" then
                context.println("ldc.i4 0", "&& false if left is false");
            else
                context.println("ldc.i4 1", "|| true if left is true");
            fi

            // branch to exit if speculative result is correct based on evaluating left argument:
            if operation =~ "and_then" then
                _brancher.branch(IR.BRANCH.Z, value.arguments[0], exit, "&&");
            else
                _brancher.branch(IR.BRANCH.NZ, value.arguments[0], exit, "||");
            fi

            // speculative result may not be correect, discard it:
            context.println("pop");
            
            // result is value of right side: 
            gen_argument(value, 1, context);

            _brancher.label(exit);
        si

        gen_compare_order(value: INNATE, is_unsigned: bool, context: CONTEXT) is
            gen_arguments(value, context);

            let actual_operation = value.actual_operation;

            let needs_not = false;
            let instruction: String = "unknown compare order: " + actual_operation;

            if actual_operation =~ ">" then
                instruction = "cgt";
            elif actual_operation =~ ">=" then
                instruction = "clt";
                needs_not = true;
            elif actual_operation =~ "<" then
                instruction = "clt";
            elif actual_operation =~ "<=" then
                instruction = "cgt";
                needs_not = true;
            fi

            if is_unsigned then
                instruction = instruction + ".un";
            fi
                            
            context.println(instruction, value.actual_operation);

            if needs_not then
                context.println("not");
            fi            
        si        
        
        gen_string(value: INNATE, context: CONTEXT) is
            let innate_name = value.function.innate_name;

            if innate_name !~ "string.add" then
                context.println("unknown innate operation: " + value.function.innate_name);

                return;
            fi

            Semantic.Graph.Value.BASE.gen(value.arguments[0], context);

            INNATE.gen(_boxer.box_if_value(value.arguments[1]), context);

            context.println("call string string::Concat(object,object)");
        si

        gen_argument(value: INNATE, index: int, context: CONTEXT) is
            Semantic.Graph.Value.BASE.gen(value.arguments[index], context);
        si

        gen_arguments(value: INNATE, context: CONTEXT) is
            for a in value.arguments do
                Semantic.Graph.Value.BASE.gen(a, context);
            od
        si        
    si
si
