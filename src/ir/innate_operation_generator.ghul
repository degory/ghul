namespace IR is
    use System.Exception;

    use Values.Call;
    use Values.Value;

    use Values.BLOCK;

    class INNATE_OPERATION_GENERATOR is
        _logger: Logging.Logger;
        _boxer: VALUE_BOXER;
        _brancher: IR.BRANCHER;
        _flags: Compiler.BUILD_FLAGS;
        _type_and_operation_handlers: Collections.MAP[string,(INNATE,BLOCK) -> void];
        _operation_handlers: Collections.MAP[string,(INNATE,BLOCK) -> void];
        _type_handlers: Collections.MAP[string,(INNATE,BLOCK) -> void];

        init(
            logger: Logging.Logger,
            boxer: VALUE_BOXER,
            brancher: IR.BRANCHER,
            flags: Compiler.BUILD_FLAGS
        ) is
            _logger = logger;
            _boxer = boxer;
            _brancher = brancher;
            _flags = flags;

            _type_and_operation_handlers = new Collections.MAP[string,(INNATE,BLOCK) -> void]();
            _operation_handlers = new Collections.MAP[string,(INNATE,BLOCK) -> void]();
            _type_handlers = new Collections.MAP[string,(INNATE,BLOCK) -> void]();

            _type_and_operation_handlers["compare.order"] = (value: INNATE, context: BLOCK) -> void is gen_compare_order(value, false, context); si;
            _type_and_operation_handlers["compare.uorder"] = (value: INNATE, context: BLOCK) -> void is gen_compare_order(value, true, context); si;
            _type_and_operation_handlers["compare.value"] = (value: INNATE, context: BLOCK) -> void is gen_compare_value(value, context); si;
            _type_and_operation_handlers["compare.reference"] = (value: INNATE, context: BLOCK) -> void is gen_compare_reference(value, context); si;

            _type_and_operation_handlers["bool.not"] = (value: INNATE, context: BLOCK) -> void is gen_bool_not(value, context); si;
            _type_and_operation_handlers["reference.read"] = (value: INNATE, context: BLOCK) -> void is gen_reference_read(value, context); si;
            _type_and_operation_handlers["reference.assign"] = (value: INNATE, context: BLOCK) -> void is gen_reference_assign(value, context); si;

            _type_handlers["bool"] = (value: INNATE, context: BLOCK) -> void is gen_short_circuit_bool(value, context); si;
            _type_handlers["arithmetic"] = (value: INNATE, context: BLOCK) -> void is gen_arithmetic(value, context); si;
            _type_handlers["string"] = (value: INNATE, context: BLOCK) -> void is gen_string(value, context); si;
            _type_handlers["range"] = (value: INNATE, context: BLOCK) -> void is gen_range(value, context); si;

            // _type_handlers["object"] = (value: INNATE, context: CONTEXT) -> void is gen_object(value, context); si;
        si

        lower(value: INNATE, block: BLOCK) is
            assert
                value? /\
                value.function? /\
                value.function.innate_name?
            else
                "innate operation value or function is null";

            if !IoC.CONTAINER.instance.build_flags.want_assembler then
                return;
            fi

            let innate_name = value.innate_name;

            if try_handle(innate_name, _type_and_operation_handlers, value, block) then
                return;
            fi
            
            let operation_name = value.op_name;

            if try_handle(operation_name, _operation_handlers, value, block) then
                return;
            fi
            
            let type_name = value.type_name;

            if try_handle(type_name, _type_handlers, value, block) then
                return;
            fi
            
            throw new System.Exception("unknown innate operation: {value.function.innate_name}");
        si     
        
        try_handle(
            key: string,
            handlers: Collections.Map[string,(INNATE,BLOCK) -> void],
            value: INNATE,
            block: BLOCK) -> bool is

            if handlers.contains_key(key) then
                let handler = handlers[key];

                handler(value, block);
                return true;
            fi
        si

        gen_arithmetic(value: INNATE, block: BLOCK) is
            gen_arguments(value, block);

            let operation = value.op_name;

            // FIXME: do we need to convert the inputs or outputs?
            block.add(operation);
        si

        gen_bool_not(value: INNATE, block: BLOCK) is
            assert value.arguments? /\ value.arguments.count == 1 else "not bool missing arguments";

            gen_arguments(value, block);

            block.add("ldc.i4 0");
            block.add("ceq");
        si

        gen_short_circuit_bool(value: INNATE, block: BLOCK) is
            assert value.arguments? /\ value.arguments.count == 2 else "short circuit bool missing arguments";

            let brancher = _brancher.get_for(block);

            let exit = new IR.LABEL();
            let operation = value.op_name;

            // push speculative result:
            if operation =~ "and_then" then
                block.add("ldc.i4 0");
            else
                block.add("ldc.i4 1");
            fi
        
            // branch to exit if speculative result is correct based on evaluating left argument:
            if operation =~ "and_then" then
                brancher.branch(IR.BRANCH.Z, value.arguments[0], exit);
            else
                brancher.branch(IR.BRANCH.NZ, value.arguments[0], exit);
            fi

            // speculative result may not be correct, discard it:
            block.add("pop");
            
            // result is value of right side: 
            gen_argument(value, 1, block);

            brancher.label(exit);
        si

        gen_compare_order(value: INNATE, is_unsigned: bool, block: BLOCK) is
            assert value.arguments? /\ value.arguments.count == 2 else "compare order missing arguments";

            gen_arguments(value, block);

            let actual_operation = value.actual_operation;

            let needs_not = false;
            let instruction: string;

            if actual_operation =~ ">" then
                instruction = "cgt";
            elif actual_operation =~ ">=" then
                instruction = "clt";
                needs_not = true;
            elif actual_operation =~ "<" then
                instruction = "clt";
            elif actual_operation =~ "<=" then
                instruction = "cgt";
                needs_not = true;
            else
                throw new System.Exception("unexpected compare order operation: {actual_operation}");
            fi

            if is_unsigned then
                instruction = instruction + ".un";
            fi
                            
            block.add(instruction);

            if needs_not then
                block.add("ldc.i4 0");
                block.add("ceq");
            fi            
        si        
        
        gen_string(value: INNATE, block: BLOCK) is
            let innate_name = value.function.innate_name;

            if innate_name =~ "string.add" then
                block.add(value.arguments[0]);

                block.add(_boxer.box_if_value(value.arguments[1]));

                block.add("call string string::Concat(object,object)");
            elif innate_name =~ "string.equals" then
                gen_arguments(value, block);

                block.add("call bool string::op_Equality(string, string)");

                if value.actual_operation =~ "!~" then
                    block.add("ldc.i4 0");
                    block.add("ceq");
                fi                             
            else
                throw new System.Exception("unexpected string innate operation: {innate_name}");
            fi
        si

        gen_compare_reference(value: INNATE, block: BLOCK) is
            assert value.arguments? /\ value.arguments.count == 2 else "compare reference missing arguments";

            let left = value.arguments[0];
            let right = value.arguments[1];

            if left.is_value_type != right.is_value_type then
                left = _boxer.box_if_value(left);
                right = _boxer.box_if_value(right);
            fi

            block.add(left);
            block.add(right);

            block.add("ceq");

            if value.actual_operation =~ "!=" then
                block.add("ldc.i4 0");
                block.add("ceq");
            fi                
        si

        gen_compare_value(value: INNATE, block: BLOCK) is
            assert value.arguments? /\ value.arguments.count == 2 else "compare value missing arguments";

            gen_arguments(value, block);

            block.add("ceq");

            if value.actual_operation =~ "!=" then
                block.add("ldc.i4 0");
                block.add("ceq");
            fi                
        si

        gen_range(value: INNATE, block: BLOCK) is
            assert value.arguments? /\ value.arguments.count == 2 else "create range incorrect arguments";

            gen_arguments(value, block);

            let prefix = "['ghul-runtime']";

            if _flags.want_stubs then
                prefix = "";
            fi
            
            if value.op_name =~ "inclusive" then
                block.add("newobj instance void valuetype {prefix}'Ghul'.'INT_RANGE_INCLUSIVE'::'.ctor'(int32,int32)");
            elif value.op_name =~ "exclusive" then
                block.add("newobj instance void valuetype {prefix}'Ghul'.'INT_RANGE'::'.ctor'(int32,int32)");                                
            else
                throw new Exception("unexpected range innate operation: {value.innate_name}");
            fi
        si

        gen_reference_read(value: INNATE, context: BLOCK) is
            // TODO
        si        

        gen_reference_assign(value: INNATE, context: BLOCK) is
            // TODO
        si        

        gen_argument(value: INNATE, index: int, block: BLOCK) is
            block.add(value.arguments[index]);
        si

        gen_arguments(value: INNATE, block: BLOCK) is
            for a in value.arguments do
                block.add(a);
            od
        si        
    si
si
