namespace IR is
    @IF.not.v3() use object = System.Object;
    @IF.not.v3() use string = System.String;
    @IF.not.v3() use Std = System.Console;

    use System;

    use Semantic.Types.Type;

    use Values.Value;

    class TEMP is
        _context: IR.CONTEXT;
        _next_id: int static;

        id: int;
        suffix: int;
        type: Type;

        name: string is
            if suffix > 0 then
                return "'.temp." + id + "." + suffix + "'";
            else
                return "'.temp." + id + "'";                                
            fi            
        si

        init(context: IR.CONTEXT, suffix: int, type: Type) is
            self._context = context;
            self.suffix = suffix;

            self.id = _next_id;
            _next_id = _next_id + 1;

            self.type = type;

            declare();
        si

        init(context: IR.CONTEXT, value: Value) is
            init(context, 0, value);
        si

        init(context: IR.CONTEXT, suffix: int, value: Value) is
            init(context, suffix, value.type);

            store(value);
        si

        init(context: IR.CONTEXT, type: Type) is
            init(context, 0, type);
        si

        declare() is            
            _context.write_line(".locals init (" + type.il_type_name + " " + name + ")");
        si

        load() -> Values.Load.TEMP => new Values.Load.TEMP(name, type);

        store(value: Value) is
            Value.gen(value, _context);

            _context.write_line("stloc " + name);
        si        
    si
si