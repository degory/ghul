namespace IR is
    use IO.Std;

    use Semantic.Types.Type;
    use Values.Value;

    class TEMP is
        _context: IR.CONTEXT;
        _next_id: int static;

        id: int;
        suffix: int;
        type: Type;

        name: string is
            if suffix > 0 then
                return "'.temp.{id}.{suffix}'";
            else
                return "'.temp.{id}'";
            fi
        si

        init(context: IR.CONTEXT, suffix: int, type: Type) is
            _context = context;
            self.suffix = suffix;

            self.id = _next_id;
            _next_id = _next_id + 1;

            self.type = type;

            declare();
        si

        init(context: IR.CONTEXT, value: Value) is
            init(context, 0, value);
        si

        init(context: IR.CONTEXT, suffix: int, value: Value) is
            init(context, suffix, value.type);

            store(value);
        si

        init(context: IR.CONTEXT, type: Type) is
            init(context, 0, type);
        si

        reset_id() static is
            _next_id = 0;
        si

        declare() is
            let buffer = new System.Text.StringBuilder();

            buffer
                .append(".locals init (");

            type.gen_type(buffer);

            buffer
                .append(' ')
                .append(name)
                .append(')');

            _context.write_line(buffer);
        si

        load() -> Values.Load.TEMP => new Values.Load.TEMP(name, type);

        store(value: Value) is
            Value.gen(value, _context);

            _context.write_line("stloc {name}");
        si        
    si
si