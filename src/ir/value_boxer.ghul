namespace IR is
    use Generic;
    use Semantic;

    class VALUE_BOXER is
        init() is
            super.init();
        si

        box_if_value(value: Graph.Value.BASE) -> Graph.Value.BASE is
            if value.is_value_type then
                return new Graph.Value.BOX(value);
            else
                return value;
            fi
        si
        
        box_arguments(arguments: List[Graph.Value.BASE], argument_types: List[Type.BASE]) -> List[Graph.Value.BASE] is
            let any_need_boxing = false;

            let result = new Vector[Graph.Value.BASE](arguments.Length);

            if !arguments? || !argument_types? || argument_types.Length > arguments.Length then
                IO.Std.err.println("cannot box incomplete argument list: " + arguments + " vs " + argument_types);
            fi

            for i in 0..arguments.Length do
                if !argument_types[i]? || !arguments[i]? || !arguments[i].has_type then
                    return arguments;
                fi

                if !argument_types[i].is_value_type && arguments[i].type.is_value_type then
                    any_need_boxing = true;
                    break;
                fi
            od

            if !any_need_boxing then
                return arguments;
            fi

            for i in 0..arguments.Length do
                if !argument_types[i].is_value_type && arguments[i].type.is_value_type then
                    result.add(new Graph.Value.BOX(arguments[i]));
                else
                    result.add(arguments[i]);                    
                fi
            od

            return result;
        si
    si    
si
