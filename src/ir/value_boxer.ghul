namespace IR is
    use Semantic.Types.Type;

    use IR.Values.Value;
    
    class VALUE_BOXER is
        _logger: Logging.Logger;

        want_boxing: bool public;

        init(logger: Logging.Logger) is
            super.init();

            _logger = logger;
        si

        box_if_value(value: Value) -> Value is
            if want_boxing /\ value.is_value_type then
                return Values.BOX(value);
            else
                return value;
            fi
        si

        box_if_needed(value: Value, target_type: Type) -> Value is
            if want_boxing /\ value.is_value_type /\ !target_type.is_value_type then
                return Values.BOX(value);
            else
                return value;
            fi
        si
        
        box_arguments(arguments: Collections.List[Value], argument_types: Collections.List[Type]) -> Collections.List[Value] is
            if !want_boxing then
                return arguments;
            fi

            if
                !arguments? \/
                !argument_types? \/
                arguments.count != argument_types.count
            then
                _logger.poison(Source.LOCATION.internal, "boxed incomplete arguments");
                return arguments;
            fi

            let any_need_boxing = false;

            for i in 0..arguments.count do
                if
                    !argument_types[i]? /\
                    !arguments[i]? /\
                    !arguments[i].has_type
                then
                    _logger.poison(Source.LOCATION.internal, "boxed incomplete argument");
                    return arguments;
                fi
                
                if !argument_types[i].is_value_type /\ arguments[i].type.is_value_type then
                    any_need_boxing = true;
                    break;
                fi
            od

            if !any_need_boxing then
                return arguments;
            fi

            let result = Collections.LIST[Value](arguments.count);

            for i in 0..arguments.count do
                if !argument_types[i].is_value_type /\ arguments[i].type.is_value_type then
                    result.add(Values.BOX(arguments[i]));
                else
                    result.add(arguments[i]);                    
                fi
            od

            return result;
        si
    si    
si
