namespace IR is
    @IF.not.v3() use object = System.Object;
    @IF.not.v3() use string = System.String;
    @IF.not.v3() use Std = System.Console;
    
    use Semantic.Types.Type;
    use NAMED_TYPE = Semantic.Types.NAMED;

    class VALUE_CONVERTER is
        _logger: Logging.Logger;
        _ghul_symbol_lookup: Semantic.GHUL_SYMBOL_LOOKUP;

        _instructions: Collections.MAP[string, string];

        init(
            logger: Logging.Logger,
            ghul_symbol_lookup: Semantic.GHUL_SYMBOL_LOOKUP
        ) is
            super.init();

            _logger = logger;
            _ghul_symbol_lookup = ghul_symbol_lookup;
        si

        complete_initialization() is
            if _instructions? then
                return;
            fi
            
            _instructions = new Collections.MAP[string, string]();

            add_instruction(_ghul_symbol_lookup.get_bool_type(), "conv.u1");

            add_instruction(_ghul_symbol_lookup.get_ubyte_type(), "conv.u1");
            add_instruction(_ghul_symbol_lookup.get_byte_type(), "conv.i1");

            add_instruction(_ghul_symbol_lookup.get_char_type(), "conv.u2");

            add_instruction(_ghul_symbol_lookup.get_ushort_type(), "conv.u2");
            add_instruction(_ghul_symbol_lookup.get_short_type(), "conv.i2");

            add_instruction(_ghul_symbol_lookup.get_uint_type(), "conv.u4");
            add_instruction(_ghul_symbol_lookup.get_int_type(), "conv.i4");

            add_instruction(_ghul_symbol_lookup.get_ulong_type(), "conv.u8");
            add_instruction(_ghul_symbol_lookup.get_long_type(), "conv.i8");

            add_instruction(_ghul_symbol_lookup.get_single_type(), "conv.r4");
            add_instruction(_ghul_symbol_lookup.get_double_type(), "conv.r8");
        si

        add_instruction(type: NAMED_TYPE, instruction: string) is
            _instructions[type.symbol.qualified_name] = instruction;
        si        

        get_instruction(type: Type) -> string is
            complete_initialization();

            if !type? || !type.symbol? then
                return null;
            fi
           
            let name = type.symbol.qualified_name;

            if _instructions.contains_key(name) then
                return _instructions[name];
            fi
        si
    si    
si
