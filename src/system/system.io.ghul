
namespace System is
    @IF.legacy()
    namespace IO2 is
        class TextWriter is
            _writer: IO.Writer;

            init(writer: IO.Writer) is
                _writer = writer;
            si
            
            close() is
                _writer.close();
            si
            
            flush() is
                _writer.flush();
            si
            
            write(value: char) is
                _writer.write(value);
            si
            
            // write(value: int) is
            //     _writer.print("" + value);
            // si

            write(value: System.String) is
                _writer.print(value);
            si

            write(value: System.Object) is
                _writer.print(value);
            si
                    
            write_line() is
                _writer.println("");
            si
            
            write_line(value: System.String) is
                _writer.println(value);
            si        

            write_line(value: System.Object) is
                _writer.println(value);
            si

            flush_on_println() is
                _writer.FlushOnPrintln = true;
            si
            
        si

        class TextReader is
            _reader: IO.Reader;

            init(reader: IO.Reader) is
                _reader = reader;
            si

            close() is
                _reader.close();
            si
            
            peek() -> int is
                if _reader.isAtEnd() then
                    return -1;
                fi
                
                let result = _reader.read();

                if result != -1 then
                    _reader.unRead(result);
                fi

                return result;
            si
            
            read() -> int => _reader.read();

            read_to_end() -> System.String => _reader.readAll();

            read_line() -> System.String is
                if _reader.isAtEnd() then
                    return null;
                fi
                
                let result = _reader.readLine();
                
                if result.Length == 0 && _reader.isAtEnd() then
                    return null;
                fi

                return result;            
            si
        si
    si
si
