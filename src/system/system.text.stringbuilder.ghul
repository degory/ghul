namespace System.Text is
    class StringBuilder is
        _buffer: System.StringBuffer;

        count: int => _buffer.Length;

        init() is 
            _buffer = new System.StringBuffer();
        si

        init(capacity: int) is
            _buffer = new System.StringBuffer(capacity);
        si

        init(value: System.String) is
            _buffer = new System.StringBuffer(value);
        si
                
        to_string() -> System.String => _buffer.toString();

        clear() -> System.Text.StringBuilder is
            _buffer = new System.StringBuffer();

            return self;
        si       

        // append(value: char, repeat_count: int) -> System.Text.StringBuilder;

        append(value: System.String) -> System.Text.StringBuilder is
            _buffer.append(value);

            return self;
        si
        
        append(value: System.Text.StringBuilder) -> System.Text.StringBuilder is
            _buffer.append(value);

            return self;
        si
        
        append(value: bool) -> System.Text.StringBuilder is

            if value then
                _buffer.append("true");
            else
                _buffer.append("false");
            fi
                        
            return self;
        si
        
        append(value: char) -> System.Text.StringBuilder is
            _buffer.append(value);

            return self;
        si

        append(value: int) -> System.Text.StringBuilder is
            _buffer.append(value);

            return self;
        si
        append(value: System.Object) -> System.Text.StringBuilder is
            _buffer.append(value);

            return self;
        si

        append_join(separator: System.String, values: System.Object[]) -> System.Text.StringBuilder is
            let seen_any = false;

            for value in values do
                if seen_any then
                    _buffer.append(separator);
                fi
                
                _buffer.append(value);

                seen_any = true;
            od
            
            return self;
        si

        // append_join[T](separator: System.String, values: Collections.Iterable[T]) -> System.Text.StringBuilder;

        append_join(separator: System.String, values: System.String[]) -> System.Text.StringBuilder is
            let seen_any = false;

            for value in values do
                if seen_any then
                    _buffer.append(separator);
                fi
                
                _buffer.append(value);

                seen_any = true;
            od
            
            return self;
        si

        append_join(separator: char, values: System.Object[]) -> System.Text.StringBuilder is
            let seen_any = false;

            for value in values do
                if seen_any then
                    _buffer.append(separator);
                fi
                
                _buffer.append(value);

                seen_any = true;
            od
            
            return self;
        si

        // append_join[T](separator: char, values: Collections.Iterable[T]) -> System.Text.StringBuilder;

        append_join(separator: char, values: System.String[]) -> System.Text.StringBuilder is
            let seen_any = false;

            for value in values do
                if seen_any then
                    _buffer.append(separator);
                fi
                
                _buffer.append(value);

                seen_any = true;
            od
            
            return self;
        si

        length: int => _buffer.Length;

        // named indexer: Chars
    si

si