namespace Collections is
    trait Iterable[T] is
        iterator: Generic.Iterator[T];        
    si

    trait Iterator[T] is
        move_next() -> bool;

        current: T;
    si
        
    trait List[T] is
        [index: int]: T,;
    si

    trait MutableList[T] is
        [index: int]: T, = value;
    si    
        
    class LIST[T]: Generic.Vector[T], List[T], Iterable[T] is
        iterator: Iterator[T] => new ITERATOR_WRAPPER(self.Iterator);
    si

    class MAP[K,V]: Generic.Map[K,V] is
        keys: Iterable[K] => new ITERATOR_WRAPPER(Keys);
        values: Iterable[V] => new ITERATOR_WRAPPER(Values);
        iterator: Iterable[Generic.PAIR[K,V]] => ITERABLE_WRAPPER(Pairs);
    si

    class STACK[T]: Generic.Vector[T], List[T], Iterable[T] is
    si

    class ITERABLE_WRAPPER[T]: Iterable[T] is
        inner: Generic.Iterable[T];

        iterator: ITERATOR_WRAPPER[T] => new ITERATOR_WRAPPER[T](inner.Iterator);
    si

    class ITERATOR_WRAPPER[T]: Iterator[T] is
        inner: Generic.Iterator[T];

        current: T;

        init(inner: Generic.Iterator[T]) is
            self.inner = inner;
        si

        move_next() -> bool is
            if inner.hasMoreElements() then
                current = inner.nextElement();

                return true;
            else
                return false;
            fi            
        si        
    si
    
si
