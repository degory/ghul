namespace IO is
    use System;
    use Collections;

    @IF.legacy()
    class DIRECTORY: Object, Generic.Iterable[String] is
        files: Generic.Iterable[String];

        Iterator: Generic.Iterator[String] => files.Iterator;

        init(path: String) is
            let dir = cast word ptr(native.opendir(path.toCString()));

            if dir == null then
                throw new Exception("could not open directory: " + path);
                // FileStream.throwIOError("directory", path, FileStream.StaticLastError);
            fi

            let results = new Generic.Vector[String]();

            if !path.endsWith('/') then
                path = path + '/';
            fi
            
            do
                let ent = cast word ptr(native.readdir(dir));

                if ent == null then
                    break;
                fi

                results.add(path + new String(cast char ptr(native.__get_dirent_name(ent))));
            od

            files = results;
        si
    si

    @IF.dotnet()
    class DIRECTORY: Object /*, Iterable[String]*/ is
        files: Iterable[String];

        iterator: Iterator[String] => files.iterator;

        init(path: String) is
            files = System.IO2.Directory.get_files(path);
        si
    si
si

@IF.dotnet()
namespace System.IO2 is
    @IL.stub()
    @IL.name("[mscorlib]System.IO.Directory")
    class Directory is
        @IL.name("GetFiles")
        get_files(path: String) -> String[] static;
    si
si

