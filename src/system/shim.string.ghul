namespace Shim is
    use System;
    
    class STR is
        @IF.legacy()
        length(value: String) -> int static => value.Length;

        @IF.dotnet()
        length(value: String) -> int static => value.length;

        @IF.legacy()
        get_at(value: String, index: int) -> char static => value[index];

        @IF.dotnet()
        get_at(value: String, index: int) -> char static => value.get_at(index);

        @IF.legacy()
        split(value: String, delimiter: char) -> Collections.LIST[String] static => new Collections.LIST[String](value.split(delimiter));

        @IF.dotnet()
        split(value: String, delimiter: char) -> Collections.LIST[String] static => new Collections.LIST[String](value.split([delimiter]));

        @IF.legacy()
        starts_with(value: String, prefix: String) -> bool static => value.startsWith(prefix);

        @IF.dotnet()
        starts_with(value: String, prefix: String) -> bool static => value.starts_with(prefix);

        @IF.legacy()
        starts_with(value: String, prefix: char) -> bool static => value.startsWith(prefix);

        @IF.dotnet()
        starts_with(value: String, prefix: char) -> bool static => value.starts_with(prefix);

        @IF.legacy()
        ends_with(value: String, prefix: String) -> bool static => value.endsWith(prefix);

        @IF.dotnet()
        ends_with(value: String, prefix: String) -> bool static => value.ends_with(prefix);

        @IF.legacy()
        ends_with(value: String, prefix: char) -> bool static => value.endsWith(prefix);

        @IF.dotnet()
        ends_with(value: String, prefix: char) -> bool static => value.ends_with(prefix);

        @IF.legacy()
        index_of(value: String, search: char) -> int static => value.indexOf(search);

        @IF.dotnet()
        index_of(value: String, search: char) -> int static => value.index_of(search);

        @IF.legacy()
        index_of(value: String, search: String) -> int static => value.indexOf(search);

        @IF.dotnet()
        index_of(value: String, search: String) -> int static => value.index_of(search);

        @IF.legacy()
        last_index_of(value: String, search: char) -> int static => value.lastIndexOf(search);

        @IF.dotnet()
        last_index_of(value: String, search: char) -> int static => value.last_index_of(search);

        @IF.legacy()
        parse_int(value: String) -> int static => value.toInt();

        @IF.dotnet()
        parse_int(value: String) -> int static => System.Convert.to_int32(value);
    si
si
