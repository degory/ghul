namespace Shim is
    use Collections;

    class FILTER[T]: System.Object, Iterable[T] is
        _iterable: Iterable[T];
        _predicate: (T) -> bool;

        iterator: Iterator[T] => new FILTER_ITERATOR[T](_iterable.iterator, _predicate);
        
        init(iterable: Iterable[T], predicate: (T) -> bool) is
            _iterable = iterable;
            _predicate = predicate;
        si

        init(iterable: Iterable[T]) is
            _iterable = iterable;
        si
    si

    @IF.dotnet()
    class FILTER_ITERATOR[T]: Iterator[T] is
        _iterator: Iterator[T];
        _predicate: (T) -> bool;

        @IL.name.read("get_Current")
        current: T;

        init(iterator: Iterator[T], predicate: (T) -> bool) is
            _iterator = iterator;
            _predicate = predicate;

            assert _iterator?;
            assert _predicate?;
        si
        
        @IL.name("MoveNext")
        move_next() -> bool is
            // Console.write_line("FILTER: move next");

            while _iterator.move_next() do
                // Console.write_line("FILTER: inner move next");

                if _predicate(_iterator.current) then
                    // Console.write_line("FILTER: predicate passes");

                    current = _iterator.current;

                    // Console.write_line("FILTER: current: " + current + ", return true");

                    return true;
                fi

                // Console.write_line("FILTER: loop again");
            od

            // Console.write_line("FILTER: move next: return false");
            
            return false;
        si
    si

    @IF.legacy()
    class FILTER_ITERATOR[T]: System.Object, Iterator[T] is
        _iterator: Iterator[T];
        _predicate: (T) -> bool;
        _has_next: bool;
        _next: T;

        current: T;

        init(iterator: Iterator[T], predicate: (T) -> bool) is
            _iterator = iterator;
            _predicate = predicate;

            assert _iterator?;
            assert _predicate?;

            tryPeekNext();
        si
        
        hasMoreElements() -> bool is
            // System.Console.write_line("FILTER: has more elements: " + _has_next);
            
            return _has_next;
        si

        move_next() -> bool is
            // System.Console.write_line("FILTER: move next...");

            if hasMoreElements() then
                // System.Console.write_line("FILTER: has more elements, next elements...");
                nextElement();

                // System.Console.write_line("FILTER: move next: return true");

                return true;
            fi

            // System.Console.write_line("FILTER: move next: return false");
        si
        
        nextElement() -> T is
            // System.Console.write_line("FILTER: next element...");

            if _has_next then
                // System.Console.write_line("FILTER: next element: has next is true");

                // System.Console.write_line("FILTER: next element: move: " + current + " into next");

                current = _next;

                tryPeekNext();

                // System.Console.write_line("FILTER: next element: returning: " + current);

                return current;
            fi            

            // System.Console.write_line("FILTER: next element: returning null");
        si

        tryPeekNext() is
            // System.Console.write_line("FILTER: try peek next");

            while _iterator.hasMoreElements() do
                // System.Console.write_line("FILTER: try peek next: does have more elements");

                _next = _iterator.nextElement();

                // System.Console.write_line("FILTER: try peek next: next is: " + _next);

                _has_next = _predicate(_next);

                // System.Console.write_line("FILTER: try peek next: predicate returns: " + _has_next);

                if _has_next then
                    // System.Console.write_line("FILTER: try peek next: have next element ready: " + _next);

                    return;
                fi
            od

            _has_next = false;

            // System.Console.write_line("FILTER: try peek next: fallen off the end of the iterator");            
        si
    si
si
