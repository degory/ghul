namespace Logging is
    use object = System.Object;
    use string = System.String;
    use STD = System.Console;

        use System.Text.StringBuilder;

    use Collections.MAP;

    class TIMER is
        _name: string;
        _execute_count: int;
        _execute_time: System.TimeSpan;

        _started_at: System.DateTime;

        average_milliseconds: double => _execute_time.divide(cast double(_execute_count)).total_milliseconds;

        init(name: string) is
            _name = name;
            _execute_time = new System.TimeSpan(0L); 
        si

        start() is
            _started_at = System.DateTime.now;
        si

        finish() is
            _execute_count = _execute_count + 1;
            _execute_time = _execute_time.add(System.DateTime.now.subtract(_started_at));
        si

        to_string() -> string is
            if _execute_count > 0 then
                return 
                string.format(
                    "{0} count: {1} total time: {2} average time: {3} ms",
                    [
                        _name, 
                        _execute_count, 
                        _execute_time.total_milliseconds,
                        average_milliseconds
                    ]
                );
            // string.format(
                //     "{0}\t{1}\t{2}\t{3}",
                //     [
                //         _name, 
                //         _execute_count, 
                //         _execute_time.total_milliseconds,
                //         average_milliseconds
                //     ]
                // );
                                    
            fi

            return _name + " count: 0";
        si
    si

    class TIMERS is
        _timers: MAP[string,TIMER];

        init() is
            _timers = new MAP[string,TIMER]();
        si

        [name: string]: TIMER is
            if !_timers.contains_key(name) then
                _timers[name] = new TIMER(name);
            fi

            return _timers[name];                
        si
        
        start(name: string) is
            self[name].start();
        si
        
        finish(name: string) is
            self[name].finish();            
        si

        to_string() -> string is
            let result = new StringBuilder();

            for t in _timers.values do
                if t._execute_count > 0 then
                    result
                        .append(t)
                        .append('\n');
                fi                
            od
            
            return result.to_string();
        si
    si
si
