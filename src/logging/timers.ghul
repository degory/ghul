namespace Logging is
    use IO.Std;

    use System.Text.StringBuilder;

    use Collections.MAP;

    class TIMER is
        _name: string;
        _execute_time: System.TimeSpan;

        _started_at: System.DateTime;

        valid: bool => execute_count > 0;
        execute_count: int;
        average_milliseconds: double => _execute_time.divide(cast double(execute_count)).total_milliseconds;
        moving_average_milliseconds: double;

        max_average_milliseconds: double is
            if !valid then
                return 0.0D;
            fi

            let result = average_milliseconds;

            if result > moving_average_milliseconds then
                return result
            else
                return moving_average_milliseconds
            fi
        si

        init(name: string) is
            _name = name;
            _execute_time = new System.TimeSpan(0L); 
        si

        start() is
            _started_at = System.DateTime.now;
        si

        finish() is
            let elapsed = System.DateTime.now.subtract(_started_at);

            execute_count = execute_count + 1;
            _execute_time = _execute_time.add(elapsed);

            moving_average_milliseconds = moving_average_milliseconds * 0.8D + elapsed.total_milliseconds * 0.2D;
        si

        to_string() -> string =>
            if execute_count > 0 then
                "{_name} count: {execute_count} total time: {_execute_time.total_milliseconds} average: {average_milliseconds} moving average: {moving_average_milliseconds:N3} ms";
            else 
                _name + " count: 0";
            fi;
    si

    class TIMERS is
        _timers: MAP[string,TIMER];

        init() is
            _timers = new MAP[string,TIMER]();
        si

        [name: string]: TIMER is
            if !_timers.contains_key(name) then
                _timers[name] = new TIMER(name);
            fi

            return _timers[name];                
        si

        edit_timer: TIMER =>
            self["edit"];

        edit_single_timer: TIMER =>
            self["edit-single"];

        compile_timer: TIMER =>
            self["compile"];
        
        start(name: string) is
            self[name].start();
        si
        
        finish(name: string) is
            self[name].finish();            
        si

        to_string() -> string is
            let result = new StringBuilder();
            
            for t in _timers.values do
                if t.execute_count > 0 then
                    result
                        .append(t)
                        .append('\n');
                fi                
            od
            
            return result.to_string();
        si
    si
si
