namespace Logging is
    use System;
    use Generic;

    use Source;

    trait Logger is
        // FIXME: parser still can't handle assignable properties in traits...
        setenable_trace(value: bool);
        enable_trace: bool;

        trace_channels: Set[String];
        error_count: int;
        any_errors: bool;

        trace(channel: String, message: String);

        fatal(location: LOCATION, message: String);
        error(location: LOCATION, message: String);
        warn(location: LOCATION, message: String);
        info(location: LOCATION, message: String);

        clear();
    si

    /* LOGGER_WRAPPER holds a logger which can be switched on the fly
     * so Logger can be passed once at startup to classes that
     * depend on it, and the underlying logger can be changed 
     * as needed without updating existing references
     */     
    class LOGGER_WRAPPER: Object, Logger is
        logger: Logger public;

        enable_trace: bool public;
        trace_channels: Set[String] => logger.trace_channels;
        error_count: int => logger.error_count;
        any_errors: bool => logger.any_errors;

        init(logger: Logger) is
            self.logger = logger;
        si

        trace(channel: String, message: String) is
            logger.trace(channel, message);
        si

        fatal(location: LOCATION, message: String) is
            logger.fatal(location, message);
        si

        error(location: LOCATION, message: String) is
            logger.error(location, message);
        si

        warn(location: LOCATION, message: String) is
            logger.warn(location, message);
        si

        info(location: LOCATION, message: String) is
            logger.info(location, message);
        si

        clear() is
            logger.clear();
        si
    si

    class LoggerBase is
        enable_trace: bool public;
        trace_channels: Set[String];
        error_count: int;
        writer: IO.Writer;
        any_errors: bool => error_count > 0;

        init(writer: IO.Writer) is
            super.init();
            trace_channels = new Set[String]();
            self.writer = writer;
        si

        trace(channel: String, message: String) is
            if enable_trace && trace_channels.contains(channel) then
                writer.write(
                "trace: " + channel + ": " + message + "\n");
            fi
        si

        write(location: LOCATION, severity: String, message: String) is
            throw new NotImplementedException("abstract: implement me");
        si

        fatal(location: LOCATION, message: String) is
            write(location, "error", message);
            throw new Exception("fatal error");
        si        

        error(location: LOCATION, message: String) is
            write(location, "error", message);
            // write(location, "warn", message);
            error_count = error_count + 1;
            if error_count >= 5000 then
                throw new Exception("too many errors");
            fi
        si

        warn(location: LOCATION, message: String) is
            write(location, "warn", message);
        si

        info(location: LOCATION, message: String) is
            write(location, "info", message);
        si

        clear() is
            error_count = 0;
        si
    si

    class HUMAN_READABLE_LOGGER: LoggerBase, Logger is
        init(writer: IO.Writer) is
            super.init(writer);
        si

        write(location: LOCATION, severity: String, message: String) is
            writer.write(
                "%: %,%..%,%: %: %\n" % [
                    location.file_name, 
                    location.start_line, 
                    location.start_column, 
                    location.end_line, 
                    location.end_column+1, 
                    severity, 
                    message
                ] 
            );
        si
    si

    class TAB_DELIMITED_LOGGER: LoggerBase, Logger is
        init(writer: IO.Writer) is
            super.init(writer);
        si

        write(location: LOCATION, severity: String, message: String) is
            writer.write(
                "%\t%\t%\t%\t%\t%\t%\n" % [
                    location.file_name, 
                    location.start_line, 
                    location.start_column, 
                    location.end_line, 
                    location.end_column+1, 
                    severity, 
                    message
                ] 
            );            
        si
    si    
si
