namespace Logging is
    use System.Exception;
    use System.NotImplementedException;

    use Collections.STACK;

    use IO.Std;
    use IO.TextWriter;
    use IO.StringWriter;

    use Source;

    _debug_depth: int;

    debug_enter() is
        _debug_depth = _debug_depth + 1;
    si

    in_debug() -> bool is
        return _debug_depth > 0;
    si

    debug_enter(want_debug: bool) is
        if want_debug then
            debug_enter();
        fi
    si

    debug_exit() is
        _debug_depth = _debug_depth - 1;
    si

    debug_exit(want_debug: bool) is
        if want_debug then
            debug_exit();
        fi
    si

    debug_reset() is
        _debug_depth = 0;
    si

    debug_indent() is
        if _debug_depth > 0 then
            _debug_depth = _debug_depth + 1;
        fi
    si

    debug_unindent() is
        if _debug_depth > 0 then
            _debug_depth = _debug_depth - 1;
        fi
    si

    debug(message: string) is
        if _debug_depth > 0 then
            debug_always(message);
        fi
    si

    debug_always(message: string) is
        for i in 1.._debug_depth do
            IO.Std.error.write("  ");
        od
        
        IO.Std.error.write_line(message);

        IO.Std.error.flush();
    si
 
    trait Logger is
        is_poisoned: bool;
        error_count: int;
        any_errors: bool;
        
        depth: int;

        speculate();
        roll_back() -> DIAGNOSTICS_STATE;
        commit();

        start_analysis();
        end_analysis();

        mark() -> int;
        release(mark: int);

        merge(state: DIAGNOSTICS_STATE);

        exception(location: LOCATION, exception: Exception, message: string);
        fatal(location: LOCATION, message: string);
        error(location: LOCATION, message: string);
        warn(location: LOCATION, message: string);
        poison(location: LOCATION, message: string);
        info(location: LOCATION, message: string);

        @IF.release()
        write_poison_messages();

        clear(path: string, analysis_only: bool);

        write_all_diagnostics(writer: TextWriter, formatter: DiagnosticFormatter);
    si
si
