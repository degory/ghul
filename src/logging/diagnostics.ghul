namespace Logging is
    use System.Text.Json;

    use Source.LOCATION;

    class POSITION is
        line: uint public;
        character: uint public;

        init(line: uint, character: uint) is
            self.line = line;
            self.character = character;
        si
    si
    
    class RANGE is
        start: POSITION public;
        end: POSITION public;

        init(start: POSITION, end: POSITION) is
            self.start = start;
            self.end = end;
        si

        init(location: LOCATION) is
            start = new POSITION(cast uint(location.start_line), cast uint(location.start_column));
            end = new POSITION(cast uint(location.end_line), cast uint(location.end_column));
        si
    si

    enum DIAGNOSTIC_SEVERITY is
        FATAL, // 0
        ERROR, // 1
        WARNING, // 2
        INFORMATION, // 3
        HINT // 4
    si
    
    class DIAGNOSTIC_DTO is
        range: RANGE;
        severity: DIAGNOSTIC_SEVERITY;
        message: string;

        init(
            range: RANGE,
            severity: DIAGNOSTIC_SEVERITY,
            message: string
        ) is
            self.range = range;
            self.severity = severity;
            self.message = message;
        si

        init(
            location: LOCATION,
            severity: DIAGNOSTIC_SEVERITY,
            message: string
        ) is
            self.range = new RANGE(location);
            self.severity = severity;
            self.message = message;
        si
    si

    class DIAGNOSTIC is
        location: LOCATION;
        severity: DIAGNOSTIC_SEVERITY;
        message: string;


    si

    create_random_position() -> POSITION is
        return new POSITION(cast uint(System.Random.shared.next_int64(1000L)), cast uint(System.Random.shared.next_int64(150L)));
    si

    create_random_range() -> RANGE is
        let line = cast uint(System.Random.shared.next_int64(1000L));
        let start = cast uint(System.Random.shared.next_int64(150L));
        let len = cast uint(System.Random.shared.next_int64(50L));

        return new RANGE(
            new POSITION(line, start),
            new POSITION(line, start + len)
        );
    si
    
    create_random_diagnostic() -> DIAGNOSTIC_DTO is
        let severity = cast DIAGNOSTIC_SEVERITY(System.Random.shared.next(3) + 1);
        
        return new DIAGNOSTIC_DTO(
            create_random_range(),
            severity,
            "a bad thing happened"
        );        
    si

    entry() is
        do
            let diagnostic = create_random_diagnostic();

            let payload = JsonSerializer.serialize(diagnostic, new JsonSerializerOptions());

            IO.Std.write_line(payload);
        od        
    si    
si
