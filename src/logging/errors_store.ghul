namespace Logging is
    use Collections.MutableMap;
    use Collections.MutableList;
    use Collections.MAP;
    use Collections.LIST;

    class ANALYSIS_LOGGER: Logger is
        parse_errors: MutableMap[string, MutableList[DIAGNOSTIC]];
        analysis_errors: MutableList[(uri: string, diagnostic: DIAGNOSTIC)];

        is_parsing: bool;

        start_parse(uri: string) is
            parse_errors[uri] = new LIST[DIAGNOSTIC]();
            is_parsing = true;
        si

        start_analyse(uri: string) is
            is_parsing = false;
        si
        
        reset() is
            
        si
        
        speculate() is
            
        si

        roll_back() -> LoggerRollback is
            
        si
                        
        commit() is
            
        si

    si

    class DOCUMENT_ERRORS is
        
    si    

    struct DIAGNOSTIC is
        range: RANGE;
        severity: int;
        message: string;
        relatedInformation: Collections.List[RELATED_INFORMATION];

        init(
            uri: string, from_line: int, from_char: int, to_line: int, to_char: int,
            severity: int,
            message: string,
            relatedInformation: Collections.List[RELATED_INFORMATION]
        ) is
            range = new RANGE(from_line, from_char, to_line, to_char);
            self.severity = severity;
            self.message = message;
            self.relatedInformation = relatedInformation;  
        si

        init(
            uri: string, from_line: int, from_char: int, to_line: int, to_char: int,
            severity: int,
            message: string
        ) is
            self.init(uri, from_line, from_char, to_line, to_char, severity, message, null);
        si
    si 
    
    struct RELATED_INFORMATION is
        location: ERROR_LOCATION;
        message: string;

        init(uri: string, from_line: int, from_char: int, to_line: int, to_char: int, message: string) is
            location = new ERROR_LOCATION(uri, from_line, from_char, to_line, to_char);

            self.message = message;
        si
    si
    
    struct ERROR_LOCATION is
        uri: string;
        range: RANGE;

        init(uri: string, from_line: int, from_char: int, to_line: int, to_char: int) is
            self.uri = uri;

            range = new RANGE(from_line, from_char, to_line, to_char);
        si        
    si
    
    struct RANGE is
        start: POSITION;
        end: POSITION;

        init(from_line: int, from_char: int, to_line: int, to_char: int) is
            start = new POSITION(from_line, from_char);
            end = new POSITION(to_line, to_char);
        si        
    si

    struct POSITION is
        line: int;
        character: int;

        init(line: int, character: int) is
            self.line = line;
            self.character = character;
        si        
    si

si