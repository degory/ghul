namespace Logging is
    use System.Exception;

    use Collections.Map;
    use Collections.MutableMap;
    use Collections.List;
    use Collections.MutableList;
    use Collections.Iterable;

    use Collections.MAP;
    use Collections.LIST;
    use Collections.STACK;

    use IO.TextWriter;

    use Source.LOCATION;

    /*
    
    Need: 

    A single view of diagnostic state that can return diagnostic messages by source file path

    A way to track which source file diagnostic messages are synched with the language server client

    Ideally we want to be able to query it and have it return a polymorphic list where each item is either:
    - file name and list of diagnostics OR
    - file name and flag that says unchanged
    - want reasonably efficient conversion to LSP diagnostics DTOs
    - need speculated state stack to operate at the global store level, not per file.

    */

    struct DIAGNOSTIC_MESSAGE is
        is_analysis: bool;
        severity: DIAGNOSTIC_SEVERITY;
        location: LOCATION;
        text: string;

        init(
            is_analysis: bool,
            severity: DIAGNOSTIC_SEVERITY,
            location: LOCATION,
            text: string
        ) is
            self.severity = severity;
            self.location = location;
            self.text = text;
        si

        to_string() -> string is
            return string.format("{0} {1} {2}", [severity, location, text]);
        si
    si

    class DIAGNOSTICS_LIST is
        _path: string;
        _dirty: bool;
        _diagnostics: LIST[DIAGNOSTIC_MESSAGE];

        is_poisoned: bool;

        count: int => _diagnostics.count;
        diagnostics: List[DIAGNOSTIC_MESSAGE] => _diagnostics;

        init(path: string) is
            _path = path;
            _diagnostics = new LIST[DIAGNOSTIC_MESSAGE]();
        si

        add(diagnostic_message: DIAGNOSTIC_MESSAGE) is
            // IO.Std.error.write_line("LIST add " + diagnostic_message.text);

            _dirty = true;

            _diagnostics.add(diagnostic_message);
        si

        poison() is
            IO.Std.error.write_line("LIST poison");

            is_poisoned = true;
        si

        clear(analysis_only: bool) is
            // IO.Std.error.write_line("LIST clear " + _path + " analysis only: " + analysis_only);

            if analysis_only == false then
                _dirty = true;
                _diagnostics.clear();
            else
                let n = new LIST[DIAGNOSTIC_MESSAGE](_diagnostics.count);

                for d in _diagnostics do
                    if !d.is_analysis then
                        // IO.Std.error.write_line("LIST clear " + _path + " keep: " + d);

                        n.add(d);
                    else 
                        // IO.Std.error.write_line("LIST clear " + _path + " discard: " + d);
                    fi
                od

                _diagnostics = n;
            fi
        si

        write_all_diagnostics(writer: TextWriter, format: (DIAGNOSTIC_MESSAGE) -> string) is
            // IO.Std.error.write_line("LIST write diags " + _path);

            if _diagnostics.count == 0 then
                // IO.Std.error.write_line("LIST write empty diag for URI " + _path);

                // FIXME: we only want to do this for the LSP connection
                writer.write_line(_path);

                return;
            fi

            for diagnostic in _diagnostics do
                // IO.Std.error.write_line("LIST write diag " + format(diagnostic));

                writer.write_line(format(diagnostic));
            od            
        si
    si

    class DIAGNOSTICS_STATE is
        error_count: int => _diagnostics_by_source_path.values | .reduce(0, (r, d) => r + d.count);
        is_poisoned: bool => _diagnostics_by_source_path.values | .has(d => d.is_poisoned);
        any_errors: bool => _diagnostics_by_source_path.values | .has(d => d.count > 0);

        _diagnostics_by_source_path: MutableMap[string, DIAGNOSTICS_LIST];

        init() is
            _diagnostics_by_source_path = new MAP[string, DIAGNOSTICS_LIST]();
        si

        clear() is
            for i in _diagnostics_by_source_path.values do
                i.clear(false);
            od

            init();
        si

        clear(source_path: string, analysis_only: bool) is
            // IO.Std.error.write_line("STATE clear " + source_path);

            get_diagnostics_list(source_path).clear(analysis_only);
        si

        get_diagnostics_list(source_path: string) -> DIAGNOSTICS_LIST is
            let diagnostics_for_path: DIAGNOSTICS_LIST;

            if !_diagnostics_by_source_path.try_get_value(source_path, diagnostics_for_path ref) then
                diagnostics_for_path = new DIAGNOSTICS_LIST(source_path);

                _diagnostics_by_source_path.add(source_path, diagnostics_for_path);
            fi

            return diagnostics_for_path;
        si

        add_diagnostic_message(source_path: string, message: DIAGNOSTIC_MESSAGE) is
            get_diagnostics_list(source_path).add(message);
        si

        poison(source_path: string) is
            get_diagnostics_list(source_path).poison();
        si

        merge(state: DIAGNOSTICS_STATE) is
            // IO.Std.error.write_line("STATE merge");

            for i in state._diagnostics_by_source_path do
                add_diagnostic_message(i.key, i.value.diagnostics);
            od

            // IO.Std.error.write_line("STATE merge done");
        si        

        add_diagnostic_message(source_path: string, diagnostics: Iterable[DIAGNOSTIC_MESSAGE]) is
            let list = get_diagnostics_list(source_path);

            for d in diagnostics do
                list.add(d);
            od
        si

        write_all_diagnostics(writer: TextWriter, format: (DIAGNOSTIC_MESSAGE) -> string) is
            // IO.Std.error.write_line("STATE write_all_diagnostics");

            for list in _diagnostics_by_source_path.values do
                list.write_all_diagnostics(writer, format);
            od

            // IO.Std.error.write_line("STATE write_all_diagnostics done");
        si
    si

    class DIAGNOSTICS_STORE: Logger is
        _states: STACK[DIAGNOSTICS_STATE];

        is_poisoned: bool => _states.peek().is_poisoned;
        error_count: int => _states.peek().error_count;
        any_errors: bool => _states.peek().any_errors;

        is_analysis: bool public;

        init() is
            _states = new STACK[DIAGNOSTICS_STATE]();
            _states.push(new DIAGNOSTICS_STATE());

            // IO.Std.error.write_line("STORE init " + get_hash_code());
        si

        reset() is
            // IO.Std.error.write_line("STORE reset " + get_hash_code() + " NOP");
        si

        only: DIAGNOSTICS_STATE is
            assert _states.count == 1 else "expected exactly one stacked diagnostics state";

            return _states.peek();
        si

        top: DIAGNOSTICS_STATE is
            assert _states.count >= 1 else "expected at least one stacked diagnostics state";

            return _states.peek();
        si

        pop() -> DIAGNOSTICS_STATE is
            // IO.Std.error.write_line("STORE pop depth: " + _states.count + " => " + (_states.count - 1));

            assert _states.count >= 1 else "expected at least one stacked diagnostics state";

            return _states.pop();
        si

        /*
        clear() is
            IO.Std.error.write_line("STORE noargs clear");

            assert false else "oops: should not be getting called";

            top.clear();

            init();
        si
        */

        clear(source_path: string, analysis_only: bool) is
            // IO.Std.error.write_line("STORE clear " + source_path + " analysis only: " + analysis_only);

            only.clear(source_path, analysis_only);
        si

        speculate() is
            // IO.Std.error.write_line("STORE speculate before depth: " + _states.count);
            
            _states.push(new DIAGNOSTICS_STATE());

            // IO.Std.error.write_line("STORE speculate after depth: " + _states.count);
        si

        roll_back() -> DIAGNOSTICS_STATE is
            // IO.Std.error.write_line("STORE roll back before depth: " + _states.count);

            return _states.pop();

            // IO.Std.error.write_line("STORE roll back after depth: " + _states.count);
        si
 
        commit() is
            // IO.Std.error.write_line("STORE before commit depth: " + _states.count);

            let to_merge = pop();

            // IO.Std.error.write_line("STORE commit " + get_hash_code() + " will merge...");

            /*
            to_merge.write_all_diagnostics(IO.Std.error, 
                (diagnostic: Logging.DIAGNOSTIC_MESSAGE) is
                    let location = diagnostic.location;
                    let severity = diagnostic.severity;
                    let message = diagnostic.text;

                    let s = string.format(
                        "{0}: {1},{2}..{3},{4}: {5}: {6}\n",
                        [
                            location.file_name, 
                            location.start_line, 
                            location.start_column, 
                            location.end_line, 
                            location.end_column+1, 
                            severity, 
                            message
                        ] 
                    );

                    return s;
                si
            );
            */

            top.merge(to_merge);

            // IO.Std.error.write_line("STORE commit " + get_hash_code() + " after merge...");

            /*
            top.write_all_diagnostics(IO.Std.error, 
                (diagnostic: Logging.DIAGNOSTIC_MESSAGE) is
                    let location = diagnostic.location;
                    let severity = diagnostic.severity;
                    let message = diagnostic.text;

                    let s = string.format(
                        "{0}: {1},{2}..{3},{4}: {5}: {6}\n",
                        [
                            location.file_name, 
                            location.start_line, 
                            location.start_column, 
                            location.end_line, 
                            location.end_column+1, 
                            severity, 
                            message
                        ] 
                    );

                    return s;
                si
            );
            */

            // IO.Std.error.write_line("STORE after commit " + get_hash_code() + " depth: " + _states.count);
        si

        set_state(state: DIAGNOSTICS_STATE) is
            // IO.Std.error.write_line("STORE set state " + get_hash_code() + " depth: " + _states.count);

            // writer: TextWriter, format: (DIAGNOSTIC_MESSAGE) -> string

            // FIXME: is this right?
            top.merge(state);

            /*
            top.write_all_diagnostics(IO.Std.error, 
                (diagnostic: Logging.DIAGNOSTIC_MESSAGE) is
                    let location = diagnostic.location;
                    let severity = diagnostic.severity;
                    let message = diagnostic.text;

                    let s = string.format(
                        "{0}: {1},{2}..{3},{4}: {5}: {6}\n",
                        [
                            location.file_name, 
                            location.start_line, 
                            location.start_column, 
                            location.end_line, 
                            location.end_column+1, 
                            severity, 
                            message
                        ] 
                    );

                    return s;
                si
            );
            */

            // IO.Std.error.write_line("STORE merged state is");
        si

        write_all_diagnostics(writer: TextWriter, format: (DIAGNOSTIC_MESSAGE) -> string) is
            // IO.Std.error.write_line("STORE write all diagnostics " + get_hash_code() + " depth: " + _states.count);

            only.write_all_diagnostics(writer, format);
        si

        exception(location: LOCATION, exception: Exception, message: string) is
            // FIXME report exception
            top.add_diagnostic_message(location.file_name, new DIAGNOSTIC_MESSAGE(is_analysis, DIAGNOSTIC_SEVERITY.FATAL, location, message + ": " + exception));
        si
        
        fatal(location: LOCATION, message: string) is
            top.add_diagnostic_message(location.file_name, new DIAGNOSTIC_MESSAGE(is_analysis, DIAGNOSTIC_SEVERITY.FATAL, location, message));
        si

        error(location: LOCATION, message: string) is
            // IO.Std.error.write_line("STORE error " + get_hash_code() + " depth " + _states.count + ": " + location + ": " + message);

            top.add_diagnostic_message(location.file_name, new DIAGNOSTIC_MESSAGE(is_analysis, DIAGNOSTIC_SEVERITY.ERROR, location, message));
        si

        warn(location: LOCATION, message: string) is
            // IO.Std.error.write_line("STORE warn " + get_hash_code() + " depth " + _states.count + ": " + location + ": " + message);

            top.add_diagnostic_message(location.file_name, new DIAGNOSTIC_MESSAGE(is_analysis, DIAGNOSTIC_SEVERITY.WARN, location, message));
        si

        info(location: LOCATION, message: string) is
            // IO.Std.error.write_line("STORE info " + get_hash_code() + " depth " + _states.count + ": " + location + ": " + message);

            top.add_diagnostic_message(location.file_name, new DIAGNOSTIC_MESSAGE(is_analysis, DIAGNOSTIC_SEVERITY.INFO, location, message));
        si

        poison(location: LOCATION, message: string) is
            top.add_diagnostic_message(location.file_name, new DIAGNOSTIC_MESSAGE(is_analysis, DIAGNOSTIC_SEVERITY.FATAL, location, message));
            top.poison(location.file_name);
        si

        @IF.release()
        write_poison_messages() is
            // FIXME
            /*
            if is_poisoned then
                for message in _poison_messages do
                    writer.write(message);
                od                
            fi
            */
        si
    si
si