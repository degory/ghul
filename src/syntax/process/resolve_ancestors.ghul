namespace Syntax.Process is
    use IO.Std;

        
    use Logging;

    class RESOLVE_ANCESTORS: ScopedVisitor is
        _logger: Logger;
        _symbol_table: Semantic.SYMBOL_TABLE;
        _innate_symbol_lookup: Semantic.Lookups.InnateSymbolLookup;

        init(
            logger: Logger,
            stable_symbols: Semantic.STABLE_SYMBOLS,
            symbol_table: Semantic.SYMBOL_TABLE,
            namespaces: Semantic.NAMESPACES,
            innate_symbol_lookup: Semantic.Lookups.InnateSymbolLookup
        )
        is
            super.init(logger, stable_symbols, symbol_table, namespaces);

            _logger = logger;
            _symbol_table = symbol_table;
            _innate_symbol_lookup = innate_symbol_lookup;
        si

        apply(root: Trees.Node) is
            root.walk(self);
        si

        pre(`class: Trees.Definitions.CLASS) -> bool => true;

        visit(`class: Trees.Definitions.CLASS) is
            if is_stable(`class) then
                return;
            fi

            let class_symbol = cast Semantic.Symbols.CLASS(scope_for(`class));

            // exit class scope before looking up ancestors:
            // super.visit(`class);            

            let seen_class_ancestor = false;
            let is_first = true;

            if `class.ancestors? then
                for a in `class.ancestors do
                    var ancestor_type = a.type; 

                    if ancestor_type? then
                        if ancestor_type.is_inheritable then
                            if ancestor_type.is_class then
                                if seen_class_ancestor then
                                    _logger.error(a.location, "multiple superclasses");
                                elif !is_first then
                                    _logger.error(a.location, "superclass must be first");
                                fi

                                seen_class_ancestor = true;
                            fi

                            class_symbol.add_ancestor(ancestor_type);

                            is_first = false;
                        else                        
                            _logger.error(a.location, "cannot inherit from this");
                        fi
                    fi
                od
            fi

            // FIXME: safer test for Ghul.object:
            if !seen_class_ancestor /\ `class.name.name !~ "object" then
                let object_type = _innate_symbol_lookup.get_object_type();

                if class_symbol != object_type.symbol then
                    class_symbol.push_ancestor(_innate_symbol_lookup.get_object_type());
                fi
            fi
        si

        pre(`trait: Trees.Definitions.TRAIT) -> bool => true;

        visit(`trait: Trees.Definitions.TRAIT) is
            if is_stable(`trait) then
                return;
            fi

            let trait_symbol = cast Semantic.Symbols.TRAIT(scope_for(`trait));

            // exit class scope before looking up ancestors:
            // super.visit(`trait);

            let seen_valid_ancestor = false;

            if `trait.ancestors? then
                for a in `trait.ancestors do
                    var ancestor_type = a.type;

                    if ancestor_type? then
                        if isa Semantic.Types.NAMED(ancestor_type) then
                            let ancestor_named_type = cast Semantic.Types.NAMED(ancestor_type);

                            if ancestor_named_type.symbol? /\ ancestor_named_type.symbol.is_trait then
                                trait_symbol.add_ancestor(ancestor_named_type);
                                seen_valid_ancestor = true;
                            else
                                _logger.error(a.location, "trait cannot inherit from class");
                            fi
                        else
                            _logger.error(a.location, "cannot inherit from this");
                        fi
                    else
                        Std.error.write_line("refusing to add ancestor with null type " + a + " to trait " + trait_symbol);
                    fi
                od
            fi

            let object_type = _innate_symbol_lookup.get_object_type();

            trait_symbol.push_ancestor(object_type);
        si

        pre(`struct: Trees.Definitions.STRUCT) -> bool => true;

        visit(`struct: Trees.Definitions.STRUCT) is
            if is_stable(`struct) then
                return;
            fi

            let struct_symbol = cast Semantic.Symbols.STRUCT(scope_for(`struct));

            if `struct.ancestors? then
                for a in `struct.ancestors do
                    var ancestor_type = a.type; 

                    if ancestor_type? then
                        if isa Semantic.Types.NAMED(ancestor_type) then
                            let ancestor_named_type = cast Semantic.Types.NAMED(ancestor_type);

                            if ancestor_named_type.symbol? /\ ancestor_named_type.symbol.is_trait then
                                struct_symbol.add_ancestor(ancestor_named_type);

                                continue;
                            fi
                        fi

                        _logger.error(a.location, "structs can only inherit from traits");
                    fi
                od
            fi

            struct_symbol.push_ancestor(_innate_symbol_lookup.get_value_type());
        si

        pre(`enum: Trees.Definitions.ENUM) -> bool => true;

        visit(`enum: Trees.Definitions.ENUM) is
            let enum_symbol = cast Semantic.Symbols.ENUM_STRUCT(scope_for(`enum));

            enum_symbol.push_ancestor(_innate_symbol_lookup.get_enum_type());
        si
    si
si
