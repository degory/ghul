namespace Syntax.Process is
    use System;
    use Generic;
    
    use Logging;

    class RESOLVE_ANCESTORS: ScopedVisitor is
        _logger: Logger;
        _symbol_table: Semantic.SYMBOL_TABLE;
        _ghul_symbol_lookup: Semantic.GHUL_SYMBOL_LOOKUP;
        _system_symbol_lookup: Semantic.SYSTEM_SYMBOL_LOOKUP;

        init(
            logger: Logger,
            symbol_table: Semantic.SYMBOL_TABLE,
            namespaces: Semantic.NAMESPACES,
            ghul_symbol_lookup: Semantic.GHUL_SYMBOL_LOOKUP,
            system_symbol_lookup: Semantic.SYSTEM_SYMBOL_LOOKUP
        )
        is
            super.init(logger, symbol_table, namespaces);

            _logger = logger;
            _symbol_table = symbol_table;
            _ghul_symbol_lookup = ghul_symbol_lookup;
            _system_symbol_lookup = system_symbol_lookup;
        si

        apply(root: Tree.NODE) is
            root.walk(self);
        si

        pre(class_: Tree.Definition.CLASS) -> bool is
            super.pre(class_);

            return true;
        si

        visit(class_: Tree.Definition.CLASS) is
            let class_symbol = cast Semantic.Symbol.CLASS(_symbol_table.current_instance_context);

            // exit class scope before looking up ancestors:
            super.visit(class_);            

            var seen_class_ancestor = false;

            // FIXME: implicit ancestor Ghul.Object
            if class_.ancestors? then
                for a in class_.ancestors do
                    var ancestor_type = a.type; 

                    if ancestor_type? then
                        if isa Semantic.Type.NAMED(ancestor_type) then
                            let ancestor_named_type = cast Semantic.Type.NAMED(ancestor_type);

                            if ancestor_named_type.symbol? && isa Semantic.Symbol.CLASS(ancestor_named_type.symbol) then
                                seen_class_ancestor = true;
                            fi

                            class_symbol.add_ancestor(ancestor_named_type);
                        else
                            _logger.error(a.location, "cannot inherit from this");
                        fi
                    fi
                od
            fi

            // FIXME: safer test for Ghul.Object:
            if !seen_class_ancestor && class_.name.name !~ "Object" then
                let object_type = _system_symbol_lookup.get_object_type();

                if class_symbol != object_type.symbol then
                    class_symbol.push_ancestor(_system_symbol_lookup.get_object_type());
                fi
            fi
        si

        pre(trait_: Tree.Definition.TRAIT) -> bool is
            super.pre(trait_);

            return true;
        si

        visit(trait_: Tree.Definition.TRAIT) is
            let trait_symbol = cast Semantic.Symbol.TRAIT(_symbol_table.current_instance_context);

            // exit class scope before looking up ancestors:
            super.visit(trait_);

            var seen_valid_ancestor = false;

            if trait_.ancestors? then
                for a in trait_.ancestors do
                    var ancestor_type = a.type;

                    if ancestor_type? then
                        if isa Semantic.Type.NAMED(ancestor_type) then
                            let ancestor_named_type = cast Semantic.Type.NAMED(ancestor_type);

                            if ancestor_named_type.symbol? && ancestor_named_type.symbol.is_trait then
                                trait_symbol.add_ancestor(ancestor_named_type);
                                seen_valid_ancestor = true;
                            else
                                _logger.error(a.location, "trait cannot inherit from class");
                            fi
                        else
                            _logger.error(a.location, "cannot inherit from this");
                        fi
                    else
                        IO.Std.err.println("refusing to add ancestor with null type: " + a);
                    fi
                od
            fi

            if !seen_valid_ancestor then
                let root_type = _system_symbol_lookup.get_object_type();

                if trait_symbol != root_type.symbol then
                    trait_symbol.add_ancestor(_system_symbol_lookup.get_object_type());
                fi
            fi
        si

        pre(struct_: Tree.Definition.STRUCT) -> bool is
            super.pre(struct_);

            return true;
        si

        visit(struct_: Tree.Definition.STRUCT) is
            IO.Std.err.println("XXX 1");

            let struct_symbol = cast Semantic.Symbol.STRUCT(_symbol_table.current_instance_context);

            IO.Std.err.println("XXX 2");

            // exit class scope before looking up ancestors:
            super.visit(struct_);            

            IO.Std.err.println("XXX 3");

            var seen_class_ancestor = false;

            IO.Std.err.println("XXX 4");

            // FIXME: implicit ancestor Ghul.Object
            if struct_.ancestors? then
                IO.Std.err.println("XXX 5");

                for a in struct_.ancestors do
                    IO.Std.err.println("XXX 6");

                    var ancestor_type = a.type; 

                    IO.Std.err.println("XXX 7");

                    if ancestor_type? then
                        IO.Std.err.println("XXX 8");

                        if isa Semantic.Type.NAMED(ancestor_type) then
                            IO.Std.err.println("XXX 9");

                            let ancestor_named_type = cast Semantic.Type.NAMED(ancestor_type);

                            IO.Std.err.println("XXX 10");

                            if ancestor_named_type.symbol? && isa Semantic.Symbol.TRAIT(ancestor_named_type.symbol) then
                                IO.Std.err.println("XXX 111");

                                struct_symbol.add_ancestor(ancestor_named_type);

                                IO.Std.err.println("XXX 12");

                                continue;
                            fi
                        fi

                        IO.Std.err.println("XXX 13");

                        _logger.error(a.location, "structs can only inherit from traits");

                        IO.Std.err.println("XXX 14");
                    fi

                    IO.Std.err.println("XXX 15");
                od
                IO.Std.err.println("XXX 16");
            fi

            IO.Std.err.println("XXX 17");

            struct_symbol.push_ancestor(_system_symbol_lookup.get_value_type());

            IO.Std.err.println("struct " + struct_symbol + " ancestors: " + struct_symbol.ancestors);
        si
    si
si
