namespace Syntax.Process is
    use IO.Std;

    use Logging;

    use Semantic.Types.Type;

    // TODO make sure we only do this if we're actually generating IL -
    // it shouldn't be needed for the language extension
    class RECORD_TYPE_ARGUMENT_USES: ScopedVisitor is
        _logger: Logger;
        _symbol_table: Semantic.SYMBOL_TABLE;
        _innate_symbol_lookup: Semantic.Lookups.InnateSymbolLookup;

        init(
            logger: Logger,
            stable_symbols: Semantic.STABLE_SYMBOLS,
            symbol_table: Semantic.SYMBOL_TABLE,
            namespaces: Semantic.NAMESPACES,
            innate_symbol_lookup: Semantic.Lookups.InnateSymbolLookup
        )
        is
            super.init(logger, stable_symbols, symbol_table, namespaces);

            _symbol_table = symbol_table;
            _logger = logger;
            _innate_symbol_lookup = innate_symbol_lookup;
        si

        apply(root: Trees.Node) is
            root.walk(self);
        si

        visit(named: Trees.TypeExpressions.NAMED) is  
            if !named.type? then
                return;
            fi
            
            if !named.type.is_type_variable then
                return;
            fi

            let closure = current_closure;

            if !closure? then
                return;
            fi

            debug_always("closure at {closure.location} captures type variable {named}");

            let type_name_override = closure.add_type_parameter_reference(named.type.symbol);

            // TODO actually need to do this in compile expressions and generate IL passes as we enter
            // and leave closure bodies:

            named.type.symbol.gen_type_override((symbol: Semantic.Symbols.Symbol, buffer: System.Text.StringBuilder) is
                buffer.append(" /* mangled */");
                buffer.append(type_name_override);
            si)
        si
    si
si
