namespace Syntax.Process is
    use System;
    use Generic;
    
    use Logging;
    use Tree;
    use Source;

    class RESOLVE_OVERRIDES: ScopedVisitor is
        _logger: Logger;
        _symbol_table: Semantic.SYMBOL_TABLE;

        init(
            logger: Logger,
            symbol_table: Semantic.SYMBOL_TABLE,
            namespaces: Semantic.NAMESPACES
        )
        is
            super.init(logger, symbol_table, namespaces);

            _logger = logger;
            _symbol_table = symbol_table;
        si

        apply(root: Tree.NODE) is
            root.walk(self);
        si

        pre(function: Definition.FUNCTION) -> bool is
            return true;
        si

        visit(function: Definition.FUNCTION) is
        si

        visit(class_: Definition.CLASS) is
            let symbol = symbol_for(class_);

            if symbol? && isa Semantic.Symbol.Classy(symbol) then
                @IF.debug() @IF.debug() System.Console.write_line("from resolve overrides pass: " + symbol);

                cast Semantic.Symbol.Classy(symbol).pull_down_super_symbols();
            fi
        si

        visit(struct_: Definition.STRUCT) is
            let symbol = symbol_for(struct_);

            if symbol? && isa Semantic.Symbol.Classy(symbol) then
                @IF.debug() System.Console.write_line("from resolve overrides pass: " + symbol);

                cast Semantic.Symbol.Classy(symbol).pull_down_super_symbols();
            fi
        si

        visit(trait_: Definition.TRAIT) is
            let symbol = symbol_for(trait_);

            if symbol? && isa Semantic.Symbol.Classy(symbol) then
                @IF.debug() System.Console.write_line("from resolve overrides pass: " + symbol);

                cast Semantic.Symbol.Classy(symbol).pull_down_super_symbols();
            fi
        si
    si
si
