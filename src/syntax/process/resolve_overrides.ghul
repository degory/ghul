namespace Syntax.Process is
        
    use Logging;
    use Trees;
    use Source;

    class RESOLVE_OVERRIDES: ScopedVisitor is
        _logger: Logger;
        _symbol_table: Semantic.SYMBOL_TABLE;

        _done_object: bool;

        _duplicate_method_checker: Semantic.DUPLICATE_METHOD_CHECKER;

        init(
            logger: Logger,
            stable_symbols: Semantic.STABLE_SYMBOLS,
            symbol_table: Semantic.SYMBOL_TABLE,
            namespaces: Semantic.NAMESPACES
        )
        is
            super.init(logger, stable_symbols, symbol_table, namespaces);

            _logger = logger;
            _symbol_table = symbol_table;

            _duplicate_method_checker = new Semantic.DUPLICATE_METHOD_CHECKER(logger);
        si

        apply(root: Trees.Node) is
            // FIXME: this isn't needed 

            if !_done_object then

                let lookup = IoC.CONTAINER.instance.innate_symbol_lookup;

                lookup.get_object_type().symbol.pull_down_super_symbols();
                lookup.get_value_type().symbol.pull_down_super_symbols();

                _done_object = true;
            fi            

            root.walk(self);
        si

        check_duplicate_global_functions() is
            for ns in _namespaces do
                try
                    if ns? then
                        _duplicate_method_checker.check(ns, "duplicate function");
                    else
                        IO.Std.error.write_line("namespace is null");
                    fi
                catch e: System.Exception
                    _logger.exception(ns.location, e, "exception checking for duplicate global functions");
                yrt
            od
        si

        pre(`class: Trees.Definitions.CLASS) -> bool => true;

        visit(`class: Definitions.CLASS) is
            let symbol = symbol_for(`class);

            if symbol? /\ isa Semantic.Symbols.Classy(symbol) then
                _duplicate_method_checker.check(symbol, "duplicate method");

                symbol.pull_down_super_symbols();
            fi
        si

        pre(`trait: Trees.Definitions.TRAIT) -> bool => true;

        visit(`trait: Definitions.TRAIT) is
            let symbol = symbol_for(`trait);

            if symbol? /\ isa Semantic.Symbols.Classy(symbol) then
                _duplicate_method_checker.check(symbol, "duplicate method");

                symbol.pull_down_super_symbols();
            fi
        si

        pre(`struct: Trees.Definitions.STRUCT) -> bool => true;

        visit(`struct: Definitions.STRUCT) is
            let symbol = symbol_for(`struct);

            if symbol? /\ isa Semantic.Symbols.Classy(symbol) then
                symbol.pull_down_super_symbols();
            fi
        si

        pre(`union: Trees.Definitions.UNION) -> bool => true;

        visit(`union: Definitions.UNION) is
            let symbol = symbol_for(`union);

            if symbol? /\ isa Semantic.Symbols.Classy(symbol) then
                symbol.pull_down_super_symbols();
            fi
        si

        pre(variant: Trees.Definitions.VARIANT) -> bool => true;
    
        visit(variant: Definitions.VARIANT) is
            let symbol = symbol_for(variant);

            if symbol? /\ isa Semantic.Symbols.Classy(symbol) then
                symbol.pull_down_super_symbols();
            fi
        si

        pre(`enum: Trees.Definitions.ENUM) -> bool => true;

        visit(`enum: Definitions.ENUM) is
            let symbol = symbol_for(`enum);

            if symbol? /\ isa Semantic.Symbols.Classy(symbol) then
                symbol.pull_down_super_symbols();
            fi
        si
    si
si
