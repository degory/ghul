namespace Syntax.Process is
    use System;
    use Generic;
    
    use Logging;
    use Tree;
    use Source;

    class RESOLVE_OVERRIDES: ScopedVisitor is
        _logger: Logger;
        _symbol_table: Semantic.SYMBOL_TABLE;

        init(
            logger: Logger,
            symbol_table: Semantic.SYMBOL_TABLE,
            namespaces: Semantic.NAMESPACES
        )
        is
            super.init(logger, symbol_table, namespaces);

            _logger = logger;
            _symbol_table = symbol_table;
        si

        apply(root: Tree.NODE) is
            root.walk(self);
        si

        pre(function: Definition.FUNCTION) -> bool is
            let symbol = current_scope.find_direct(function.name.name);

            if !symbol? then
                return true;
            elif !isa Semantic.Symbol.FUNCTION_GROUP(symbol) then
                return true;
            fi
            
            let function_group = cast Semantic.Symbol.FUNCTION_GROUP(symbol);
            function_group.resolve_overrides();

            return true;
        si

        visit(function: Definition.FUNCTION) is
        si
    si
si
