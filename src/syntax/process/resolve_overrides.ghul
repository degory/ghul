namespace Syntax.Process is
        
    use Logging;
    use Trees;
    use Source;

    class RESOLVE_OVERRIDES: ScopedVisitor is
        _done_object: bool;

        _logger: Logger;
        _symbol_table: Semantic.SYMBOL_TABLE;

        init(
            logger: Logger,
            stable_symbols: Semantic.STABLE_SYMBOLS,
            symbol_table: Semantic.SYMBOL_TABLE,
            namespaces: Semantic.NAMESPACES
        )
        is
            super.init(logger, stable_symbols, symbol_table, namespaces);

            _logger = logger;
            _symbol_table = symbol_table;
        si

        apply(root: Trees.Node) is
            // FIXME: this isn't needed 

            if !_done_object then

                let lookup = IoC.CONTAINER.instance.innate_symbol_lookup;

                lookup.get_object_type().symbol.pull_down_super_symbols();
                lookup.get_value_type().symbol.pull_down_super_symbols();

                _done_object = true;
            fi            

            root.walk(self);
        si

        pre(class_: Trees.Definitions.CLASS) -> bool is
            super.pre(class_);
            return true;
        si

        pre(trait_: Trees.Definitions.TRAIT) -> bool is
            super.pre(trait_);
            return true;
        si        

        pre(struct_: Trees.Definitions.STRUCT) -> bool is
            super.pre(struct_);
            return true;
        si

        visit(class_: Definitions.CLASS) is
            let symbol = symbol_for(class_);

            @IF.debug() Std.error.write_line("resolve overrides: " + symbol);

            if symbol? && isa Semantic.Symbols.Classy(symbol) then
                @IF.debug() @IF.debug() Std.error.write_line("from resolve overrides pass: " + symbol);

                cast Semantic.Symbols.Classy(symbol).pull_down_super_symbols();
            fi
        si

        visit(struct_: Definitions.STRUCT) is
            let symbol = symbol_for(struct_);

            @IF.debug() Std.error.write_line("resolve overrides: " + symbol);

            if symbol? && isa Semantic.Symbols.Classy(symbol) then
                @IF.debug() Std.error.write_line("from resolve overrides pass: " + symbol);

                cast Semantic.Symbols.Classy(symbol).pull_down_super_symbols();
            fi
        si

        visit(trait_: Definitions.TRAIT) is
            let symbol = symbol_for(trait_);

            @IF.debug() Std.error.write_line("resolve overrides: " + symbol);

            if symbol? && isa Semantic.Symbols.Classy(symbol) then
                @IF.debug() Std.error.write_line("from resolve overrides pass: " + symbol);

                cast Semantic.Symbols.Classy(symbol).pull_down_super_symbols();
            fi
        si
    si
si
