namespace Syntax is
    use System.NotImplementedException;

    use IO.Std;

    use Trees;

    class StrictVisitor: Visitor  is
        init() is
            super.init();
        si

        throwNotImplemented(name: string, node: Node) is
            throw new NotImplementedException(
                "Visitor {self} does not define a visit method for {name} {node.get_type()} and/or this node does not accept this visitor" 
            );
        si

        visit(node: Node) is
            throw new NotImplementedException("Visitor itself is missing a matching method for {node.get_type()}");
        si

        visit(identifier: Identifiers.Identifier) is
            throwNotImplemented("identifier", identifier);
        si

        visit(identifier: Identifiers.QUALIFIED) is
            throwNotImplemented("qualified identifier", identifier);
        si

        visit(modifier: Modifiers.Modifier) is
            throwNotImplemented("modifier", modifier);
        si

        visit(modifiers: Modifiers.LIST) is
            throwNotImplemented("modifiers", modifiers);
        si

        visit(definition: Definitions.Definition) is
            throwNotImplemented("definition", definition);
        si

        visit(definitions: Definitions.LIST) is
            throwNotImplemented("definition list", definitions);
        si

        visit(`namespace: Definitions.NAMESPACE) is
            throwNotImplemented("namespace", `namespace);
        si

        visit(`use: Definitions.USE) is
            throwNotImplemented("use", `use);
        si

        visit(`class: Definitions.CLASS) is
            throwNotImplemented("class", `class);
        si

        visit(`trait: Definitions.TRAIT) is
            throwNotImplemented("trait", `trait);
        si

        visit(`struct: Definitions.STRUCT) is
            throwNotImplemented("struct", `struct);
        si        

        visit(`enum: Definitions.ENUM) is
            throwNotImplemented("enum", `enum);
        si

        visit(enum_member: Definitions.ENUM_MEMBER) is
            throwNotImplemented("enum member", enum_member);
        si

        visit(function: Definitions.FUNCTION) is
            throwNotImplemented("function", function);
        si

        visit(property: Definitions.PROPERTY) is
            throwNotImplemented("property", property);
        si

        visit(indexer: Definitions.INDEXER) is
            throwNotImplemented("indexer", indexer);
        si

        visit(variable: Variables.VARIABLE) is
            throwNotImplemented("variable", variable);
        si

        visit(variables: Variables.LIST) is
            throwNotImplemented("variable list", variables);
        si

        visit(destructure_element: Trees.Variables.SINGLE_NAME_LEFT) is
            throwNotImplemented("simple variable name", destructure_element);
        si

        visit(destructure_element_list: Trees.Variables.DESTRUCTURE_LEFT) is
            throwNotImplemented("destructure variable names", destructure_element_list);
        si

        visit(type_expression: TypeExpressions.TypeExpression) is
            throwNotImplemented("type_expression", type_expression);
        si

        visit(type_expression: TypeExpressions.INFER) is
            throwNotImplemented("infer", type_expression);
        si

        visit(structured: TypeExpressions.Structured) is
            throwNotImplemented("structured", structured);
        si

        visit(array: TypeExpressions.ARRAY_) is
            throwNotImplemented("array", array);
        si

        visit(pointer: TypeExpressions.POINTER) is
            throwNotImplemented("pointer", pointer);
        si

        visit(reference: TypeExpressions.REFERENCE) is
            throwNotImplemented("reference", reference);
        si

        visit(named: TypeExpressions.NAMED) is
            throwNotImplemented("named", named);
        si

        visit(types: TypeExpressions.LIST) is
            throwNotImplemented("type_expression list", types);
        si

        visit(generic: TypeExpressions.GENERIC) is
            throwNotImplemented("generic", generic);
        si

        visit(function: TypeExpressions.FUNCTION) is
            throwNotImplemented("function", function);
        si

        visit(tuple: TypeExpressions.TUPLE) is
            throwNotImplemented("tuple", tuple);
        si

        visit(element: TypeExpressions.NAMED_TUPLE_ELEMENT) is
            throwNotImplemented("name tuple element", element);
        si

        visit(element: TypeExpressions.UNDEFINED) is
            throwNotImplemented("???", element);
        si

        visit(expression: Expressions.Expression) is
            throwNotImplemented("expression", expression);
        si

        visit(identifier: Expressions.IDENTIFIER) is
            throwNotImplemented("identifier", identifier);
        si

        visit(literal: Expressions.Literals.Literal) is
            throwNotImplemented("literal", literal);
        si

        visit(`string: Expressions.Literals.STRING) is
            throwNotImplemented("string literal", `string);
        si

        visit(interpolation: Expressions.STRING_INTERPOLATION) is
            throwNotImplemented("string interpolation", interpolation);
        si

        visit(integer: Expressions.Literals.INTEGER) is
            throwNotImplemented("integer literal", integer);
        si        

        visit(float: Expressions.Literals.FLOAT) is
            throwNotImplemented("float literal", float);
        si        

        visit(character: Expressions.Literals.CHARACTER) is
            throwNotImplemented("character literal", character);
        si

        visit(boolean: Expressions.Literals.BOOLEAN) is
            throwNotImplemented("boolean literal", boolean);
        si

        visit(variable: Expressions.VARIABLE) is
            throwNotImplemented("variable", variable);
        si

        visit(variable: Expressions.TUPLE_ELEMENT) is
            throwNotImplemented("tuple element", variable);
        si

        visit(none: Expressions.Literals.NONE) is
            throwNotImplemented("none", none);
        si

        visit(`null: Expressions.NULL) is
            throwNotImplemented("null", `null);
        si

        visit(`self: Expressions.SELF) is
            throwNotImplemented("self", `self);
        si

        visit(`super: Expressions.SUPER) is
            throwNotImplemented("super", `super);
        si

        visit(`new: Expressions.NEW) is
            throwNotImplemented("new", `new);
        si

        visit(`cast: Expressions.CAST) is
            throwNotImplemented("cast", `cast);
        si

        visit(`isa: Expressions.ISA) is
            throwNotImplemented("isa", `isa);
        si

        visit(`isa: Expressions.TYPEOF) is
            throwNotImplemented("isa", `isa);
        si

        visit(function: Syntax.Trees.Expressions.FUNCTION) is
            throwNotImplemented("function", function);
        si

        visit(tuple: Expressions.TUPLE) is
            throwNotImplemented("tuple", tuple);
        si

        visit(sequence: Expressions.SEQUENCE) is
            throwNotImplemented("sequence", sequence);
        si

        visit(list: Expressions.LIST) is
            throwNotImplemented("list", list);
        si

        visit(call: Expressions.CALL) is
            throwNotImplemented("call", call);
        si

        visit(member: Expressions.MEMBER) is
            throwNotImplemented("member", member);
        si

        visit(index: Expressions.INDEX) is
            throwNotImplemented("index", index);
        si

        visit(has_value: Expressions.HAS_VALUE) is
            throwNotImplemented("has value", has_value);
        si

        visit(reference: Expressions.REFERENCE) is
            throwNotImplemented("reference", reference);
        si

        visit(unary: Expressions.UNARY) is
            throwNotImplemented("unary", unary);
        si

        visit(binary: Expressions.BINARY) is
            throwNotImplemented("binary", binary);
        si

        pre(statement: Expressions.STATEMENT) -> bool is
            throwNotImplemented("statement expression", statement);
        si

        visit(statement: Expressions.STATEMENT) is
            throwNotImplemented("statement expression", statement);
        si

        visit(left: Trees.Expressions.SINGLE_EXPRESSION_LEFT) is
            throwNotImplemented("single expression left", left);
        si

        visit(destructure_left: Trees.Expressions.DESTRUCTURE_LEFT) is
            throwNotImplemented("destructure left", destructure_left);
        si

        visit(statement: Statements.Statement) is
            throwNotImplemented("statement", statement);
        si

        visit(statements: Statements.LIST) is
            throwNotImplemented("statement list", statements);
        si

        visit(l: Statements.LET) is
            throwNotImplemented("let", l);
        si

        visit(assign: Statements.ASSIGNMENT) is
            throwNotImplemented("assignment", assign);
        si

        visit(expression: Statements.EXPRESSION) is
            throwNotImplemented("expression", expression);
        si

        visit(`return: Statements.RETURN) is
            throwNotImplemented("return", `return);
        si

        visit(`throw: Statements.THROW) is
            throwNotImplemented("throw", `throw);
        si

        visit(`assert: Statements.ASSERT) is
            throwNotImplemented("assert", `assert);
        si

        visit(`if: Statements.IF) is
            throwNotImplemented("if", `if);
        si

        visit(`case: Statements.CASE) is
            throwNotImplemented("case", `case);
        si

        visit(case_match: Statements.CASE_MATCH) is
            throwNotImplemented("case match", case_match);
        si

        visit(`try: Statements.TRY) is
            throwNotImplemented("try", `try);
        si

        visit(`catch: Statements.CATCH) is
            throwNotImplemented("catch", `catch);
        si

        visit(`do: Statements.DO) is
            throwNotImplemented("do", `do);
        si

        visit(`for: Statements.FOR) is
            throwNotImplemented("for", `for);
        si

        visit(labelled: Statements.LABELLED) is
            throwNotImplemented("labelled", labelled);
        si

        visit(`break: Statements.BREAK) is
            throwNotImplemented("break", `break);
        si

        visit(`continue: Statements.CONTINUE) is
            throwNotImplemented("continue", `continue);
        si

        visit(body: Bodies.Body) is
            throwNotImplemented("body", body);
        si

        visit(expression: Bodies.EXPRESSION) is
            throwNotImplemented("expression body", expression);
        si

        visit(block: Bodies.BLOCK) is
            throwNotImplemented("block body", block);
        si
    si
si
