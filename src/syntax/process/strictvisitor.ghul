namespace Syntax is
    @IF.not.v3() use object = System.Object;
    @IF.not.v3() use string = System.String;
    @IF.not.v3() use Std = System.Console;

    use System;
    use Trees;

    class StrictVisitor: Visitor  is
        init() is
            super.init();
        si

        throwNotImplemented(name: string, node: Node) is
            throw new NotImplementedException(
                "Visitor " + self + " does not define a visit method for " + name + " " + node.get_type() + " and/or this node does not accept this visitor" 
            );
        si

        visit(node: Node) is
            throw new NotImplementedException("Visitor itself is missing a matching method for " + node.get_type());
        si

        visit(identifier: Identifiers.Identifier) is
            throwNotImplemented("identifier", identifier);
        si

        visit(identifier: Identifiers.QUALIFIED) is
            throwNotImplemented("qualified identifier", identifier);
        si

        visit(modifier: Modifiers.Modifier) is
            throwNotImplemented("modifier", modifier);
        si

        visit(modifiers: Modifiers.LIST) is
            throwNotImplemented("modifiers", modifiers);
        si

        visit(definition: Definitions.Definition) is
            throwNotImplemented("definition", definition);
        si

        visit(definitions: Definitions.LIST) is
            throwNotImplemented("definition list", definitions);
        si

        visit(namespace_: Definitions.NAMESPACE) is
            throwNotImplemented("namespace", namespace_);
        si

        visit(use_: Definitions.USE) is
            throwNotImplemented("use", use_);
        si

        visit(class_: Definitions.CLASS) is
            throwNotImplemented("class", class_);
        si

        visit(trait_: Definitions.TRAIT) is
            throwNotImplemented("trait", trait_);
        si

        visit(struct_: Definitions.STRUCT) is
            throwNotImplemented("struct", struct_);
        si        

        visit(enum_: Definitions.ENUM) is
            throwNotImplemented("enum", enum_);
        si

        visit(enum_member: Definitions.ENUM_MEMBER) is
            throwNotImplemented("enum member", enum_member);
        si

        visit(function: Definitions.FUNCTION) is
            throwNotImplemented("function", function);
        si

        visit(property: Definitions.PROPERTY) is
            throwNotImplemented("property", property);
        si

        visit(indexer: Definitions.INDEXER) is
            throwNotImplemented("indexer", indexer);
        si

        visit(variable: Variables.Variable) is
            throwNotImplemented("variable", variable);
        si

        visit(variables: Variables.LIST) is
            throwNotImplemented("variable list", variables);
        si

        visit(type_expression: TypeExpressions.TypeExpression) is
            throwNotImplemented("type_expression", type_expression);
        si

        visit(type_expression: TypeExpressions.INFER) is
            throwNotImplemented("infer", type_expression);
        si

        visit(built_in: TypeExpressions.BUILT_IN) is
            throwNotImplemented("built id", built_in);
        si

        visit(structured: TypeExpressions.Structured) is
            throwNotImplemented("structured", structured);
        si

        visit(array: TypeExpressions.ARRAY_) is
            throwNotImplemented("array", array);
        si

        visit(pointer: TypeExpressions.POINTER) is
            throwNotImplemented("pointer", pointer);
        si

        visit(reference: TypeExpressions.REFERENCE) is
            throwNotImplemented("reference", reference);
        si

        visit(named: TypeExpressions.NAMED) is
            throwNotImplemented("named", named);
        si

        visit(types: TypeExpressions.LIST) is
            throwNotImplemented("type_expression list", types);
        si

        visit(generic: TypeExpressions.GENERIC) is
            throwNotImplemented("generic", generic);
        si

        visit(function: TypeExpressions.FUNCTION) is
            throwNotImplemented("function", function);
        si

        visit(tuple: TypeExpressions.TUPLE) is
            throwNotImplemented("tuple", tuple);
        si

        visit(element: TypeExpressions.NAMED_TUPLE_ELEMENT) is
            throwNotImplemented("name tuple element", element);
        si

        visit(expression: Expressions.Expression) is
            throwNotImplemented("expression", expression);
        si

        visit(identifier: Expressions.IDENTIFIER) is
            throwNotImplemented("identifier", identifier);
        si

        visit(literal: Expressions.Literals.Literal) is
            throwNotImplemented("literal", literal);
        si

        visit(string_: Expressions.Literals.STRING) is
            throwNotImplemented("string literal", string_);
        si

        visit(integer: Expressions.Literals.INTEGER) is
            throwNotImplemented("integer literal", integer);
        si        

        visit(float: Expressions.Literals.FLOAT) is
            throwNotImplemented("float literal", float);
        si        

        visit(character: Expressions.Literals.CHARACTER) is
            throwNotImplemented("character literal", character);
        si

        visit(boolean: Expressions.Literals.BOOLEAN) is
            throwNotImplemented("boolean literal", boolean);
        si

        visit(variable: Expressions.VARIABLE) is
            throwNotImplemented("variable", variable);
        si

        visit(none: Expressions.Literals.NONE) is
            throwNotImplemented("none", none);
        si

        visit(null_: Expressions.NULL) is
            throwNotImplemented("null", null_);
        si

        visit(self_: Expressions.SELF) is
            throwNotImplemented("self", self_);
        si

        visit(super_: Expressions.SUPER) is
            throwNotImplemented("super", super_);
        si

        visit(new_: Expressions.NEW) is
            throwNotImplemented("new", new_);
        si

        visit(cast_: Expressions.CAST) is
            throwNotImplemented("cast", cast_);
        si

        visit(isa_: Expressions.ISA) is
            throwNotImplemented("isa", isa_);
        si

        visit(isa_: Expressions.TYPEOF) is
            throwNotImplemented("isa", isa_);
        si

        visit(function: Syntax.Trees.Expressions.FUNCTION) is
            throwNotImplemented("function", function);
        si

        visit(tuple: Expressions.TUPLE) is
            throwNotImplemented("tuple", tuple);
        si

        visit(sequence: Expressions.SEQUENCE) is
            throwNotImplemented("sequence", sequence);
        si

        visit(list: Expressions.LIST) is
            throwNotImplemented("list", list);
        si

        visit(call: Expressions.CALL) is
            throwNotImplemented("call", call);
        si

        visit(member: Expressions.MEMBER) is
            throwNotImplemented("member", member);
        si

        visit(index: Expressions.INDEX) is
            throwNotImplemented("index", index);
        si

        visit(has_value: Expressions.HAS_VALUE) is
            throwNotImplemented("has value", has_value);
        si

        visit(reference: Expressions.REFERENCE) is
            throwNotImplemented("reference", reference);
        si

        visit(unary: Expressions.UNARY) is
            throwNotImplemented("unary", unary);
        si

        visit(binary: Expressions.BINARY) is
            throwNotImplemented("binary", binary);
        si

        visit(statement: Statements.Statement) is
            throwNotImplemented("statement", statement);
        si

        visit(statements: Statements.LIST) is
            throwNotImplemented("statement list", statements);
        si

        visit(l: Statements.LET) is
            throwNotImplemented("let", l);
        si

        visit(v: Statements.VAR) is
            throwNotImplemented("var", v);
        si

        visit(assign: Statements.ASSIGNMENT) is
            throwNotImplemented("assignment", assign);
        si

        visit(expression: Statements.EXPRESSION) is
            throwNotImplemented("expression", expression);
        si

        visit(return_: Statements.RETURN) is
            throwNotImplemented("return", return_);
        si

        visit(throw_: Statements.THROW) is
            throwNotImplemented("throw", throw_);
        si

        visit(assert_: Statements.ASSERT) is
            throwNotImplemented("assert", assert_);
        si

        visit(if_: Statements.IF) is
            throwNotImplemented("if", if_);
        si

        visit(case_: Statements.CASE) is
            throwNotImplemented("case", case_);
        si

        visit(case_match: Statements.CASE_MATCH) is
            throwNotImplemented("case match", case_match);
        si

        visit(try_: Statements.TRY) is
            throwNotImplemented("try", try_);
        si

        visit(catch_: Statements.CATCH) is
            throwNotImplemented("catch", catch_);
        si

        visit(do_: Statements.DO) is
            throwNotImplemented("do", do_);
        si

        visit(for_: Statements.FOR) is
            throwNotImplemented("for", for_);
        si

        visit(labelled: Statements.LABELLED) is
            throwNotImplemented("labelled", labelled);
        si

        visit(break_: Statements.BREAK) is
            throwNotImplemented("break", break_);
        si

        visit(continue_: Statements.CONTINUE) is
            throwNotImplemented("continue", continue_);
        si

        visit(body: Bodies.Body) is
            throwNotImplemented("body", body);
        si

        visit(expression: Bodies.EXPRESSION) is
            throwNotImplemented("expression body", expression);
        si

        visit(block: Bodies.BLOCK) is
            throwNotImplemented("block body", block);
        si
    si
si
