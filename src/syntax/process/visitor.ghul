namespace Syntax is
    @IF.not.v3() use object = System.Object;
    @IF.not.v3() use string = System.String;
    @IF.not.v3() use Std = System.Console;

    use System;

    use Trees;

    class Visitor  is
        init() is
            super.init();
        si

        throwNotImplemented(name: string, node: Node) is
            throw new NotImplementedException(
                "Visitor " + self + " does not define a visit method for " + name + " " + node.get_type() + " and/or this node does not accept this visitor"
            );
        si

        pre(node: Node) -> bool is            
            return false;
        si

        visit(node: Node) is
        si

        post(node: Node) is
        si

        pre(identifier: Identifiers.Identifier) -> bool is
            return false;
        si

        visit(identifier: Identifiers.Identifier) is
        si

        post(identifier: Identifiers.Identifier) is
        si

        pre(identifier: Identifiers.QUALIFIED) -> bool is
            return false;
        si

        visit(identifier: Identifiers.QUALIFIED) is
        si

        pre(modifier: Modifiers.Modifier) -> bool is
            return false;
        si

        visit(modifier: Modifiers.Modifier) is
        si

        pre(modifiers: Modifiers.LIST) -> bool is
            return false;
        si

        visit(modifiers: Modifiers.LIST) is
        si

        pre(pragma_: Pragmas.PRAGMA) -> bool is
            return false;
        si

        visit(pragma_: Pragmas.PRAGMA) is            
        si

        pre(definition: Definitions.Definition) -> bool is
            return false;
        si

        visit(definition: Definitions.Definition) is
        si

        pre(definitions: Definitions.LIST) -> bool is
            return false;
        si

        visit(definitions: Definitions.LIST) is
        si

        pre(pragma_: Definitions.PRAGMA) -> bool is
            return false;
        si

        visit(pragma_: Definitions.PRAGMA) is            
        si

        pre(namespace_: Definitions.NAMESPACE) -> bool is
            return false;
        si

        visit(namespace_: Definitions.NAMESPACE) is
        si

        pre(use_: Definitions.USE) -> bool is
            return false;
        si

        visit(use_: Definitions.USE) is
        si

        pre(class_: Definitions.CLASS) -> bool is
            return false;
        si

        visit(class_: Definitions.CLASS) is
        si

        pre(trait_: Definitions.TRAIT) -> bool is
            return false;
        si

        visit(trait_: Definitions.TRAIT) is
        si

        pre(struct_: Definitions.STRUCT) -> bool is
            return false;
        si

        visit(struct_: Definitions.STRUCT) is
        si        

        pre(enum_: Definitions.ENUM) -> bool is
            return false;
        si

        visit(enum_: Definitions.ENUM) is
        si

        pre(enum_member: Definitions.ENUM_MEMBER) -> bool is
            return false;
        si

        visit(enum_member: Definitions.ENUM_MEMBER) is
        si

        pre(function: Definitions.FUNCTION) -> bool is
            return false;
        si

        visit(function: Definitions.FUNCTION) is
        si

        pre(functions: Definitions.FUNCTION_GROUP) -> bool is
            return false;
        si

        visit(functions: Definitions.FUNCTION_GROUP) is
        si

        pre(property: Definitions.PROPERTY) -> bool is
            return false;
        si

        visit(property: Definitions.PROPERTY) is
        si

        pre(indexer: Definitions.INDEXER) -> bool is
            return false;
        si

        visit(indexer: Definitions.INDEXER) is
        si

        pre(variable: Variables.Variable) -> bool is
            return false;
        si

        visit(variable: Variables.Variable) is
        si

        pre(variables: Variables.LIST) -> bool is
            return false;
        si

        visit(variables: Variables.LIST) is
        si

        pre(type_expression: TypeExpressions.TypeExpression) -> bool is
            return false;
        si

        visit(type_expression: TypeExpressions.TypeExpression) is
        si

        pre(infer: TypeExpressions.INFER) -> bool is
            return false;
        si

        visit(type_expression: TypeExpressions.INFER) is
        si

        pre(built_in: TypeExpressions.BUILT_IN) -> bool is
            return false;
        si

        visit(built_in: TypeExpressions.BUILT_IN) is
        si

        pre(structured: TypeExpressions.Structured) -> bool is
            return false;
        si

        visit(structured: TypeExpressions.Structured) is
        si

        pre(array: TypeExpressions.ARRAY_) -> bool is
            return false; 
        si

        visit(array: TypeExpressions.ARRAY_) is
        si

        pre(pointer: TypeExpressions.POINTER) -> bool is
            return false;
        si

        visit(pointer: TypeExpressions.POINTER) is
        si

        pre(reference: TypeExpressions.REFERENCE) -> bool is
            return false;
        si

        visit(reference: TypeExpressions.REFERENCE) is
        si

        pre(named: TypeExpressions.NAMED) -> bool is
            return false;
        si

        visit(named: TypeExpressions.NAMED) is
        si

        pre(types: TypeExpressions.LIST) -> bool is
            return false;
        si

        visit(types: TypeExpressions.LIST) is
        si

        pre(generic: TypeExpressions.GENERIC) -> bool is
            return false;
        si

        visit(generic: TypeExpressions.GENERIC) is
        si

        pre(function: TypeExpressions.FUNCTION) -> bool is
            return false;
        si

        visit(function: TypeExpressions.FUNCTION) is
        si

        pre(functions: TypeExpressions.FUNCTION_GROUP) -> bool is
            return false;
        si

        visit(functions: TypeExpressions.FUNCTION_GROUP) is
        si

        pre(tuple: TypeExpressions.TUPLE) -> bool is
            return false;
        si

        visit(tuple: TypeExpressions.TUPLE) is
        si

        pre(element: TypeExpressions.NAMED_TUPLE_ELEMENT) -> bool is
            return false;
        si

        visit(element: TypeExpressions.NAMED_TUPLE_ELEMENT) is
        si

        pre(expression: Expressions.Expression) -> bool is
            return false;
        si

        visit(expression: Expressions.Expression) is
        si

        pre(identifier: Expressions.IDENTIFIER) -> bool is
            return false;
        si

        visit(identifier: Expressions.IDENTIFIER) is
        si

        pre(literal: Expressions.Literals.Literal) -> bool is
            return false;
        si

        visit(literal: Expressions.Literals.Literal) is
        si

        pre(string_: Expressions.Literals.STRING) -> bool is
            return false;
        si

        visit(string_: Expressions.Literals.STRING) is
        si

        pre(integer: Expressions.Literals.INTEGER) -> bool is
            return false;
        si

        visit(integer: Expressions.Literals.INTEGER) is
        si

        pre(float: Expressions.Literals.FLOAT) -> bool is
            return false;
        si

        visit(float: Expressions.Literals.FLOAT) is
        si
        
        pre(character: Expressions.Literals.CHARACTER) -> bool is
            return false;
        si

        visit(character: Expressions.Literals.CHARACTER) is
        si

        pre(boolean: Expressions.Literals.BOOLEAN) -> bool is
            return false;
        si

        visit(boolean: Expressions.Literals.BOOLEAN) is
        si

        pre(variable: Expressions.VARIABLE) -> bool is
            return false;
        si

        visit(variable: Expressions.VARIABLE) is
        si

        pre(none: Expressions.Literals.NONE) -> bool is
            return false;
        si

        visit(none: Expressions.Literals.NONE) is
        si

        pre(null_: Expressions.NULL) -> bool is
            return false;
        si

        visit(null_: Expressions.NULL) is
        si

        pre(self_: Expressions.SELF) -> bool is
            return false;
        si

        visit(self_: Expressions.SELF) is
        si

        pre(super_: Expressions.SUPER) -> bool is
            return false;
        si

        visit(super_: Expressions.SUPER) is
        si

        pre(new_: Expressions.NEW) -> bool is
            return false;
        si

        visit(new_: Expressions.NEW) is
        si

        pre(cast_: Expressions.CAST) -> bool is
            return false;
        si

        visit(cast_: Expressions.CAST) is
        si

        pre(isa_: Expressions.ISA) -> bool is
            return false;
        si

        visit(isa_: Expressions.ISA) is
        si

        pre(isa_: Expressions.TYPEOF) -> bool is
            return false;
        si

        visit(isa_: Expressions.TYPEOF) is
        si

        pre(function: Syntax.Trees.Expressions.FUNCTION) -> bool is
            return false;
        si

        visit(function: Syntax.Trees.Expressions.FUNCTION) is
        si

        pre(tuple: Expressions.TUPLE) -> bool is
            return false;
        si

        visit(tuple: Expressions.TUPLE) is
        si

        pre(sequence: Expressions.SEQUENCE) -> bool is
            return false;
        si

        visit(sequence: Expressions.SEQUENCE) is
        si

        pre(list: Expressions.LIST) -> bool is
            return false;
        si

        visit(list: Expressions.LIST) is
        si

        pre(call: Expressions.CALL) -> bool is
            return false;
        si

        visit(call: Expressions.CALL) is
        si

        pre(member: Expressions.MEMBER) -> bool is
            return false;
        si

        visit(member: Expressions.MEMBER) is
        si

        pre(index: Expressions.INDEX) -> bool is
            return false;
        si

        visit(index: Expressions.INDEX) is
        si

        pre(has_value: Expressions.HAS_VALUE) -> bool is
            return false;
        si

        visit(has_value: Expressions.HAS_VALUE) is
        si

        pre(reference: Expressions.REFERENCE) -> bool is
            return false;
        si

        visit(reference: Expressions.REFERENCE) is
        si

        pre(unary: Expressions.UNARY) -> bool is
            return false;
        si

        visit(unary: Expressions.UNARY) is
        si

        pre(binary: Expressions.BINARY) -> bool is
            return false;
        si

        visit(binary: Expressions.BINARY) is
        si

        pre(statement: Statements.Statement) -> bool is
            return false;
        si

        visit(statement: Statements.Statement) is
        si

        pre(statements: Statements.LIST) -> bool is
            return false;
        si

        visit(statements: Statements.LIST) is
        si

        pre(l: Statements.LET) -> bool is
            return false;
        si

        visit(l: Statements.LET) is
        si

        pre(v: Statements.VAR) -> bool is
            return false;
        si

        visit(v: Statements.VAR) is
        si

        pre(assign: Statements.ASSIGNMENT) -> bool is
            return false;
        si

        visit(assign: Statements.ASSIGNMENT) is
        si

        pre(expression: Statements.EXPRESSION) -> bool is
            return false;
        si

        visit(expression: Statements.EXPRESSION) is
        si

        pre(return_: Statements.RETURN) -> bool is
            return false;
        si

        visit(return_: Statements.RETURN) is
        si

        pre(throw_: Statements.THROW) -> bool is
            return false;
        si

        visit(throw_: Statements.THROW) is
        si

        pre(assert__: Statements.ASSERT) -> bool is
            return false;
        si

        visit(assert__: Statements.ASSERT) is
        si

        pre(if_: Statements.IF) -> bool is
            return false;
        si

        visit(if_: Statements.IF) is
        si

        pre(if_branch: Statements.IF_BRANCH) -> bool is
            return false;
        si

        visit(if_branch: Statements.IF_BRANCH) is
        si        

        pre(case_: Statements.CASE) -> bool is
            return false;
        si

        visit(case_: Statements.CASE) is
        si

        pre(case_match: Statements.CASE_MATCH) -> bool is
            return false;
        si

        visit(case_match: Statements.CASE_MATCH) is
        si

        pre(try_: Statements.TRY) -> bool is
            return false;
        si

        visit(try_: Statements.TRY) is
        si

        pre(catch_: Statements.CATCH) -> bool is
            return false;
        si

        visit(catch_: Statements.CATCH) is
        si

        pre(do_: Statements.DO) -> bool is
            return false;
        si

        visit(do_: Statements.DO) is
        si

        pre(for_: Statements.FOR) -> bool is
            return false;
        si

        visit(for_: Statements.FOR) is
        si

        pre(labelled: Statements.LABELLED) -> bool is
            return false;
        si

        visit(labelled: Statements.LABELLED) is
        si

        pre(break_: Statements.BREAK) -> bool is
            return false;
        si

        visit(break_: Statements.BREAK) is
        si

        pre(continue_: Statements.CONTINUE) -> bool is
            return false;
        si

        visit(continue_: Statements.CONTINUE) is
        si

        pre(pragma_: Statements.PRAGMA) -> bool is
            return false;
        si

        visit(pragma_: Statements.PRAGMA) is            
        si

        pre(expression: Bodies.EXPRESSION) -> bool is
            return false;
        si

        visit(expression: Bodies.EXPRESSION) is
        si

        pre(block: Bodies.BLOCK) -> bool is
            return false;
        si

        visit(block: Bodies.BLOCK) is
        si

        pre(block: Bodies.NULL) -> bool is
            return false;
        si

        visit(block: Bodies.NULL) is
        si

        pre(block: Bodies.INNATE) -> bool is
            return false;
        si

        visit(block: Bodies.INNATE) is
        si
    si
si
