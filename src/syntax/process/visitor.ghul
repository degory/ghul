namespace Syntax is
    use System;

    use Tree;

    class Visitor  is
        init() is
            super.init();
        si

        throwNotImplemented(name: String, node: NODE) is
            throw new NotImplementedException(
                "Visitor % does not define a visit method for % % and/or this node does not accept this visitor" % [self, name, node.ClassName]: Object 
            );
        si

        pre(node: NODE) -> bool is
            return false;
        si

        visit(node: NODE) is
        si

        post(node: NODE) is
        si

        pre(identifier: Identifier.NODE) -> bool is
            return false;
        si

        visit(identifier: Identifier.NODE) is
        si

        post(identifier: Identifier.NODE) is
        si

        pre(identifier: Identifier.QUALIFIED) -> bool is
            return false;
        si

        visit(identifier: Identifier.QUALIFIED) is
        si

        pre(modifier: Modifier.NODE) -> bool is
            return false;
        si

        visit(modifier: Modifier.NODE) is
        si

        pre(modifiers: Modifier.LIST) -> bool is
            return false;
        si

        visit(modifiers: Modifier.LIST) is
        si

        pre(pragma_: Pragma.NODE) -> bool is
            return false;
        si

        visit(pragma_: Pragma.NODE) is            
        si

        pre(definition: Definition.NODE) -> bool is
            return false;
        si

        visit(definition: Definition.NODE) is
        si

        pre(definitions: Definition.LIST) -> bool is
            return false;
        si

        visit(definitions: Definition.LIST) is
        si

        pre(pragma_: Definition.PRAGMA) -> bool is
            return false;
        si

        visit(pragma_: Definition.PRAGMA) is            
        si

        pre(import_: Definition.IMPORT) -> bool is
            return false;
        si

        visit(import_: Definition.IMPORT) is
        si

        pre(namespace_: Definition.NAMESPACE) -> bool is
            return false;
        si

        visit(namespace_: Definition.NAMESPACE) is
        si

        pre(use_: Definition.USE) -> bool is
            return false;
        si

        visit(use_: Definition.USE) is
        si

        pre(class_: Definition.CLASS) -> bool is
            return false;
        si

        visit(class_: Definition.CLASS) is
        si

        pre(trait_: Definition.TRAIT) -> bool is
            return false;
        si

        visit(trait_: Definition.TRAIT) is
        si

        pre(struct_: Definition.STRUCT) -> bool is
            return false;
        si

        visit(struct_: Definition.STRUCT) is
        si        

        pre(enum_: Definition.ENUM) -> bool is
            return false;
        si

        visit(enum_: Definition.ENUM) is
        si

        pre(enum_member: Definition.ENUM_MEMBER) -> bool is
            return false;
        si

        visit(enum_member: Definition.ENUM_MEMBER) is
        si

        pre(function: Definition.FUNCTION) -> bool is
            return false;
        si

        visit(function: Definition.FUNCTION) is
        si

        pre(functions: Definition.FUNCTION_GROUP) -> bool is
            return false;
        si

        visit(functions: Definition.FUNCTION_GROUP) is
        si

        pre(property: Definition.PROPERTY) -> bool is
            return false;
        si

        visit(property: Definition.PROPERTY) is
        si

        pre(indexer: Definition.INDEXER) -> bool is
            return false;
        si

        visit(indexer: Definition.INDEXER) is
        si

        pre(variable: Variable.NODE) -> bool is
            return false;
        si

        visit(variable: Variable.NODE) is
        si

        pre(variables: Variable.LIST) -> bool is
            return false;
        si

        visit(variables: Variable.LIST) is
        si

        pre(type_expression: TypeExpression.NODE) -> bool is
            return false;
        si

        visit(type_expression: TypeExpression.NODE) is
        si

        pre(infer: TypeExpression.INFER) -> bool is
            return false;
        si

        visit(type_expression: TypeExpression.INFER) is
        si

        pre(built_in: TypeExpression.BUILT_IN) -> bool is
            return false;
        si

        visit(built_in: TypeExpression.BUILT_IN) is
        si

        pre(structured: TypeExpression.STRUCTURED) -> bool is
            return false;
        si

        visit(structured: TypeExpression.STRUCTURED) is
        si

        pre(array: TypeExpression.ARRAY_) -> bool is
            return false; 
        si

        visit(array: TypeExpression.ARRAY_) is
        si

        pre(pointer: TypeExpression.POINTER) -> bool is
            return false;
        si

        visit(pointer: TypeExpression.POINTER) is
        si

        pre(reference: TypeExpression.REFERENCE) -> bool is
            return false;
        si

        visit(reference: TypeExpression.REFERENCE) is
        si

        pre(named: TypeExpression.NAMED) -> bool is
            return false;
        si

        visit(named: TypeExpression.NAMED) is
        si

        pre(types: TypeExpression.LIST) -> bool is
            return false;
        si

        visit(types: TypeExpression.LIST) is
        si

        pre(generic: TypeExpression.GENERIC) -> bool is
            return false;
        si

        visit(generic: TypeExpression.GENERIC) is
        si

        pre(function: TypeExpression.FUNCTION) -> bool is
            return false;
        si

        visit(function: TypeExpression.FUNCTION) is
        si

        pre(functions: TypeExpression.FUNCTION_GROUP) -> bool is
            return false;
        si

        visit(functions: TypeExpression.FUNCTION_GROUP) is
        si

        pre(tuple: TypeExpression.TUPLE) -> bool is
            return false;
        si

        visit(tuple: TypeExpression.TUPLE) is
        si

        pre(element: TypeExpression.NAMED_TUPLE_ELEMENT) -> bool is
            return false;
        si

        visit(element: TypeExpression.NAMED_TUPLE_ELEMENT) is
        si

        pre(expression: Expression.NODE) -> bool is
            return false;
        si

        visit(expression: Expression.NODE) is
        si

        pre(identifier: Expression.IDENTIFIER) -> bool is
            return false;
        si

        visit(identifier: Expression.IDENTIFIER) is
        si

        pre(literal: Expression.Literal.NODE) -> bool is
            return false;
        si

        visit(literal: Expression.Literal.NODE) is
        si

        pre(string: Expression.Literal.STRING) -> bool is
            return false;
        si

        visit(string: Expression.Literal.STRING) is
        si

        pre(integer: Expression.Literal.INTEGER) -> bool is
            return false;
        si

        visit(integer: Expression.Literal.INTEGER) is
        si
        
        pre(character: Expression.Literal.CHARACTER) -> bool is
            return false;
        si

        visit(character: Expression.Literal.CHARACTER) is
        si

        pre(boolean: Expression.Literal.BOOLEAN) -> bool is
            return false;
        si

        visit(boolean: Expression.Literal.BOOLEAN) is
        si

        pre(variable: Expression.VARIABLE) -> bool is
            return false;
        si

        visit(variable: Expression.VARIABLE) is
        si

        pre(none: Expression.Literal.NONE) -> bool is
            return false;
        si

        visit(none: Expression.Literal.NONE) is
        si

        pre(null_: Expression.NULL) -> bool is
            return false;
        si

        visit(null_: Expression.NULL) is
        si

        pre(self_: Expression.SELF) -> bool is
            return false;
        si

        visit(self_: Expression.SELF) is
        si

        pre(super_: Expression.SUPER) -> bool is
            return false;
        si

        visit(super_: Expression.SUPER) is
        si

        pre(native_: Expression.NATIVE) -> bool is
            return false;
        si

        visit(native_: Expression.NATIVE) is
        si        

        pre(new_: Expression.NEW) -> bool is
            return false;
        si

        visit(new_: Expression.NEW) is
        si

        pre(cast_: Expression.CAST) -> bool is
            return false;
        si

        visit(cast_: Expression.CAST) is
        si

        pre(isa_: Expression.ISA) -> bool is
            return false;
        si

        visit(isa_: Expression.ISA) is
        si

        pre(function: Syntax.Tree.Expression.FUNCTION) -> bool is
            return false;
        si

        visit(function: Syntax.Tree.Expression.FUNCTION) is
        si

        pre(tuple: Expression.TUPLE) -> bool is
            return false;
        si

        visit(tuple: Expression.TUPLE) is
        si

        pre(sequence: Expression.SEQUENCE) -> bool is
            return false;
        si

        visit(sequence: Expression.SEQUENCE) is
        si

        pre(list: Expression.LIST) -> bool is
            return false;
        si

        visit(list: Expression.LIST) is
        si

        pre(call: Expression.CALL) -> bool is
            return false;
        si

        visit(call: Expression.CALL) is
        si

        pre(member: Expression.MEMBER) -> bool is
            return false;
        si

        visit(member: Expression.MEMBER) is
        si

        pre(index: Expression.INDEX) -> bool is
            return false;
        si

        visit(index: Expression.INDEX) is
        si

        pre(has_value: Expression.HAS_VALUE) -> bool is
            return false;
        si

        visit(has_value: Expression.HAS_VALUE) is
        si

        pre(unary: Expression.UNARY) -> bool is
            return false;
        si

        visit(unary: Expression.UNARY) is
        si

        pre(binary: Expression.BINARY) -> bool is
            return false;
        si

        visit(binary: Expression.BINARY) is
        si

        pre(statement: Statement.NODE) -> bool is
            return false;
        si

        visit(statement: Statement.NODE) is
        si

        pre(statements: Statement.LIST) -> bool is
            return false;
        si

        visit(statements: Statement.LIST) is
        si

        pre(l: Statement.LET) -> bool is
            return false;
        si

        visit(l: Statement.LET) is
        si

        pre(v: Statement.VAR) -> bool is
            return false;
        si

        visit(v: Statement.VAR) is
        si

        pre(assign: Statement.ASSIGNMENT) -> bool is
            return false;
        si

        visit(assign: Statement.ASSIGNMENT) is
        si

        pre(expression: Statement.EXPRESSION) -> bool is
            return false;
        si

        visit(expression: Statement.EXPRESSION) is
        si

        pre(return_: Statement.RETURN) -> bool is
            return false;
        si

        visit(return_: Statement.RETURN) is
        si

        pre(throw_: Statement.THROW) -> bool is
            return false;
        si

        visit(throw_: Statement.THROW) is
        si

        pre(if_: Statement.IF) -> bool is
            return false;
        si

        visit(if_: Statement.IF) is
        si

        pre(if_branch: Statement.IF_BRANCH) -> bool is
            return false;
        si

        visit(if_branch: Statement.IF_BRANCH) is
        si        

        pre(case_: Statement.CASE) -> bool is
            return false;
        si

        visit(case_: Statement.CASE) is
        si

        pre(case_match: Statement.CASE_MATCH) -> bool is
            return false;
        si

        visit(case_match: Statement.CASE_MATCH) is
        si

        pre(try_: Statement.TRY) -> bool is
            return false;
        si

        visit(try_: Statement.TRY) is
        si

        pre(catch_: Statement.CATCH) -> bool is
            return false;
        si

        visit(catch_: Statement.CATCH) is
        si

        pre(do_: Statement.DO) -> bool is
            return false;
        si

        visit(do_: Statement.DO) is
        si

        pre(for_: Statement.FOR) -> bool is
            return false;
        si

        visit(for_: Statement.FOR) is
        si

        pre(labelled: Statement.LABELLED) -> bool is
            return false;
        si

        visit(labelled: Statement.LABELLED) is
        si

        pre(break_: Statement.BREAK) -> bool is
            return false;
        si

        visit(break_: Statement.BREAK) is
        si

        pre(continue_: Statement.CONTINUE) -> bool is
            return false;
        si

        visit(continue_: Statement.CONTINUE) is
        si

        pre(pragma_: Statement.PRAGMA) -> bool is
            return false;
        si

        visit(pragma_: Statement.PRAGMA) is            
        si

        pre(expression: Body.EXPRESSION) -> bool is
            return false;
        si

        visit(expression: Body.EXPRESSION) is
        si

        pre(block: Body.BLOCK) -> bool is
            return false;
        si

        visit(block: Body.BLOCK) is
        si

        pre(block: Body.NULL) -> bool is
            return false;
        si

        visit(block: Body.NULL) is
        si

        pre(block: Body.INNATE) -> bool is
            return false;
        si

        visit(block: Body.INNATE) is
        si
    si
si
