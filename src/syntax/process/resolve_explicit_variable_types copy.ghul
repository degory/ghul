namespace Syntax.Process is
    use IO.Std;

    use Logging;

    use Semantic.Types.Type;

    class RESOLVE_EXPLICIT_TYPES: ScopedVisitor is
        _logger: Logger;
        _symbol_table: Semantic.SYMBOL_TABLE;
        _innate_symbol_lookup: Semantic.Lookups.InnateSymbolLookup;

        init(
            logger: Logger,
            stable_symbols: Semantic.STABLE_SYMBOLS,
            symbol_table: Semantic.SYMBOL_TABLE,
            namespaces: Semantic.NAMESPACES,
            innate_symbol_lookup: Semantic.Lookups.InnateSymbolLookup
        )
        is
            super.init(logger, stable_symbols, symbol_table, namespaces);

            _symbol_table = symbol_table;
            _logger = logger;
            _innate_symbol_lookup = innate_symbol_lookup;
        si

        apply(root: Trees.Node) is
            root.walk(self);
        si

        pre(`class: Trees.Definitions.CLASS) -> bool is
            let result = super.pre(`class);

            if is_stable(`class) then
                return true;
            fi            

            // TODO why does CLASS need this but not STRUCT and TRAIT?
            set_generic_argument_types(`class.arguments);

            return result;
        si

        pre(`trait: Trees.Definitions.TRAIT) -> bool is
            super.pre(`trait);
            return is_stable(`trait);            
        si        

        pre(`struct: Trees.Definitions.STRUCT) -> bool is
            super.pre(`struct);
            return is_stable(`struct);            
        si

        pre(function: Trees.Definitions.FUNCTION) -> bool is
            super.pre(function);
            set_generic_argument_types(function.generic_arguments);            
        si

        visit(function: Trees.Definitions.FUNCTION) is
            let symbol = _symbol_table.current_function;

            if symbol == null then
                super.visit(function);
                return;
            fi

            let types = Collections.LIST[Type]();
            let names = Collections.LIST[string]();

            assert function.arguments? else "function {function.name} has no arguments";

            for argument in function.arguments do
                assert argument? else "function {function.name} has at least one null argument (C)";
                assert argument.type_expression? else "function {function.name} argument {argument.name} has null type expression";

                let type = argument.type_expression.type;

                types.add(if type? then type else Semantic.Types.ERROR() fi);
                
                names.add(argument.name.name);
            od

            if !isa Trees.TypeExpressions.INFER(function.type_expression) then
                symbol.return_type = function.type_expression.type;

                // FIXME QQ should probably do this
                // symbol.set_return_type(function.type_expression.type);
            else
                symbol.set_void_return_type();
            fi

            symbol.arguments = types;
            symbol.argument_names = names;

            super.visit(function);
        si

        pre(property: Trees.Definitions.PROPERTY) -> bool is
            return true;
        si

        visit(property: Trees.Definitions.PROPERTY) is            
            if property.name == null \/ property.name.name == null \/ property.type_expression == null then
                super.visit(property);
                return;
            fi

            let f = find(property.name);

            if f == null \/ !isa Semantic.Types.SettableTyped(f) then
                super.visit(property);
                return;
            fi

            let symbol = cast Semantic.Types.SettableTyped(f);

            if symbol? /\ !isa Trees.TypeExpressions.INFER(property.type_expression) then
                if f.is_field then
                    property.type_expression.check_is_not_reference(_logger, "field cannot be of reference type");
                else
                    property.type_expression.check_is_not_reference(_logger, "property cannot be of reference type");
                fi

                property.type_expression.check_is_not_void(_logger, "cannot use void type here");

                symbol.set_type(property.type_expression.type);
            fi

            super.visit(property);
        si        
        
        visit(variable: Trees.Variables.VARIABLE) is
            if variable.left == null then
                return;
            fi

            for name in variable.names do
                assert name? else "null variable name";

                let symbol = find(name);

                if symbol? /\ isa Semantic.Types.SettableTyped(symbol) then
                    let typed_symbol = cast Semantic.Types.SettableTyped(symbol);

                    if typed_symbol.type? then
                        _logger.poison(variable.location, "set type twice for variable {symbol}");
                        return;
                    fi

                    if variable.type_expression? then
                        if !isa Trees.TypeExpressions.INFER(variable.type_expression) then
                            let type = variable.type_expression.type;

                            if type? then
                                if !symbol.is_argument /\ !symbol.is_internal then
                                    variable.type_expression.check_is_not_reference(_logger, "variable cannot be of reference type");
                                fi

                                if !symbol.is_internal then
                                    variable.type_expression.check_is_not_void(_logger, "cannot use void type here");
                                fi

                                // FIXME this shouldn't be needed, but removing it breaks a number of integration tests.
                                // the type being set won't be correct if the variable is a destructure pattern:
                                typed_symbol.set_type(variable.type_expression.type);
                            fi
                        fi
                    else
                        _logger.poison(variable.location, "variable has no type expression");
                        typed_symbol.set_type(Semantic.Types.ERROR());
                    fi
                else
                    _logger.poison(variable.left.location, "cannot locate typed symbol for variable: {variable}");
                fi
            od
        si

        visit(variable: Trees.Expressions.VARIABLE) is
            if variable.name == null then
                return;
            fi

            let symbol = find(variable.name);
            
            if symbol? /\ isa Semantic.Types.SettableTyped(symbol) then
                let typed_symbol = cast Semantic.Types.SettableTyped(symbol);
                
                // FIXME: #549 Setting types twice for anonymous function arguments
                if typed_symbol.type == null then
                    if variable.type_expression? /\ !isa Trees.TypeExpressions.INFER(variable.type_expression) then                    
                        typed_symbol.set_type(variable.type_expression.type);

                        variable.type_expression.check_is_not_void(_logger, "cannot use void type here");
                    // else
                    //     _logger.poison(variable.location, "something went wrong with variable type");
                    fi
                fi
            else
                _logger.poison(variable.name.location, "cannot locate symbol for variable");
            fi        
        si
        
        pre(ambiguous_expression: Trees.Expressions.AMBIGUOUS_EXPRESSION) -> bool is
            if ambiguous_expression.result == Trees.Expressions.AMBIGUOUS_EXPRESSION_RESULT.INDEX then
                ambiguous_expression.index.walk(self);

                return true;
            fi

            if ambiguous_expression.left? then
                ambiguous_expression.left.walk(self);
            fi

            let arg = ambiguous_expression.type_arguments.elements[0];

            arg.walk(self);

            return true;
        si

        visit(type_expression: Trees.Expressions.AMBIGUOUS_EXPRESSION) is
        si

        pre(generic_application: Trees.Expressions.GENERIC_APPLICATION) -> bool is
            if generic_application.left? then
                generic_application.left.walk(self);
            fi
            
            generic_application.type_arguments.walk(self);

            return true;
        si

        visit(type_expression: Trees.Expressions.GENERIC_APPLICATION) is
        si

        set_type_ancestors(a: Trees.TypeExpressions.TypeExpression) is
            let symbol: Semantic.Symbols.Symbol;
            let type: Type;

            a.check_is_not_void(_logger, "cannot use void type here");            

            if a.is_named then
                symbol = find(a.name);

                if a.type_expression? then
                    type = a.type_expression.type;
                else
                    type = _innate_symbol_lookup.get_object_type();
                fi

                if symbol? /\ type? /\ symbol.is_type then
                    symbol.set_ancestor_type(type);
                fi
            fi
        si
                
        set_generic_argument_types(arguments: Trees.TypeExpressions.LIST) is
            if arguments? then
                for a in arguments do
                    set_type_ancestors(a);
                od
            fi            
        si

    si
si
