namespace Syntax.Process is
    use IO.Std;

        
    use Logging;
    use Trees;

    class ScopedVisitor: ScopeVisitorBase is
        _logger: Logger;
        _stable_symbols: Semantic.STABLE_SYMBOLS;
        _symbol_table: Semantic.SYMBOL_TABLE;

        init(
            logger: Logger,
            stable_symbols: Semantic.STABLE_SYMBOLS,            
            symbol_table: Semantic.SYMBOL_TABLE,
            namespaces: Semantic.NAMESPACES
        )
        is
            super.init(
                symbol_table,
                namespaces
            );

            _logger = logger;
            _stable_symbols = stable_symbols;
            _symbol_table = symbol_table;
        si

        find(name: string) -> Semantic.Symbols.Symbol is
            return _symbol_table.current_scope.find_enclosing(name);
        si

        find_matches(prefix: string, matches: Collections.MutableMap[string,Semantic.Symbols.Symbol]) is
            _symbol_table.current_scope.find_enclosing_matches(prefix, matches);
        si
        
        find(identifier: Identifiers.Identifier) -> Semantic.Symbols.Symbol is
            if identifier.name == null then
                return null;
            fi

            let result: Semantic.Symbols.Symbol;

            if identifier.qualifier? then                
                let qualifier = find(identifier.qualifier);

                if qualifier == null then
                    return null;
                fi

                result = qualifier.find_member(identifier.name);
            else
                result =
                    _symbol_table
                        .current_scope
                        .find_enclosing(identifier.name);
            fi

            if result == null /\ !identifier.is_poisoned then
                _logger.error(identifier.location, "symbol not found: {identifier}");
            fi

            return result;
        si

        is_stable(node: Trees.Node) -> bool => _stable_symbols.is_stable(node);

        pre(`namespace: Definitions.NAMESPACE) -> bool is
            enter_namespace(`namespace.name);
            enter_uses(`namespace);
        si

        visit(`namespace: Definitions.NAMESPACE) is
            leave_uses(`namespace);
            leave_namespace(`namespace.name);
        si

        pre(`class: Definitions.CLASS) -> bool is
            enter_scope(`class);
        si

        visit(`class: Definitions.CLASS) is
            leave_scope(`class);
        si

        pre(`trait: Definitions.TRAIT) -> bool is
            enter_scope(`trait);
        si

        visit(`trait: Definitions.TRAIT) is
            leave_scope(`trait);
        si

        pre(`struct: Definitions.STRUCT) -> bool is
            enter_scope(`struct);
        si

        pre(`union: Definitions.UNION) -> bool is
            enter_scope(`union);
        si

        visit(`union: Definitions.UNION) is
            leave_scope(`union);
        si
        
        pre(variant: Definitions.VARIANT) -> bool is
            enter_scope(variant);
        si

        visit(variant: Definitions.VARIANT) is
            leave_scope(variant);
        si

        visit(`struct: Definitions.STRUCT) is
            leave_scope(`struct);
        si        

        pre(`enum: Definitions.ENUM) -> bool is
            enter_scope(`enum);
        si

        visit(`enum: Definitions.ENUM) is
            leave_scope(`enum);
        si

        pre(function: Definitions.FUNCTION) -> bool is
            enter_scope(function);
        si

        visit(function: Definitions.FUNCTION) is
            leave_scope(function);
        si

        pre(property: Definitions.PROPERTY) -> bool is
            // enter_scope(property);
            // return true;
        si

        visit(property: Definitions.PROPERTY) is
            // leave_scope(property);
        si

        pre(indexer: Definitions.INDEXER) -> bool is
            // enter_scope(indexer);
            return true;
        si

        visit(indexer: Definitions.INDEXER) is
            // leave_scope(indexer);
        si        

        pre(if_branch: Statements.IF_BRANCH) -> bool is
            enter_scope(if_branch);
        si

        visit(if_branch: Statements.IF_BRANCH) is
            leave_scope(if_branch);
        si

        pre(`case: Statements.CASE) -> bool is
            enter_scope(`case);
        si

        visit(`case: Statements.CASE) is
            leave_scope(`case);
        si

        pre(case_match: Statements.CASE_MATCH) -> bool is
            enter_scope(case_match);
        si

        visit(case_match: Statements.CASE_MATCH) is
            leave_scope(case_match);
        si

        pre(`try: Statements.TRY) -> bool is
            enter_scope(`try);
        si

        visit(`try: Statements.TRY) is
            leave_scope(`try);
        si

        pre(`catch: Statements.CATCH) -> bool is
            enter_scope(`catch);
        si

        visit(`catch: Statements.CATCH) is
            leave_scope(`catch);
        si

        pre(`do: Statements.DO) -> bool is
            enter_scope(`do);
        si

        visit(`do: Statements.DO) is
            leave_scope(`do);
        si

        pre(`for: Statements.FOR) -> bool is
            enter_scope(`for);
        si

        visit(`for: Statements.FOR) is
            leave_scope(`for);
        si

        pre(labelled: Statements.LABELLED) -> bool is
            enter_scope(labelled);
        si

        visit(labelled: Statements.LABELLED) is
            leave_scope(labelled);
        si

        pre(function: Expressions.FUNCTION) -> bool is
            enter_scope(function);
        si

        visit(function: Expressions.FUNCTION) is
            leave_scope(function);
        si

        pre(let_in: Expressions.LET_IN) -> bool is
            enter_scope(let_in);
        si

        visit(let_in: Expressions.LET_IN) is
            leave_scope(let_in);
        si

        pre(expression: Bodies.EXPRESSION) -> bool is
            enter_scope(expression);
        si

        visit(expression: Bodies.EXPRESSION) is
            leave_scope(expression);
        si

        pre(block: Bodies.BLOCK) -> bool is
            enter_scope(block);
        si

        visit(block: Bodies.BLOCK) is
            leave_scope(block);
        si
    si
si
