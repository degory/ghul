namespace Syntax.Process is
    use Collections;
    use Semantic.Symbols.Symbol;
    use Semantic.Types.Type;

    use Logging;

    enum LUB_MODE is
        ONLY_ELEMENT_TYPES,
        ANY_CONCRETE,
        ANY_TRAIT
    si

    class LEAST_UPPER_BOUND_MAP is
        _any_unsafe_constraints: bool;
        _mode: LUB_MODE;

        types: LIST[Type];
        element_names: LIST[string];

        result: MAP[Symbol,LIST[Type]];
        current: MAP[Symbol,LIST[Type]];

        init() is
            types = LIST[Type]();
            _mode = LUB_MODE.ONLY_ELEMENT_TYPES;
        si

        add(type: Type) is
            debug("LUB add {type}");
            types.add(type);

            if type.is_unsafe_constraints then
                _any_unsafe_constraints = true;
            fi

            _update_element_names_from(type);
        si

        _add(type: Type) is
            if !result? then
                result = MAP[Symbol,LIST[Type]]();
                _add_all_first(type);
            else
                current = MAP[Symbol,LIST[Type]]();

                _add_all_subsequent(type);

                _apply_intersection();
            fi
        si

        get_result() -> Type is
            if types.count == 0 then
                debug("LUB no types null result");
                return null;
            fi

            // this was the original common element type
            // inference heuristic
            let best_assignable = _try_get_best_assignable();
            if best_assignable? then
                return best_assignable;
            fi

            // this is LUB applied to only element types, but
            // it's actually worse that the original heuristic
            // in some cases because it doesn't handle type variance
            // TODO consider removing
            let best_element_type = _try_get_best_element_type();
            if best_element_type? then
                return best_element_type;
            fi

            // this is LUB applied to all elements and all concrete 
            // element ancestor types. If all the types are concrete
            // then this will always return a result. In the worse
            // case it will return object, which may still be better
            // than a fairly random choice of interface type
            let best_concrete_type = _try_get_best_concrete();
            
            // this is LUB applied to all elements and all traits
            // they implement. It has a tendency to select unhelpful
            // traits, and needs tuning somehow to prioritize
            // traits that are relevant based on context
            let best_trait_type = _try_get_best_trait();

            // this still might not be enough - we might need to record the
            // average depth difference (='specificity') per type, but that
            // could be slow
            if best_concrete_type? /\ best_trait_type? then
                let total_concrete_depth_difference =
                    types | .reduce(0, (d, t) => d + (t.depth - best_concrete_type.depth));

                let total_trait_depth_difference =
                    types | .reduce(0, (d, t) => d + (t.depth - best_trait_type.depth));

                if total_trait_depth_difference < total_concrete_depth_difference then
                    return best_trait_type
                else
                    return best_concrete_type
                fi
            elif best_concrete_type? then
                return best_concrete_type
            else
                return best_trait_type
            fi
        si

        _try_get_best_assignable() -> Type is
            let use debug_dispose = debug_enter();
            debug("try get best assignable");
            let best: Type;

            for type in types do
                debug("try {type}");
                if !best? then
                    debug("no current first is best {type}");
                    best = type;
                elif type.is_assignable_from(best) then
                    debug("may be better {type} ({type.any_count}) than {best} ({best.any_count})");
                    if type.any_count < best.any_count then
                        best = type;
                        debug("best now {best}");
                    else
                        debug("not better best still {best}");
                    fi
                elif !best.is_assignable_from(type) then
                    debug("contradictory {type} vs {best}");
                    return null;
                fi
            od

            debug("result {best}");

            return _with_element_names(best);
        si

        _try_get_best_element_type() -> Type is
            _mode = LUB_MODE.ONLY_ELEMENT_TYPES;

            for type in types do
                _add(type);
            od

            return
                let best = _get_best() in
                if best? /\ !best.is_object then
                    best
                else
                    null
                fi
        si

        _try_get_best_concrete() -> Type is
            result = null;
            current = null;
            _mode = LUB_MODE.ANY_CONCRETE;

            for type in types do
                _add(type);
            od

            return _get_best();
        si

        _try_get_best_trait() -> Type is
            result = null;
            current = null;
            _mode = LUB_MODE.ANY_TRAIT;

            for type in types do
                _add(type);
            od

            return _get_best();
        si

        _get_best() -> Type is
            let best: Type;
            let is_ambiguous = false;

            for list in result.values do
                for type in list do
                    if !_any_unsafe_constraints /\ type.is_unsafe_constraints then
                        // only allow unsafe constraints if some of the element
                        // types have unsafe constraints:
                        continue;
                    fi

                    if !best? then
                        best = type;
                        is_ambiguous = false;
                    elif type.depth > best.depth then
                        best = type;
                        is_ambiguous = false;
                    elif type.depth == best.depth then
                        let tac = type.any_count;
                        let bac = best.any_count;

                        if tac < bac then
                            best = type;
                        elif tac == bac then
                            is_ambiguous = true;
                        fi
                    fi
                od
            od

            if !is_ambiguous then
                return _with_element_names(best);
            fi
        si

        _apply_intersection() is
            assert result? else "result set not populated";
            assert current? else "current set not populated";

            let new_result = MAP[Symbol,LIST[Type]]();

            for kv in result do
                let rsf = kv.key;
                let result_list = kv.value;

                let current_list: LIST[Type];

                if !current.try_get_value(rsf, current_list ref) then
                    continue;
                fi

                // TODO this could be slow, although in practice for non-generic types
                // there will only ever be a single type in the list
                let new_result_list = result_list | .filter(t: Type => current_list | .any(u => t =~ u)) .collect_list();

                if new_result_list.count > 0 then
                    new_result.add(rsf, new_result_list);
                fi
            od

            result = new_result;            
        si

        // populate the result set from type and all
        // its ancestor types
        _add_all_first(type: Type) is
            if 
                _mode == LUB_MODE.ONLY_ELEMENT_TYPES \/
                (_mode == LUB_MODE.ANY_CONCRETE /\ !type.is_trait) \/
                (_mode == LUB_MODE.ANY_TRAIT /\ type.is_trait)
            then
                _add_single_first(type);
            fi

            if _mode == LUB_MODE.ANY_CONCRETE /\ type.ancestors.count > 0 then 
                _add_all_first(type.ancestors[0]);
            elif _mode == LUB_MODE.ANY_TRAIT then
                for a in type.ancestors do
                    _add_all_first(a);
                od
            fi                
        si

        _add_all_subsequent(type: Type) is
            if 
                _mode == LUB_MODE.ONLY_ELEMENT_TYPES \/
                (_mode == LUB_MODE.ANY_CONCRETE /\ !type.is_trait) \/
                (_mode == LUB_MODE.ANY_TRAIT /\ type.is_trait)
            then
                _add_single_subsequent(type);
            fi

            if _mode == LUB_MODE.ANY_CONCRETE /\ type.ancestors.count > 0 then 
                _add_all_subsequent(type.ancestors[0]);
            elif _mode == LUB_MODE.ANY_TRAIT then
                for a in type.ancestors do
                    _add_all_subsequent(a);
                od
            fi                
        si

        // add a single type to the result set
        _add_single_first(type: Type) is
            if type.is_root_value_type then
                // System.ValueType is not a real type for
                // our purposes here, so exclude it:
                return;
            fi

            // what unspecialized type was this type ultimately
            // specialized from. If the type is not generic
            // then this is the classy type that represents it
            let rsf = type.symbol.root_unspecialized_symbol;

            // we can't put types in a set directly, because types
            // are not interned. However we can reduce the amount
            // of linear searching we need to do by partitioning
            // by root-specialized-from symbols, which are unique
            // per unspecialized generic type. we then only need
            // to search under the matching root specialized from symbol

            let list: LIST[Type];

            if !result.try_get_value(rsf, list ref) then
                list = LIST[Type]();
                result.add(rsf, list);
                list.add(type);
            elif list | .all(t => t !~ type) then
                list.add(type);
            fi

            assert result.contains_key(rsf) else "somehow haven't added {rsf} to {result.keys |}";
        si

        // add a single type to the current set
        _add_single_subsequent(type: Type) is
            let rsf = type.symbol.root_unspecialized_symbol;

            if !result.contains_key(rsf) then
                // cannot intersect
                return;
            fi

            let list: LIST[Type];

            if !current.try_get_value(rsf, list ref) then
                list = LIST[Type]();
                current.add(rsf, list);
                list.add(type);
            elif list | .all(t => t !~ type) then
                list.add(type);
            fi
        si

        _update_element_names_from(type: Type) is
            if type.is_value_tuple then
                if !element_names? then
                    element_names = LIST[string]();
                fi

                for i in 0..type.arguments.count do
                    if i >= element_names.count then
                        element_names.add(null);
                    fi

                    let element_name = type.symbol.get_element_name(i);

                    // TODO less fragile check for auto element names
                    if element_name? /\ ! element_name.starts_with('`') then
                        element_names[i] = element_name;
                    fi
                od
            fi
        si

        _with_element_names(type: Type) -> Type =>
            if !type? then
                null
            elif type.is_value_tuple /\ element_names? /\ element_names.count == type.arguments.count then
                IoC.CONTAINER.instance.innate_symbol_lookup.get_tuple_type(type.arguments, element_names);
            else
                type
            fi;
    si  
si
