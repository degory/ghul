namespace Syntax.Process is
    use System;
    use Generic;

    use Logging;
    use Source;
    use Tree;

    class CONDITIONAL_COMPILATION: Visitor is
        _want_legacy: bool;
        _want_dotnet: bool;

        is_analysis: bool;

        init() is
            super.init();
        si

        set_analysis_want_legacy(want_legacy: bool) is
            is_analysis = true;
            _want_legacy = want_legacy;
            _want_dotnet = !want_legacy;

            if want_legacy then
                IO.Std.err.println("analysis will include @IF.legacy() and exclude @IF.dotnet()");
            else
                IO.Std.err.println("analysis will include @IF.dotnet() and exclude @IF.legacy()");
            fi            
        si
        
        apply(
            node: NODE,
            want_legacy: bool,
            want_dotnet: bool
        ) is
            if !is_analysis then
                _want_legacy = want_legacy;
                _want_dotnet = want_dotnet;
            fi

            node.walk(self);
        si

        visit(pragma_: Definition.PRAGMA) is
            assert(pragma_.pragma_?, "pragma is null");

            let p = pragma_.pragma_;

            let name = p.name.toString();

            let is_legacy = name =~ "IF.legacy";
            let is_dotnet = name =~ "IF.dotnet";

            if 
                (is_legacy && !_want_legacy) ||
                (is_dotnet && !_want_dotnet)
            then
                pragma_.definition =    
                    new Definition.LIST(
                        pragma_.definition.location, 
                        new Collections.LIST[Definition.NODE](0)
                    );
            fi            
        si

        visit(pragma_: Statement.PRAGMA) is
            assert(pragma_.pragma_?, "pragma is null");

            let p = pragma_.pragma_;

            let name = p.name.toString();

            let is_legacy = name =~ "IF.legacy";
            let is_dotnet = name =~ "IF.dotnet";

            if 
                (is_legacy && !_want_legacy)
            then
                pragma_.statement =
                    new Statement.EXPRESSION(
                        pragma_.statement.location,
                        new Expression.NULL(LOCATION.dummy)
                    );
            elif
                (is_dotnet && !_want_dotnet) 
            then
                pragma_.statement = null;
            fi
        si        
    si
si