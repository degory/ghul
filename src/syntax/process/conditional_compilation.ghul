namespace Syntax.Process is
    use System;
    
    use Logging;
    use Source;
    use Tree;

    class CONDITIONAL_COMPILATION: Visitor is
        _want_legacy: bool;
        _want_dotnet: bool;
        _want_debug: bool;

        _flags: Collections.MAP[String,bool];

        is_analysis: bool;

        init() is
            super.init();

            _flags = new Collections.MAP[String,bool]();
        si

        set_is_enabled(name: String, value: bool) is
            _flags[name] = value;
            _flags["not." + name] = !value;
        si

        get_is_enabled(name: String) -> bool is
            if _flags.contains_key(name) then
                return _flags[name];
            fi            
        si

        get_is_enabled(pragma_: Pragma.NODE) -> bool is
            if !pragma_? || !pragma_.name? then
                return true;
            fi

            let name = Shim.STR.format(pragma_.name);

            if !Shim.STR.starts_with(name, "IF.") then
                return true;
            fi

            return get_is_enabled(name.substring(3));
        si        
    
        set_analysis_want_legacy(want_legacy: bool) is
            is_analysis = true;

            set_is_enabled("debug", false);

            set_is_enabled("legacy", want_legacy);
            set_is_enabled("dotnet", !want_legacy);

            if want_legacy then
                System.Console.error.write_line("analysis will include @IF.legacy() and exclude @IF.dotnet()");
            else
                System.Console.error.write_line("analysis will include @IF.dotnet() and exclude @IF.legacy()");
            fi
        si
        
        apply(
            node: NODE,
            want_debug: bool,
            want_legacy: bool,
            want_dotnet: bool
        ) is
             set_is_enabled("debug", want_debug);

            if !is_analysis then
                set_is_enabled("legacy", want_legacy);
                set_is_enabled("dotnet", want_dotnet);
            fi

            node.walk(self);
        si

        visit(pragma_: Definition.PRAGMA) is
            assert pragma_.pragma_? else "pragma is null";

            if !get_is_enabled(pragma_.pragma_) then
                pragma_.definition =    
                    new Definition.LIST(
                        pragma_.definition.location, 
                        new Collections.LIST[Definition.NODE](0)
                    );
            fi            
        si

        visit(pragma_: Statement.PRAGMA) is
            assert pragma_.pragma_? else "pragma is null";

            if !get_is_enabled(pragma_.pragma_) then
                if _want_legacy then
                    pragma_.statement =
                        new Statement.EXPRESSION(
                            pragma_.statement.location,
                            new Expression.NULL(LOCATION.dummy)
                        );
                else
                    pragma_.statement = null;
                fi
            fi
        si        
    si
si