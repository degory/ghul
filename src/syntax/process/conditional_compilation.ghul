namespace Syntax.Process is
    @IF.not.v3() use object = System.Object;
    @IF.not.v3() use string = System.String;
    @IF.not.v3() use STD = System.Console;

    use System;
    use Collections.Iterable;

    use Logging;
    use Source;
    use Tree;

    class CONDITIONAL_COMPILATION: Visitor is
        _flags: Collections.MAP[string,bool];

        is_analysis: bool;

        init() is
            super.init();

            _flags = new Collections.MAP[string,bool]();
        si

        set_is_enabled(names: Iterable[string]) is
            for name in names do
                set_is_enabled(name, true);
            od
            
            set_is_enabled("legacy", false);
            set_is_enabled("dotnet", true);
        si

        set_is_enabled(name: string, value: bool) is
            _flags[name] = value;
        si

        get_is_enabled(name: string) -> bool is
            let not_result = false;
            let result = false;

            if name.starts_with("not.") then
                name = name.substring(4);

                not_result = true;
            fi            

            if _flags.contains_key(name) then
                result = _flags[name];
            fi
            
            if not_result then
                return !result;
            fi

            return result;
        si

        get_is_enabled(pragma_: Pragma.NODE) -> bool is
            if !pragma_? || !pragma_.name? then
                return true;
            fi

            let name = pragma_.name.to_string();

            if !name.starts_with("IF.") then
                return true;
            fi

            return get_is_enabled(name.substring(3));
        si        
            
        apply(
            node: NODE
        ) is
            node.walk(self);
        si

        // FIXME: #500 Pragma handling code is duplicated across multiple visitors
        visit(pragma_: Definition.PRAGMA) is
            assert pragma_.pragma_? else "pragma is null";

            if !get_is_enabled(pragma_.pragma_) then
                pragma_.definition =    
                    new Definition.LIST(
                        pragma_.definition.location, 
                        new Collections.LIST[Definition.NODE](0)
                    );
            fi            
        si

        visit(pragma_: Statement.PRAGMA) is
            assert pragma_.pragma_? else "pragma is null";

            if !get_is_enabled(pragma_.pragma_) then
                pragma_.statement = null;
            fi
        si        
    si
si