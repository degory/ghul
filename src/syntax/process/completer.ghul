namespace Syntax.Process is
    use LAZY = System.Lazy`1;

    use IO.Std;

    use Pair = Collections.KeyValuePair`2;

    use Logging;
    use Source;

    class COMPLETER: ScopedVisitor is
        _target_line: int;
        _target_column: int;

        _dotnet_symbol_table: LAZY[Semantic.DotNet.SYMBOL_TABLE];

        _results: Collections.MAP[string,Semantic.Symbols.Symbol];

        _have_hit: bool;
                
        init(
            logger: Logger,
            symbol_table: Semantic.SYMBOL_TABLE,
            namespaces: Semantic.NAMESPACES,
            dotnet_symbol_table: LAZY[Semantic.DotNet.SYMBOL_TABLE]
        )
        is
            super.init(logger, null, symbol_table, namespaces);

            _dotnet_symbol_table = dotnet_symbol_table; 
        si

        find_completions(root: Trees.Node, target_line: int, target_column: int) -> Collections.Iterable[Pair[string,Semantic.Symbols.Symbol]] is
            _have_hit = false;

            _target_line = target_line;
            _target_column = target_column;

            _results = new Collections.MAP[string,Semantic.Symbols.Symbol]();

            root.walk(self);

            return _results;
        si

        leave_scope(node: Trees.Node) is 
            if !_have_hit /\ node.location.contains(_target_line, _target_column) then
                add_scope_matches();
            fi

            super.leave_scope(node);
        si

        add_scope_matches() is
            find_matches("", _results);

            _namespaces.find_root_matches(_results);
            _dotnet_symbol_table.value.find_root_matches(_results);

            _have_hit = true;
        si

        visit_literal(location: LOCATION) is            
            if
                location.contains(_target_line, _target_column) \/ 
                location.contains(_target_line, _target_column - 1)
            then
                _have_hit = true;
            fi
        si

        pre(`use: Trees.Definitions.USE) -> bool is
            return true;
        si
                
        visit(`use: Trees.Definitions.USE) is
            if !`use.location.contains(_target_line, _target_column) then
                return;
            fi

            let identifier = `use.`use;

            if identifier? /\ identifier.location.contains(_target_line, _target_column) /\ isa Trees.Identifiers.QUALIFIED(identifier) then                
                add_qualified_identifier_matches(cast Trees.Identifiers.QUALIFIED(identifier));
            else
                add_scope_matches();
            fi
        si

        visit(literal: Trees.Expressions.Literals.INTEGER) is
            visit_literal(literal.location);
        si

        visit(literal: Trees.Expressions.Literals.FLOAT) is
            visit_literal(literal.location);
        si

        visit(literal: Trees.Expressions.Literals.STRING) is
            visit_literal(literal.location);
        si
        
        visit(literal: Trees.Expressions.Literals.CHARACTER) is
            visit_literal(literal.location);
        si

        visit(literal: Trees.Expressions.Literals.BOOLEAN) is
            visit_literal(literal.location);
        si

        visit(qualified: Trees.Identifiers.QUALIFIED) is
            if !qualified.completion_target.contains(_target_line, _target_column) then
                return;
            fi

            add_qualified_identifier_matches(qualified);
        si

        add_qualified_identifier_matches(qualified: Trees.Identifiers.QUALIFIED) is
            if !qualified? \/ !qualified.qualifier? then
                return;
            fi            

            let symbol = find(qualified.qualifier);           

            let namespace_name = qualified.qualifier.to_string();

            if !symbol? then
                _namespaces.find_namespace_matches(namespace_name, _results);
                _dotnet_symbol_table.value.find_member_matches(namespace_name, _results);

                _have_hit = true;
                return;
            fi
            
            if !isa Semantic.Symbols.Scoped(symbol) then
                return;
            fi

            cast Semantic.Symbols.Scoped(symbol).find_member_matches("", _results);

            _namespaces.find_namespace_matches(namespace_name, _results);

            _dotnet_symbol_table.value.find_member_matches(namespace_name, _results);

            _have_hit = true;            
        si

        visit(member: Trees.Expressions.MEMBER) is
            if !member.completion_target.contains(_target_line, _target_column) then
                return;
            fi

            if member.left == null \/ member.left.value == null \/ member.left.value.type == null then
                return;
            fi

            let type: Semantic.Types.Type;

            if member.left.value.type.is_named then
                type = member.left.value.type;
            else
                Std.error.write_line("oops: not sure how to complete member of type: {member.left.value.type} ({member.left.value.type.get_type()})");
                return;
            fi

            if type? /\ type.is_ref then
                type = type.get_element_type();
            fi

            type.symbol.find_member_matches("", _results);

            _have_hit = true;
        si
    si
si
