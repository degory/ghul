namespace Syntax.Process is
    use System.Exception;

    use IO.Std;
        
    use Logging;
    use Source;

    use IR.Values;
    use IR.VALUE_CONVERTER;
    use IR.VALUE_BOXER;

    use Semantic.Types.Type;

    use Syntax.Trees.Definitions.PRAGMA;

    // TODO some of these clear_constraints probably end up being
    // duplicates

    class CLEAR_TYPE_INFERENCE_STATE: Visitor is
        init() is
            super.init();
        si

        apply(root: Trees.Node) is
            root.walk(self);
        si

        visit(let_in: Trees.Expressions.LET_IN) is
            let_in.expression.clear_constraint();
        si
        
        visit(assignment: Trees.Statements.ASSIGNMENT) is
            assignment.right.clear_constraint();
            assignment.left.clear_constraint();
        si

        visit(expression: Trees.Statements.EXPRESSION) is
            expression.clear_constraint();
        si

        visit(r: Trees.Statements.RETURN) is
            r.expression.clear_constraint();
        si

        visit(`if: Trees.Statements.IF_BRANCH) is
            `if.body.clear_constraint();
        si

        visit(expression: Trees.Bodies.EXPRESSION) is
            expression.expression.clear_constraint();
        si
        

        visit(function: Trees.Expressions.FUNCTION) is
            function.clear_constraint();

            for a in function.arguments do
                a.clear_constraint();
            od
        si

        visit(tuple: Trees.Expressions.TUPLE) is
            tuple.clear_constraint();

            for element in tuple.elements do
                element.clear_constraint();
            od
        si

        visit(sequence: Trees.Expressions.SEQUENCE) is
            sequence.clear_constraint();
            for e in sequence.elements do
                e.clear_constraint();
            od                        
        si

        visit(generic_application: Trees.Expressions.GENERIC_APPLICATION) is
        si

        visit(call: Trees.Expressions.CALL) is
            call.clear_constraint();

            for a in call.arguments do
                a.clear_constraint();
            od
        si

        visit(statement: Trees.Expressions.STATEMENT) is
            statement.clear_constraint();
        si

        visit(list: Trees.Statements.LIST) is
            list.clear_constraint();
        si

        visit(`if: Trees.Statements.IF) is
            `if.clear_constraint();
        si
    si
si