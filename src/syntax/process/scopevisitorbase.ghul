namespace Syntax is
    use IO.Std;

    
    use Logging;
    use Source;
    use Trees;

    class ScopeVisitorBase: Visitor  is
        _symbol_table: Semantic.SYMBOL_TABLE;
        _namespaces: Semantic.NAMESPACES;

        current_scope: Semantic.Scope => _symbol_table.current_scope;
        current_namespace_context: Semantic.NamespaceContext => _symbol_table.current_namespace_context;
        current_closure_context: Semantic.ClosureContext => _symbol_table.current_closure_context;
        current_union_context: Semantic.Symbols.UNION => _symbol_table.current_union_context;
        current_instance_context: Semantic.Symbols.Classy => _symbol_table.current_instance_context;
        current_function: Semantic.Symbols.Function => _symbol_table.current_function;
        current_declaration_context: Semantic.DeclarationContext => _symbol_table.current_declaration_context;

        init(
            symbol_table: Semantic.SYMBOL_TABLE,
            namespaces: Semantic.NAMESPACES
        )
        is
            super.init();
            _symbol_table = symbol_table;
            _namespaces = namespaces;
        si

        scope_for(node: Node) -> Semantic.Scope is
            return _symbol_table.scope_for(node);
        si

        symbol_for(node: Node) -> Semantic.Symbols.Symbol => cast Semantic.Symbols.Symbol(_symbol_table.scope_for(node));

        class_or_trait_for(node: Node) -> Semantic.Symbols.Classy => cast Semantic.Symbols.Classy(_symbol_table.scope_for(node));

        function_for(node: Node) -> Semantic.Symbols.Function => cast Semantic.Symbols.Function(_symbol_table.scope_for(node));

        find_member(identifier: Identifiers.Identifier) -> Semantic.Symbols.Symbol is
            let qualifier = identifier.qualifier;

            if qualifier? then
                let qualifier_symbol = find_member(qualifier);

                if qualifier_symbol? then
                    return qualifier_symbol.find_member(identifier.name);
                else
                    return null;
                fi
            else
                let result = current_scope.find_member(identifier.name);

                return result;
            fi
        si

        find_enclosing(identifier: Identifiers.Identifier) -> Semantic.Symbols.Symbol is
            let qualifier = identifier.qualifier;

            if qualifier? then
                let qualifier_symbol = find_enclosing(qualifier);

                if qualifier_symbol? then
                    return qualifier_symbol.find_enclosing(identifier.name);
                else
                    return null;
                fi
            else
                let result = current_scope.find_enclosing(identifier.name);

                return result;
            fi
        si

        create_and_enter_block_scope(node: Node) is
            let scope = new Semantic.BLOCK_SCOPE(current_scope);
            associate_and_enter_scope(node, scope);
        si

        associate_and_enter_scope(node: Node, scope: Semantic.Scope) is
            associate_node_with_scope(node, scope);
            enter_scope(scope);
        si

        associate_node_with_scope(node: Node, scope: Semantic.Scope) is
            _symbol_table.associate_node_with_scope(node, scope);
        si

        mark_scope_stack() -> int is
            return _symbol_table.mark_scope_stack();
        si

        release_scope_stack(mark: int) is
            _symbol_table.release_scope_stack(mark);
        si

        enter_scope(node: Node) is
            _symbol_table.enter_scope(node);
        si

        enter_scope(scope: Semantic.Scope) is
            _symbol_table.enter_scope(scope);
        si

        leave_scope(node: Node) is
            _symbol_table.leave_scope(node);
        si

        leave_scope(scope: Semantic.Scope) is
            _symbol_table.leave_scope(scope);
        si

        declare_and_enter_namespace(
            identifier: Identifiers.Identifier,
            symbol_definition_listener: Semantic.SymbolDefinitionListener
        ) -> Semantic.NAMESPACE_SCOPE
        is
            assert identifier? else "declared namespace identifier is null";
            assert identifier.name? else "declared namespace identifier name is null";

            let namespace_symbol = _namespaces.declare_and_enter_namespace(identifier.location, identifier.name, symbol_definition_listener);

            let namespace_scope = new Semantic.NAMESPACE_SCOPE(namespace_symbol);

            associate_and_enter_scope(identifier, namespace_scope);

            return namespace_scope;
        si

        enter_namespace(identifier: Identifiers.Identifier) -> Semantic.NAMESPACE_SCOPE is
            _namespaces.enter_namespace(identifier.location, identifier.name);

            let namespace_scope = cast Semantic.NAMESPACE_SCOPE(scope_for(identifier));

            enter_scope(namespace_scope);

            return namespace_scope;
        si

        leave_namespace(identifier: Identifiers.Identifier) is

            let namespace_scope = cast Semantic.NAMESPACE_SCOPE(scope_for(identifier));

            leave_scope(namespace_scope);

            _namespaces.leave_namespace(identifier.location, identifier.name);
        si

        enter_uses(`namespace: Definitions.NAMESPACE) is
            // FIXME: remove me
        si

        leave_uses(`namespace: Definitions.NAMESPACE) is
            // FIXME: remove me
        si
    si
si
