namespace Syntax.Process.Printer is
    use IO.Std;

    use Trees;

    use Logging;

    class GHUL: Base  is
        init() is
            super.init(false);
        si

        visit(variable: Variables.VARIABLE) is
            variable.left.accept(self);
            if !isa TypeExpressions.INFER(variable.type_expression) then
                write(": ");
                variable.type_expression.accept(self);
            fi
            if variable.initializer? then
                write(" = ");
                variable.initializer.accept(self);
            fi
        si

        visit(destructure_element: Variables.SIMPLE_VARIABLE_LEFT) is
            if destructure_element.name? then
                destructure_element.name.accept(self);
            else
                write("_");
            fi
        si

        visit(destructure_element_list: Variables.DESTRUCTURING_VARIABLE_LEFT) is
            write("(");

            let seen_any = false;
            for e in destructure_element_list.elements do
                if seen_any then
                    write(", ");
                fi

                e.accept(self);

                seen_any = true;
            od

            write(")");
        si

        visit(`namespace: Definitions.NAMESPACE) is
            write("namespace ");
            `namespace.name.accept(self);
            write_line(" is");
            indent();
            `namespace.body.accept(self);
            outdent();
            write_line("si");
        si

        visit(`use: Definitions.USE) is
            write("use ");
            let seen_any = false;
            if `use.name? then
                `use.name.accept(self);
                write(" = ");
            fi

            if `use.`use? then
                `use.`use.accept(self);                
            fi

            write_line(";");
        si

        visit(`class: Definitions.CLASS) is
            write("class ");
            `class.name.accept(self);
            if `class.arguments? then
                write("[");
                `class.arguments.accept(self);
                write("]");
            fi
            if `class.ancestors? then
                write(": ");
                `class.ancestors.accept(self);
            fi
            `class.modifiers.accept(self);
            write_line(" is");
            indent();
            `class.body.accept(self);
            outdent();
            write_line("si");
        si

        visit(`trait: Definitions.TRAIT) is
            write("trait ");
            `trait.name.accept(self);
            if `trait.arguments? then
                write("[");
                `trait.arguments.accept(self);
                write("]");
            fi
            if `trait.ancestors? then
                write(": ");
                `trait.ancestors.accept(self);
            fi
            `trait.modifiers.accept(self);
            write_line(" is");
            indent();
            `trait.body.accept(self);
            outdent();
            write_line("si");
        si

        visit(`struct: Definitions.STRUCT) is
            write("trait ");
            `struct.name.accept(self);
            
            if `struct.arguments? then
                write("[");
                `struct.arguments.accept(self);
                write("]");
            fi

            `struct.modifiers.accept(self);
            write_line(" is");
            indent();
            `struct.body.accept(self);
            outdent();
            write_line("si");
        si        

        visit(`union: Definitions.UNION) is
            write("union ");
            `union.name.accept(self);
            if `union.arguments? then
                write("[");
                `union.arguments.accept(self);
                write("]");
            fi
            `union.modifiers.accept(self);
            write_line(" is");
            indent();
            `union.body.accept(self);
            outdent();
            write_line("si");
        si

        visit(variant: Definitions.VARIANT) is
            variant.name.accept(self);

            if variant.fields? /\ variant.fields.count > 0 then
                write("(");
                variant.fields.accept(self);
                write(")");
            fi

            variant.modifiers.accept(self);

            if variant.body? then
                write_line(" is");
                indent();
                variant.body.accept(self);
                outdent();
                write_line("si");
            fi
        si

        after_body(node: Bodies.Body) is
            if node==null \/ !node.is_block then
                write(";");
            fi
            write_line();
        si

        visit(function: Definitions.FUNCTION) is
            function.name.accept(self);
            write("(");

            function.arguments.accept(self);
            write(")");

            if !isa TypeExpressions.INFER(function.type_expression) then
                write(" -> ");
                function.type_expression.accept(self);
                function.modifiers.accept(self);
            elif !function.modifiers.is_empty then
                function.modifiers.accept(self);
            fi

            if function.body? then
                write(" ");
                function.body.accept(self);
            fi

            after_body(function.body);
        si

        write_member_type_and_modifiers(type_expression: TypeExpressions.TypeExpression, modifiers: Modifiers.LIST) is
            if type_expression? /\ !isa TypeExpressions.INFER(type_expression) then
                write(": ");
                type_expression.accept(self);
                write(" ");
                modifiers.accept(self);
            elif !modifiers.is_empty then
                modifiers.accept(self);
            fi
        si

        indent_property(has_getter: bool, has_setter: bool) -> bool is
            if has_getter /\ has_setter!=null then
                write_line();
                indent();
                return true;
            elif has_getter \/ has_setter!=null then
                write(" ");
            fi
            return false;
        si

        visit(property: Definitions.PROPERTY) is
            if property.name? then
                property.name.accept(self);
            fi
            
            write_member_type_and_modifiers(property.type_expression, property.modifiers);
            let out_again = indent_property(property.read_body?, property.assign_body?);
            if property.read_body? then
                property.read_body.accept(self);
                if property.assign_body? then
                    write_line(",");
                else
                    after_body(property.read_body);
                fi
            else
                write(" ");
            fi
            if property.assign_body? then
                write("= ");
                property.assign_argument.accept(self);
                property.assign_body.accept(self);
                after_body(property.assign_body);
            fi
            if out_again then
                outdent();
            fi
        si

        visit(indexer: Definitions.INDEXER) is
            if indexer.name? then
                indexer.name.accept(self);
            fi
            write("[");
            indexer.index_argument.accept(self);
            write("]");
            write_member_type_and_modifiers(indexer.type_expression, indexer.modifiers);
            let out_again = indent_property(indexer.read_body?, indexer.assign_body?);
            if indexer.read_body? then
                indexer.read_body.accept(self);
                if indexer.assign_body? then
                    write_line(",");
                else
                    after_body(indexer.read_body);
                fi
            else
                write(' ');
            fi
            if indexer.assign_body? then
                write("= ");
                indexer.assign_argument.accept(self);
                write(' ');
                indexer.assign_body.accept(self);
                after_body(indexer.assign_body);
            fi
            if out_again then
                outdent();
            fi
        si

        visit(generic: TypeExpressions.GENERIC) is
            generic.name.accept(self);
            write('[');
            generic.arguments.accept(self);
            write(']');
        si

        visit(function: TypeExpressions.FUNCTION) is
            write("(");
            function.arguments.accept(self);
            write(")");
            if !isa TypeExpressions.INFER(function.result) then
                write(" -> ");
                function.result.accept(self);
            fi
        si

        visit(tuple: TypeExpressions.TUPLE) is
            write("(");
            tuple.elements.accept(self);
            write(")");
        si

        visit(element: TypeExpressions.NAMED_TUPLE_ELEMENT) is
            element.name.accept(self);
            write(": ");
            element.type_expression.accept(self);
        si


        visit(`null: Expressions.NULL) is
            write("null");
        si

        visit(`self: Expressions.SELF) is
            write("self");
        si

        visit(variable: Expressions.VARIABLE) is
            variable.name.accept(self);

            if !isa TypeExpressions.INFER(variable.type_expression) then
                write(": ");
                variable.type_expression.accept(self);
            fi
            
            if variable.initializer? then
                write(" = ");
                variable.initializer.accept(self);
            fi
        si

        visit(element: Expressions.TUPLE_ELEMENT) is
            element.name.accept(self);

            if !isa TypeExpressions.INFER(element.type_expression) then
                write(": ");
                element.type_expression.accept(self);
            fi
            
            if element.initializer? then
                write(" = ");
                element.initializer.accept(self);
            fi
        si


        visit(function: Syntax.Trees.Expressions.FUNCTION) is
            function.arguments.accept(self);
            if !isa TypeExpressions.INFER(function.type_expression) then
                write(" -> ");
                function.type_expression.accept(self);
            fi
            function.body.accept(self);
        si

        visit(sequence: Expressions.SEQUENCE) is
            write('[');
            sequence.elements.accept(self);
            write(']');
            if !isa Trees.TypeExpressions.INFER(sequence.type_expression) then
                write(": ");
                sequence.type_expression.accept(self);
            fi
        si

        visit(unwrap: Expressions.HAS_VALUE) is
            unwrap.left.accept(self);
            write("?");
        si

        visit(has_value: Expressions.UNWRAP) is
            has_value.left.accept(self);
            write("!");
        si

        visit(has_value: Expressions.REFERENCE) is
            has_value.left.accept(self);
            write(" ref ");
        si

        visit(statement: Expressions.STATEMENT) is
            if statement? then
                statement.statement.accept(self);
            fi
            write(";");
        si

        visit(l: Statements.LET) is
            write("let ");
            l.variables.accept(self);
            write_line(";");
        si

        visit(`for: Statements.FOR) is
            write_line("for ");
            `for.variable.accept(self);
            write(" in ");
            `for.expression.accept(self);
            write_line(" do");
            indent();
            `for.body.accept(self);
            outdent();
            write_line("od");
        si

        visit(expression: Bodies.EXPRESSION) is
            write("=> ");
            expression.expression.accept(self);
        si

        visit(block: Bodies.BLOCK) is
            write_line("is");
            indent();
            block.statements.accept(self);
            outdent();
            write("si");
        si

        visit(`innate: Bodies.INNATE) is
            `innate.name.accept(self);
        si
    si
si
