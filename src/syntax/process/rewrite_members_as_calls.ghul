namespace Syntax.Process is
    use System;
    use Source;

    use Tree;

    class REWRITE_MEMBERS_AS_CALLS : Visitor  is
        _map: MAP;
        init() is
            super.init();
            _map = new MAP();
        si

        apply(root: NODE) is
            root.walk(self);
            var rewriter = new REWRITER(_map);
            rewriter.apply(root);
        si

        replace(node: NODE, name: String, left: Expression.NODE, right: Expression.NODE) is
            var op_location = new LOCATION(
                node.location.file_name, 
                left.location.end_line, 
                left.location.end_column, 
                right.location.start_line, 
                right.location.start_column
            );
            
            var n = new Expression.CALL(node.location, new Expression.IDENTIFIER(op_location, new Identifier.NODE(op_location, name)), new Expression.LIST(left.location::right.location, [left, right]: Expression.NODE ));
            _map[node] = n;
        si

        replace(node: NODE, name: String, right: Expression.NODE) is
            var op_location = new LOCATION(
                node.location.file_name, 
                node.location.start_line, 
                node.location.start_column, 
                right.location.start_line, 
                right.location.start_column
            );

            var n = new Expression.CALL(node.location, new Expression.IDENTIFIER(op_location, new Identifier.NODE(op_location, name)), new Expression.LIST(right.location, [right]: Expression.NODE ));
            _map[node] = n;
        si

        pre(index: Expression.INDEX) -> bool is
            return false;
        si

        visit(index: Expression.INDEX) is
            replace(index, "[]", index.left, index.index);
        si

        pre(unary: Expression.UNARY) -> bool is
            return false;
        si

        visit(unary: Expression.UNARY) is
            replace(unary, unary.operation.name, unary.right);
        si

        pre(binary: Expression.BINARY) -> bool is
            return false;
        si

        visit(binary: Expression.BINARY) is
            replace(binary, binary.operation.name, binary.left, binary.right);
        si
    si
si
