namespace Syntax.Process is
    use System;
    use Generic;

    use Source;
    use Tree;

    class ADD_ACCESSORS_FOR_PROPERTIES: Visitor is
        _stack: Vector[Definition.LIST];

        enclosing_definition: Definition.LIST => _stack.Top;

        init() is
            super.init();

            _stack = new Vector[Definition.LIST]();
        si

        apply(root: NODE) is
            root.walk(self);
        si

        pre(property: Definition.PROPERTY) -> bool is
            if !property.name.name.startsWith('_') || property.read_body? || property.assign_body? then
                let is_assignable = !property.read_body? || property.assign_argument?;

                add_accessor_functions_for_property(property, is_assignable);
            fi

            return true;
        si

        add_accessor_functions_for_property(property: Definition.PROPERTY, is_assignable: bool) is
            var read_name =
                new Identifier.NODE(
                    property.name.location,
                    "__read_" + property.name.name
                );

            let read_function = new Definition.FUNCTION(
                property.location,
                read_name,
                new Variable.LIST(property.name.location, new Variable.NODE[](0)),
                property.type_expression.copy(),
                property.modifiers.copy(),
                property.read_body
            );

            read_function.for_property = property;

            enclosing_definition.add(
                read_function
            );

            property.read_function = read_function;

            if is_assignable then
                var assign_name =
                    new Identifier.NODE(
                        property.name.location,
                        "__assign_" + property.name.name
                    );                

                var assign_argument = property.assign_argument;

                if assign_argument == null then
                    assign_argument = new Identifier.NODE(property.location, "__value");
                fi

                let assign_function = new Definition.FUNCTION(
                    property.name.location,
                    assign_name,
                    new Variable.LIST(LOCATION.dummy, [
                        new Variable.NODE(
                            assign_argument.location,
                            assign_argument.copy(),
                            property.type_expression.copy(),
                            null
                        )
                    ]),
                    new TypeExpression.NAMED(
                        LOCATION.dummy,
                        new Identifier.NODE(
                            LOCATION.dummy,
                            "void"
                        )
                    ),
                    property.modifiers.copy(),
                    property.assign_body
                );

                assign_function.for_property = property;

                enclosing_definition.add(
                    assign_function
                );

                property.assign_function = assign_function;

                /*
                if property.read_body == null && property.assign_body == null then
                    let variable_name =
                        new Identifier.NODE(
                            LOCATION.dummy,
                            "__backing_" + property.name.name
                        );
                
                    enclosing_definition.add(
                        new Variable.NODE(
                            property.name.location,
                            variable_name,
                            property.type_expression.copy(),
                            null
                        )
                    );
                fi
                */
            fi
        si

        visit(property: Definition.PROPERTY) is
        si

        pre(indexer: Definition.INDEXER) -> bool is
            var name: String;
            var location: LOCATION;

            if indexer.name? then
                name = "_" + indexer.name.name;
                location = indexer.name.location;
            else
                name = "";
                location = indexer.location;
            fi

            if indexer.read_body? then
                enclosing_definition.add(
                    new Definition.FUNCTION(
                        indexer.location,
                        new Identifier.NODE(
                            location,
                            "__read" + name
                        ),
                        new Variable.LIST(LOCATION.dummy, [indexer.index_argument.copy()]),
                        indexer.type_expression.copy(),
                        indexer.modifiers.copy(),
                        indexer.read_body
                    )
                );
            fi

            if indexer.assign_body? then
                enclosing_definition.add(
                    new Definition.FUNCTION(
                        indexer.location,
                        new Identifier.NODE(
                            location,
                            "__assign" + name
                        ),
                        new Variable.LIST(LOCATION.dummy, [
                            indexer.index_argument.copy(),
                            new Variable.NODE(
                                indexer.assign_argument.location,
                                indexer.assign_argument.copy(),
                                indexer.type_expression.copy(),
                                null
                            )
                        ]),
                        new TypeExpression.NAMED(
                            LOCATION.dummy,
                            new Identifier.NODE(
                                LOCATION.dummy,
                                "void"
                            )
                        ),
                        indexer.modifiers.copy(),
                        indexer.assign_body
                    )
                );
            fi
                       
            return true;
        si

        pre(class_: Definition.CLASS) -> bool is
            _stack.add(class_.body);

            return false;
        si

        visit(class_: Definition.CLASS) is
            _stack.pop();
        si

        pre(trait_: Definition.TRAIT) -> bool is
            _stack.add(trait_.body);

            return false;
        si

        visit(trait_: Definition.TRAIT) is
            _stack.pop();
        si

        pre(struct_: Definition.STRUCT) -> bool is
            _stack.add(struct_.body);

            return false;
        si

        visit(struct_: Definition.STRUCT) is
            _stack.pop();
        si        

        pre(namespace_: Definition.NAMESPACE) -> bool is
            _stack.add(namespace_.body);

            return false;
        si

        visit(namespace_: Definition.NAMESPACE) is
            _stack.pop();
        si        
    si
si
