namespace Syntax.Process is
    use IO.Std;
    
    use Source;
    use Trees;

    use Logging;

    // TODO rename this: it's not just for properties
    class ADD_ACCESSORS_FOR_PROPERTIES: Visitor is
        _stub_depth: int;
        _stack: Collections.STACK[Definitions.LIST];

        enclosing_definition: Definitions.LIST => _stack.peek();

        init() is
            super.init();

            _stack = new Collections.STACK[Definitions.LIST]();
        si

        apply(root: Node) is
            root.walk(self);
        si

        // FIXME: #500 Pragma handling code is duplicated across multiple visitors
        pre(pragma: Definitions.PRAGMA) -> bool is
            if !pragma.pragma? then
                Std.error.write_line("pragma is null");
                return false;
            fi

            let p = pragma.pragma;

            let name = p.name.to_string();

            if name =~ "IL.stub" then
                _stub_depth = _stub_depth + 1;
            fi
        si

        visit(pragma: Definitions.PRAGMA) is
            if !pragma.pragma? then
                Std.error.write_line("pragma is null");
                return;
            fi

            let p = pragma.pragma;

            let name = p.name.to_string();

            if name =~ "IL.stub" then
                _stub_depth = _stub_depth - 1;
            fi            
        si

        pre(property: Definitions.PROPERTY) -> bool is
            if property.modifiers.is_field then
                if property.read_body? \/ property.assign_argument? then
                    IoC.CONTAINER.instance.logger
                        .error(property.read_body.location, "fields cannot have accessors");
                fi

                if property.name.name.starts_with('_') then
                    IoC.CONTAINER.instance.logger
                        .hint(property.modifiers.location, "unnecessary field modifier");
                fi

                return true;
            fi

            if
                !property.is_poisoned /\ (
                    !property.name.name.starts_with('_') \/
                    property.read_body? \/
                    property.assign_body?
                )
            then
                let is_assignable = !property.read_body? \/ property.assign_argument?;

                add_accessor_functions_for_property(property, is_assignable);
            fi

            return true;
        si

        add_accessor_functions_for_property(property: Definitions.PROPERTY, is_assignable: bool) is
            let read_name =
                new Identifiers.Identifier(
                    property.name.location,
                    "$get_{property.name.name}"
                );

            property.is_auto_property =
                _stub_depth == 0 /\
                !property.read_body? /\
                !property.assign_body? /\
                !property.name.name.starts_with('_') /\
                !property.modifiers.is_private;

            let backing_variable_name = "${property.name.name}";

            let assign_argument_name = "$$value";

            if property.assign_argument != null then
                assign_argument_name = property.assign_argument.name;
            fi

            if property.is_auto_property then
                enclosing_definition.add(
                    new Variables.VARIABLE(
                        property.name.location,
                        new Identifiers.Identifier(
                            LOCATION.internal,
                            backing_variable_name
                        ),
                        property.type_expression.copy(),
                        property.modifiers.is_static,
                        true,
                        null
                    )
                );

                property.read_body =
                    new Trees.Bodies.BLOCK(property.location,
                        new Trees.Statements.LIST(property.location,
                            new Collections.LIST[Statements.Statement]([
                                new Trees.Statements.RETURN(property.location,
                                    new Trees.Expressions.IDENTIFIER(property.location,
                                        new Trees.Identifiers.Identifier(property.location, backing_variable_name)
                                    )
                                )
                            ]: Statements.Statement)
                        )
                    );

                property.assign_body =
                    new Trees.Bodies.BLOCK(property.location,
                        new Trees.Statements.LIST(property.location,
                            new Collections.LIST[Statements.Statement]([
                                new Trees.Statements.ASSIGNMENT(property.location,
                                    new Trees.Expressions.SIMPLE_LEFT_EXPRESSION(property.location,
                                        new Trees.Expressions.IDENTIFIER(property.location,
                                            new Trees.Identifiers.Identifier(property.location, backing_variable_name)
                                        )
                                    ),
                                    new Trees.Expressions.IDENTIFIER(property.location,
                                        new Trees.Identifiers.Identifier(property.location, assign_argument_name)
                                    )                                        
                                )
                            ]: Statements.Statement)
                        )
                    );
            fi

            let read_function = new Definitions.FUNCTION(
                property.location,
                read_name,
                null,
                new Variables.LIST(property.name.location, new Collections.LIST[Variables.VARIABLE](0)),
                property.type_expression.copy(),
                property.modifiers.copy(),
                property.read_body
            );

            read_function.for_property = property;

            enclosing_definition.add(
                read_function
            );

            property.read_function = read_function;

            if is_assignable \/ property.is_auto_property then
                let assign_name =
                    new Identifiers.Identifier(
                        property.name.location,
                        "$set_{property.name.name}"
                    );                

                if !property.assign_argument? then
                    property.assign_argument = new Identifiers.Identifier(property.location, "$$value");
                fi

                let assign_function = new Definitions.FUNCTION(
                    property.name.location,
                    assign_name,
                    null,
                    new Variables.LIST(LOCATION.internal, new Collections.LIST[Variables.VARIABLE]([
                        new Variables.VARIABLE(
                            property.assign_argument.location,
                            property.assign_argument,
                            property.type_expression.copy(),
                            false,
                            true,
                            null
                        )
                    ]:Variables.VARIABLE)),
                    new TypeExpressions.NAMED(
                        LOCATION.internal,
                        new Identifiers.Identifier(
                            LOCATION.internal,
                            "void"
                        )
                    ),
                    property.modifiers.copy(),
                    property.assign_body
                );

                assign_function.for_property = property;

                enclosing_definition.add(
                    assign_function
                );

                property.assign_function = assign_function;
            fi
        si

        visit(property: Definitions.PROPERTY) is
        si

        pre(indexer: Definitions.INDEXER) -> bool is
            let name: string;
            let location: LOCATION;

            if indexer.name? then
                name = indexer.name.name;
                location = indexer.name.location;
            else
                name = "Item";
                location = indexer.location;
            fi

            if indexer.read_body? then
                enclosing_definition.add(
                    new Definitions.FUNCTION(
                        indexer.location,
                        new Identifiers.Identifier(
                            location,
                            "get_{name}"
                        ),
                        null,
                        new Variables.LIST(
                            LOCATION.internal,
                            new Collections.LIST[Variables.VARIABLE]([indexer.index_argument.copy()]:Variables.VARIABLE)),
                        indexer.type_expression.copy(),
                        indexer.modifiers.copy(),
                        indexer.read_body
                    )
                );
            fi

            if indexer.assign_body? then
                enclosing_definition.add(
                    new Definitions.FUNCTION(
                        indexer.location,
                        new Identifiers.Identifier(
                            location,
                            "set_{name}"
                        ),
                        null,
                        new Variables.LIST(LOCATION.internal, new Collections.LIST[Variables.VARIABLE]([
                            indexer.index_argument.copy(),
                            new Variables.VARIABLE(
                                indexer.assign_argument.location,
                                indexer.assign_argument.copy(),                                
                                indexer.type_expression.copy(),
                                false,
                                true,
                                null
                            )
                        ]:Variables.VARIABLE)),
                        new TypeExpressions.NAMED(
                            LOCATION.internal,
                            new Identifiers.Identifier(
                                LOCATION.internal,
                                "void"
                            )
                        ),
                        indexer.modifiers.copy(),
                        indexer.assign_body
                    )
                );
            fi
                       
            return true;
        si

        pre(`class: Definitions.CLASS) -> bool is
            _stack.push(`class.body);

            return false;
        si

        visit(`class: Definitions.CLASS) is
            _stack.pop();
        si

        pre(`trait: Definitions.TRAIT) -> bool is
            _stack.push(`trait.body);

            return false;
        si

        visit(`trait: Definitions.TRAIT) is
            _stack.pop();
        si

        pre(`struct: Definitions.STRUCT) -> bool is
            _stack.push(`struct.body);

            return false;
        si

        visit(`struct: Definitions.STRUCT) is
            _stack.pop();
        si

        pre(`union: Definitions.UNION) -> bool is
            _stack.push(`union.body);

            if `union.is_poisoned then
                return false;
            fi

            let unit_variant_count = 0;
            let non_unit_variant_count = 0;

            for definition in `union.body do
                if isa Definitions.VARIANT(definition) then
                    let variant = cast Definitions.VARIANT(definition);
                
                    if variant.fields.count > 0 then
                        non_unit_variant_count = non_unit_variant_count + 1;
                    else
                        unit_variant_count = unit_variant_count + 1;
                    fi
                fi
            od

            if non_unit_variant_count == 0 /\ unit_variant_count == 0 then
                IoC.CONTAINER.instance.logger
                    .error(`union.location, "union must have at least one variant");
            fi

            let add_to_union = new Collections.LIST[Definitions.Definition]();

            for definition in `union.body do
                if isa Definitions.VARIANT(definition) then
                    let variant = cast Definitions.VARIANT(definition);

                    if variant.fields.count > 0 then
                        // this variant has fields so it is not a unit variant

                        // add properties for the `value` and `has_value` properties to the union and the variant
                        // if this is the only non-unit variant in the union
                        
                        if non_unit_variant_count == 1 then
                            // this is the only non-unit variant in the union, so it holds the union's
                            // 'value' as well as its own

                            // add a `value` property to the union that throws because the union is not
                            // holding this variant
                            add_to_union.add(get_value_property_throw(`union.location, variant.name.name, variant.arguments, variant.fields, null));

                            // add a `value` method to the variant that returns the value of the variant
                            variant.body.add(get_value_method(`union.location, variant.name.name, variant.arguments, variant.fields, null, true));

                            // add a `has_value` property to the union that returns false because the union is
                            // not holding this variant
                            add_to_union.add(get_has_value_property(`union.location, false));

                            // add a `has_value` method to the union that returns true because the union is
                            // holding the only non-unit variant
                            variant.body.add(get_has_value_method(`union.location, true));
                        fi

                        // add properties named for the variant that get the value of the variant

                        // add a property to the union named for the variant that throws because the union is not holding
                        // the variant
                        add_to_union.add(get_value_property_throw(`union.location, variant.name.name, variant.arguments, variant.fields, "{variant.name.name}"));

                        // add a property to the variant named for the variant that returns the value of the variant
                        variant.body.add(get_value_method(`union.location, variant.name.name, variant.arguments, variant.fields, "{variant.name.name}", true));
                    fi

                    // add methods that check if the union is holding the variant

                    // add a method `is_{variant_name}` to the union that returns false because the union is
                    // not holding the variant
                    add_to_union.add(get_is_variant_property(`union.location, variant.name.name, false));

                    // add a method `is_{variant_name}` to the variant that returns true because the variant is
                    // holding itself
                    variant.body.add(get_is_variant_property(`union.location, variant.name.name, true));
                fi
            od

            for a in add_to_union do
                `union.body.add(a);
            od

            return false;
        si

        visit(`union: Definitions.UNION) is
            _stack.pop();
        si

        pre(variant: Trees.Definitions.VARIANT) -> bool is
            super.pre(variant);
            _stack.push(variant.body);
        si

        visit(variant: Trees.Definitions.VARIANT) is
            if variant.is_poisoned then
                _stack.pop();
                return;
            fi

            let init_function = get_init_method_for_variant(variant);

            variant.body.add(init_function);

            _stack.pop();
        si

        pre(`namespace: Definitions.NAMESPACE) -> bool is
            _stack.push(`namespace.body);

            return false;
        si

        visit(`namespace: Definitions.NAMESPACE) is
            _stack.pop();
        si
    si

    get_is_variant_property(location: LOCATION, name: string, value: bool) -> Definitions.PROPERTY is
        let is_property = new Definitions.PROPERTY(
            location,
            new TypeExpressions.NAMED(
                location,
                new Identifiers.Identifier(
                    location,
                    "bool"
                )
            ),
            new Identifiers.Identifier(
                location,
                "is_{name.to_lower_invariant()}"
            ),
            new Modifiers.LIST(
                location,
                null,
                null
            ),
            new Trees.Bodies.EXPRESSION(
                location,
                new Trees.Expressions.Literals.BOOLEAN(
                    location,
                    if value then "true" else "false" fi
                )
            ),
            null,
            null
        );

        return is_property;
    si

    get_is_variant_method(location: LOCATION, name: string, value: bool) -> Definitions.FUNCTION is
        let is_method = new Definitions.FUNCTION(
            location,
            new Identifiers.Identifier(
                location,
                "$get_is_{name.to_lower_invariant()}"
            ),
            null,
            new Variables.LIST(
                location,
                new Collections.LIST[Variables.VARIABLE]()
            ),
            new TypeExpressions.NAMED(
                location,
                new Identifiers.Identifier(
                    location,
                    "bool"
                )
            ),
            new Modifiers.LIST(
                location,
                null,
                null
            ),
            new Trees.Bodies.EXPRESSION(
                location,
                new Trees.Expressions.Literals.BOOLEAN(
                    location,
                    if value then "true" else "false" fi
                )
            )
        );

        return is_method;
    si

    get_value_return_type(
        location: LOCATION,
        variant_name: string,
        variant_type_arguments: TypeExpressions.LIST,
        fields: Variables.LIST
    ) -> TypeExpressions.TypeExpression =>
        if fields.count == 1 then
            fields | .first() .value .type_expression.copy();
        elif variant_type_arguments? then
            new TypeExpressions.GENERIC(
                location,
                new Identifiers.Identifier(location, variant_name),
                variant_type_arguments
            )
        else
            new TypeExpressions.NAMED(
                location,
                new Identifiers.Identifier(location, variant_name)
            )
        fi;

    get_value_property(
        location: LOCATION, 
        variant_name: string, 
        variant_type_arguments: TypeExpressions.LIST,
        fields: Variables.LIST,
        property_name: string,
        want_concrete: bool
    ) -> Definitions.PROPERTY is
        if fields.count == 0 then
            return null;
        fi

        let return_type = get_value_return_type(location, variant_name, variant_type_arguments, fields);

        let body = 
            if !want_concrete then
                get_null_body(location);
            elif fields.count == 1 then
                get_value_body_single_field(location, fields | .first() .value);
            else
                get_value_body_self(location);
            fi;

        let value_property = new Definitions.PROPERTY(
            location,
            return_type,
            new Identifiers.Identifier(
                location,
                if property_name? then
                    "{property_name.to_lower_invariant()}"
                else
                    "value"
                fi
            ),
            new Modifiers.LIST(
                location,
                null,
                null
            ),
            body,
            null,
            null
        );

        return value_property;
    si

    get_value_method(
        location: LOCATION, 
        variant_name: string, 
        variant_type_arguments: TypeExpressions.LIST,
        fields: Variables.LIST,
        property_name: string,
        want_concrete: bool
    ) -> Definitions.FUNCTION
    is
        if fields.count == 0 then
            return null;
        fi

        let return_type = get_value_return_type(location, variant_name, variant_type_arguments, fields);

        let body = 
            if !want_concrete then
                get_null_body(location);
            elif fields.count == 1 then
                get_value_body_single_field(location, fields | .first() .value);
            else
                get_value_body_self(location);
            fi;

        let value_method = 
            new Definitions.FUNCTION(
                location,
                new Identifiers.Identifier(
                    location,
                    if property_name? then
                        "$get_{property_name.to_lower_invariant()}"
                    else
                        "$get_value"
                    fi
                ),
                null,
                new Variables.LIST(
                    location,
                    new Collections.LIST[Variables.VARIABLE]()
                ),
                return_type,
                new Modifiers.LIST(
                    location,
                    null,
                    null
                ),
                body
            );

        return value_method;
    si

    get_value_property_throw(
        location: LOCATION, 
        variant_name: string,
        variant_type_arguments: TypeExpressions.LIST,
        fields: Variables.LIST, 
        property_name: string
    ) -> Definitions.PROPERTY is
        if !fields? \/ fields.count == 0 then
            return null;
        fi

        let return_type = get_value_return_type(location, variant_name, variant_type_arguments, fields);

        let value_property = new Definitions.PROPERTY(
            location,
            return_type,
            new Identifiers.Identifier(
                location,
                if property_name? then
                    "{property_name.to_lower_invariant()}"
                else
                    "value"
                fi
            ),
            new Modifiers.LIST(
                location,
                null,
                null
            ),
            get_throw_body(location, "this union isn't holding a {variant_name}"),
            null,
            null
        );

        return value_property;
    si

    get_value_property_abstract(
        location: LOCATION, 
        variant_name: string,
        variant_type_arguments: TypeExpressions.LIST,
        fields: Variables.LIST, 
        property_name: string
    ) -> Definitions.PROPERTY is
        assert fields.count > 0 else "cannot create value property for variant with no fields";

        let return_type = get_value_return_type(location, variant_name, variant_type_arguments, fields);    

        let value_property = new Definitions.PROPERTY(
            location,
            return_type,
            new Identifiers.Identifier(
                location,
                "{property_name.to_lower_invariant()}"
            ),
            new Modifiers.LIST(
                location,
                null,
                null
            ),
            get_null_body(location),
            null,
            null
        );

        return value_property;
    si

    get_has_value_property(location: LOCATION, result: bool) -> Definitions.PROPERTY is
        let has_value_property = new Definitions.PROPERTY(
            location,
            new TypeExpressions.NAMED(
                location,
                new Identifiers.Identifier(
                    location,
                    "bool"
                )
            ),
            new Identifiers.Identifier(
                location,
                "has_value"
            ),
            new Modifiers.LIST(
                location,
                null,
                null
            ),
            new Trees.Bodies.EXPRESSION(
                location,
                new Trees.Expressions.Literals.BOOLEAN(
                    location,
                    if result then "true" else "false" fi
                )
            ),
            null,
            null
        );

        return has_value_property;
    si

    get_has_value_method(location: LOCATION, result: bool) -> Definitions.FUNCTION is
        let has_value_method = new Definitions.FUNCTION(
            location,
            new Identifiers.Identifier(
                location,
                "$get_has_value"
            ),
            null,
            new Variables.LIST(
                location,
                new Collections.LIST[Variables.VARIABLE]()
            ),
            new TypeExpressions.NAMED(
                location,
                new Identifiers.Identifier(
                    location,
                    "bool"
                )
            ),
            new Modifiers.LIST(
                location,
                null,
                null
            ),
            new Trees.Bodies.EXPRESSION(
                location,
                new Trees.Expressions.Literals.BOOLEAN(
                    location,
                    if result then "true" else "false" fi
                )
            )
        );

        return has_value_method;
    si

    get_init_method_for_variant(variant: Trees.Definitions.VARIANT) -> Definitions.FUNCTION is
        let arguments = 
            variant.fields | 
                .map((v: Variables.VARIABLE) -> Variables.VARIABLE =>
                    new Variables.VARIABLE(
                        v.location,
                        v.name.copy(),
                        v.type_expression.copy(),
                        false,
                        false,
                        null
                    )
                )            
                .collect_list();

        let initializers = 
            variant.fields | 
                .map((v: Variables.VARIABLE) -> Trees.Statements.Statement is
                    let member_access = 
                        new Trees.Expressions.MEMBER(
                            variant.location,
                            new Trees.Expressions.SELF(variant.location),
                            new Trees.Identifiers.Identifier(
                                variant.location,
                                v.name.name
                            ),
                            variant.location
                        );

                    let left = 
                        new Trees.Expressions.SIMPLE_LEFT_EXPRESSION(
                            variant.location,
                            member_access
                        );

                    return new Trees.Statements.ASSIGNMENT(
                        variant.location,
                        left,

                        new Trees.Expressions.IDENTIFIER(
                            variant.location,
                            new Trees.Identifiers.Identifier(
                                variant.location,
                                v.name.name
                            )
                        )
                    )                   
                si)
                .collect_list();

        let body_statement_list = new Trees.Statements.LIST(
            variant.location,
            initializers
        );

        let init_body = new Trees.Bodies.BLOCK(
            LOCATION.internal,
            body_statement_list
        );

        let init_function = new Definitions.FUNCTION(
            LOCATION.internal,
            new Identifiers.Identifier(
                variant.location,
                "init"
            ),
            null,
            new Variables.LIST(
                LOCATION.internal,
                arguments
            ),
            new TypeExpressions.NAMED(
                LOCATION.internal,
                new Identifiers.Identifier(
                    variant.location,
                    "void"
                )
            ),
            new Modifiers.LIST(
                LOCATION.internal,
                null,
                null
            ),
            init_body
        );

        return init_function;
    si

    get_null_body(location: LOCATION) -> Bodies.Body =>
        new Trees.Bodies.NULL(location);

    get_throw_body(location: LOCATION, message: string) -> Bodies.Body =>
        new Trees.Bodies.BLOCK(
            location,
            new Trees.Statements.LIST(
                location,
                new Collections.LIST[Statements.Statement]([
                    new Trees.Statements.THROW(
                        location,
                        new Trees.Expressions.NEW(
                            location,
                            new Trees.TypeExpressions.NAMED(
                                location,
                                new Trees.Identifiers.QUALIFIED(
                                    location,
                                    new Trees.Identifiers.Identifier(
                                        location,
                                        "System"
                                    ),
                                    "Exception",
                                    location,
                                    location
                                )
                            ),
                            new Trees.Expressions.LIST(
                                location,
                                new Collections.LIST[Expressions.Expression]([
                                    new Trees.Expressions.Literals.STRING(location, message)
                                ]: Expressions.Expression)
                            )
                        )
                    )
                ]: Statements.Statement)
            )
        );

    get_value_body_single_field(location: LOCATION, `field: Variables.VARIABLE) -> Bodies.Body =>
        new Trees.Bodies.EXPRESSION(
            location,
            new Trees.Expressions.IDENTIFIER(
                location,
                new Trees.Identifiers.Identifier(
                    location,
                    `field.name.name
                )
            )
        );

    get_value_body_self(location: LOCATION) -> Bodies.Body =>
        new Trees.Bodies.EXPRESSION(
            location,
            new Trees.Expressions.SELF(
                location
            )
        );

    get_value_body_multiple_fields(location: LOCATION, fields: Collections.List[Variables.VARIABLE]) -> Bodies.Body =>
        new Trees.Bodies.EXPRESSION(
            location,
            new Trees.Expressions.TUPLE(
                location,
                new Trees.Expressions.LIST(
                    location,
                    fields | .map((v: Variables.VARIABLE) -> Expressions.Expression => 
                        new Trees.Expressions.IDENTIFIER(
                            location,
                            new Identifiers.Identifier(
                                location,
                                v.name.name
                            )
                        )
                    )
                ),
                false
            )
        );
si
