namespace Syntax.Process is
    use System;
        
    use Logging;
    use Source;

    use Semantic.Types.Type;

    class SIGNATURE_HELP: ScopedVisitor is
        _overload_resolver: Semantic.OVERLOAD_RESOLVER;

        _target_line: int;
        _target_column: int;

        _results: Semantic.OVERLOAD_MATCHES_RESULT;

        init(
            logger: Logger,
            symbol_table: Semantic.SYMBOL_TABLE,
            namespaces: Semantic.NAMESPACES,
            overload_resolver: Semantic.OVERLOAD_RESOLVER
        )
        is
            super.init(logger, symbol_table, namespaces);

            self._overload_resolver = overload_resolver;
        si

        find_signatures(root: Trees.Node, target_line: int, target_column: int) -> Semantic.OVERLOAD_MATCHES_RESULT is
            _results = null;

            _target_line = target_line;
            _target_column = target_column;

            root.walk(self);

            return _results;
        si

        visit(call: Trees.Expressions.CALL) is
            if call.arguments == null then
                return;
            fi

            if !(_results?) then
                if
                    !call.location.contains(_target_line, _target_column) ||
                    call.function.location.contains(_target_line, _target_column)
                then
                    return;
                fi
                
                _results = help_for(call);

                if _results? then
                    _results.current_parameter_index = get_current_parameter_index(call.location, new Collections.LIST[Trees.Expressions.Expression](call.arguments));
                fi
            fi
        si

        visit(new_: Trees.Expressions.NEW) is
            if new_.arguments == null then
                return;
            fi

            if !(_results?) then
                if
                    !new_.location.contains(_target_line, _target_column) ||
                    new LOCATION(
                        new_.location.file_name,
                        new_.location.start_line,
                        new_.location.start_column,
                        new_.type_expression.location.end_line,
                        new_.type_expression.location.end_column
                    ).contains(_target_line, _target_column)
                then
                    return;
                fi
                
                _results = help_for(new_);
                
                if _results? then
                    _results.current_parameter_index = get_current_parameter_index(new_.location, new Collections.LIST[Trees.Expressions.Expression](new_.arguments));
                fi
            fi
        si

        get_current_parameter_index(full_location: LOCATION, arguments: Collections.LIST[Trees.Expressions.Expression]) -> int is
            if arguments.count <= 1 then
                return 0;
            fi

            let last = arguments.count - 1;

            for i in 0..arguments.count do
                var location: LOCATION;

                if i == 0 then
                    location = new LOCATION(
                        full_location.file_name,
                        full_location.start_line,
                        full_location.start_column,
                        arguments[0].location.end_line,
                        arguments[0].location.end_column
                    );
                elif i != last then
                    location = new LOCATION(
                        arguments[i-1].location.file_name,
                        arguments[i-1].location.end_line,
                        arguments[i-1].location.end_column,
                        arguments[i].location.end_line,
                        arguments[i].location.end_column
                    );
                else
                    location = new LOCATION(
                        arguments[i-1].location.file_name,
                        arguments[i-1].location.end_line,
                        arguments[i-1].location.end_column,
                        full_location.end_line,
                        full_location.end_column
                    );
                fi

                if location.contains(_target_line, _target_column-1) then
                    return i;
                fi
            od

            return 0;
        si
        

        help_for(call: Trees.Expressions.CALL) -> Semantic.OVERLOAD_MATCHES_RESULT is
            if _results? then
                return null;
            fi

            if call.function.value == null then
                return null;
            fi

            let argument_types = new Collections.LIST[Type]();

            for a in call.arguments do                
                if a? && a.value? && a.value.type? then
                    argument_types.add(a.value.type);                    
                else
                    argument_types.add(new Semantic.Types.ANY());
                fi
            od

            if isa IR.Values.Load.SYMBOL(call.function.value) then
                let load = cast IR.Values.Load.SYMBOL(call.function.value);

                if load.symbol? && isa Semantic.Symbols.FUNCTION_GROUP(load.symbol) then
                    let function_group = cast Semantic.Symbols.FUNCTION_GROUP(load.symbol);
                    let overload_results = _overload_resolver.find_matches(function_group, argument_types);

                    if overload_results.results.count == 0 then
                        return null;
                    fi

                    return overload_results;
                fi
            fi

            /*
            argument_types.add(new Semantic.Types.ANY());
            let expected_type = _ghul_symbol_lookup.get_function_type(argument_types);

            if expected_type == null then
                _logger.error(call.location, "no innate function type found");
                return;
            fi

            if call.function.value.type == null then
                Std.error.write_line("call.function.value.type is null: " + call);
                return;
            fi

            let function_type = call.function.value.type;            

            if function_type? && isa Semantic.Types.GENERIC(function_type) then
                let function_generic_type = cast Semantic.Types.GENERIC(function_type);

                let function_type_arguments = function_generic_type.arguments;

                var ok = true;

                if function_type_arguments.count != arguments.count + 1 then
                    _logger.error(call.arguments.location, "expected % arguments but % supplied" % [function_type_arguments.count, arguments.count]: object);
                    
                    return;
                elif function_generic_type.name =~ "FUNCTION_" + arguments.count then
                    for i in 0..arguments.count do
                        if function_generic_type.arguments[i]
                            .compare(argument_types[i])
                                > Semantic.Types.MATCH.CONVERTABLE
                        then
                            ok = false;

                            _logger.error(call.arguments.location, "expected argument of type % but % supplied" % [function_type_arguments[i], argument_types[i]]: object);
                        fi
                    od

                    if ok then
                        let result_type = function_generic_type.arguments[function_type_arguments.count-1];

                        call.value =
                            new IR.Call.CLOSURE(
                                call.function.value,
                                result_type,
                                arguments
                            );

                        show(call.location, "" + call.value);
                    fi

                    return;
                fi
            fi

            _logger.error(call.arguments.location, "cannot call through value of type " + call.function.value.type);
            */
        si

        help_for(new_: Trees.Expressions.NEW) -> Semantic.OVERLOAD_MATCHES_RESULT is
            if _results? then
                return null;
            fi

            let type = new_.type_expression.type;

            if type == null then
                return null;
            fi

            if !isa Semantic.Types.NAMED(type) then
                return null;
            fi

            let named_type = cast Semantic.Types.NAMED(type);

            let symbol = named_type.scope.find_direct("init");

            let function_group = cast Semantic.Symbols.FUNCTION_GROUP(symbol);

            let argument_types = new Collections.LIST[Type]();

            for a in new_.arguments do
                if a? && a.value? && a.value.type? then
                    argument_types.add(a.value.type);                    
                else
                    argument_types.add(new Semantic.Types.ANY());
                fi
            od

            let overload_results = _overload_resolver.find_matches(function_group, argument_types);

            if overload_results.results.count == 0 then
                return null;
            fi

            return overload_results;
        si                
    si
si
