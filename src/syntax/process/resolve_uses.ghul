namespace Syntax.Process is
    
    use Logging;
    use Source;
    use Trees;

    class RESOLVE_USES: ScopeVisitorBase is
        _total_uses: int;

        _logger: Logger;
        _symbol_table: Semantic.SYMBOL_TABLE;

        init(logger: Logger, symbol_table: Semantic.SYMBOL_TABLE, namespaces: Semantic.NAMESPACES) is
            super.init(symbol_table, namespaces);
            self._logger = logger;
            self._symbol_table = symbol_table;
        si

        apply(node: Node) is
            node.walk(self);
        si

        pre(`namespace: Definitions.NAMESPACE) -> bool is
            let namespace_scope = enter_namespace(`namespace.name);

            // FIXME: these searches probably should start at the scope immediately enclosing the namespace
            for u in `namespace.body.uses do
                if !u.`use? then
                    continue;
                fi                
                
                let used_symbol = find_enclosing(u.`use);

                if !used_symbol? then
                    _logger.error(u.location, "used identifier " + u.`use + " is not defined ");
                elif u.name? then
                    namespace_scope.add(u.name.name, used_symbol);
                elif isa Semantic.Symbols.NAMESPACE(used_symbol) then
                    namespace_scope.add(cast Semantic.Symbols.NAMESPACE(used_symbol));
                else
                    namespace_scope.add(used_symbol.name, used_symbol);
                fi
            od
        si

        visit(`namespace: Definitions.NAMESPACE) is
            leave_namespace(`namespace.name);
        si
    si
si
