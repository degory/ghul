namespace Syntax.Process is    
    use Logging;
    use Source;
    use Trees;

    class RESOLVE_USES: ScopeVisitorBase is
        _total_uses: int;

        _logger: Logger;
        _symbol_table: Semantic.SYMBOL_TABLE;
        _symbol_use_locations: Semantic.SYMBOL_USE_LOCATIONS;

        init(
            logger: Logger, 
            symbol_table: Semantic.SYMBOL_TABLE, 
            namespaces: Semantic.NAMESPACES,
            symbol_use_locations: Semantic.SYMBOL_USE_LOCATIONS
        ) is
            super.init(symbol_table, namespaces);
            _logger = logger;
            _symbol_table = symbol_table;
            _symbol_use_locations = symbol_use_locations;
        si

        apply(node: Node) is
            node.walk(self);
        si

        pre(`namespace: Definitions.NAMESPACE) -> bool is
            let namespace_scope = enter_namespace(`namespace.name);

            // FIXME: these searches probably should start at the scope immediately enclosing the namespace
            for u in `namespace.body.uses do
                if !u.`use? then
                    continue;
                fi                
                
                let used_symbol = find_enclosing(u.`use);

                if !used_symbol? then
                    _logger.error(u.`use.location, "used identifier {u.`use} is not defined ");
                    continue;
                fi

                let use_name = used_symbol.name;

                if u.name? /\ u.name.name? then
                    use_name = u.name.name;
                fi
                
                if isa Semantic.Symbols.NAMESPACE(used_symbol) then
                    _symbol_use_locations.add_symbol_use(u.`use.right_location, used_symbol);

                    if namespace_scope.contains_used_symbol(use_name) then
                        if u.name? then
                            _logger.error(u.name.location, "duplicate use");                        
                        else
                            _logger.error(u.`use.location, "duplicate use");                        
                        fi
                    elif u.name? then
                        namespace_scope.add(u.name.name, cast Semantic.Symbols.NAMESPACE(used_symbol));
                    else
                        namespace_scope.add(cast Semantic.Symbols.NAMESPACE(used_symbol));
                    fi
                elif used_symbol.is_function_group then
                    let fg = cast Semantic.Symbols.FUNCTION_GROUP(used_symbol);

                    if !fg.functions | .any(f => !f.is_instance) then
                        if fg.functions.count == 1 then
                            _logger.error(u.`use.location, "cannot use instance function");
                        else
                            _logger.error(u.`use.location, "cannot use function group comprising only instance functions");
                        fi
                    elif fg.functions | .any(f => !f.is_reflected) then
                        _logger.error(u.`use.location, "cannot use member defined in current assembly");
                    fi

                    _symbol_use_locations.add_symbol_use(u.`use.right_location, used_symbol.collapse_group_if_single_member());

                    let existing_used_symbol = namespace_scope.get_used_symbol(use_name);

                    let use_function_group: Semantic.Symbols.FUNCTION_GROUP;

                    if existing_used_symbol? then
                        use_function_group = cast Semantic.Symbols.FUNCTION_GROUP(existing_used_symbol);
                    else
                        use_function_group = Semantic.Symbols.FUNCTION_GROUP(LOCATION.unknown, namespace_scope, use_name);
                        namespace_scope.add(use_name, use_function_group);
                    fi

                    use_function_group.add(fg);
                elif !used_symbol.is_instance then
                    let owner = cast Semantic.Symbols.Symbol(used_symbol.owner);

                    if
                        owner? /\ owner.is_classy /\ !owner.is_union /\
                        owner.symbol_kind != Semantic.Symbols.SYMBOL_KIND.ENUM /\
                        used_symbol.symbol_kind != Semantic.Symbols.SYMBOL_KIND.ENUM_MEMBER /\
                        !used_symbol.is_variant /\ !used_symbol.is_reflected
                    then
                        _logger.error(u.`use.location, "cannot use member defined in current assembly");
                    elif namespace_scope.contains_used_symbol(use_name) then
                        if u.name? then
                            _logger.error(u.name.location, "duplicate use");
                        else
                            _logger.error(u.`use.location, "duplicate use");
                        fi
                    else
                        _symbol_use_locations.add_symbol_use(u.`use.right_location, used_symbol);
                        namespace_scope.add(use_name, used_symbol);
                    fi
                else
                    _logger.error(u.`use.location, "cannot use instance member");
                fi
            od
        si

        visit(`namespace: Definitions.NAMESPACE) is
            leave_namespace(`namespace.name);
        si
    si
si
