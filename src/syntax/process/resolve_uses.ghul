namespace Syntax.Process is
    use System;
    
    use Logging;
    use Source;
    use Tree;

    class RESOLVE_USES: ScopeVisitorBase is
        _total_uses: int;

        _logger: Logger;
        _symbol_table: Semantic.SYMBOL_TABLE;

        init(logger: Logger, symbol_table: Semantic.SYMBOL_TABLE, namespaces: Semantic.NAMESPACES) is
            super.init(symbol_table, namespaces);
            self._logger = logger;
            self._symbol_table = symbol_table;
        si

        apply(node: NODE) is
            node.walk(self);
        si

        pre(namespace_: Definition.NAMESPACE) -> bool is
            let namespace_scope = enter_namespace(namespace_.name);

            // FIXME: these searches probably should start at the scope immediately enclosing the namespace
            for u in namespace_.body.uses do
                var use_scope = cast Semantic.USE_SCOPE(scope_for(u));

                for i in u do
                    var used_symbol = find_enclosing(i);

                    if used_symbol == null then
                        _logger.error(i.location, "used identifier " + i + " is not defined ");
                    elif isa Semantic.Symbol.NAMESPACE(used_symbol) then
                        namespace_scope.add(cast Semantic.Symbol.NAMESPACE(used_symbol));
                    else
                        namespace_scope.add(used_symbol);
                    fi
                od
            od
        si

        visit(namespace_: Definition.NAMESPACE) is
            leave_namespace(namespace_.name);
        si
    si
si
