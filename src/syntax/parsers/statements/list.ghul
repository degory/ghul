namespace Syntax.Parsers.Statements is
    use System.Exception;

    use IO.Std;
    
    use Source;
    use Logging;

    class LIST : Base[Trees.Statements.LIST]  is
        _logger: Logger;
        terminators: Collections.List[Lexical.TOKEN];
        statement_parser: Parser[Trees.Statements.Statement];
        description: string => "statement list";

        init(
            logger: Logger,
            terminators: Collections.LIST[Lexical.TOKEN],
            statement_parser: Parser[Trees.Statements.Statement]
        ) is
            super.init();
            _logger = logger;
            
            self.terminators = terminators;
            self.statement_parser = statement_parser;
        si

        parse(context: CONTEXT) -> Trees.Statements.LIST is
            self.terminators = terminators;

            let start = context.location;
            let end = context.location;
            let statements = new Collections.LIST[Trees.Statements.Statement]();

            while !context.is_end_of_file /\ !at_terminator(context) do
                if context.current.token == Lexical.TOKEN.SEMICOLON then
                    _logger.warn(context.current.location, "empty statement");
                    context.next_token();
                else                
                    try
                        let statement = statement_parser.parse(context);
                        
                        if statement? then
                            statements.add(statement);                           
                        fi

                        end = statement.location;
                    catch e: Exception
                        end = context.current.location;

                        // FIXME: putting is_current directly within the while condition results in an empty body being emitted
                        while !terminators | .has((t: Lexical.TOKEN) => t == context.current_token) do
                            end = context.current.location;
                            
                            context.next_token();
                        od 
                    yrt
                fi
            od

            return new Trees.Statements.LIST(start::end, statements);
        si

        at_terminator(context: CONTEXT) -> bool => terminators | .has(t => t == context.current_token);
    si
si
