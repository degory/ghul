namespace Syntax.Parsers.Statements is
    use IO.Std;
    
    class STATEMENT: Base[Trees.Statements.Statement] is
        labellable_statement_tokens: Collections.LIST[Lexical.TOKEN];
        identifier_parser: Parser[Trees.Identifiers.Identifier];
        expression_parser: Parser[Trees.Expressions.Expression];
        expression_list_parser: Parser[Trees.Expressions.LIST];
        variable_parser: Parser[Trees.Variables.VARIABLE];
        variable_list_parser: Parser[Trees.Variables.LIST];
        statement_list_parser: Parser[Trees.Statements.LIST];
        if_parser:  (CONTEXT) -> Trees.Statements.Statement;
        pragma_parser: Parser[Trees.Statements.PRAGMA];

        description: string => "statement";

        init(
            labellable_statement_tokens: Collections.LIST[Lexical.TOKEN],
            identifier_parser: Parser[Trees.Identifiers.Identifier],
            expression_parser: Parser[Trees.Expressions.Expression],
            expression_list_parser: Parser[Trees.Expressions.LIST],
            variable_parser: Parser[Trees.Variables.VARIABLE],
            variable_list_parser: Parser[Trees.Variables.LIST],
            statement_list_parser: Parser[Trees.Statements.LIST],
            pragma_parser: Parser[Trees.Statements.PRAGMA]
        )
        is
            super.init();

            self.labellable_statement_tokens = labellable_statement_tokens;
            self.identifier_parser = identifier_parser;
            self.expression_parser = expression_parser;
            self.expression_list_parser = expression_list_parser;
            self.variable_parser = variable_parser;
            self.variable_list_parser = variable_list_parser;
            self.statement_list_parser = statement_list_parser;
            self.pragma_parser = pragma_parser;

            add_parsers();
        si
        
        add_parsers() is
            // note: this has to be the exact same set as accepted by the primary expression parsers
            // plus TOKEN.OPERAOR. Otherwise return statements with an expression, but without a semicolon,
            // won't recognize the expression as a primary expression.
            let primary_expression_tokens = [
                Lexical.TOKEN.IDENTIFIER,
                Lexical.TOKEN.SQUARE_OPEN,
                Lexical.TOKEN.PAREN_OPEN,
                Lexical.TOKEN.NEW,
                Lexical.TOKEN.CAST,
                Lexical.TOKEN.ISA,
                Lexical.TOKEN.TYPEOF,
                Lexical.TOKEN.INT_LITERAL,
                Lexical.TOKEN.FLOAT_LITERAL,
                Lexical.TOKEN.STRING_LITERAL,
                Lexical.TOKEN.ENTER_STRING,
                Lexical.TOKEN.CHAR_LITERAL,
                Lexical.TOKEN.TRUE,
                Lexical.TOKEN.FALSE,
                Lexical.TOKEN.NULL,
                Lexical.TOKEN.SELF,
                Lexical.TOKEN.SUPER,
                Lexical.TOKEN.REC,
                Lexical.TOKEN.IF,
                Lexical.TOKEN.LET,
                Lexical.TOKEN.OPERATOR
            ];

            add_parser(
                (context: CONTEXT) -> Trees.Statements.Statement is
                    let start = context.location;
                    if context.next_token(Lexical.TOKEN.LET, syntax_error_message) then
                        let want_dispose = false;
                        if context.current_token == Lexical.TOKEN.USE then
                            context.next_token();

                            want_dispose = true;
                        fi

                        let variable_list = variable_list_parser.parse(context);

                        if context.current_token == Lexical.TOKEN.IN then
                            context.next_token();

                            let expression = expression_parser.parse(context);

                            return Trees.Statements.EXPRESSION(
                                start::expression.location,
                                Trees.Expressions.LET_IN(
                                    start::expression.location,
                                    want_dispose,
                                    variable_list,
                                    expression
                                )
                            );
                        fi

                        return Trees.Statements.LET(start::variable_list.location, want_dispose, variable_list);
                    fi
                si,
                Lexical.TOKEN.LET
            );

            add_parser(
                (context: CONTEXT) is
                    let start = context.location;
                    let end = context.location;

                    if context.next_token(Lexical.TOKEN.RETURN, syntax_error_message) then
                        let expression: Trees.Expressions.Expression;
                        if 
                            context.current.token != Lexical.TOKEN.SEMICOLON /\
                            primary_expression_tokens | .any(t => t == context.current.token)
                        then
                            expression = expression_parser.parse(context);
                            end = expression.location;
                        fi

                        return Trees.Statements.RETURN(start::end, expression);
                    fi
                si,
                Lexical.TOKEN.RETURN
            );

            add_parser(
                (context: CONTEXT) is
                    let start = context.location;
                    let end = context.location;
                    if context.next_token(Lexical.TOKEN.THROW, syntax_error_message) then
                        let expression: Trees.Expressions.Expression;
                        if context.current.token != Lexical.TOKEN.SEMICOLON then
                            expression = expression_parser.parse(context);
                            end = expression.location;
                        fi

                        // context.next_token(Lexical.TOKEN.SEMICOLON);

                        return Trees.Statements.THROW(start::end, expression);
                    fi
                si,
                Lexical.TOKEN.THROW
            );

            add_parser(
                (context: CONTEXT) is
                    let start = context.location;
                    if context.next_token(Lexical.TOKEN.ASSERT, syntax_error_message) then
                        let end = start;

                        let expression = expression_parser.parse(context);
                        end = expression.location;
                        
                        let message: Trees.Expressions.Expression;

                        if context.current_token == Lexical.TOKEN.ELSE then
                            context.next_token();

                            message = expression_parser.parse(context);
                            end = message.location;                            
                        fi

                        let result = Trees.Statements.ASSERT(
                            start::end,
                            expression,
                            message
                        );

                        // context.next_token(Lexical.TOKEN.SEMICOLON);
                        
                        return result;
                    fi
                si,
                Lexical.TOKEN.ASSERT
            );

            add_parser(
                (context: CONTEXT) => parse_if(context),
                Lexical.TOKEN.IF
            );

            add_parser(
                (context: CONTEXT) is
                    let start = context.location;

                    context.next_token(Lexical.TOKEN.CASE);
                    let expression = expression_parser.parse(context);
                    let seen_default = false;
                    let match_list = Collections.LIST[Trees.Statements.CASE_MATCH]();

                    while 
                        context.current.token == Lexical.TOKEN.WHEN \/
                        context.current.token == Lexical.TOKEN.DEFAULT
                    do
                        let match_start = context.location;
                        let match_expressions: Trees.Expressions.LIST = null;
                        if context.current.token != Lexical.TOKEN.DEFAULT then
                            context.next_token(Lexical.TOKEN.WHEN);
                            match_expressions = expression_list_parser.parse(context);
                            context.next_token(Lexical.TOKEN.COLON);
                        else
                            if seen_default then
                                context.error(context.location, "more than one default in case statement");
                            else
                                seen_default = true;
                            fi
                            context.next_token(Lexical.TOKEN.DEFAULT);
                        fi
                        let match_statements = statement_list_parser.parse(context);
                        match_list.add(Trees.Statements.CASE_MATCH(match_start::match_statements.location, match_expressions, match_statements));
                    od

                    let result = Trees.Statements.CASE(start::context.location, expression, match_list);
                    context.next_token(Lexical.TOKEN.ESAC);

                    return result;
                si,
                Lexical.TOKEN.CASE
            );

            add_parser(
                (context: CONTEXT) is
                    let start = context.location;

                    context.next_token(Lexical.TOKEN.MATCH);
                    let expression = expression_parser.parse(context);
                    let seen_default = false;
                    let match_list = Collections.LIST[Trees.Statements.CASE_MATCH]();

                    while 
                        context.current.token == Lexical.TOKEN.WHEN \/
                        context.current.token == Lexical.TOKEN.ELSE
                    do
                        let match_start = context.location;
                        let match_expressions: Trees.Expressions.LIST = null;
                        if context.current.token != Lexical.TOKEN.ELSE then
                            context.next_token(Lexical.TOKEN.WHEN);

                            match_expressions = expression_list_parser.parse(context);
                            context.next_token(Lexical.TOKEN.COLON);
                        else
                            if seen_default then
                                context.error(context.location, "more than one default in case statement");
                            else
                                seen_default = true;
                            fi
                            context.next_token(Lexical.TOKEN.ELSE);
                        fi
                        let match_statements = statement_list_parser.parse(context);
                        match_list.add(Trees.Statements.CASE_MATCH(match_start::match_statements.location, match_expressions, match_statements));
                    od

                    let result = Trees.Statements.CASE(start::context.location, expression, match_list);
                    context.next_token(Lexical.TOKEN.ESAC);

                    return result;
                si,
                Lexical.TOKEN.MATCH
            );
            
            add_parser(
                (context: CONTEXT) is
                    let start = context.location;
                    context.next_token(Lexical.TOKEN.TRY);

                    let body = statement_list_parser.parse(context);
                    let catches = Collections.LIST[Trees.Statements.CATCH]();

                    while context.current.token == Lexical.TOKEN.CATCH do
                        let catch_start = context.location;
                        context.next_token();
                        let catch_variable = variable_parser.parse(context);
                        let catch_body = statement_list_parser.parse(context);
                        catches.add(Trees.Statements.CATCH(catch_start::catch_body.location, catch_variable, catch_body));
                    od

                    let `finally: Trees.Statements.LIST;

                    if context.current.token == Lexical.TOKEN.FINALLY then
                        context.next_token();
                        `finally = statement_list_parser.parse(context);
                    fi

                    while context.current.token == Lexical.TOKEN.CATCH do
                        context.error(context.location, "catches cannot appear after finally");
                        let catch_start = context.location;
                        context.next_token();
                        let catch_variable = variable_parser.parse(context);
                        let catch_body = statement_list_parser.parse(context);
                        catches.add(Trees.Statements.CATCH(catch_start::catch_body.location, catch_variable, catch_body));
                    od

                    let result = Trees.Statements.TRY(start::context.location, body, catches, `finally);
                    context.next_token(Lexical.TOKEN.YRT);
                    return result;
                si,
                Lexical.TOKEN.TRY
            );

            add_parser(
                (context: CONTEXT) is
                    let start = context.location;
                    let condition: Trees.Expressions.Expression;

                    if context.current.token == Lexical.TOKEN.WHILE then
                        context.next_token();
                        condition = expression_parser.parse(context);
                    fi

                    let body: Trees.Statements.LIST;

                    if context.next_token(Lexical.TOKEN.DO, syntax_error_message) then                        
                        body = statement_list_parser.parse(context);

                        let result = Trees.Statements.DO(start::context.location, condition, body);

                        context.next_token(Lexical.TOKEN.OD);

                        return result;
                    else
                        return 
                            Trees.Statements.DO(
                                start::context.current.location,
                                condition,
                                Trees.Statements.LIST(start::context.current.location, Collections.LIST[Trees.Statements.Statement](0)));
                    fi
                si,
                [Lexical.TOKEN.WHILE, Lexical.TOKEN.DO]
            );

            add_parser(
                (context: CONTEXT) is
                    let start = context.location;
                    context.next_token(Lexical.TOKEN.FOR);

                    let variable = variable_parser.parse(context);
                    let expression: Trees.Expressions.Expression;
                    let body: Trees.Statements.LIST;

                    if (variable? /\ !variable.is_poisoned) \/ context.current_token == Lexical.TOKEN.IN then
                        if context.next_token(Lexical.TOKEN.IN, "in for statement") then
                            expression = expression_parser.parse(context);
                        fi
                    fi

                    if (expression? /\ !expression.is_poisoned) \/ context.current_token == Lexical.TOKEN.DO then
                        if context.next_token(Lexical.TOKEN.DO, "in for statement") then
                            body = statement_list_parser.parse(context);
                        fi
                    fi

                    let result = Trees.Statements.FOR(start::context.location, variable, expression, body);

                    if body? \/ context.current_token == Lexical.TOKEN.OD then
                        context.next_token(Lexical.TOKEN.OD, "in for statement");
                    fi
                    
                    if variable? \/ expression? \/ body? then
                        return result;
                    fi
                si,
                Lexical.TOKEN.FOR
            );

            add_parser(
                (context: CONTEXT) is
                    let start = context.location;
                    let end = context.location;
                    context.next_token();
                    let label: Trees.Identifiers.Identifier;
                    if context.current.token == Lexical.TOKEN.IDENTIFIER then
                        label = identifier_parser.parse(context);
                        end = label.location;
                    fi
                    let result = Trees.Statements.BREAK(start::end, label);

                    return result;
                si,
                Lexical.TOKEN.BREAK
            );

            add_parser(
                (context: CONTEXT) is
                    let start = context.location;
                    let end = context.location;
                    context.next_token();
                    let label: Trees.Identifiers.Identifier;
                    if context.current.token == Lexical.TOKEN.IDENTIFIER then
                        label = identifier_parser.parse(context);
                        end = label.location;
                    fi

                    let result = Trees.Statements.CONTINUE(start::end, label);

                    // context.next_token(Lexical.TOKEN.SEMICOLON);

                    return result;
                si,
                Lexical.TOKEN.CONTINUE
            );

            add_parser(
                (context: CONTEXT) => pragma_parser.parse(context),
                Lexical.TOKEN.AT                
            );
        si

        parse_if(context: CONTEXT) -> Trees.Statements.IF is
            let start = context.location;
            let branches = Collections.LIST[Trees.Statements.IF_BRANCH]();
        
            let should_poison = false;

            do
                let branch_start = context.location;
                let condition: Trees.Expressions.Expression;

                if 
                    context.current.token == Lexical.TOKEN.ELIF \/ context.current.token == Lexical.TOKEN.IF
                then
                    context.next_token();
                    condition = expression_parser.parse(context);

                    if !condition? \/ condition.is_poisoned then
                        should_poison = true;
                        if context.current_token != Lexical.TOKEN.THEN then
                            break;
                        fi
                    fi

                    if !context.next_token(Lexical.TOKEN.THEN) then
                        should_poison = true;
                        branches.add(
                            Trees.Statements.IF_BRANCH(
                                branch_start::context.current.location,
                                condition, 
                                Trees.Statements.LIST(
                                    start::context.current.location,
                                    Collections.LIST[Trees.Statements.Statement](0)
                                )
                            )
                        );

                        if 
                            context.current_token != Lexical.TOKEN.FI /\ 
                            context.current_token != Lexical.TOKEN.ELIF /\
                            context.current_token != Lexical.TOKEN.ELSE then
                            break;
                        fi
                    fi
                else
                    condition = null;
                    if !context.next_token(Lexical.TOKEN.ELSE) then
                        should_poison = true;
                        break;
                    fi
                fi

                let body = statement_list_parser.parse(context);

                if body? then
                    if body.is_poisoned then
                        should_poison = true;
                    fi

                    branches.add(Trees.Statements.IF_BRANCH(branch_start::body.location, condition, body));
                fi

                if context.current.token == Lexical.TOKEN.FI then
                    context.next_token();
                    break;
                fi
            od

            let result = Trees.Statements.IF(start::context.location, branches);

            result.poison(should_poison);

            return result;
        si

        other_token(context: CONTEXT) -> Trees.Statements.Statement is
            if context.current.token == Lexical.TOKEN.IDENTIFIER then
                let want_backtrack = true;

                let use tokenizer_snapshot = context.tokenizer_speculate_then_backtrack();

                let label = identifier_parser.parse(context);

                if context.current.token == Lexical.TOKEN.COLON then
                    context.next_token();

                    if labellable_statement_tokens.contains(context.current.token) then
                        // TODO: maybe we don't actually want to commit yet - could this be a broken
                        // property definition?

                        tokenizer_snapshot.commit();

                        let statement = self.parse(context);
                        return Trees.Statements.LABELLED(label.location::statement.location, label, statement);
                    fi
                fi
            fi

            let left = expression_parser.parse(context);

            if isa Trees.Expressions.Literals.NONE(left) then
                return null;
            elif context.current.token == Lexical.TOKEN.ASSIGN then
                context.next_token();
                let right = expression_parser.parse(context);

                return 
                    Trees.Statements.ASSIGNMENT(
                        left.location::right.location, 
                        left.rewrite_as_assignment_left(),
                        right);
            else
                return Trees.Statements.EXPRESSION(left.location, left);
            fi
        si
    si
si
