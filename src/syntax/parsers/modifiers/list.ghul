namespace Syntax.Parsers.Modifiers is
    
    use Source;
    
    class LIST: Base[Trees.Modifiers.LIST] is
        modifier_parser: Parser[Trees.Modifiers.Modifier];

        init(modifier_parser: Parser[Trees.Modifiers.Modifier]) is
            super.init();
            self.modifier_parser = modifier_parser;
        si

        parse(context: CONTEXT) -> Trees.Modifiers.LIST is
            var start = context.location;
            var end = context.location;
            var modifier = modifier_parser.parse(context);
            var access_modifier: Trees.Modifiers.AccessModifier;
            var storage_class: Trees.Modifiers.StorageClass;

            if modifier? /\ isa Trees.Modifiers.AccessModifier(modifier) then
                access_modifier = cast Trees.Modifiers.AccessModifier(modifier);
                modifier = modifier_parser.parse(context);
                if modifier? then
                    end = modifier.location;
                fi
            fi

            if modifier? then
                if isa Trees.Modifiers.StorageClass(modifier) then
                    storage_class = cast Trees.Modifiers.StorageClass(modifier);
                    end = modifier.location;
                else
                    context.error(modifier.location, "unexpected modifier " + modifier + " is a storage class: " + isa Trees.Modifiers.StorageClass(modifier));
                fi
            fi

            return new Trees.Modifiers.LIST(start::end, access_modifier, storage_class);
        si
    si
si
