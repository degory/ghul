namespace Syntax.Parsers.Variables is
    class VARIABLE: Base[Trees.Variables.Variable] is
        identifier_parser: Parser[Trees.Identifiers.Identifier];
        type_parser: Parser[Trees.TypeExpressions.TypeExpression];
        expression_parser: Parser[Trees.Expressions.Expression];

        init(
            identifier_parser: Parser[Trees.Identifiers.Identifier],
            type_parser: Parser[Trees.TypeExpressions.TypeExpression],
            expression_parser: Parser[Trees.Expressions.Expression]
        )
        is
            super.init();
           
            self.identifier_parser = identifier_parser;
            self.type_parser = type_parser;
            self.expression_parser = expression_parser;
        si

        parse(context: CONTEXT) -> Trees.Variables.Variable is
            let start = context.location;
            
            if context.expect_token(Lexical.TOKEN.IDENTIFIER, syntax_error_message) then
                let identifier = identifier_parser.parse(context);

                if identifier == null then
                    return  null;
                fi
                
                let end = identifier.location;
                let type_expression: Trees.TypeExpressions.TypeExpression = new Trees.TypeExpressions.INFER(start::context.location);
                let initializer: Trees.Expressions.Expression;
                
                if context.current.token == Lexical.TOKEN.COLON then
                    context.next_token();
                    type_expression = type_parser.parse(context);
                    
                    end = type_expression.location;
                fi
                
                if context.current.token == Lexical.TOKEN.ASSIGN then
                    context.next_token();
                    initializer = expression_parser.parse(context);
                    end = initializer.location;
                fi
                
                let result = new Trees.Variables.Variable(start::end, identifier, type_expression, false, initializer);

                result.poison(type_expression.is_poisoned);

                return result;
            fi
        si
    si
si
