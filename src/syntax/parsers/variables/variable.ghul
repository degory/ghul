namespace Syntax.Parsers.Variables is
    use Logging;

    class VARIABLE: Base[Trees.Variables.VARIABLE] is
        identifier_parser: Parser[Trees.Identifiers.Identifier];
        destructure_left_parser: Parser[Trees.Variables.DESTRUCTURING_VARIABLE_LEFT];
        type_parser: Parser[Trees.TypeExpressions.TypeExpression];
        expression_parser: Parser[Trees.Expressions.Expression];

        init(
            identifier_parser: Parser[Trees.Identifiers.Identifier],
            destructure_left_parser: Parser[Trees.Variables.DESTRUCTURING_VARIABLE_LEFT],
            type_parser: Parser[Trees.TypeExpressions.TypeExpression],
            expression_parser: Parser[Trees.Expressions.Expression]
        )
        is
            super.init();

            self.identifier_parser = identifier_parser;
            self.destructure_left_parser = destructure_left_parser;
            self.type_parser = type_parser;
            self.expression_parser = expression_parser;
        si

        parse(context: CONTEXT) -> Trees.Variables.VARIABLE is
            let start = context.location;

            let variable_left: Trees.Variables.VariableLeft;

            if context.current_token == Lexical.TOKEN.PAREN_OPEN then
                variable_left = destructure_left_parser.parse(context);
            else
                let identifier = identifier_parser.parse(context);

                if identifier? then
                    variable_left = new Trees.Variables.SIMPLE_VARIABLE_LEFT(identifier.location, identifier);
                else
                    return null;
                fi
            fi
                
            let end = variable_left.location;
            let type_expression: Trees.TypeExpressions.TypeExpression = new Trees.TypeExpressions.INFER(start::context.location);
            let initializer: Trees.Expressions.Expression;
            let is_explicit_type = false;
            
            if context.current.token == Lexical.TOKEN.COLON then
                is_explicit_type = true;
                context.next_token();
                type_expression = type_parser.parse(context);
                
                end = type_expression.location;
            fi
            
            if context.current.token == Lexical.TOKEN.ASSIGN then
                context.next_token();
                initializer = expression_parser.parse(context);
                end = initializer.location;
            fi
            
            let result = 
                new Trees.Variables.VARIABLE(
                    start::end, 
                    variable_left, 
                    type_expression, 
                    false, 
                    is_explicit_type,
                    initializer
                );

            result.poison(type_expression.is_poisoned);

            return result;
        si
    si
si
