namespace Syntax.Parsers.Variables is
    use Source;
    use Logging;

    class DESTRUCTURING_VARIABLE_LEFT: Base[Trees.Variables.DESTRUCTURING_VARIABLE_LEFT] is
        identifier_parser: Parser[Trees.Identifiers.Identifier];

        init(
            identifier_parser: Parser[Trees.Identifiers.Identifier]
        ) is
            super.init();

            self.identifier_parser = identifier_parser;
        si

        parse(context: CONTEXT) -> Trees.Variables.DESTRUCTURING_VARIABLE_LEFT is
            let start = context.location;
            let end = context.location;
            let elements = Collections.LIST[Trees.Variables.VariableLeft]();

            let should_poison = false;

            if !context.next_token(Lexical.TOKEN.PAREN_OPEN) then
                return null;
            fi

            end = context.location;
            
            do
                let element: Trees.Variables.VariableLeft;

                if context.current_token == Lexical.TOKEN.PAREN_OPEN then
                    // we've reached the start of a nested list of destructure elements
                    element = parse(context);
                else
                    let identifier = identifier_parser.parse(context);

                    element = Trees.Variables.SIMPLE_VARIABLE_LEFT(identifier.location, identifier);
                fi

                elements.add(element);

                if context.current_token == Lexical.TOKEN.PAREN_CLOSE then
                    // we've reached the end of a list of destructure elements

                    end = element.location;
                    context.next_token();

                    break;
                elif context.current_token == Lexical.TOKEN.COMMA then
                    // more elements to come

                    context.next_token();
                elif
                    (context.current.token == Lexical.TOKEN.IDENTIFIER \/ context.current.token == Lexical.TOKEN.PAREN_OPEN) /\ 
                    context.location.start_line >= element.location.end_line /\
                    context.location.start_column > element.location.end_column
                then
                    // after parsing an element, we've arrived at something that could be another
                    // element with no intervening comma, and the indentation suggests it's part of
                    // the same list: we'll assume it is, report an error, but continue parsing:

                    context.expect_token(Lexical.TOKEN.COMMA);
                    should_poison = true;
                else
                    // something else, so we'll assume we've reached the end of the list but the
                    // user forgot to close the parentheses:

                    should_poison = true;
                    end = context.location;
                    context.expect_token(Lexical.TOKEN.PAREN_CLOSE);

                    break;
                fi
            od

            let result = Trees.Variables.DESTRUCTURING_VARIABLE_LEFT(start::end, elements);

            if should_poison then
                result.poison();
            fi

            return result;
        si
    si
si
