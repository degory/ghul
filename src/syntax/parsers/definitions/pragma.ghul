namespace Syntax.Parsers.Definitions is
    @IF.not.v3()
    use string = System.String;

    @IF.not.v3()
    use Std = System.Console;

    use Collections.MutableMap;
    use Collections.MAP;

    use Syntax.Parsers.Expressions.PRECEDENCE;
    
    use Source;

    enum PRECEDENCE_RESTORE_STATUS is
        NO_RESTORE_NEEDED,
        REMOVE_PRECEDENCE,
        RESTORE_PRECEDENCE
    si

    class PRAGMA: Base[Trees.Definitions.PRAGMA] is
        // FIXME: use enum parse
        _precedence_names: MutableMap[string,PRECEDENCE];

        pragma_parser: Parser[Trees.Pragmas.PRAGMA];
        definition_parser: Parser[Trees.Definitions.Definition];
        precedence_map: MutableMap[string,PRECEDENCE];

        init(
            pragma_parser: Parser[Trees.Pragmas.PRAGMA],
            definition_parser: Parser[Trees.Definitions.Definition],
            precedence_map: MutableMap[string,PRECEDENCE]
        ) is
            super.init();

            _precedence_names = new MAP[string,PRECEDENCE]();

            _precedence_names.add("user-1", cast PRECEDENCE(3));
            _precedence_names.add("boolean", cast PRECEDENCE(4));
            _precedence_names.add("user-2", cast PRECEDENCE(5));
            _precedence_names.add("relational", cast PRECEDENCE(6));
            _precedence_names.add("user-3", cast PRECEDENCE(7));
            _precedence_names.add("range", cast PRECEDENCE(8));
            _precedence_names.add("user-4", cast PRECEDENCE(9));
            _precedence_names.add("shift", cast PRECEDENCE(10));
            _precedence_names.add("user-5", cast PRECEDENCE(11));
            _precedence_names.add("bitwise", cast PRECEDENCE(12));
            _precedence_names.add("user-6", cast PRECEDENCE(13));
            _precedence_names.add("addition", cast PRECEDENCE(14));
            _precedence_names.add("user-7", cast PRECEDENCE(15));
            _precedence_names.add("multiplication", cast PRECEDENCE(16));
            _precedence_names.add("user-8", cast PRECEDENCE(17));
            _precedence_names.add("member", cast PRECEDENCE(18));
            _precedence_names.add("primary", cast PRECEDENCE(19));
    
            self.pragma_parser = pragma_parser;
            self.definition_parser = definition_parser;
            self.precedence_map = precedence_map;
        si

        parse(context: CONTEXT) -> Trees.Definitions.PRAGMA is
            let pragma_ = pragma_parser.parse(context);
            
            // FIXME: factor this out
            if pragma_? /\ !pragma_.is_poisoned then
                let operator_name: string;
                let precedence_to_restore: PRECEDENCE;
   
                let restore_status = PRECEDENCE_RESTORE_STATUS.NO_RESTORE_NEEDED;

                if 
                    pragma_.is_name_equal_to("precedence")
                then
                    let is_precedence_valid = true;

                    operator_name = pragma_.try_get_string_literal_at(0);
                    let precedence_name = pragma_.try_get_string_literal_at(1);

                    if !operator_name? then
                        context.error(pragma_.location, "expected operator name argument");

                        is_precedence_valid = false;
                    fi

                    let precedence_int: int;
                    let precedence_to_set: PRECEDENCE;

                    if !precedence_name? then
                        context.error(pragma_.location, "expected operator precedence argument");

                        is_precedence_valid = false;
                    elif !_precedence_names.try_get_value(precedence_name, precedence_to_set ref) then
                        if int.try_parse(precedence_name, precedence_int ref) then
                            precedence_to_set = cast PRECEDENCE(precedence_int);
                        else
                            is_precedence_valid = false;                            
                        fi
                    fi

                    if is_precedence_valid then
                        if precedence_to_set < PRECEDENCE.USER_1 \/ precedence_to_set > PRECEDENCE.USER_8 then
                            context.error(pragma_.location, "precedence must be between user-1 and user-8");                            
                            is_precedence_valid = false;
                        fi                        
                    fi
                    
                    if is_precedence_valid then
                        if precedence_map.try_get_value(operator_name, precedence_to_restore ref) then  
                            restore_status = PRECEDENCE_RESTORE_STATUS.RESTORE_PRECEDENCE;                          
                        else
                            restore_status = PRECEDENCE_RESTORE_STATUS.REMOVE_PRECEDENCE;
                        fi

                        precedence_map[operator_name] = precedence_to_set;
                    fi
                fi

                let definition = definition_parser.parse(context);

                if restore_status == PRECEDENCE_RESTORE_STATUS.RESTORE_PRECEDENCE then
                    precedence_map[operator_name] = precedence_to_restore;
                elif restore_status == PRECEDENCE_RESTORE_STATUS.REMOVE_PRECEDENCE then
                    precedence_map.remove(operator_name);
                fi                

                if definition? /\ !definition.is_poisoned then
                    return new Trees.Definitions.PRAGMA(pragma_.location::definition.location, pragma_, definition);
                fi
            fi
        si
    si
si
