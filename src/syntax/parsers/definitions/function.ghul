namespace Syntax.Parsers.Definitions is
    
    use Source;

    class FUNCTION: Base[Trees.Definitions.FUNCTION] is
        identifier_function_name_parser: Parser[Trees.Identifiers.Identifier];
        type_parser: Parser[Trees.TypeExpressions.TypeExpression];
        type_list_parser: Parser[Trees.TypeExpressions.LIST];
        modifier_list_parser: Parser[Trees.Modifiers.LIST];
        body_parser: Parser[Trees.Bodies.Body];
        variable_list_parser: Parser[Trees.Variables.LIST];

        init(
            identifier_function_name_parser: Parser[Trees.Identifiers.Identifier],
            type_parser: Parser[Trees.TypeExpressions.TypeExpression],
            type_list_parser: Parser[Trees.TypeExpressions.LIST],
            modifier_list_parser: Parser[Trees.Modifiers.LIST],
            body_parser: Parser[Trees.Bodies.Body],
            variable_list_parser: Parser[Trees.Variables.LIST])
        is
            super.init();

            self.identifier_function_name_parser = identifier_function_name_parser;
            self.type_parser = type_parser;
            self.type_list_parser = type_list_parser;
            self.modifier_list_parser = modifier_list_parser;
            self.body_parser = body_parser;
            self.variable_list_parser = variable_list_parser;
        si

        parse(context: CONTEXT) -> Trees.Definitions.FUNCTION is
            var fail = false;
            var start = context.location;
            var name = identifier_function_name_parser.parse(context);

            if context.current.token == Lexical.TOKEN.SQUARE_OPEN then
                context.next_token();

                let type_arguments = type_list_parser.parse(context);

                let is_poisoned = type_arguments.is_poisoned;
                
                if
                    !is_poisoned ||
                    context.current.token == Lexical.TOKEN.SQUARE_CLOSE
                then
                    is_poisoned = !context.next_token(Lexical.TOKEN.SQUARE_CLOSE) || is_poisoned;
                fi
            fi

            context.next_token(Lexical.TOKEN.PAREN_OPEN);

            var arguments: Trees.Variables.LIST;

            var any_bad_arguments = false;

            if context.current_token != Lexical.TOKEN.PAREN_CLOSE then
                if context.current.token != Lexical.TOKEN.IDENTIFIER then
                    fail = true;
                fi

                arguments = variable_list_parser.parse(context);

                for a in arguments do
                    if isa Trees.TypeExpressions.INFER(a.type_expression) then
                        context.error(a.location, "explicit argument type required");
                        any_bad_arguments = true;
                    fi                    
                od
            fi

            if arguments == null || any_bad_arguments then
                arguments = new Trees.Variables.LIST(context.location, new Collections.LIST[Trees.Variables.Variable](0));
            fi
            
            if !fail || context.current.token == Lexical.TOKEN.PAREN_CLOSE then
                fail = !context.next_token(Lexical.TOKEN.PAREN_CLOSE) || fail;
            fi

            var type_expression: Trees.TypeExpressions.TypeExpression;
            if context.current.token == Lexical.TOKEN.ARROW_THIN then
                context.next_token();
                type_expression = type_parser.parse(context);
            else
                type_expression = new Trees.TypeExpressions.INFER(context.location);
            fi

            var modifiers = modifier_list_parser.parse(context);
            var expect_semicolon = context.current.token != Lexical.TOKEN.IS;
            var body = body_parser.parse(context);
            var result =
                new Trees.Definitions.FUNCTION(
                    start::context.location, 
                    name, 
                    arguments, 
                    type_expression, 
                    modifiers, 
                    body
                );

            if expect_semicolon then
                if !fail || context.current.token == Lexical.TOKEN.SEMICOLON then            
                    fail = !context.next_token(Lexical.TOKEN.SEMICOLON) || fail;
                fi
            fi

            return result;
        si
    si
si
