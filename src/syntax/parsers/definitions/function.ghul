namespace Syntax.Parsers.Definitions is
    
    use Source;
    use Logging;

    class FUNCTION: Base[Trees.Definitions.FUNCTION] is
        identifier_function_name_parser: Parser[Trees.Identifiers.Identifier];
        type_parser: Parser[Trees.TypeExpressions.TypeExpression];
        type_list_parser: Parser[Trees.TypeExpressions.LIST];
        modifier_list_parser: Parser[Trees.Modifiers.LIST];
        body_parser: Parser[Trees.Bodies.Body];
        variable_list_parser: Parser[Trees.Variables.LIST];

        init(
            identifier_function_name_parser: Parser[Trees.Identifiers.Identifier],
            type_parser: Parser[Trees.TypeExpressions.TypeExpression],
            type_list_parser: Parser[Trees.TypeExpressions.LIST],
            modifier_list_parser: Parser[Trees.Modifiers.LIST],
            body_parser: Parser[Trees.Bodies.Body],
            variable_list_parser: Parser[Trees.Variables.LIST])
        is
            super.init();

            self.identifier_function_name_parser = identifier_function_name_parser;
            self.type_parser = type_parser;
            self.type_list_parser = type_list_parser;
            self.modifier_list_parser = modifier_list_parser;
            self.body_parser = body_parser;
            self.variable_list_parser = variable_list_parser;
        si

        parse_generic_arguments(
            context: CONTEXT
        ) -> Syntax.Trees.TypeExpressions.LIST is
            if context.current.token == Lexical.TOKEN.SQUARE_OPEN then
                context.next_token();

                let generic_arguments = type_list_parser.parse(context);
                generic_arguments.check_no_reference_types(context.logger);

                let is_poisoned = !generic_arguments? \/ generic_arguments.is_poisoned;
                
                if !is_poisoned \/ context.current.token == Lexical.TOKEN.SQUARE_CLOSE then
                    is_poisoned = !context.next_token(Lexical.TOKEN.SQUARE_CLOSE) \/ is_poisoned;
                fi

                generic_arguments.poison(is_poisoned);

                return generic_arguments;
            fi
        si

        parse_formal_arguments(
            context: CONTEXT,
            start: Source.LOCATION,
            name: Syntax.Trees.Identifiers.Identifier, 
            generic_arguments: Syntax.Trees.TypeExpressions.LIST
        ) -> 
            (arguments: Trees.Variables.LIST, function: Trees.Definitions.FUNCTION)
        is
            let is_poisoned = false;
            let arguments_open_parenthesis_location = context.location;

            context.next_token(Lexical.TOKEN.PAREN_OPEN);

            let use arguments_tokenizer_snapshot = context.tokenizer_speculate_then_commit();
            let use arguments_logger_snaphot = context.logger_speculate_then_commit();

            let arguments: Trees.Variables.LIST;
            let function: Trees.Definitions.FUNCTION;

            let any_bad_arguments = false;

            if context.current_token != Lexical.TOKEN.PAREN_CLOSE then
                if context.current.token != Lexical.TOKEN.IDENTIFIER then
                    is_poisoned = true;
                fi

                arguments = variable_list_parser.parse(context);

                any_bad_arguments = arguments.is_poisoned;

                let last_valid_argument_line = 0;

                for ai in arguments | .index() do
                    let index = ai.index;
                    let a = ai.value;

                    if !a? \/ a.is_poisoned then
                        is_poisoned = true;
                        any_bad_arguments = true;
                    elif isa Trees.TypeExpressions.INFER(a.type_expression) then
                        context.error(a.location, "explicit argument type required");
                        a.poison(true);
                        is_poisoned = true;
                        any_bad_arguments = true;
                    else
                        last_valid_argument_line = a.name.location.start_line;
                    fi
                od

                if 
                    context.current_token == Lexical.TOKEN.PAREN_OPEN \/
                    (context.current_token == Lexical.TOKEN.IDENTIFIER /\ context.location.start_line > arguments.location.end_line)
                then
                    // we might have run off the end of an incomplete function
                    // signature into the start of a following function
                    // signature

                    let could_be_next_function = false;

                    // TODO not sure all these conditions are necessary/meaningful
                    if !arguments? \/ arguments.variables.count == 0 then
                        could_be_next_function = true;
                    elif any_bad_arguments /\ context.location.start_line > arguments.location.end_line then
                        could_be_next_function = true;
                    elif last_valid_argument_line < context.location.start_line then
                        could_be_next_function = true;
                    fi

                    if could_be_next_function then
                        arguments_logger_snaphot.backtrack();

                        for a in arguments do
                            if a? then
                                a.poison(true);
                            fi
                        od

                        let roll_forwards_to_line = context.location.start_line;

                        arguments_tokenizer_snapshot.backtrack();

                        while context.location.start_line < roll_forwards_to_line do
                            context.next_token();
                        od

                        function =
                            new Trees.Definitions.FUNCTION(
                                start::name.location, 
                                name, 
                                generic_arguments,
                                arguments,
                                new Trees.TypeExpressions.INFER(context.location), 
                                new Trees.Modifiers.LIST(context.location, null, null), 
                                new Trees.Bodies.NULL(context.location)
                            );

                        context.logger.error(
                            if arguments.variables.count > 0 then 
                                arguments.location
                            else
                                arguments_open_parenthesis_location
                            fi,
                            "syntax error: incomplete formal arguments"
                        );

                        return (arguments, function);
                    fi
                fi
            fi

            arguments_tokenizer_snapshot.commit();
            arguments_logger_snaphot.commit();

            if arguments == null then
                arguments = new Trees.Variables.LIST(context.location, new Collections.LIST[Trees.Variables.Node](0));
            fi
            
            // TODO: could recognize that no closing parenthesis followed by a new line then 
            // an identifier and an opening paren is probably another function signature 

            if !is_poisoned \/ context.current.token == Lexical.TOKEN.PAREN_CLOSE then
                is_poisoned = !context.next_token(Lexical.TOKEN.PAREN_CLOSE) \/ is_poisoned;
            fi

            arguments.poison(is_poisoned);

            return (arguments, function);
        si

        parse_return_type(
            context: CONTEXT,
            start: Source.LOCATION,
            name: Syntax.Trees.Identifiers.Identifier, 
            generic_arguments: Syntax.Trees.TypeExpressions.LIST,
            arguments: Trees.Variables.LIST
        ) -> 
        (type_expression: Trees.TypeExpressions.TypeExpression, function: Trees.Definitions.FUNCTION)
        is
            let is_poisoned = false;
            let type_expression: Trees.TypeExpressions.TypeExpression;
            let function: Trees.Definitions.FUNCTION;

            if context.current.token == Lexical.TOKEN.ARROW_THIN then
                let arrow_location = context.location;
                context.next_token();

                let use return_type_tokenizer_snapshot = context.tokenizer_speculate_then_commit();

                type_expression = type_parser.parse(context);
                type_expression.check_is_not_reference(context.logger, "function cannot return a reference");

                is_poisoned = is_poisoned \/ !type_expression? \/ type_expression.is_poisoned;

                if context.current_token == Lexical.TOKEN.PAREN_OPEN then
                    return_type_tokenizer_snapshot.backtrack();

                    function =
                        new Trees.Definitions.FUNCTION(
                            start::name.location, 
                            name, 
                            generic_arguments,
                            arguments, 
                            new Trees.TypeExpressions.INFER(context.location), 
                            new Trees.Modifiers.LIST(context.location, null, null), 
                            new Trees.Bodies.NULL(context.location)
                        );

                    context.logger.error(arrow_location, "syntax error: incomplete return type");

                    return (type_expression, function);
                fi

                return_type_tokenizer_snapshot.commit();
            else
                type_expression = new Trees.TypeExpressions.INFER(context.location);
            fi

            return (type_expression, function);
        si

        parse(context: CONTEXT) -> Trees.Definitions.FUNCTION is
            if context.in_classy then
                context.in_member = true;
                context.member_indent = context.location.start_column
            else
                context.in_global_function = true;
                context.global_indent = context.location.start_column;
            fi

            try
                let is_poisoned = false;
                let start = context.location;
                let name = identifier_function_name_parser.parse(context);

                let generic_arguments = parse_generic_arguments(context);

                if generic_arguments? then
                    is_poisoned = generic_arguments.is_poisoned;
                fi

                let af = parse_formal_arguments(context, start, name, generic_arguments);

                if af.function? then
                    return af.function;
                fi

                let arguments = af.arguments;

                is_poisoned = is_poisoned \/ arguments.is_poisoned;

                let rt = parse_return_type(context, start, name, generic_arguments, arguments);

                if rt.function? then
                    return rt.function;
                fi

                let type_expression = rt.type_expression;

                is_poisoned = is_poisoned \/ type_expression.is_poisoned;

                let modifiers = modifier_list_parser.parse(context);
                let expect_semicolon = context.current.token != Lexical.TOKEN.IS;

                let body: Trees.Bodies.Body;

                try 
                    body = body_parser.parse(context)
                catch ue: UNWIND_TO_MEMBER_EXCEPTION
                    body = new Trees.Bodies.NULL(context.location);
                yrt

                let result =
                    new Trees.Definitions.FUNCTION(
                        start::body.location, 
                        name, 
                        generic_arguments,
                        arguments, 
                        type_expression, 
                        modifiers, 
                        body
                    );
    
                if expect_semicolon then
                    if !is_poisoned \/ context.current.token == Lexical.TOKEN.SEMICOLON then
                        is_poisoned = !context.next_token(Lexical.TOKEN.SEMICOLON) \/ is_poisoned;
                    fi
                fi

                result.poison(is_poisoned);
    
                return result;
    
            finally
                if context.in_classy then
                    context.in_member = false;
                else
                    context.in_global_function = false;
                fi
            yrt
        si
    si
si
