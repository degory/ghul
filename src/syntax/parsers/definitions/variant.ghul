namespace Syntax.Parsers.Definitions is
    use Source;
    use Logging;

    class VARIANT: Base[Trees.Definitions.VARIANT] is
        identifier_parser: Parser[Trees.Identifiers.Identifier];
        variable_list_parser: Parser[Trees.Variables.LIST];
        modifier_parser: Parser[Trees.Modifiers.LIST];

        init(
            identifier_parser: Parser[Trees.Identifiers.Identifier],            
            variable_list_parser: Parser[Trees.Variables.LIST],
            modifier_parser: Parser[Trees.Modifiers.LIST]
            )
        is
            super.init();
            self.identifier_parser = identifier_parser;
            self.variable_list_parser = variable_list_parser;
            self.modifier_parser = modifier_parser;
        si

        parse(context: CONTEXT) -> Trees.Definitions.VARIANT is
            let start = context.location;
            context.in_classy = true;
            context.global_indent = start.start_column;

            /*
            parse a typed-union variant, which is of the form

            variant_definition ::= identifier variant_fields? ";"
            variant_fields ::= "(" variant_field ("," variant_field)* ")"
            variant_field ::= identifier ":" type_expression            
            */

            try
                let identifier = identifier_parser.parse(context);
    
                let should_poison = false;
    
                if identifier == null then
                    return null;
                fi            
      
                should_poison = identifier.is_poisoned;
                
                let members: Trees.Variables.LIST;
                
                if context.current_token == Lexical.TOKEN.PAREN_OPEN then
                    context.next_token();
                    members = variable_list_parser.parse(context);

                    should_poison = should_poison \/ members.is_poisoned;

                    if !should_poison \/ context.current_token == Lexical.TOKEN.PAREN_CLOSE then
                        context.next_token(Lexical.TOKEN.PAREN_CLOSE);
                    fi
                else
                    members = Trees.Variables.LIST(start::context.location, System.Array.empty`[Trees.Variables.VARIABLE]());

                    for m in members do
                        if !m.is_explicit_type then
                            context.error(m.location, "variant field must have an explicit type");
                            should_poison = true;
                        fi
                    od
                fi

                let modifiers = Trees.Modifiers.LIST(
                    context.location,
                    Trees.Modifiers.PUBLIC(context.location),
                    Trees.Modifiers.FIELD(context.location)
                );

                if !should_poison \/ context.current_token == Lexical.TOKEN.SEMICOLON then
                    context.next_token(Lexical.TOKEN.SEMICOLON);
                fi
    
                let result = Trees.Definitions.VARIANT(
                    start::context.location, 
                    identifier, 
                    members,
                    modifiers
                );

                result.poison(should_poison);
                    
                return result;
            finally
                context.in_classy = false;
            yrt
        si
    si
si
