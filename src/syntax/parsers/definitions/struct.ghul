namespace Syntax.Parsers.Definitions is
    use Source;

    class STRUCT: Base[Trees.Definitions.STRUCT] is
        identifier_parser: Parser[Trees.Identifiers.Identifier];
        type_parser: Parser[Trees.TypeExpressions.TypeExpression];
        type_list_parser: Parser[Trees.TypeExpressions.LIST];
        modifier_list_parser: Parser[Trees.Modifiers.LIST];
        definition_list_parser: Parser[Trees.Definitions.LIST];

        init(
            identifier_parser: Parser[Trees.Identifiers.Identifier],
            type_parser: Parser[Trees.TypeExpressions.TypeExpression],
            type_list_parser: Parser[Trees.TypeExpressions.LIST],
            modifier_list_parser: Parser[Trees.Modifiers.LIST],
            definition_list_parser: Parser[Trees.Definitions.LIST]
        )
        is
            super.init();
            self.identifier_parser = identifier_parser;
            self.type_parser = type_parser;
            self.type_list_parser = type_list_parser;
            self.modifier_list_parser = modifier_list_parser;
            self.definition_list_parser = definition_list_parser;
        si

        parse(context: CONTEXT) -> Trees.Definitions.STRUCT is
            let start = context.location;
            context.in_classy = true;
            context.global_indent = start.start_column;

            try
                let fail = false;
                context.next_token(Lexical.TOKEN.STRUCT);

                let identifier = identifier_parser.parse(context);
                            
                let arguments: Trees.TypeExpressions.LIST;
                let ancestors: Trees.TypeExpressions.LIST;

                let is_poisoned = false;

                if context.current.token == Lexical.TOKEN.SQUARE_OPEN then
                    context.next_token();

                    arguments = type_list_parser.parse(context);
                    arguments.check_no_reference_types(context.logger);

                    is_poisoned = arguments.is_poisoned;
                    
                    if
                        !is_poisoned \/
                        context.current.token == Lexical.TOKEN.SQUARE_CLOSE
                    then
                        is_poisoned = !context.next_token(Lexical.TOKEN.SQUARE_CLOSE) \/ is_poisoned;
                    fi
                fi

                if context.current.token == Lexical.TOKEN.COLON then
                    context.next_token();
                    ancestors = type_list_parser.parse(context);
                    ancestors.check_no_reference_types(context.logger);

                    is_poisoned = is_poisoned \/ ancestors.is_poisoned;
                fi

                let modifiers = modifier_list_parser.parse(context);

                let expect_body = !fail \/ context.current.token == Lexical.TOKEN.IS;
                
                if expect_body /\ context.next_token(Lexical.TOKEN.IS) then
                    let body = definition_list_parser.parse(context);

                    let result = Trees.Definitions.STRUCT(
                        start::context.location, 
                        identifier, 
                        arguments,
                        ancestors,
                        modifiers, 
                        body
                    );

                    context.next_token(Lexical.TOKEN.SI);                

                    if !fail then
                        return result;
                    fi
                fi

            finally
                context.in_classy = false;
            yrt            
        si
    si
si
