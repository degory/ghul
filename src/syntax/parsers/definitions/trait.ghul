namespace Syntax.Parsers.Definitions is
    use Source;

    class TRAIT: Base[Trees.Definitions.TRAIT] is
        identifier_parser: Parser[Trees.Identifiers.Identifier];
        type_parser: Parser[Trees.TypeExpressions.TypeExpression];
        type_list_parser: Parser[Trees.TypeExpressions.LIST];
        modifier_list_parser: Parser[Trees.Modifiers.LIST];
        definition_list_parser: Parser[Trees.Definitions.LIST];

        init(
            identifier_parser: Parser[Trees.Identifiers.Identifier],
            type_parser: Parser[Trees.TypeExpressions.TypeExpression],
            type_list_parser: Parser[Trees.TypeExpressions.LIST],
            modifier_list_parser: Parser[Trees.Modifiers.LIST],
            definition_list_parser: Parser[Trees.Definitions.LIST]
        )
        is
            super.init();

            self.identifier_parser = identifier_parser;
            self.type_parser = type_parser;
            self.type_list_parser = type_list_parser;
            self.modifier_list_parser = modifier_list_parser;
            self.definition_list_parser = definition_list_parser;
        si

        parse(context: CONTEXT) -> Trees.Definitions.TRAIT is
            let start = context.location;
            context.in_classy = true;
            context.global_indent = start.start_column;

            try
                context.next_token(Lexical.TOKEN.TRAIT);
                let identifier = identifier_parser.parse(context);

                let is_poisoned = false;

                if identifier == null then
                    return null;
                fi            

                let arguments: Trees.TypeExpressions.LIST;
                let ancestors: Trees.TypeExpressions.LIST;

                if context.current.token == Lexical.TOKEN.SQUARE_OPEN then
                    context.next_token();

                    arguments = type_list_parser.parse(context);
                    arguments.check_no_reference_types(context.logger);

                    is_poisoned = arguments.is_poisoned;
                    
                    if
                        !is_poisoned \/
                        context.current.token == Lexical.TOKEN.SQUARE_CLOSE
                    then
                        is_poisoned = !context.next_token(Lexical.TOKEN.SQUARE_CLOSE) \/ is_poisoned;
                    fi
                fi

                if context.current.token == Lexical.TOKEN.COLON then
                    context.next_token();
                    ancestors = type_list_parser.parse(context);
                    ancestors.check_no_reference_types(context.logger);

                    is_poisoned = is_poisoned \/ ancestors.is_poisoned;
                fi

                let modifiers = modifier_list_parser.parse(context);

                let expect_body = !is_poisoned \/ context.current.token == Lexical.TOKEN.IS;
                let have_body = false;

                let body: Trees.Definitions.LIST;
                
                if expect_body /\ context.next_token(Lexical.TOKEN.IS) then
                    let in_trait = context.in_trait;
                    context.in_trait = true;

                    body = definition_list_parser.parse(context);

                    context.in_trait = in_trait;

                    have_body = true;
                else
                    body = new Trees.Definitions.LIST(LOCATION.internal, new Collections.LIST[Trees.Definitions.Definition](0));
                    is_poisoned = true;
                fi

                let result = new Trees.Definitions.TRAIT(
                    start::context.location, 
                    identifier, 
                    arguments, 
                    ancestors, 
                    modifiers, 
                    body
                );

                result.poison(is_poisoned);

                if have_body then
                    context.next_token(Lexical.TOKEN.SI);                
                fi
                
                return result;
            finally
                context.in_classy = false;
            yrt
        si
    si
si
