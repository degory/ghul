namespace Syntax.Parsers.Definitions is
    use System;
    
    use Source;

    class USE: Base[Trees.Definitions.USE] is
        identifier_qualified_parser: Parser[Trees.Identifiers.Identifier];

        init(identifier_qualified_parser: Parser[Trees.Identifiers.Identifier]) is
            super.init();
            
            self.identifier_qualified_parser = identifier_qualified_parser;
        si

        parse(context: CONTEXT) -> Trees.Definitions.USE is
            let start = context.location;

            context.next_token(Lexical.TOKEN.USE);

            let use_ = identifier_qualified_parser.parse(context);

            if !use_? then
                return null;
            fi

            if context.current_token == Lexical.TOKEN.ASSIGN then
                context.next_token();

                let name = use_;

                if name.qualifier? then
                    context.logger.error(name.qualifier.location, "cannot qualify namespace or symbol alias");
                fi
                
                use_ = identifier_qualified_parser.parse(context);

                if use_ then
                    context.next_token(Lexical.TOKEN.SEMICOLON);                    
                fi
                
                return new Trees.Definitions.USE(start::context.location, name, use_);
            else
                context.next_token(Lexical.TOKEN.SEMICOLON);

                return new Trees.Definitions.USE(start::context.location, null, use_);
            fi
        si
    si
si
