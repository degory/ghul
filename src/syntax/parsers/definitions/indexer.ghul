namespace Syntax.Parsers.Definitions is
    @IF.not.v3() use object = System.Object;
    @IF.not.v3() use string = System.String;
    @IF.not.v3() use Std = System.Console;

    use System;
        
    use Source;

    class INDEXER : Base[Trees.Definitions.INDEXER] is 
        identifier_parser: Parser[Trees.Identifiers.Identifier];
        type_parser: Parser[Trees.TypeExpressions.TypeExpression];
        modifier_list_parser: Parser[Trees.Modifiers.LIST];
        variable_parser: Parser[Trees.Variables.Variable];
        body_parser: Parser[Trees.Bodies.Body];
        description: string => "indexer";

        init(
            identifier_parser: Parser[Trees.Identifiers.Identifier],
            type_parser: Parser[Trees.TypeExpressions.TypeExpression],
            modifier_list_parser: Parser[Trees.Modifiers.LIST],
            variable_parser: Parser[Trees.Variables.Variable],
            body_parser: Parser[Trees.Bodies.Body]
        )
        is
            super.init();

            self.identifier_parser = identifier_parser;
            self.type_parser = type_parser;
            self.modifier_list_parser = modifier_list_parser;
            self.variable_parser = variable_parser;
            self.body_parser = body_parser;
        si

        parse(context: CONTEXT) -> Trees.Definitions.INDEXER is
            var name: Trees.Identifiers.Identifier;
            var start = context.location;

            if context.current.token == Lexical.TOKEN.IDENTIFIER then
                name = identifier_parser.parse(context);
            fi
         
            if !context.next_token(Lexical.TOKEN.SQUARE_OPEN) then
                return null;
            fi
            
            var index_argument = variable_parser.parse(context);
            
            var fail = !context.next_token(Lexical.TOKEN.SQUARE_CLOSE);

            var type_expression: Trees.TypeExpressions.TypeExpression;

            if !fail || context.current.token == Lexical.TOKEN.COLON then
                context.next_token();
                type_expression = type_parser.parse(context);
                            
            else
                type_expression = new Trees.TypeExpressions.INFER(context.location);
            fi

            var modifiers = modifier_list_parser.parse(context);
            var read_body: Trees.Bodies.Body;
            var assign_body: Trees.Bodies.Body;
            var setter_argument_name: Trees.Identifiers.Identifier;
            var expect_semicolon = true;

            var progress = false;

            do
                if fail then break ; fi
                            
                if context.current.token == Lexical.TOKEN.ASSIGN then
                    if setter_argument_name? then
                        context.error(context.location, "replacing assign");
                    fi
                    context.next_token();
                    progress = true;
                    setter_argument_name = identifier_parser.parse(context);
                    expect_semicolon = context.current.token != Lexical.TOKEN.COMMA && context.current.token != Lexical.TOKEN.IS;
                    assign_body = body_parser.parse(context);
                    if context.current.token == Lexical.TOKEN.COMMA then
                        context.next_token();
                    else
                        break;
                    fi
                elif context.current.token == Lexical.TOKEN.IS || context.current.token == Lexical.TOKEN.ARROW_FAT then
                    expect_semicolon = context.current.token == Lexical.TOKEN.ARROW_FAT;
                    if read_body? then
                        context.error(context.location, "replacing read");
                    fi
                    read_body = body_parser.parse(context);
                    if context.current.token == Lexical.TOKEN.COMMA then
                        progress = true;
                        context.next_token();
                    else
                        break;
                    fi
                elif context.current_token == Lexical.TOKEN.SEMICOLON then
                    break;
                elif context.current_token == Lexical.TOKEN.COMMA then
                    if read_body? then
                        context.error(context.location, "replacing read");
                    elif assign_body? then
                        context.error(context.location, "empty read body must precede write body");                        
                    else
                        progress = true;                        
                        context.next_token();
                        
                        read_body = new Syntax.Trees.Bodies.NULL(context.current.location);
                    fi                    
                else
                    if !fail then
                        context.error(context.location, "unexpected input in indexer");
                    fi

                    fail = true;

                    break;
                fi

                if !progress then
                    Std.error.write_line("no progress in indexer: " + context.current_token_name);
                    return null;
                fi

                expect_semicolon = true;
            od

            if context.in_trait && read_body == null then
                read_body = new Trees.Bodies.NULL(context.location);
            fi

            var result: Trees.Definitions.INDEXER;
            
            if index_argument? then
                result = 
                    new Trees.Definitions.INDEXER(
                        start::context.location, 
                        name, 
                        index_argument, 
                        type_expression, 
                        modifiers, 
                        read_body, 
                        setter_argument_name, 
                        assign_body
                    );
            fi

            if expect_semicolon then
                context.next_token(Lexical.TOKEN.SEMICOLON);
            fi

            return result;
        si
    si
si
