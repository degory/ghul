namespace Syntax.Parsers.Definitions is
    use System;
    
    use Source;

    class ENUM: Base[Trees.Definitions.ENUM] is
        identifier_parser: Parser[Trees.Identifiers.Identifier];
        modifier_list_parser: Parser[Trees.Modifiers.LIST];
        expression_parser: Parser[Trees.Expressions.Expression];

        init(
            identifier_parser: Parser[Trees.Identifiers.Identifier],
            modifier_list_parser: Parser[Trees.Modifiers.LIST],
            expression_parser: Parser[Trees.Expressions.Expression]
        )
        is
            super.init();
            self.identifier_parser = identifier_parser;
            self.modifier_list_parser = modifier_list_parser;
            self.expression_parser = expression_parser;
        si

        parse(context: CONTEXT) -> Trees.Definitions.ENUM is
            context.next_token(Lexical.TOKEN.ENUM);
            var start = context.location;
            var name = identifier_parser.parse(context);

            var modifiers = modifier_list_parser.parse(context);

            var members = new Collections.LIST[Trees.Definitions.ENUM_MEMBER]();

            var expect_si = false;

            if (name? && !name.is_poisoned) || context.current.token == Lexical.TOKEN.IS then
                if context.next_token(Lexical.TOKEN.IS) then
                    expect_si = true;

                    while context.current.token != Lexical.TOKEN.SI do
                        if members.count > 0 then
                            if !context.next_token(Lexical.TOKEN.COMMA) then
                                expect_si = false;
                                break;
                            fi
                        fi

                        var member_name = identifier_parser.parse(context);

                        if member_name? then
                            var member_end = member_name.location;
                            var member_initializer: Trees.Expressions.Expression;
                            if context.current.token == Lexical.TOKEN.ASSIGN then
                                context.next_token();

                                member_initializer = expression_parser.parse(context);

                                if member_initializer.is_poisoned then
                                    expect_si = false;
                                fi

                                member_end = member_initializer.location;
                            fi
                            
                            members.add(new Trees.Definitions.ENUM_MEMBER(member_name.location::member_end, member_name, member_initializer));
                        else
                            expect_si = false;
                            break;
                        fi                        
                    od
                fi
            fi                    

            var result: Trees.Definitions.ENUM;

            if name? then
                result = new Trees.Definitions.ENUM(start::context.location, name, modifiers, members);
            fi
            
            if
                expect_si
            then
                context.next_token(Lexical.TOKEN.SI);
            fi

            return result;
        si
    si
si
