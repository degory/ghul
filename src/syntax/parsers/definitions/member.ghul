namespace Syntax.Parsers.Definitions is
    use IO.Std;

    use Source;
    
    class MEMBER: Base[Trees.Definitions.Definition]  is
        function_parser: Parser[Trees.Definitions.FUNCTION];
        property_parser: Parser[Trees.Definitions.PROPERTY];
        indexer_parser: Parser[Trees.Definitions.INDEXER];
        description: string => "member";

        expected_tokens: Collections.Iterable[Lexical.TOKEN] => property_tokens;

        property_tokens: Collections.List[Lexical.TOKEN];

        init(
            function_parser: Parser[Trees.Definitions.FUNCTION],
            property_parser: Parser[Trees.Definitions.PROPERTY],
            indexer_parser: Parser[Trees.Definitions.INDEXER]
        )
        is
            super.init();
            self.function_parser = function_parser;
            self.property_parser = property_parser;
            self.indexer_parser = indexer_parser;
            property_tokens = new Collections.LIST[Lexical.TOKEN]([Lexical.TOKEN.COLON, Lexical.TOKEN.ASSIGN, Lexical.TOKEN.ARROW_FAT, Lexical.TOKEN.SEMICOLON]);
        si

        parse(context: CONTEXT) -> Trees.Definitions.Definition is
            if context.current.token == Lexical.TOKEN.SQUARE_OPEN then
                return indexer_parser.parse(context);
            fi

            let want_backtrack = true;

            try
                context.speculate();
                context.next_token();

                if property_tokens | .any(t => t == context.current.token) then
                    context.backtrack();
                    want_backtrack = false;
                    return property_parser.parse(context);
                elif 
                    context.current.token == Lexical.TOKEN.SQUARE_OPEN \/
                    context.current.token == Lexical.TOKEN.PAREN_OPEN
                then
                    context.backtrack();
                    want_backtrack = false;
                    return function_parser.parse(context);
                fi

                want_backtrack = false;
                context.commit();
                other_token(context);    
            finally
                if want_backtrack then
                    context.backtrack();
                fi
            yrt
        si
    si
si
