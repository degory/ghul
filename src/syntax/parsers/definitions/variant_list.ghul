namespace Syntax.Parsers.Definitions is
    use Source;
    use Logging;

    class VARIANT_LIST: Base[Trees.Definitions.LIST] is
        variant_parser: Parser[Trees.Definitions.VARIANT];

        init(
            variant_parser: Parser[Trees.Definitions.VARIANT]
        )
        is
            super.init();
            self.variant_parser = variant_parser;
        si

        parse(context: CONTEXT) -> Trees.Definitions.LIST is
            let start = context.location;
            // context.in_classy = true;
            // context.global_indent = start.start_column;

            let should_poison = false;

            /*
            parse a list of typed-union variants using the supplied variant parser

            union_definition ::= "union" identifier type_parameters? modifiers? "is" variant_definition+ "si"
                                                                                     ^ we're here
            */

            try
                let variants = new Collections.LIST[Trees.Definitions.Definition]();

                let start = context.location;
                let end = context.location;

                while context.current_token != Lexical.TOKEN.SI /\ context.current_token != Lexical.TOKEN.END_OF_INPUT do
                    let variant_start = context.location;

                    let variant = variant_parser.parse(context);

                    if variant? then
                        variants.add(variant);
                        end = variant.location;
                    else
                        end = context.location;
                    fi

                    if !variant? \/ variant.is_poisoned then
                        should_poison = true;

                        if variant_start.start_column <= context.member_indent \/ context.current_token != Lexical.TOKEN.IDENTIFIER then
                            // either indent is less than the member indent or we're not looking at an idenfier
                            // either way we've likely fallen off the end of the union definition:

                            if context.current_token == Lexical.TOKEN.SI then
                                context.next_token();
                            else
                                context.next_token(Lexical.TOKEN.SI);
                            fi

                            break;
                        fi
                    fi
                od

                let result = new Trees.Definitions.LIST(
                    start::end,
                    variants
                );
    

                result.poison(should_poison);
                    
                return result;
            finally
                context.in_classy = false;
            yrt
        si

        lookahead_for_body(context: CONTEXT) -> bool is
            let want_backtrack = true;

            let line = context.current.location.start_line;

            let use logger_snapshot = context.logger_speculate_then_backtrack();

            // search on the current line for an 'is'
            while context.current.location.start_line == line /\ context.current.location.start_column >= context.global_indent do
                if context.current.token == Lexical.TOKEN.IS then
                    logger_snapshot.commit();

                    context.next_token();

                    // is on the same line as the start of the class definition means it's likely the block is associated with the
                    // class, and we should parse it as such, even if the first part of the class definition is invalid
                    return true;
                fi

                context.next_token();
            od

            if context.current_token == Lexical.TOKEN.IS /\ context.current.location.start_column >= context.global_indent then
                logger_snapshot.commit();
                context.next_token();

                // again, if the `is` is on the line immediately following the class definition, and it's properly indented, 
                // it's likely the block is associated with the class, and we should parse it as such, even if the first part of
                // the class definition is invalid
                return true;
            fi

            return false;
        si
    si
si
