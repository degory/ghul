namespace Syntax.Parsers.Definitions is
    use Source;

    class NAMESPACE: Base[Trees.Definitions.NAMESPACE] is
        identifier_qualified_parser: Parser[Trees.Identifiers.Identifier];
        definition_list_parser: Parser[Trees.Definitions.LIST];

        init(
            identifier_qualified_parser: Parser[Trees.Identifiers.Identifier],
            definition_list_parser: Parser[Trees.Definitions.LIST]
        )
        is
            super.init();
            self.identifier_qualified_parser = identifier_qualified_parser;
            self.definition_list_parser = definition_list_parser;
        si

        parse(context: CONTEXT) -> Trees.Definitions.NAMESPACE is
            context.next_token(Lexical.TOKEN.NAMESPACE);

            var start = context.location;
            var identifier = identifier_qualified_parser.parse(context);

            if 
                (context.current.token == Lexical.TOKEN.IS || !identifier.is_poisoned) &&
                context.next_token(Lexical.TOKEN.IS)
            then
                var body = definition_list_parser.parse(context);
                var result =
                    new Trees.Definitions.NAMESPACE(
                        start::context.location,
                        identifier,
                        body
                    );

                if !identifier.is_poisoned || context.current.token == Lexical.TOKEN.SI then
                    context.next_token(Lexical.TOKEN.SI);
                fi

                if identifier.is_poisoned then
                    result.poison();
                fi
                
                return result;
            fi
        si
    si
si
