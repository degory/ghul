namespace Syntax.Parsers.Expressions is
    @IF.not.v3() use object = System.Object;
    @IF.not.v3() use string = System.String;
    @IF.not.v3() use Std = System.Console;

    use System;
    
    use Logging;
    use Source;

    enum PRECEDENCE is
        NONE,           // 0
        MIN,            // 1
        UNDEFINED,      // 2
        USER_1,         // 3
        BOOLEAN,        // 4
        USER_2,         // 5
        RELATIONAL,     // 6
        USER_3,         // 7
        RANGE,          // 8
        USER_4,         // 9
        SHIFT,          // 10
        USER_5,         // 11
        BITWISE,        // 12
        USER_6,         // 13
        ADDITION,       // 14
        USER_7,         // 15
        MULTIPLICATION, // 16
        USER_8,         // 17
        MEMBER,         // 18
        PRIMARY         // 19
    si

    class EXPRESSION: Base[Trees.Expressions.Expression] is
        _precedence: Collections.MutableMap[string,PRECEDENCE];
        _real_operation: Collections.MAP[string,string];

        expression_tertiary_parser: Parser[Trees.Expressions.Expression];

        init(
            expression_tertiary_parser: Parser[Trees.Expressions.Expression],
            precedence: Collections.MutableMap[string,PRECEDENCE]
        )
        is
            super.init();
            self.expression_tertiary_parser = expression_tertiary_parser;
            _precedence = precedence;

            _precedence["*"] = PRECEDENCE.MULTIPLICATION;
            _precedence["✕"] = PRECEDENCE.MULTIPLICATION;
            _precedence["×"] = PRECEDENCE.MULTIPLICATION;
            _precedence["/"] = PRECEDENCE.MULTIPLICATION;
            _precedence["%"] = PRECEDENCE.MULTIPLICATION;
            _precedence["÷"] = PRECEDENCE.MULTIPLICATION;
            _precedence["+"] = PRECEDENCE.ADDITION;
            _precedence["-"] = PRECEDENCE.ADDITION;
            _precedence["&"] = PRECEDENCE.BITWISE;
            _precedence["|"] = PRECEDENCE.BITWISE;
            _precedence["¦"] = PRECEDENCE.BITWISE;
            _precedence["^"] = PRECEDENCE.BITWISE;
            _precedence["∩"] = PRECEDENCE.BITWISE;
            _precedence["∪"] = PRECEDENCE.BITWISE;
            _precedence[".."] = PRECEDENCE.RANGE;
            _precedence["::"] = PRECEDENCE.RANGE;
            _precedence["<<"] = PRECEDENCE.SHIFT;
            _precedence[">>"] = PRECEDENCE.SHIFT;
            _precedence["≈"] = PRECEDENCE.RELATIONAL;
            _precedence["≡"] = PRECEDENCE.RELATIONAL;
            _precedence["=="] = PRECEDENCE.RELATIONAL;
            _precedence["!="] = PRECEDENCE.RELATIONAL;
            _precedence["=~"] = PRECEDENCE.RELATIONAL;
            _precedence["!~"] = PRECEDENCE.RELATIONAL;
            _precedence["<"] = PRECEDENCE.RELATIONAL;
            _precedence[">"] = PRECEDENCE.RELATIONAL;
            _precedence[">="] = PRECEDENCE.RELATIONAL;
            _precedence["<="] = PRECEDENCE.RELATIONAL;
            _precedence["&&"] = PRECEDENCE.BOOLEAN;
            _precedence["||"] = PRECEDENCE.BOOLEAN;
            _precedence["/\\"] = PRECEDENCE.BOOLEAN;
            _precedence["\\/"] = PRECEDENCE.BOOLEAN;
            _precedence["∧"] = PRECEDENCE.BOOLEAN;
            _precedence["∨"] = PRECEDENCE.BOOLEAN;

            _real_operation = new Collections.MAP[string,string]();

            _real_operation["!~"] = "=~";
            _real_operation["=~"] = "=~";
            _real_operation["!="] = "==";
            _real_operation["=="] = "==";
            _real_operation["<"] = "<>";
            _real_operation["<="] = "<>";
            _real_operation[">"] = "<>";
            _real_operation[">="] = "<>";
        si

        description: string => "expression";

        precedence(context: CONTEXT) -> PRECEDENCE is
            if context.current.token != Lexical.TOKEN.OPERATOR then
                return PRECEDENCE.NONE;
            fi

            if !_precedence.contains_key(context.current.value_string) then
                context.error(context.current.location, 
                "operator '" + context.current.value_string + "' has unknown precedence");
                return PRECEDENCE.UNDEFINED;
            fi

            return _precedence[context.current.value_string];
        si

        parse(context: CONTEXT) -> Trees.Expressions.Expression is
            try
                return parse(context, expression_tertiary_parser.parse(context), PRECEDENCE.MIN);                                       
            catch e: Exception
                IoC.CONTAINER.instance.logger.exception(context.current.location, e, "parse exception: " + e.message); 

                return new Trees.Expressions.Literals.NONE(context.location);
            yrt
        si

        // precedence climbing expression parser:
        parse(context: CONTEXT, left: Trees.Expressions.Expression, min_precedence: PRECEDENCE) -> Trees.Expressions.Expression is
            do
                var left_precedence = precedence(context);

                if left_precedence < min_precedence then
                    break;
                fi

                let s = left_precedence.to_string();

                let apparent_op = context.current.value_string;

                let real_op = apparent_op;

                if _real_operation.contains_key(apparent_op) then
                    real_op = _real_operation[apparent_op];
                fi
                
                let op = new Trees.Identifiers.Identifier(context.location, real_op);

                context.next_token();

                let right: Trees.Expressions.Expression = expression_tertiary_parser.parse(context);

                assert right? else "parse right failed";

                do
                    var right_precedence = precedence(context);

                    if right_precedence <= left_precedence then
                        break;
                    fi

                    right = parse(context, right, right_precedence);
                od

                left = new Trees.Expressions.BINARY(left.location::right.location, op, apparent_op, left, right);
            od

            return left;
        si
    si
si
