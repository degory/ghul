namespace Syntax.Parsers.Expressions is
    use IO.Std;

    use Source;

    use Logging;

    class PRIMARY: Base[Trees.Expressions.Expression] is
        identifier_parser: Parser[Trees.Identifiers.Identifier];
        type_parser: Parser[Trees.TypeExpressions.TypeExpression];
        expression_parser: Parser[Trees.Expressions.Expression];
        expression_list_parser: Parser[Trees.Expressions.LIST];
        expression_tuple_parser: Parser[Trees.Expressions.TUPLE];
        statement_parser: Parser[Trees.Statements.Statement];

        description: string => "primary expression";

        init(
            identifier_parser: Parser[Trees.Identifiers.Identifier],
            type_parser: Parser[Trees.TypeExpressions.TypeExpression],
            expression_parser: Parser[Trees.Expressions.Expression],
            expression_list_parser: Parser[Trees.Expressions.LIST],
            expression_tuple_parser: Parser[Trees.Expressions.TUPLE],
            statement_parser: Parser[Trees.Statements.Statement]
        )
        is
            super.init();

            self.identifier_parser = identifier_parser;
            self.type_parser = type_parser;
            self.expression_parser = expression_parser;
            self.expression_list_parser = expression_list_parser;
            self.expression_tuple_parser = expression_tuple_parser;
            self.statement_parser = statement_parser;

            add_parsers();
        si

        add_parsers() is
            add_parser(
                (context: CONTEXT) -> Trees.Expressions.Expression is
                    let start = context.location;
                    let identifier = identifier_parser.parse(context);
                    if context.allow_tuple_element /\ !identifier.is_qualified then
                        context.allow_tuple_element = false;
                        let end = identifier.location;
                        let type_expression: Trees.TypeExpressions.TypeExpression;
                        let initializer: Trees.Expressions.Expression;

                        if context.current.token == Lexical.TOKEN.COLON then
                            context.next_token();
                            type_expression = type_parser.parse(context);
                            end = type_expression.location;
                        fi

                        if context.current.token == Lexical.TOKEN.ASSIGN then
                            context.next_token();
                            initializer = expression_parser.parse(context);
                            end = initializer.location;
                        fi

                        if initializer? then
                            if type_expression == null then
                                type_expression = new Trees.TypeExpressions.INFER(context.location);
                            fi
                        fi

                        if type_expression? then
                            return new Trees.Expressions.VARIABLE(start::end, identifier, type_expression, initializer);
                        fi
                    fi

                    return new Trees.Expressions.IDENTIFIER(identifier.location, identifier);
                si, Lexical.TOKEN.IDENTIFIER
            );
            
            add_parser(
                (context: CONTEXT) is
                    let start = context.location;
                    context.next_token();
                    let elements = expression_list_parser.parse(context);
                    let type_expression: Trees.TypeExpressions.TypeExpression;
                    let end = context.location;
                    context.next_token(Lexical.TOKEN.SQUARE_CLOSE);
                    if context.current.token == Lexical.TOKEN.COLON then
                        context.next_token();
                        type_expression = type_parser.parse(context);
                        end = type_expression.location;
                    else
                        type_expression = new Trees.TypeExpressions.INFER(start::end);
                    fi

                    return new Trees.Expressions.SEQUENCE(start::end, elements, type_expression);
                si,
                Lexical.TOKEN.SQUARE_OPEN
            );

            add_parser(
                (context: CONTEXT) is
                    return expression_tuple_parser.parse(context);
                si,
                Lexical.TOKEN.PAREN_OPEN
            );

            add_parser(
                (context: CONTEXT) is
                    let start = context.location;

                    context.next_token(Lexical.TOKEN.NEW);

                    let type_expression = type_parser.parse(context);

                    let arguments: Trees.Expressions.LIST;

                    if context.next_token(Lexical.TOKEN.PAREN_OPEN) then
                        if context.current.token != Lexical.TOKEN.PAREN_CLOSE then
                            arguments = expression_list_parser.parse(context);
                        fi
                        context.next_token(Lexical.TOKEN.PAREN_CLOSE, syntax_error_message);
                    fi

                    if arguments == null then
                        arguments = new Trees.Expressions.LIST(context.location, new Collections.LIST[Trees.Expressions.Expression]());
                    fi

                    return new Trees.Expressions.NEW(start::arguments.location, type_expression, arguments);
                si,
                Lexical.TOKEN.NEW
            );

            add_parser(
                (context: CONTEXT) is
                    let start = context.location;

                    context.next_token(Lexical.TOKEN.CAST);

                    let type_expression = type_parser.parse(context);

                    context.next_token(Lexical.TOKEN.PAREN_OPEN);

                    let value = expression_parser.parse(context);
                    let result = new Trees.Expressions.CAST(start::context.location, type_expression, value);

                    context.next_token(Lexical.TOKEN.PAREN_CLOSE);
                    return result;
                si,
                Lexical.TOKEN.CAST
            );

            add_parser(
                (context: CONTEXT) is
                    let start = context.location;
                    context.next_token(Lexical.TOKEN.ISA);
                    let type_expression = type_parser.parse(context);
                    context.next_token(Lexical.TOKEN.PAREN_OPEN);
                    let value = expression_parser.parse(context);
                    let result = new Trees.Expressions.ISA(start::context.location, type_expression, value);
                    context.next_token(Lexical.TOKEN.PAREN_CLOSE);
                    return result;
                si,
                Lexical.TOKEN.ISA
            );

            add_parser(
                (context: CONTEXT) is
                    let start = context.location;
                    context.next_token(Lexical.TOKEN.TYPEOF);
                    let type_expression = type_parser.parse(context);
                    let result = new Trees.Expressions.TYPEOF(start::context.location, type_expression);
                    return result;
                si,
                Lexical.TOKEN.TYPEOF
            );

            add_parser(
                (context: CONTEXT) is
                    let location = context.location;
                    let value_string = context.current.value_string;
                    context.next_token();
                    return new Trees.Expressions.Literals.INTEGER(location, value_string);
                si,
                Lexical.TOKEN.INT_LITERAL
            );

            add_parser(
                (context: CONTEXT) is
                    let location = context.location;
                    let value_string = context.current.value_string;
                    context.next_token();
                    return new Trees.Expressions.Literals.FLOAT(location, value_string);
                si,
                Lexical.TOKEN.FLOAT_LITERAL
            );

            add_parser(
                (context: CONTEXT) is
                    let location = context.location;
                    let value_string = context.current.value_string;
                    context.next_token();
                    return new Trees.Expressions.Literals.STRING(location, value_string);
                si,
                Lexical.TOKEN.STRING_LITERAL
            );

            add_parser(
                (context: CONTEXT) is
                    let location = context.location;
                    let value_string = context.current.value_string;
                    context.next_token();
                    return new Trees.Expressions.Literals.CHARACTER(location, value_string);
                si,
                Lexical.TOKEN.CHAR_LITERAL
            );

            add_parser(
                (context: CONTEXT) => parse_string_with_interpolations(context),
                Lexical.TOKEN.ENTER_STRING
            );

            add_parser(
                (context: CONTEXT) is
                    let location = context.location;
                    let value_string = context.current.value_string;
                    context.next_token();
                    return new Trees.Expressions.Literals.BOOLEAN(location, value_string);
                si,
                [Lexical.TOKEN.TRUE, Lexical.TOKEN.FALSE]
            );

            add_parser(
                (context: CONTEXT) is
                    let location = context.location;
                    context.next_token();
                    return new Trees.Expressions.NULL(location);
                si,
                Lexical.TOKEN.NULL
            );

            add_parser(
                (context: CONTEXT) is
                    let location = context.location;
                    context.next_token();
                    return new Trees.Expressions.SELF(location);
                si,
                Lexical.TOKEN.SELF
            );

            add_parser(
                (context: CONTEXT) is
                    let location = context.location;
                    context.next_token();
                    return new Trees.Expressions.SUPER(location);
                si, Lexical.TOKEN.SUPER
            );

            add_parser(
                (context: CONTEXT) -> Trees.Expressions.Expression is
                    let statement = statement_parser.parse(context);

                    return new Trees.Expressions.STATEMENT(statement.location, statement);
                si, Lexical.TOKEN.IF
            );
        si

        parse_string_with_interpolations(context: CONTEXT) -> Trees.Expressions.Expression is
            // ENTER_STRING expression (':' FORMAT_STRING)? (CONTINUE_STRING expression (':' FORMAT_STRING)? )* (EXIT_STRING | CANCEL_STRING)
            //            ^ we're here

            let start = context.location;

            let fragments = new Collections.LIST[Trees.Expressions.INTERPOLATION_FRAGMENT]();

            let is_first = true;
            let success = false;
            let line = start.start_line;

            while
                context.current_token != Lexical.TOKEN.EXIT_STRING
            do
                // a newline in the string part will result in a CANCEL_STRING token
                // we should stop parsing the string and return immediately
                // TODO: return the interpolation that we've assembled so far

                if context.current_token == Lexical.TOKEN.CANCEL_STRING then
                    // TODO might want to skip to end of line, as the input could be garbled
                    context.next_token();
                    return new Trees.Expressions.Literals.STRING(start::context.location, "");
                fi

                // we've either just entered a string interpolation, or we've just passed a closing curly bracket
                // either way we're expecting a string fragment

                line = context.location.start_line;

                let success_line = parse_single_interpolated_string_fragment(context, is_first, fragments);
                success = success_line.success;
                line = success_line.line;

                if !success then
                    skip_to_end_of_string_with_interpolations(context, line);
    
                    return new Trees.Expressions.Literals.STRING(start::context.location, "");
                fi
    
                if context.current_token == Lexical.TOKEN.CANCEL_STRING then
                    // TODO might want to skip to end of line, as the input could be garbled
                    context.next_token();
                    return new Trees.Expressions.Literals.STRING(start::context.location, "");
                fi
    
                success_line = parse_single_interpolated_expression(context, fragments);
                success = success_line.success;
                line = success_line.line;

                if !success then
                    skip_to_end_of_string_with_interpolations(context, line);
    
                    return new Trees.Expressions.Literals.STRING(start::context.location, "");
                fi

                is_first = false;
            od

            if context.current_token == Lexical.TOKEN.CANCEL_STRING then
                context.next_token();
            elif context.current_token != Lexical.TOKEN.EXIT_STRING then
                context.error(context.location, "unexpected token in string interpolation");

                if context.location.start_line == start.start_line then
                    skip_to_end_of_string_with_interpolations(context, line);
                fi
            else
                parse_single_interpolated_string_fragment(context, is_first, fragments);
            fi

            let end = context.location;

            let expression_count = 0;
            let should_poison = false;
            let total_fragment_length = 0;

            for e in fragments do
                if e.is_expression then
                    expression_count = expression_count + 1;
                    if e.expression.is_poisoned then
                        should_poison = true;
                    fi
                else
                    let fragment = cast Trees.Expressions.Literals.STRING(e.expression);
                    let fragment_length = fragment.value_string.length;

                    total_fragment_length = total_fragment_length + fragment_length;
                fi
            od
            
            let result = new Trees.Expressions.STRING_INTERPOLATION(start::end, fragments, total_fragment_length, expression_count);

            return result;    
        si

        skip_to_end_of_string_with_interpolations(context: CONTEXT, line: int) is
            let retries = 50;

            while 
                context.current_token != Lexical.TOKEN.EXIT_STRING /\ 
                context.current_token != Lexical.TOKEN.CANCEL_STRING /\ 
                context.location.start_line == line /\
                !context.is_end_of_file /\
                retries > 0
            do
                context.next_token();
                retries = retries - 1;
            od
        si
        
        parse_single_interpolated_string_fragment(
            context: CONTEXT,
            is_first: bool,
            into: Collections.MutableList[Trees.Expressions.INTERPOLATION_FRAGMENT]
        ) -> 
            (success: bool, line: int)
        is
            // ENTER_STRING expression (':' FORMAT_STRING)? (CONTINUE_STRING expression (':' FORMAT_STRING)? )* (EXIT_STRING | CANCEL_STRING)
            // ^ we're here                                 ^ or here                                           ^ or here

            // we've either just entered a string interpolation, or we've just passed a closing curly bracket
            // either way we're expecting a string fragment

            if is_first then                
                if !context.expect_token(Lexical.TOKEN.ENTER_STRING) then
                    return (false, 0);
                fi
            else
                if 
                    context.current_token != Lexical.TOKEN.CONTINUE_STRING /\
                    context.current_token != Lexical.TOKEN.EXIT_STRING
                then
                    context.logger.error(context.location, "syntax error: expected }} but found {context.current_token_name}");

                    return (false, 0);
                fi
            fi

            into.add(
                new Trees.Expressions.INTERPOLATION_FRAGMENT(
                    false, 
                    new Trees.Expressions.Literals.STRING(context.location, context.current_string),
                    null,
                    null
                )
            );

            let line = context.location.start_line;

            context.next_token();

            return (true, line);
        si

        parse_single_interpolated_expression(context: CONTEXT, into: Collections.MutableList[Trees.Expressions.INTERPOLATION_FRAGMENT]) -> (success: bool, line: int) is
            // ENTER_STRING expression (':' FORMAT_STRING)? (CONTINUE_STRING expression (':' FORMAT_STRING)? )* (EXIT_STRING | CANCEL_STRING)
            //              ^ we're here                                     ^ or here

            let start = context.location;

            let expression: Trees.Expressions.Expression;

            if context.current_token != Lexical.TOKEN.CONTINUE_STRING then
                expression = expression_parser.parse(context);
            else
                expression = new Trees.Expressions.Literals.STRING(context.location, "");
                context.logger.error(context.location, "expected an expression");
                context.next_token();
            fi

            if !expression? \/ expression.is_poisoned then
                if 
                    context.current_token != Lexical.TOKEN.COMMA /\
                    context.current_token != Lexical.TOKEN.COLON /\
                    context.current_token != Lexical.TOKEN.CONTINUE_STRING /\
                    context.current_token != Lexical.TOKEN.EXIT_STRING
                then
                    return (false, 0);
                fi
            fi

            let alignment: Trees.Expressions.Expression = null;
            let format: string = null;

            let line = 0;

            if context.current_token == Lexical.TOKEN.COMMA then
                context.next_token();

                alignment = expression_parser.parse(context);

                if !alignment? \/ alignment.is_poisoned then
                    if 
                        context.current_token != Lexical.TOKEN.COLON /\
                        context.current_token != Lexical.TOKEN.CONTINUE_STRING /\
                        context.current_token != Lexical.TOKEN.EXIT_STRING
                    then
                        return (false, 0);
                    fi
                fi

                line = alignment.location.end_line;
            fi

            if context.current_token == Lexical.TOKEN.COLON then
                context.expect_format_specifier();

                context.next_token();

                if context.expect_token(Lexical.TOKEN.FORMAT_STRING) then
                    format = context.current_string;
                    line = context.location.end_line;

                    context.next_token();
                fi
            fi

            into.add(new Trees.Expressions.INTERPOLATION_FRAGMENT(true, expression, alignment, format));

            return (true, line);
        si

        other_token(context: CONTEXT) -> Trees.Expressions.Expression is
            super.other_token(context);

            let result = new Trees.Expressions.Literals.NONE(context.location);

            result.poison();

            return result;
        si        
    si
si
