namespace Syntax.Parsers.Expressions is
    use IO.Std;

    use Source;

    use Logging;

    class PRIMARY: Base[Trees.Expressions.Expression] is
        _literal_interpolation_fragment_tokens: Collections.LIST[Lexical.TOKEN];

        identifier_parser: Parser[Trees.Identifiers.Identifier];
        type_parser: Parser[Trees.TypeExpressions.TypeExpression];
        expression_parser: Parser[Trees.Expressions.Expression];
        expression_list_parser: Parser[Trees.Expressions.LIST];
        expression_tuple_parser: Parser[Trees.Expressions.TUPLE];
        statement_parser: Parser[Trees.Statements.Statement];

        description: string => "primary expression";

        init(
            identifier_parser: Parser[Trees.Identifiers.Identifier],
            type_parser: Parser[Trees.TypeExpressions.TypeExpression],
            expression_parser: Parser[Trees.Expressions.Expression],
            expression_list_parser: Parser[Trees.Expressions.LIST],
            expression_tuple_parser: Parser[Trees.Expressions.TUPLE],
            statement_parser: Parser[Trees.Statements.Statement]
        )
        is
            super.init();

            self.identifier_parser = identifier_parser;
            self.type_parser = type_parser;
            self.expression_parser = expression_parser;
            self.expression_list_parser = expression_list_parser;
            self.expression_tuple_parser = expression_tuple_parser;
            self.statement_parser = statement_parser;

            _literal_interpolation_fragment_tokens = new Collections.LIST[Lexical.TOKEN]([Lexical.TOKEN.ENTER_STRING, Lexical.TOKEN.CONTINUE_STRING, Lexical.TOKEN.EXIT_STRING]);

            add_parsers();
        si

        add_parsers() is
            add_parser(
                (context: CONTEXT) -> Trees.Expressions.Expression is
                    let start = context.location;
                    let identifier = identifier_parser.parse(context);
                    if context.allow_tuple_element /\ !identifier.is_qualified then
                        context.allow_tuple_element = false;
                        let end = identifier.location;
                        let type_expression: Trees.TypeExpressions.TypeExpression;
                        let initializer: Trees.Expressions.Expression;

                        if context.current.token == Lexical.TOKEN.COLON then
                            context.next_token();
                            type_expression = type_parser.parse(context);
                            end = type_expression.location;
                        fi

                        if context.current.token == Lexical.TOKEN.ASSIGN then
                            context.next_token();
                            initializer = expression_parser.parse(context);
                            end = initializer.location;
                        fi

                        if initializer? then
                            if type_expression == null then
                                type_expression = new Trees.TypeExpressions.INFER(context.location);
                            fi
                        fi

                        if type_expression? then
                            return new Trees.Expressions.VARIABLE(start::end, identifier, type_expression, initializer);
                        fi
                    fi

                    return new Trees.Expressions.IDENTIFIER(identifier.location, identifier);
                si, Lexical.TOKEN.IDENTIFIER
            );
            
            add_parser(
                (context: CONTEXT) is
                    let start = context.location;
                    context.next_token();
                    let elements = expression_list_parser.parse(context);
                    let type_expression: Trees.TypeExpressions.TypeExpression;
                    let end = context.location;
                    context.next_token(Lexical.TOKEN.SQUARE_CLOSE);
                    if context.current.token == Lexical.TOKEN.COLON then
                        context.next_token();
                        type_expression = type_parser.parse(context);
                        end = type_expression.location;
                    else
                        type_expression = new Trees.TypeExpressions.INFER(start::end);
                    fi

                    return new Trees.Expressions.SEQUENCE(start::end, elements, type_expression);
                si,
                Lexical.TOKEN.SQUARE_OPEN
            );

            add_parser(
                (context: CONTEXT) is
                    return expression_tuple_parser.parse(context);
                si,
                Lexical.TOKEN.PAREN_OPEN
            );

            add_parser(
                (context: CONTEXT) is
                    let start = context.location;

                    context.next_token(Lexical.TOKEN.NEW);

                    let type_expression = type_parser.parse(context);

                    let arguments: Trees.Expressions.LIST;

                    if context.next_token(Lexical.TOKEN.PAREN_OPEN) then
                        if context.current.token != Lexical.TOKEN.PAREN_CLOSE then
                            arguments = expression_list_parser.parse(context);
                        fi
                        context.next_token(Lexical.TOKEN.PAREN_CLOSE, syntax_error_message);
                    fi

                    if arguments == null then
                        arguments = new Trees.Expressions.LIST(context.location, new Collections.LIST[Trees.Expressions.Expression]());
                    fi

                    return new Trees.Expressions.NEW(start::arguments.location, type_expression, arguments);
                si,
                Lexical.TOKEN.NEW
            );

            add_parser(
                (context: CONTEXT) is
                    let start = context.location;

                    context.next_token(Lexical.TOKEN.CAST);

                    let type_expression = type_parser.parse(context);

                    context.next_token(Lexical.TOKEN.PAREN_OPEN);

                    let value = expression_parser.parse(context);
                    let result = new Trees.Expressions.CAST(start::context.location, type_expression, value);

                    context.next_token(Lexical.TOKEN.PAREN_CLOSE);
                    return result;
                si,
                Lexical.TOKEN.CAST
            );

            add_parser(
                (context: CONTEXT) is
                    let start = context.location;
                    context.next_token(Lexical.TOKEN.ISA);
                    let type_expression = type_parser.parse(context);
                    context.next_token(Lexical.TOKEN.PAREN_OPEN);
                    let value = expression_parser.parse(context);
                    let result = new Trees.Expressions.ISA(start::context.location, type_expression, value);
                    context.next_token(Lexical.TOKEN.PAREN_CLOSE);
                    return result;
                si,
                Lexical.TOKEN.ISA
            );

            add_parser(
                (context: CONTEXT) is
                    let start = context.location;
                    context.next_token(Lexical.TOKEN.TYPEOF);
                    let type_expression = type_parser.parse(context);
                    let result = new Trees.Expressions.TYPEOF(start::context.location, type_expression);
                    return result;
                si,
                Lexical.TOKEN.TYPEOF
            );

            add_parser(
                (context: CONTEXT) is
                    let location = context.location;
                    let value_string = context.current.value_string;
                    context.next_token();
                    return new Trees.Expressions.Literals.INTEGER(location, value_string);
                si,
                Lexical.TOKEN.INT_LITERAL
            );

            add_parser(
                (context: CONTEXT) is
                    let location = context.location;
                    let value_string = context.current.value_string;
                    context.next_token();
                    return new Trees.Expressions.Literals.FLOAT(location, value_string);
                si,
                Lexical.TOKEN.FLOAT_LITERAL
            );

            add_parser(
                (context: CONTEXT) is
                    let location = context.location;
                    let value_string = context.current.value_string;
                    context.next_token();
                    return new Trees.Expressions.Literals.STRING(location, value_string);
                si,
                Lexical.TOKEN.STRING_LITERAL
            );

            add_parser(
                (context: CONTEXT) is
                    let location = context.location;
                    let value_string = context.current.value_string;
                    context.next_token();
                    return new Trees.Expressions.Literals.CHARACTER(location, value_string);
                si,
                Lexical.TOKEN.CHAR_LITERAL
            );

            add_parser(
                (context: CONTEXT) => parse_string_with_interpolations(context),
                Lexical.TOKEN.ENTER_STRING
            );

            add_parser(
                (context: CONTEXT) is
                    let location = context.location;
                    let value_string = context.current.value_string;
                    context.next_token();
                    return new Trees.Expressions.Literals.BOOLEAN(location, value_string);
                si,
                [Lexical.TOKEN.TRUE, Lexical.TOKEN.FALSE]
            );

            add_parser(
                (context: CONTEXT) is
                    let location = context.location;
                    context.next_token();
                    return new Trees.Expressions.NULL(location);
                si,
                Lexical.TOKEN.NULL
            );

            add_parser(
                (context: CONTEXT) is
                    let location = context.location;
                    context.next_token();
                    return new Trees.Expressions.SELF(location);
                si,
                Lexical.TOKEN.SELF
            );

            add_parser(
                (context: CONTEXT) is
                    let location = context.location;
                    context.next_token();
                    return new Trees.Expressions.SUPER(location);
                si, Lexical.TOKEN.SUPER
            );

            add_parser(
                (context: CONTEXT) -> Trees.Expressions.Expression is
                    let statement = statement_parser.parse(context);

                    return new Trees.Expressions.STATEMENT(statement.location, statement);
                si, Lexical.TOKEN.IF
            );
        si

        parse_string_with_interpolations(context: CONTEXT) -> Trees.Expressions.Expression is
            debug_enter();

            try
                debug(">> string interpolation...");

                // ENTER_STRING expression (':' FORMAT_STRING)? (CONTINUE_STRING expression (':' FORMAT_STRING)? )* (EXIT_STRING | CANCEL_STRING)
                //            ^ we're here
    
                let start = context.location;
    
                let fragments = new Collections.LIST[Trees.Expressions.INTERPOLATION_FRAGMENT]();
    
                while
                    context.current_token != Lexical.TOKEN.EXIT_STRING
                do
                    debug("enter loop, token is {context.current.to_short_string()}");
    
                    if context.current_token == Lexical.TOKEN.CANCEL_STRING then
                        debug("cancel string");
    
                        // TODO might want to skip to end of line, as the input could be garbled
                        context.next_token();
                        return new Trees.Expressions.Literals.STRING(start::context.location, "");
                    fi
    
                    debug("parse single interpolated string fragment...");
    
                    if !parse_single_interpolated_string_fragment(context, fragments) then
                        debug("failed to parse single interpolated string fragment");
                        skip_to_end_of_string_with_interpolations(context);
        
                        return new Trees.Expressions.Literals.STRING(start::context.location, "");
                    fi
    
                    debug("after literal fragment, token is {context.current_token}");
    
                    if context.current_token == Lexical.TOKEN.CANCEL_STRING then
                        debug("cancel string");
                        // TODO might want to skip to end of line, as the input could be garbled
                        context.next_token();
                        return new Trees.Expressions.Literals.STRING(start::context.location, "");
                    fi
    
                    debug("parse single interpolated expression...");
        
                    if !parse_single_interpolated_expression(context, fragments) then
                        debug("failed to parse single interpolated expression");
                        skip_to_end_of_string_with_interpolations(context);
        
                        return new Trees.Expressions.Literals.STRING(start::context.location, "");
                    fi
                od
    
                debug("after loop");
    
                if context.current_token == Lexical.TOKEN.CANCEL_STRING then
                    debug("cancel string");
                    context.next_token();
                elif context.current_token != Lexical.TOKEN.EXIT_STRING then
                    debug("unexpected token in string interpolation {context.current.to_short_string()}");
    
                    context.error(context.location, "unexpected token in string interpolation");
    
                    if context.location.start_line == start.start_line then
                        skip_to_end_of_string_with_interpolations(context);
                    fi
                else
                    debug("read last fragment");
                    parse_single_interpolated_string_fragment(context, fragments);
                fi
    
                debug("read everything, creating string interpolation");
    
                let end = context.location;
    
                let expression_count = 0;
                let should_poison = false;
                let total_fragment_length = 0;
    
                for e in fragments do
                    if e.is_expression then
                        expression_count = expression_count + 1;
                        if e.expression.is_poisoned then
                            should_poison = true;
                        fi
                    else
                        let fragment = cast Trees.Expressions.Literals.STRING(e.expression);
                        let fragment_length = fragment.value_string.length;
    
                        total_fragment_length = total_fragment_length + fragment_length;
                    fi
                od
                
                let result = new Trees.Expressions.STRING_INTERPOLATION(start::end, fragments, total_fragment_length, expression_count);
    
                return result;
    
            finally
                debug("<< string interpolation...");
                debug_exit();                
            yrt
        si

        skip_to_end_of_string_with_interpolations(context: CONTEXT) is
            let current_line = context.location.start_line;

            while 
                context.current_token != Lexical.TOKEN.EXIT_STRING /\ 
                context.current_token != Lexical.TOKEN.CANCEL_STRING /\ 
                context.location.start_line == current_line
            do
                context.next_token();
            od
        si
        
        parse_single_interpolated_string_fragment(context: CONTEXT, into: Collections.MutableList[Trees.Expressions.INTERPOLATION_FRAGMENT]) -> bool is
            // ENTER_STRING expression (':' FORMAT_STRING)? (CONTINUE_STRING expression (':' FORMAT_STRING)? )* (EXIT_STRING | CANCEL_STRING)
            // ^ we're here                                 ^ or here                                           ^ or here

            if !_literal_interpolation_fragment_tokens.contains(context.current_token) then
                context.error(context.location, "expected string interpolation start");

                return false;
            fi

            into.add(
                new Trees.Expressions.INTERPOLATION_FRAGMENT(
                    false, 
                    new Trees.Expressions.Literals.STRING(context.location, context.current_string),
                    null,
                    null
                )
            );

            context.next_token();

            return true;
        si

        parse_single_interpolated_expression(context: CONTEXT, into: Collections.MutableList[Trees.Expressions.INTERPOLATION_FRAGMENT]) -> bool is
            // ENTER_STRING expression (':' FORMAT_STRING)? (CONTINUE_STRING expression (':' FORMAT_STRING)? )* (EXIT_STRING | CANCEL_STRING)
            //              ^ we're here                                     ^ or here

            try
                debug_enter();

                debug(">>parse single interpolated expression...");
    
                let start = context.location;
                
                debug("parse expression...");

                let expression: Trees.Expressions.Expression;

                if context.current_token != Lexical.TOKEN.CONTINUE_STRING then
                    expression = expression_parser.parse(context);
                else
                    expression = new Trees.Expressions.Literals.STRING(context.location, "");
                    context.logger.error(context.location, "expected an expression");
                    context.next_token();
                fi
    
                if !expression? \/ expression.is_poisoned then
                    debug("failed to parse expression");
                    return false;
                fi
    
                let alignment: Trees.Expressions.Expression = null;
                let format: string = null;
    
                if context.current_token == Lexical.TOKEN.COMMA then
                    debug("parse alignment...");

                    context.next_token();
    
                    alignment = expression_parser.parse(context);
                else
                    debug("no alignment");
                fi
    
                if context.current_token == Lexical.TOKEN.COLON then
                    debug("parse format...");

                    context.expect_format_specifier();
    
                    context.next_token();
    
                    if context.expect_token(Lexical.TOKEN.FORMAT_STRING) then
                        debug("format is {context.current_string}");

                        format = context.current_string;

                        context.next_token();
                    else
                        debug("no format specifier found");
                    fi
                else
                    debug("no format");
                fi
    
                debug("add expression to interpolation...");

                into.add(new Trees.Expressions.INTERPOLATION_FRAGMENT(true, expression, alignment, format));
    
                return true;
                    
            finally
                debug("<<parse single interpolated expression...");
    
                debug_exit();    
            yrt
            
        si

        other_token(context: CONTEXT) -> Trees.Expressions.Expression is
            super.other_token(context);

            let result = new Trees.Expressions.Literals.NONE(context.location);

            result.poison();

            return result;
        si        
    si
si
