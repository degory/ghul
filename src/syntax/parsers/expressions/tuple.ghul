namespace Syntax.Parsers.Expressions is
    use IO.Std;

    use Source;
    
    class TUPLE: Base[Trees.Expressions.TUPLE]  is
        expression_list_parser: Parser[Trees.Expressions.LIST];
        description: string => "tuple";

        init(expression_list_parser: Parser[Trees.Expressions.LIST]) is
            super.init();

            self.expression_list_parser = expression_list_parser;
        si

        parse(context: CONTEXT) -> Trees.Expressions.TUPLE is
            let start = context.location;

            if context.next_token(Lexical.TOKEN.PAREN_OPEN, syntax_error_message) then
                let expressions: Trees.Expressions.LIST;

                if context.current.token != Lexical.TOKEN.PAREN_CLOSE then
                    expressions = expression_list_parser.parse(context);
                else
                    expressions = new Trees.Expressions.LIST(context.location, new Collections.LIST[Trees.Expressions.Expression]());
                fi

                expressions.rewrite_as_tuple_elements();

                context.next_token(Lexical.TOKEN.PAREN_CLOSE, syntax_error_message);
                
                return new Trees.Expressions.TUPLE(start::context.location, expressions, false);
            fi
        si
    si
si
