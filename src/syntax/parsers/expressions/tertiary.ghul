namespace Syntax.Parsers.Expressions is
    use IO.Std;

    
    use Source;

    class TERTIARY: Base[Trees.Expressions.Expression] is
        expression_secondary_parser: Parser[Trees.Expressions.Expression];
        description: string => "tertiary expression";
        
        init(
            expression_secondary_parser: Parser[Trees.Expressions.Expression]
        )
        is
            super.init();

            self.expression_secondary_parser = expression_secondary_parser;
        si

        parse(context: CONTEXT) -> Trees.Expressions.Expression =>
            if context.current.token == Lexical.TOKEN.OPERATOR then                    
                let name = new Trees.Identifiers.Identifier(context.location, context.current_string);
                context.next_token();
                let right = parse(context);

                new Trees.Expressions.UNARY(name.location::right.location, name, right); 
            else
                expression_secondary_parser.parse(context);
            fi;
    si
si
