namespace Syntax.Parsers.Expressions is
    use IO.Std;

    use Source;
    use Logging;

    class SECONDARY: Base[Trees.Expressions.Expression] is
        identifier_parser: Parser[Trees.Identifiers.Identifier];
        type_parser: Parser[Trees.TypeExpressions.TypeExpression];
        type_list_parser: Parser[Trees.TypeExpressions.LIST];
        expression_parser: Parser[Trees.Expressions.Expression];
        expression_primary_parser: Parser[Trees.Expressions.Expression];
        expression_list_parser: Parser[Trees.Expressions.LIST];
        body_parser: Parser[Trees.Bodies.Body];
        description: string => "secondary expression";
        
        init(
            identifier_parser: Parser[Trees.Identifiers.Identifier],
            type_parser: Parser[Trees.TypeExpressions.TypeExpression],
            type_list_parser: Parser[Trees.TypeExpressions.LIST],
            expression_parser: Parser[Trees.Expressions.Expression],
            expression_primary_parser: Parser[Trees.Expressions.Expression],
            expression_list_parser: Parser[Trees.Expressions.LIST],
            body_parser: Parser[Trees.Bodies.Body]
        )
        is
            super.init();

            self.identifier_parser = identifier_parser;
            self.type_parser = type_parser;
            self.type_list_parser = type_list_parser;
            self.expression_parser = expression_parser;
            self.expression_primary_parser = expression_primary_parser;
            self.expression_list_parser = expression_list_parser;
            self.body_parser = body_parser;
        si

        parse(context: CONTEXT) -> Trees.Expressions.Expression is
            let commit = true;

            try
                debug_enter();
                debug(">> parse secondary {context.current.to_short_string()}");

                // debug_enter();

                context.speculate();
                commit = true;
    
                let start = context.location;
                let result: Trees.Expressions.Expression = expression_primary_parser.parse(context);

                debug("SE initial result: {result}");
    
                do
                    debug("SE loop: {context.current.to_short_string()}");

                    case context.current.token
                    when Lexical.TOKEN.PAREN_OPEN:
                        debug("SE trying to convert {result} to a function call...");
                        context.next_token();
                        let arguments: Trees.Expressions.LIST;
                        if context.current.token != Lexical.TOKEN.PAREN_CLOSE then
                            arguments = expression_list_parser.parse(context);
                        else
                            arguments = new Trees.Expressions.LIST(context.location, new Collections.LIST[Trees.Expressions.Expression]());
                        fi
                        result = new Trees.Expressions.CALL(start::context.location, result, arguments);
                        context.next_token(Lexical.TOKEN.PAREN_CLOSE, syntax_error_message);
                        debug("SE secondary function call result: {result}");
    
                    when Lexical.TOKEN.SQUARE_OPEN:
                        debug("SE trying to convert {result} to an index expression...");
                        context.next_token();
                        let index = expression_parser.parse(context);
                        result = new Trees.Expressions.INDEX(start::context.location, result, index);
                        context.next_token(Lexical.TOKEN.SQUARE_CLOSE, syntax_error_message);
                        debug("SE secondary index expression result: {result}");                        
    
                    when Lexical.TOKEN.DOT:
                        debug("SE trying to convert {result} to a member expression...");

                        let completion_target_start = context.location;
    
                        context.next_token();
    
                        if
                            context.current.token == Lexical.TOKEN.IDENTIFIER
                            // \/ context.current.token == Lexical.TOKEN.OPERATOR
                        then
                            let member = identifier_parser.parse(context);
                            result = new Trees.Expressions.MEMBER(start::member.location, result, member, completion_target_start::member.location);
                        else
                            context.expect_token(Lexical.TOKEN.IDENTIFIER);                        
                            result = new Trees.Expressions.MEMBER(start..context.location, result, null, completion_target_start::context.location);
                        fi

                        debug("SE member expression result: {result}");
    
                    when Lexical.TOKEN.ARROW_THIN, Lexical.TOKEN.ARROW_FAT, Lexical.TOKEN.IS:
                        debug("SE trying to convert {result} to a function literal...");

                        // we could be in a global function or in a method. If the left part looks like it could be a function or method definition
                        // then it's an error and we need to recover. 
    
                        // we'll need a heuristic to try to decide if the user is trying to define a nested function or if they've missed off a closing `si`
                        // and actually this is a method definition (if we're in a classy context) or a global function definition (if we're not in a classy context)
    
                        let is_nested_function_definition = false;
    
                        if result.could_be_nested_function_definition then
                            if context.in_member then
                                if result.location.start_column > context.member_indent then
                                    // probably an attempt at nesting a named function definition
                                    is_nested_function_definition = true;
                                elif 
                                    result.location.start_column <= context.member_indent /\
                                    result.location.start_column > context.global_indent    
                                then
                                    // probably a missing `si` in a preceding member definition
                                    context.error(result.location, "expected 'si' after member definition");
    
                                    commit = false;
                                    debug("SE about to throw, should backtrack...");

                                    throw new UNWIND_TO_MEMBER_EXCEPTION(UNWIND_TARGET.MEMBER);

                                    Logging.debug("SE after throw, should not get here...");
                                fi
                            elif context.in_classy then
                                // not clear how we might have ended up here
                                commit = false;
                                debug("SE about to throw, should backtrack...");

                                throw new UNWIND_TO_GLOBAL_EXCEPTION(UNWIND_TARGET.GLOBAL);
                            fi
                        fi

                        // it's unlikely to be new member or new global function definition, so we should
                        // parse it as a function literal, even if it has a name or is otherwise garbled.
                        // In particular, if has a block body delimited with with is / si, then we want to
                        // consume that block, otherwise our view of the block structure will get out of sync
                        // and we'll think we've let the enclosing function or method when we reach the closing
                        // `si` of the function literal
    
                        let should_poison = false;
                        
                        if result.could_be_nested_function_definition then
                            should_poison = true;
                            context.error(result.location, "nested function definition");
                        elif !result.could_be_formal_argument then
                            should_poison = true;
                            context.error(result.location, "expected function literal formal arguments");
                        fi

                        Logging.debug("{result} could be formal argument: {result.could_be_formal_argument}, is nested function definition: {is_nested_function_definition}");
        
                        let type_expression: Trees.TypeExpressions.TypeExpression;
                        let arguments: Trees.Expressions.LIST;

                        if context.current.token == Lexical.TOKEN.ARROW_THIN then
                            context.next_token();
                            type_expression = type_parser.parse(context);
                            type_expression.check_is_not_reference(context.logger, "function cannot return a reference");
                        else
                            type_expression = new Trees.TypeExpressions.INFER(start::result.location);
                        fi

                        if context.expect_token([Lexical.TOKEN.ARROW_FAT, Lexical.TOKEN.IS]) then
                            Logging.debug("SE trying to convert {result} to a function arguments...");
                            if should_poison then
                                // error already reported
                                arguments = new Trees.Expressions.LIST(start::result.location, new Collections.LIST[Trees.Expressions.Expression]());                                
                            elif isa Trees.Expressions.TUPLE(result) then
                                arguments = cast Trees.Expressions.TUPLE(result).elements;
                                arguments.rewrite_as_variables();
                            else
                                let elements = new Collections.LIST[Trees.Expressions.Expression]();
                                elements.add(result);
                                arguments = new Trees.Expressions.LIST(start::result.location, elements);
                            fi
                            let body = body_parser.parse(context);
                            result = new Trees.Expressions.FUNCTION(start::body.location, arguments, type_expression, body);

                            if should_poison then
                                result.poison();
                            fi

                            return result;
                        else
                            // TODO: is this possible?
                            return new Trees.Expressions.Literals.NONE(start::context.location);
                        fi
    
                    when Lexical.TOKEN.QUESTION:
                        debug("SE trying to convert {result} to a has value expression...");

                        result = new Trees.Expressions.HAS_VALUE(start::context.location, result);
                        context.next_token();

                        debug("SE has value expression result: {result}");
    
                    when Lexical.TOKEN.REF:
                        debug("SE trying to convert {result} to a reference expression...");
                        result = new Trees.Expressions.REFERENCE(start::context.location, result);
                        context.next_token();

                        debug("SE reference expression result: {result}");
    
                    when Lexical.TOKEN.OPERATOR:
                        if context.current_string =~ "|" then
                            debug("SE trying to convert {result} to a pipe expression...");

                            let location = context.location;
    
                            let pipes = new Trees.Identifiers.Identifier(location, "Pipes");
                            let pipe = new Trees.Identifiers.QUALIFIED(location, pipes, "Factory", location, location);
                            let from = new Trees.Identifiers.QUALIFIED(location, pipe, "from", location, location);
    
                            let function = new Trees.Expressions.IDENTIFIER(location, from);
    
                            let arguments = new Trees.Expressions.LIST(
                                result.location,
                                [result]
                            );
    
                            result = 
                                new Trees.Expressions.CALL(
                                    start::location,
                                    function,
                                    arguments
                                );
                                
                            context.next_token();                            
                        else
                            debug("SE operator left {result}");
                            return result;
                        fi
    
                    when Lexical.TOKEN.SQUARE_OPEN_TICK:
                        debug("SE trying to convert {result} to an explicit specialization...");

                        context.next_token();
                        
                        let types = type_list_parser.parse(context);
    
                        result =
                            new Trees.Expressions.EXPLICIT_SPECIALIZATION(
                                start::context.location,
                                result,
                                types
                            );
    
                        context.next_token(Lexical.TOKEN.SQUARE_CLOSE);
                        debug("SE explicit specialization result: {result}");

                    default
                        debug("SE complete {result}");
                        return result;
                    esac
                od
    
            finally
                if commit then
                    debug("SE committing...");
                    context.commit();
                else
                    debug("SE backtracking...");
                    context.backtrack();
                fi

                debug_exit();

                debug("<< parse secondary");
            yrt
        si
    si
si
