namespace Syntax.Parsers.Expressions is
    @IF.not.v3() use object = System.Object;
    @IF.not.v3() use string = System.String;
    @IF.not.v3() use Std = System.Console;

    use System;
    
    use Source;

    class LIST: Base[Trees.Expressions.LIST] is
        expression_parser: Parser[Trees.Expressions.Expression];

        init(expression_parser: Parser[Trees.Expressions.Expression]) is
            super.init();

            self.expression_parser = expression_parser;
        si

        description: string => "expression list";

        parse(context: CONTEXT) -> Trees.Expressions.LIST is
            var start = context.location;
            var expressions = new Collections.LIST[Trees.Expressions.Expression]();

            do
                context.allow_tuple_element = true;
                var expression = expression_parser.parse(context);
                context.allow_tuple_element = false;
                expressions.add(expression);

                if context.current.token != Lexical.TOKEN.COMMA then
                    return new Trees.Expressions.LIST(start::expression.location, expressions);
                fi

                context.next_token();
            od
        si
    si
si
