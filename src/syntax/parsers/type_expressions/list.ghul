namespace Syntax.Parsers.TypeExpressions is
    
    class LIST: Base[Trees.TypeExpressions.LIST] is
        type_parser: Parser[Trees.TypeExpressions.TypeExpression];

        init(type_parser: Parser[Trees.TypeExpressions.TypeExpression]) is
            super.init();

            self.type_parser = type_parser;
        si

        parse(context: CONTEXT) -> Trees.TypeExpressions.LIST is
            let elements = new Collections.LIST[Trees.TypeExpressions.TypeExpression]();
            let start = context.location;
            let end = context.location;

            do
                let element = type_parser.parse(context);

                if element == null then
                    context.error(context.location, "bad type");
                    break;
                fi

                elements.add(element);
                end = element.location;

                if context.is_end_of_file \/ context.current.token != Lexical.TOKEN.COMMA then
                    if
                        context.location.start_line == element.location.start_line /\
                        context.current_token == Lexical.TOKEN.IDENTIFIER
                    then
                        context.expect_token(Lexical.TOKEN.COMMA);
                    else
                        break;
                    fi
                fi

                context.next_token();
            od

            return new Trees.TypeExpressions.LIST(start::end, elements);
        si
    si
si
