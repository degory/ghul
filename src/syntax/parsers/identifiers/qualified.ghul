namespace Syntax.Parsers.Identifiers is
    use IO.Std;


    use Source;

    class QUALIFIED: Base[Trees.Identifiers.Identifier] is
        description: string => "qualified identifier";

        init() is
            super.init();
        si

        parse(context: CONTEXT) -> Trees.Identifiers.Identifier is
            var start = context.location;
            
            if context.expect_token(Lexical.TOKEN.IDENTIFIER, syntax_error_message) then
                var name = context.current.value_string;
                var result = new Trees.Identifiers.Identifier(context.location, name);

                context.next_token();

                while context.current.token == Lexical.TOKEN.DOT do
                    let completion_target_start = context.location;
                
                    context.next_token();
                    if context.expect_token(Lexical.TOKEN.IDENTIFIER, syntax_error_message) then
                        result = new Trees.Identifiers.QUALIFIED(start::context.location, result, context.current.value_string, completion_target_start::context.location);

                        context.next_token();
                    else
                        result = new Trees.Identifiers.QUALIFIED(start::context.location, result, null, completion_target_start::context.location);

                        result.poison();

                        return result;
                    fi
                od

                return result;
            fi
        si
    si
si
