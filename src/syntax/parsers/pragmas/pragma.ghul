namespace Syntax.Parsers.Pragmas is
    
    use Source;

    use Logging;

    class PRAGMA: Base[Trees.Pragmas.PRAGMA] is
        qualified_identifier_parser: Parser[Trees.Identifiers.Identifier];
        expression_list_parser: Parser[Trees.Expressions.LIST];

        init(
            qualified_identifier_parser: Parser[Trees.Identifiers.Identifier],
            expression_list_parser: Parser[Trees.Expressions.LIST]
        ) is
            super.init();

            self.qualified_identifier_parser = qualified_identifier_parser;
            self.expression_list_parser = expression_list_parser;
        si

        parse(context: CONTEXT) -> Trees.Pragmas.PRAGMA is
            let fail = false;
            let expect_semicolon = false;
            
            let start = context.location;

            if !context.next_token(Lexical.TOKEN.AT) then
                return null;
            fi

            let name = qualified_identifier_parser.parse(context);

            if !name? then
                return null;
            fi

            if context.next_token(Lexical.TOKEN.PAREN_OPEN) then
                let arguments: Trees.Expressions.LIST;
                
                if context.current.token != Lexical.TOKEN.PAREN_CLOSE then
                    arguments = expression_list_parser.parse(context);
                fi

                context.next_token(Lexical.TOKEN.PAREN_CLOSE);
                
                return new Trees.Pragmas.PRAGMA(start::context.location, name, arguments);
            fi

            // FIXME: should this be an error?
            return new Trees.Pragmas.PRAGMA(start::context.location, name, new Trees.Expressions.LIST(context.location, new Collections.LIST[Trees.Expressions.Expression]()));
        si
    si
si
