namespace Syntax.Parsers is
    use System.Exception;
    
    trait Parser[T] is
        parse(context: CONTEXT) -> T;
    si

    class Base[T]: Parser[T] is
        _expected_tokens: Collections.MutableList[Lexical.TOKEN];
        parsers: Collections.MAP[Lexical.TOKEN, (CONTEXT) -> T];

        expected_tokens: Collections.Iterable[Lexical.TOKEN] is
            if _expected_tokens == null then
                populate_expected_tokens();
            fi
            return _expected_tokens;
        si

        description: string => null;

        syntax_error_message: string is
            let d = description;
            if d? then
                return "in {d}";
            else
                return "syntax error";
            fi
        si

        init() is
            parsers = new Collections.MAP[Lexical.TOKEN, (CONTEXT) -> T]();
        si

        add_parser(p: (CONTEXT) -> T, token: Lexical.TOKEN) is
            if parsers.contains_key(token) then
                throw new Exception("{token} already has a parser ({p})");
            fi

            parsers[token] = p;
        si

        add_parser(p: (CONTEXT) -> T, tokens: Collections.Iterable[Lexical.TOKEN]) is
            for t in tokens do
                add_parser(p, t);
            od
        si

        parse(context: CONTEXT) -> T is
            let token = context.current.token;

            if parsers.contains_key(token) then
                let p = parsers[token];

                let result = p(context);

                return result;
            else
                let result = other_token(context);

                return result;
            fi
        si

        other_token(context: CONTEXT) -> T is
            if context.current.token != Lexical.TOKEN.CANCEL_STRING then
                context.error(context.location, 
                    "{syntax_error_message}: expected {Lexical.TOKEN_NAMES[expected_tokens]} but found {context.current_token_name}"
                );
            fi
        si

        populate_expected_tokens() private is
            let et = new Collections.LIST[Lexical.TOKEN]();

            for k in parsers.keys do
                et.add(k);
            od

            assert et.count > 0 else "should have at least one expected token";

            _expected_tokens = et;
        si
    si
si
