namespace Syntax.Parsers.Bodies is
    use IO.Std;


    class BODY: Base[Trees.Bodies.Body] is
        expression_parser: Parser[Trees.Expressions.Expression];
        statement_parser: Parser[Trees.Statements.Statement];
        statement_list_parser: Parser[Trees.Statements.LIST];
        identifier_qualified_parser: Parser[Trees.Identifiers.Identifier];

        description: string => "function body";

        init(
            expression_parser: Parser[Trees.Expressions.Expression],
            statement_parser: Parser[Trees.Statements.Statement],
            statement_list_parser: Parser[Trees.Statements.LIST],
            identifier_qualified_parser: Parser[Trees.Identifiers.Identifier]
        )
        is
            super.init();

            self.expression_parser = expression_parser;
            self.statement_parser = statement_parser;
            self.statement_list_parser = statement_list_parser;
            self.identifier_qualified_parser = identifier_qualified_parser;

            add_parsers();
        si
        
        add_parsers() is
            add_parser(
                (context: CONTEXT) is
                    context.next_token(Lexical.TOKEN.ARROW_FAT);
                    let expression = expression_parser.parse(context);
                    return Trees.Bodies.EXPRESSION(expression.location, expression);
                si,
                Lexical.TOKEN.ARROW_FAT
            );

            add_parser(
                (context: CONTEXT) is
                    let start = context.location;
                    context.next_token(Lexical.TOKEN.IS);
                    let statement_list = statement_list_parser.parse(context);
                    let end = context.location;
                    context.next_token(Lexical.TOKEN.SI);
                    return Trees.Bodies.BLOCK(start::end, statement_list);
                si,
                Lexical.TOKEN.IS
            );

            add_parser(
                (context: CONTEXT) is
                    let start = context.location;
                    context.next_token(Lexical.TOKEN.INNATE);
                    let identifier = identifier_qualified_parser.parse(context);
                    return Trees.Bodies.INNATE(start::identifier.location, identifier);
                si,
                Lexical.TOKEN.INNATE
            );            
        si

        other_token(context: CONTEXT) -> Trees.Bodies.Body => 
            Trees.Bodies.NULL(context.location);
    si
si
