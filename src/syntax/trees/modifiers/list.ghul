namespace Syntax.Trees.Modifiers is
        use Source;

    class LIST: Trees.Node is
        access_modifier: AccessModifier;
        storage_class: StorageClass;

        is_empty: bool => !(access_modifier?) /\ !(storage_class?);

        is_static: bool => storage_class? /\ isa STATIC(storage_class);

        is_public: bool => access_modifier? /\ isa PUBLIC(access_modifier);

        is_private: bool => access_modifier? /\ isa PRIVATE(access_modifier);

        is_explicit_access: bool => access_modifier?;

        init(location: LOCATION, access_modifier: AccessModifier, storage_class: StorageClass) is
            super.init(location);

            self.access_modifier = access_modifier;
            self.storage_class = storage_class;
        si

        copy() -> LIST is
            var nam: AccessModifier;
            var nsc: StorageClass;

            if access_modifier? then
                nam = access_modifier.copy();
            fi

            if storage_class? then
                nsc = storage_class.copy();
            fi

            return new LIST(
                location,
                nam,
                nsc
            );
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                if access_modifier? then
                    access_modifier.walk(visitor);
                fi
                
                if storage_class? then
                    storage_class.walk(visitor);
                fi
            fi

            accept(visitor);
        si
    si
si
