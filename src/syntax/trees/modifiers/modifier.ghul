namespace Syntax.Trees.Modifiers is
    use System.NotImplementedException;

    use IO.Std;

    use Source;

    class Modifier: Trees.Node is
        is_public: bool => false;
        is_protected: bool => false;
        is_private: bool => false;
        is_static: bool => false;
        is_const: bool => false;
        is_field: bool => false;
        is_hide_in_derived: bool => false;

        init(location: LOCATION) is
            super.init(location);
        si

        name: string is
            throw new NotImplementedException("{self} does not implement name");
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si
    si

    class AccessModifier: Modifier is
        init(location: LOCATION) is
            super.init(location);
        si

        copy() -> AccessModifier =>
            cast AccessModifier(clone());        
    si

    class StorageClass: Modifier is
        init(location: LOCATION) is
            super.init(location);
        si

        copy() -> StorageClass =>
            cast StorageClass(clone());                
    si

    class PUBLIC: AccessModifier is
        is_public: bool => true;
        name: string => "public";

        init(location: LOCATION) is
            super.init(location);
        si
    si

    class PROTECTED: AccessModifier is
        is_protected: bool => true;
        name: string => "protected";

        init(location: LOCATION) is
            super.init(location);
        si
    si

    class PRIVATE: AccessModifier is
        is_private: bool => true;
        name: string => "private";

        init(location: LOCATION) is
            super.init(location);
        si
    si

    class STATIC: StorageClass is
        is_static: bool => true;
        name: string => "static";

        init(location: LOCATION) is
            super.init(location);
        si
    si

    class CONST: StorageClass is
        is_const: bool => true;
        name: string => "const";

        init(location: LOCATION) is
            super.init(location);
        si
    si

    class FIELD: StorageClass is
        is_field: bool => true;
        name: string => "field";

        init(location: LOCATION) is
            super.init(location);
        si
    si

    class HIDE_IN_DERIVED: StorageClass is
        is_hide_in_derived: bool => true;
        name: string => "hide_in_derived";
        
        init(location: LOCATION) is
            super.init(location);
        si
    si
si
