namespace Syntax.Trees is
    use IO.Std;

    use System;    
    use Source;

    class Node is
        location: LOCATION;

        _next_id: int static;
        _id: int;
        id: int public => _id;

        is_poisoned: bool;

        next_id: int static is
            var result = _next_id;
            _next_id = _next_id + 1;
            return result;
        si

        debug_next_id: int static => _next_id;

        init(location: LOCATION) is
            _id = next_id;
            self.location = location;
        si

        @IL.name("GetHashCode")
        get_hash_code() -> int => id;
        
        @IL.name("Equals")
        =~(other: Node) -> bool => other? && _id == other._id;

        >(other: Node) -> int => _id - other._id;

        clone() -> Node is
            let result = cast Node(memberwise_clone());   

            result._id = next_id;         

            return result;
        si
        
        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            accept(visitor);
        si

        poison(should_poison: bool) is
            if should_poison then
                is_poisoned = true;
            fi
        si

        poison() is
            is_poisoned = true;
        si        

        @IL.name("ToString")
        to_string() -> string is
            var printer = new Process.Printer.GHUL();
            accept(printer);
            return printer.result;
        si

    si
si
