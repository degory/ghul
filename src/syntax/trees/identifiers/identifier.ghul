namespace Syntax.Trees.Identifiers is
    use IO.Std;

    
    use Source;

    class Identifier: Trees.Node, Collections.Iterable[string] is
        name: string;

        qualifier: Identifier => null;
        
        qualifier_names: Collections.LIST[string] => new Collections.LIST[string](0);

        names: Collections.LIST[string] => new Collections.LIST[string]([name]); // : string;

        @IL.name.read("GetEnumerator")
        iterator: Collections.Iterator[string] => names.iterator;

        init(location: LOCATION, name: string) is
            super.init(location);

            if name == null then
                poison();
                name = "$poisoned";
            fi

            self.name = name;
        si

        copy() -> Identifier =>
            new Identifier(location, name);

        accept(visitor: Visitor) is
            visitor.visit(self);
        si
    si

    class NONE: Identifier is
        names: Collections.LIST[string] => new Collections.LIST[string](0);

        init(location: LOCATION) is
            super.init(location, null);
        si        
    si

    class QUALIFIED: Identifier is
        _qualifier: Identifier;

        completion_target: LOCATION;        

        qualifier: Identifier is
            return _qualifier;
        si

        qualifier_names: Collections.LIST[string] is
            let result = new Collections.LIST[string]();
            let p = qualifier;

            while p? do
                result.add(p.name);
                p = p.qualifier;
            od

            return result;
        si

        names: Collections.LIST[string] is
            let result = new Collections.LIST[string]();

            result.add(name);

            let p = qualifier;

            while p? do
                result.add(p.name);
                p = p.qualifier;
            od

            return result;
        si

        @IL.name.read("GetEnumerator")
        iterator: Collections.Iterator[string] is
            let result = new Collections.LIST[string]();

            result.add(name);

            let p = qualifier;

            while p? do
                result.add(p.name);
                p = p.qualifier;
            od
            
            return result.iterator;
        si        

        init(location: LOCATION, qualifier: Identifier, name: string, completion_target: LOCATION) is
            super.init(location, name);

            self._qualifier = qualifier;
            self.completion_target = completion_target;

            poison(qualifier.is_poisoned);
        si

        copy() -> Identifier is
            let np: Identifier;

            if qualifier? then
                np = qualifier.copy();
            fi

            return new QUALIFIED(
                location,
                np,
                name,
                completion_target
            );
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                if qualifier? then
                    qualifier.walk(visitor);
                fi
            fi

            accept(visitor);
        si
    si
si
