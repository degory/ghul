namespace Syntax.Trees.TypeExpressions is
    
    use Source;

    class LIST: Trees.Node, Collections.Iterable[TypeExpression] is
        elements: Collections.List[TypeExpression];
        count: int => elements.count;

        iterator: Collections.Iterator[TypeExpression] => elements.iterator;

        init(location: LOCATION, elements: Collections.Iterable[TypeExpression]) is
            super.init(location);

            self.elements = Collections.LIST[TypeExpression](elements);

            for e in elements do
                if 
                    e.is_poisoned
                then
                    poison();

                    return;
                fi
            od                
        si

        shallow_copy() -> LIST is
            let ne = Collections.LIST[TypeExpression]();
            for e in elements do
                ne.add(e);
            od

            return
                LIST(
                    location,
                    ne
                );
        si

        deep_copy() -> LIST is
            let ne = Collections.LIST[TypeExpression]();
            for e in elements do
                ne.add(e.copy());
            od

            return
                LIST(
                    location,
                    ne
                );
        si

        check_no_reference_types(logger: Logging.Logger) is
            for element in elements do
                if element.is_reference then
                    logger.error(element.location, "cannot use reference type here");
                fi
            od  
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                for t in elements do
                    t.walk(visitor);
                od
            fi

            accept(visitor);
        si
    si
si
