namespace Syntax.Trees.TypeExpressions is
    use Source;

    class MEMBER: TypeExpression is
        left: TypeExpression;
        name: Identifiers.Identifier;

        try_copy_as_value_expression() -> Expressions.Expression =>
            let maybe_left = left.try_copy_as_value_expression() in
            if maybe_left? then
                new Expressions.MEMBER(location, left.try_copy_as_value_expression(), name.copy(), name.location);
            else 
                null;
            fi;

        init(location: LOCATION, left: TypeExpression, name: Identifiers.Identifier) is
            super.init(location);
            self.left = left;
            self.name = name;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                left.walk(visitor);
                name.walk(visitor);
            fi

            accept(visitor);
        si
    si
si
