namespace Syntax.Trees.TypeExpressions is
    use System.Exception;
    use System.NotImplementedException;

    use Source;

    use Semantic.Types.Type;

    class TypeExpression: Trees.Node, Semantic.Types.SettableTyped is
        name: Identifiers.Identifier => null;
        type_expression: TypeExpression => null;

        type: Type public;
        right_location: LOCATION => location;
        is_named: bool => false;
        is_reference: bool => false;
        is_void: bool => false;
        is_inferred: bool => false;

        check_is_not_reference(logger: Logging.Logger, message: string) -> bool is
            if is_reference then
                logger.error(location, message);
                return false;
            fi

            return true;
        si

        check_is_not_void(logger: Logging.Logger, message: string) -> bool is
            // TODO: this highlights the whole type expression, which might be
            // quite complex. Instead we should recurse down the type expression
            // tree and show errors only for the actual references to void
            if is_void then
                logger.error(location, message);
                return false;
            fi

            return true;
        si
        
        set_type(value: Type) is type = value; si

        init(location: LOCATION) is
            super.init(location);
        si

        copy() -> TypeExpression is
            throw new NotImplementedException("cannot copy type expression {self.get_type()} {self}");
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si
    si
si
