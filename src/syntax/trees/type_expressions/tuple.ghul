namespace Syntax.Trees.TypeExpressions is    
    use Source;
    
    class TUPLE: TypeExpression is
        elements: LIST;

        is_void: bool =>
            elements | .any(e => e? /\ e.is_void);

        init(location: LOCATION, elements: LIST) is
            super.init(location);
            self.elements = elements;
        si

        copy() -> TypeExpression =>
            new TUPLE(
                location,
                elements.shallow_copy()
            );

        try_copy_as_value_expression() -> Trees.Expressions.Expression is
            let args = new Collections.LIST[Trees.Expressions.Expression]();

            for e in elements do
                let ee = e.try_copy_as_value_expression();

                if !ee? then
                    return null;
                fi

                args.add(ee);
            od

            return new Trees.Expressions.TUPLE(location, new Trees.Expressions.LIST(location, args), false);
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                elements.walk(visitor);
            fi
            accept(visitor);
        si
    si
si
