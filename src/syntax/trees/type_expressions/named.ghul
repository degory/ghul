namespace Syntax.Trees.TypeExpressions is
    
    use Source;

    class NAMED: TypeExpression is
        name: Identifiers.Identifier;
        
        right_location: LOCATION => name.right_location;
        is_named: bool => true;
        is_void: bool => type? /\ type.is_void;

        could_be_value_expression: bool => true;

        init(location: LOCATION, name: Identifiers.Identifier) is
            super.init(location);

            assert name? else "name is null";
            
            self.name = name;
        si

        try_copy_as_value_expression() -> Expressions.Expression =>
            new Expressions.IDENTIFIER(
                location,
                name
            );

        qualify_member(member: Identifiers.Identifier) -> TypeExpression is
            let member_identifier = new Identifiers.QUALIFIED(
                location,
                name,
                member.name,
                name.location::member.location,
                member.location
            );

            return new NAMED(
                location,
                member_identifier
            );
        si

        copy() -> TypeExpression =>
            new NAMED(
                location,
                name.copy()
            );

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                name.walk(visitor);
            fi
            accept(visitor);
        si
    si
si
