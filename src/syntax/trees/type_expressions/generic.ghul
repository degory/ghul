namespace Syntax.Trees.TypeExpressions is
    
    use Source;

    class GENERIC: NAMED is
        arguments: TypeExpressions.LIST;
        argument_count: int => arguments.count;

        is_void: bool =>
            arguments | .any(e => e? /\ e.is_void);

        could_be_value_expression: bool => argument_count == 1 /\ arguments.elements[0].could_be_value_expression;

        try_copy_as_value_expression() -> Expressions.Expression =>
            if could_be_value_expression then
                new Expressions.INDEX(
                    location,
                    new Trees.Expressions.IDENTIFIER(
                        location,
                        name.copy()
                    ),
                    arguments.elements[0].try_copy_as_value_expression()
                )
            else
                return null;
            fi;

        init(location: LOCATION, name: Identifiers.Identifier, arguments: TypeExpressions.LIST) is
            super.init(location, name);

            assert arguments? else "arguments are null";

            self.arguments = arguments;
        si

        qualify_member(member: Identifiers.Identifier) -> TypeExpression is
            let member_identifier = new Identifiers.QUALIFIED(
                location,
                name,
                member.name,
                name.location::member.location,
                member.location
            );

            return new GENERIC(
                location,
                member_identifier,
                arguments.shallow_copy()
            );
        si

        copy() -> TypeExpression =>
            new GENERIC(
                location,
                name.copy(),
                arguments.shallow_copy()
            );

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                arguments.walk(visitor);
            fi
            accept(visitor);
        si
    si
si
