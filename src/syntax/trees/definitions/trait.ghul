namespace Syntax.Trees.Definitions is
    use System;
    
    use Source;

    class TRAIT: MODIFIABLE  is
        name: Identifiers.Identifier;
        arguments: TypeExpressions.LIST;
        ancestors: TypeExpressions.LIST;
        body: LIST;

        init(
            location: LOCATION,
            name: Identifiers.Identifier,
            arguments: TypeExpressions.LIST,
            ancestors: TypeExpressions.LIST,
            modifiers: Modifiers.LIST,
            body: LIST
        )
        is
            super.init(location, modifiers);

            self.name = name;
            self.arguments = arguments;
            self.ancestors = ancestors;
            self.body = body;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            let symbol_table = IoC.CONTAINER.instance.symbol_table;
            let mark = symbol_table.mark_scope_stack();

            try
                _walk(visitor);
            catch e: Exception
                IoC.CONTAINER.instance.logger.exception(location, e, "exception walking struct syntax tree");
            finally
                symbol_table.release_scope_stack(mark);                
            yrt
        si
        
        _walk(visitor: Visitor) is
            if !visitor.pre(self) then
                name.walk(visitor);

                if arguments? then
                    arguments.walk(visitor);
                fi

                if ancestors? then
                    ancestors.walk(visitor);
                fi

                modifiers.walk(visitor);
                body.walk(visitor);
            fi
            
            accept(visitor);
        si
    si
si
