namespace Syntax.Trees.Definitions is
    use Source;

    use Logging;

    class UNION: Classy is
        description_for_walk: string => "union";

        init(
            location: LOCATION,
            name: Identifiers.Identifier,
            arguments: TypeExpressions.LIST,
            modifiers: Modifiers.LIST,
            body: Definitions.LIST
        )
        is
            super.init(
                location, 
                name, 
                arguments, 
                new TypeExpressions.LIST(LOCATION.internal, System.Array.empty`[TypeExpressions.TypeExpression]()), 
                modifiers, 
                body
            );
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        _walk(visitor: Visitor) is
            // let use debug_dispose = debug_enter();

            debug("maybe walking union definition {name}");

            if !visitor.pre(self) then
                debug("walking union definition {name} name");
                name.walk(visitor);

                debug("maybe walking union definition {name} arguments");

                if arguments? then
                    debug("walking union definition {name} arguments");
                    arguments.walk(visitor);
                fi

                debug("walking union definition {name} modifiers");
                modifiers.walk(visitor);

                debug("walking union definition {name} body");
                body.walk(visitor);
            fi

            debug("accept visitor {visitor.get_type()} for union definition {name}");
            accept(visitor);
        si
    si
si
