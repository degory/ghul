namespace Syntax.Trees.Definitions is
    use System.Exception;
    
    use Source;
    use Logging;
    
    use Semantic.SymbolTable;

    class STRUCT: Classy  is
        init(
            location: LOCATION,
            name: Identifiers.Identifier,
            arguments: TypeExpressions.LIST,
            ancestors: TypeExpressions.LIST,
            modifiers: Modifiers.LIST,
            body: Definitions.LIST
        )
        is
            super.init(location, name, arguments, ancestors, modifiers, body);
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            let symbol_table = IoC.CONTAINER.instance.get`[SymbolTable]();
            let symbol_table_mark = symbol_table.mark_scope_stack();

            try
                _walk(visitor);
            catch e: Exception
                IoC.CONTAINER.instance.get`[Logger]().exception(location, e, "exception walking struct syntax tree");
            finally
                symbol_table.release_scope_stack(symbol_table_mark);                                
            yrt
        si

        _walk(visitor: Visitor) is
            if !visitor.pre(self) then
                name.walk(visitor);

                if arguments? then
                    arguments.walk(visitor);
                fi

                if ancestors? then
                    ancestors.walk(visitor);
                fi

                modifiers.walk(visitor);
                body.walk(visitor);
            fi
            
            accept(visitor);
        si
    si
si
