// FIXME: correct this namespace:
namespace Syntax.Trees.Variables is
    
    use Source;

    class VARIABLE: Trees.Definitions.Definition is
        left: VariableLeft;
        name: Identifiers.Identifier => left.name;

        names: Collections.Iterator[Identifiers.Identifier] => left.names;

        type_expression: TypeExpressions.TypeExpression;
        initializer: Expressions.Expression;
        is_static: bool;
        is_explicit_type: bool;
        is_variable: bool => true;
        want_dispose: bool;
        
        init(
            location: LOCATION,
            left: VariableLeft,
            type_expression: TypeExpressions.TypeExpression,
            is_static: bool,
            is_explicit_type: bool,
            initializer: Expressions.Expression
        ) is
            super.init(location);

            assert left? else "left part of variable cannot be null";

            self.left = left;
            self.type_expression = type_expression;
            self.is_static = is_static;
            self.is_explicit_type = is_explicit_type;
            self.initializer = initializer;
        si

        init(
            location: LOCATION,
            name: Identifiers.Identifier,
            type_expression: TypeExpressions.TypeExpression,
            is_static: bool,
            is_explicit_type: bool,
            initializer: Expressions.Expression
        ) is
            assert name? else "name of variable cannot be null";

            init(
                location,
                SIMPLE_VARIABLE_LEFT(location, name),
                type_expression,
                is_static,
                is_explicit_type,
                initializer
            );
        si

        set_type_expression(type_expression: TypeExpressions.TypeExpression) is
            self.type_expression = type_expression;
        si

        mark_want_dispose() is
            want_dispose = true;
        si

        copy() -> VARIABLE is
            assert initializer == null else "cannot copy a variable node with non null initializer";

            return VARIABLE(
                location,
                left.copy(),
                type_expression.copy(),
                is_static,
                is_explicit_type,
                null
            );
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                left.walk(visitor);
                type_expression.walk(visitor);
                if initializer? then
                    initializer.walk(visitor);
                fi
            fi
            accept(visitor);
        si
    si

    class VariableLeft: Trees.Node is
        is_simple_name: bool => false;
        name: Identifiers.Identifier => null;
        names: Collections.Iterator[Identifiers.Identifier] => null;
        elements: Collections.List[VariableLeft] => null;

        // used in compile expressions pass:
        value: IR.Values.Value public; // code to store from the initializer
        explicit_type: Semantic.Types.Type public;
        right_value: IR.Values.Value public; // the initializer if any
        right_location: Source.LOCATION public;
        variable_location: Source.LOCATION public;

        init(location: LOCATION) is
            super.init(location);
        si

        get_names_into(into: Collections.MutableList[Identifiers.Identifier]);

        copy() -> VariableLeft;

        copy_base_values_from(other: VariableLeft) is
            value = other.value;
            explicit_type = other.explicit_type;
            right_value = other.right_value;
            right_location = other.right_location;
            variable_location = other.variable_location;
        si
    si

    class SIMPLE_VARIABLE_LEFT: VariableLeft is
        name: Identifiers.Identifier;
        is_simple_name: bool => true;

        elements: Collections.List[VariableLeft] => System.Array.empty[VariableLeft]();
        names: Collections.Iterator[Identifiers.Identifier] => [name].iterator;

        init(
            location: LOCATION, 
            name: Identifiers.Identifier
        ) is
            super.init(location);

            assert name? else "variable left name is null";
            self.name = name;
        si

        get_names_into(into: Collections.MutableList[Identifiers.Identifier]) is
            into.add(name);
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                name.walk(visitor);
            fi

            accept(visitor);
        si

        copy() -> VariableLeft is
            let result = SIMPLE_VARIABLE_LEFT(location, name);
            result.copy_base_values_from(self);
            return result;
        si
    si

    class DESTRUCTURING_VARIABLE_LEFT: VariableLeft is
        elements: Collections.List[VariableLeft];

        names: Collections.Iterator[Identifiers.Identifier] => DESTRUCTURE_LEFT_NAMES_ITERATOR(elements);

        get_names_into(into: Collections.MutableList[Identifiers.Identifier]) is
            for e in elements do
                e.get_names_into(into);
            od
        si

        init(location: LOCATION, elements: Collections.List[VariableLeft]) is
            super.init(location);

            assert elements? else "destructuring left elements is null";
            assert elements | .all(e => e?) else "destructuring left has null element";

            self.elements = elements;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                for e in elements do
                    e.walk(visitor);
                od
            fi
            accept(visitor);
        si

        copy() -> VariableLeft is
            let new_elements = Collections.LIST[VariableLeft](elements.count);

            for e in elements do
                new_elements.add(e.copy());
            od

            let result = DESTRUCTURING_VARIABLE_LEFT(location, new_elements);
            result.copy_base_values_from(self);
            return result;
        si
    si

    class DESTRUCTURE_LEFT_NAMES_ITERATOR: Collections.Iterator[Identifiers.Identifier] is
        _stack: Collections.STACK[Collections.Iterator[VariableLeft]];

        current: Identifiers.Identifier;

        init(elements: Collections.List[VariableLeft]) is
            _stack = Collections.STACK[Collections.Iterator[VariableLeft]]();

            _stack.push(elements.iterator);
        si

        move_next() -> bool is
            while _stack.count > 0 do
                let top = _stack.peek();

                if top.move_next() then
                    let c = top.current;

                    if c.is_simple_name then
                        current = c.name;

                        return true;
                    else
                        _stack.push(c.elements.iterator);
                        return move_next();
                    fi
                else
                    _stack.pop();
                fi
            od

            return false;
        si

        reset() is
            current = null;
            _stack.clear();
        si

        dispose() is
            current = null;
            _stack.clear();
        si
    si
si
