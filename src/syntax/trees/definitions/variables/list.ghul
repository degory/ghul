namespace Syntax.Trees.Variables is
    
    use Source;

    class LIST: Trees.Node, Collections.Iterable[Variable] is
        variables: Collections.MutableList[Variable];

        iterator: Collections.Iterator[Variable] => variables.iterator;

        all: Collections.Iterator[Variable] => new VARIABLE_LIST_ALL_ITERATOR(self);

        init(location: LOCATION, variables: Collections.Iterable[Variable]) is
            super.init(location);

            assert variables? else "variables list is null";
            assert variables | .all(v => v?) else "variables list contains null elements";

            self.variables = new Collections.LIST[Variable](variables);
        si

        mark_want_dispose() is
            for v in variables do
                v.mark_want_dispose();
            od
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                for v in variables do
                    v.walk(visitor);
                od
            fi
            
            accept(visitor);
        si
    si

    class VARIABLE_LIST_ALL_ITERATOR: Collections.Iterator[Variable] is
        _list: LIST;
        _list_iterator: Collections.Iterator[Variable];
        _variable_iterator: Collections.Iterator[Variable];

        current: Variable => _variable_iterator.current;

        init(list: LIST) is
            self._list_iterator = list.variables.iterator;
        si

        move_next() -> bool is
            if !_variable_iterator? then
                if _list_iterator.move_next() then
                    _variable_iterator = _list_iterator.current.all;
                else
                    return false;
                fi
            fi

            if _variable_iterator.move_next() then
                return true;
            else
                _variable_iterator = null;
                return move_next();
            fi
        si

        reset() is
            _list_iterator.reset();
            _variable_iterator = null;
        si

        dispose() is
            if _variable_iterator? then
                _variable_iterator.dispose();
            fi

            _list_iterator.dispose();
        si
    si
si
