namespace Syntax.Trees.Expressions is
    use Source;
    
    use Debugging;

    // TODO move to literals and rename to ARRAY
    class SEQUENCE: Expression  is
        elements: LIST;
        type_expression: TypeExpressions.TypeExpression;
        constraint: Semantic.Types.Type;
        constraint_error_message: string;

        compile_count: int public;

        init(location: LOCATION, elements: LIST, type_expression: TypeExpressions.TypeExpression) is
            super.init(location);

            assert elements? else "elements is null";
            assert elements | .all(e => e?) else "at least one element is null";
            
            self.elements = elements;
            self.type_expression = type_expression;
        si

        set_constraint(constraint: Semantic.Types.Type, constraint_error_message: string) is
            assert constraint? else "constraint is null";
            assert constraint_error_message? \/ self.constraint_error_message? else "constraint error message is null";

            debug_always("{get_type()} set constraint {constraint}");

            self.constraint = constraint;
            self.constraint_error_message = constraint_error_message;
        si

        clear_constraint() is
            self.constraint = null;
            self.constraint_error_message = null;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                elements.walk(visitor);
                type_expression.walk(visitor);
            fi

            accept(visitor);
        si
    si
si
