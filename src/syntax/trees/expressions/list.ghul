namespace Syntax.Trees.Expressions is
    use Source;

    class LIST: Expression, Collections.Iterable[Expression] is
        expressions: Collections.LIST[Expression];
        
        init(location: LOCATION, expressions: Collections.Iterable[Expression]) is
            super.init(location);
            
            self.expressions = new Collections.LIST[Expression](expressions);
        si

        @IL.name.read("GetEnumerator")
        iterator: Collections.Iterator[Expression] => expressions.iterator;

        try_get_string_literal_at(index: int) -> string is
            if expressions? && index < expressions.count then
                return expressions[index].try_get_string_literal();
            fi
        si

        replace_element(index: int, value: Expression) is
            expressions[index] = value;
        si
        
        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                for e in expressions do
                    e.walk(visitor);
                od
            fi
            accept(visitor);
        si
    si
si
