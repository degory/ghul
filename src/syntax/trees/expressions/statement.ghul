namespace Syntax.Trees.Expressions is
    use Source;

    class STATEMENT: Expression is
        statement: Statements.Statement;
        temp: IR.TEMP public;

        is_tuple_literal: bool => statement.is_tuple_literal;

        init(location: LOCATION, statement: Statements.Statement) is
            super.init(location);

            assert statement? else "statement is null";
            self.statement = statement;
        si

        set_constraint(constraint: Semantic.Types.Type, error_message: string) is
            assert constraint? else "constraint is null";
            assert error_message? else "error message is null";

            statement.set_constraint(constraint, error_message);
        si

        clear_constraint() is
            statement.clear_constraint();
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                statement.walk(visitor);
            fi
            
            accept(visitor);
        si
    si
si
