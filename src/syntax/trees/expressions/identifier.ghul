namespace Syntax.Trees.Expressions is
        
    use Source;
    use Debugging;

    class IDENTIFIER: Expression  is
        identifier: Identifiers.Identifier;
        right_location: LOCATION => identifier.right_location;

        could_be_formal_argument: bool => identifier? /\ !identifier.is_qualified;
        could_be_type_expression: bool => true;
        is_identifier: bool => true;
        is_unqualified_identifier: bool => identifier? /\ !identifier.is_qualified;

        constraint: Semantic.Types.Type;
        constraint_error_message: string;

        init(location: LOCATION, identifier: Identifiers.Identifier) is
            super.init(location);

            self.identifier = identifier;
        si
        
        try_copy_as_type_expression() -> TypeExpressions.TypeExpression =>
            if could_be_type_expression then
                return TypeExpressions.NAMED(location, identifier.copy());
            else
                return null;
            fi;

        try_copy_as_identifer() -> Identifiers.Identifier =>
            identifier.copy();

        set_constraint(constraint: Semantic.Types.Type, constraint_error_message: string) is
            assert constraint? else "constraint is null";
            assert constraint_error_message? \/ self.constraint_error_message? else "constraint error message is null";
        
            debug("{get_type()} {identifier} set constraint {constraint}");
            
            self.constraint = constraint;
            self.constraint_error_message = constraint_error_message;
        si
        
        clear_constraint() is
            self.constraint = null;
            self.constraint_error_message = null;
        si
        
        accept(visitor: Visitor) =>
            visitor.visit(self);

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                identifier.walk(visitor);
            fi

            accept(visitor);
        si
    si
si
