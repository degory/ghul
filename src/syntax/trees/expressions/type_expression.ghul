namespace Syntax.Trees.Expressions is
    use Source;

    enum AMBIGUOUS_EXPRESSION_RESULT is
        UNKNOWN,
        INDEX,
        FUNCTION,
        TYPE
    si

    class AMBIGUOUS_EXPRESSION: Expression is
        result: AMBIGUOUS_EXPRESSION_RESULT public;

        index: Expression;
        left: Expression;
        identifier: Identifiers.Identifier;
        type_arguments: TypeExpressions.LIST;

        init(
            location: LOCATION, 
            index: Expression, 
            left: Expression,
            identifier: Identifiers.Identifier,
            type_arguments: TypeExpressions.LIST
        ) is
            super.init(location);
           
            assert index? else "expression cannot be null";
            assert identifier? else "identifier cannot be null";
            assert !left? \/ !identifier.is_qualified else "identifier cannot be qualfied if left expression supplied";
            assert type_arguments? else "type_arguments cannot be null";

            self.index = index;
            self.left = left;
            self.identifier = identifier;
            self.type_arguments = type_arguments;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                if result != AMBIGUOUS_EXPRESSION_RESULT.UNKNOWN then
                    if result == AMBIGUOUS_EXPRESSION_RESULT.INDEX then
                        index.walk(visitor);
                    else
                        if left? then
                            left.walk(visitor);
                        fi
                        
                        type_arguments.walk(visitor);
                    fi
                fi
            fi
            
            accept(visitor);
        si
    si

    class GENERIC_APPLICATION: Expression is
        result: AMBIGUOUS_EXPRESSION_RESULT public;
        
        left: Expression;
        identifier: Identifiers.Identifier;

        // actual type arguments to apply to the generic type or function:
        type_arguments: TypeExpressions.LIST;

        // could_be_type_expression: bool => type_expression?;

        init(
            location: LOCATION, 
            left: Expression,
            identifier: Identifiers.Identifier,
            type_arguments: TypeExpressions.LIST
        ) is
            super.init(location);

            assert identifier? else "identifier cannot be null";
            assert !left? \/ !identifier.is_qualified else "identifier cannot be qualfied if left expression supplied";
            assert type_arguments? else "type_arguments cannot be null";

            self.left = left;
            self.identifier = identifier;
            self.type_arguments = type_arguments;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                if result != AMBIGUOUS_EXPRESSION_RESULT.UNKNOWN then
                    if left? then
                        left.walk(visitor);
                    fi

                    type_arguments.walk(visitor);
                fi
            fi
            
            accept(visitor);
        si
    si
si