namespace Syntax.Trees.Expressions is
    use Source;

    use IR.Values.Value;
    class Expression: Trees.Node is
        value: Value public;
        right_location: LOCATION => location;

        is_identifier: bool => false;
        is_unqualified_identifier: bool => false;
        is_tuple: bool => false;
        could_be_formal_argument: bool => false;
        could_be_nested_function_definition: bool => false;
        could_be_type_expression: bool => false;
        must_be_consumed: bool => false;

        description: string => "expression";

        init(location: LOCATION) is
            super.init(location);
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        try_copy_as_variables() -> Variables.LIST => null;
        try_copy_as_variable() -> VARIABLE => null;
        try_copy_as_tuple_element() -> TUPLE_ELEMENT => null;
        try_copy_as_type_expression() -> TypeExpressions.TypeExpression;
        try_copy_as_identifer() -> Identifiers.Identifier;

        rewrite_as_assignment_left() -> AssignmentLeftExpression => new SIMPLE_LEFT_EXPRESSION(location, self);        
        rewrite_as_expression() -> Expression => self;

        try_get_string_literal() -> string => null; 

        try_set_constraint(constraint: Semantic.Types.Type, error_message: string) is
        si
    si
si
