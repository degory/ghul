namespace Syntax.Trees.Expressions is
    
    use Source;
    
    class MEMBER: Expression  is
        left: Expression;
        identifier: Identifiers.Identifier;
        completion_target: LOCATION;
        right_location: LOCATION => identifier.right_location;

        is_member: bool => true;
        could_be_type_expression: bool => left.could_be_type_expression;

        try_copy_as_identifer() -> Identifiers.Identifier =>
            let maybe_left_as_identifier = left.try_copy_as_identifer() in
            if maybe_left_as_identifier? then
                Trees.Identifiers.QUALIFIED(
                    location,
                    maybe_left_as_identifier,
                    identifier.name,
                    completion_target,
                    right_location
                )
            else
                return null;
            fi;

        init(
            location: LOCATION,
            left: Expression,
            identifier: Identifiers.Identifier,
            completion_target: LOCATION
        ) is
            super.init(location);

            self.left = left;
            self.identifier = identifier;
            self.completion_target = completion_target;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                left.walk(visitor);
                if identifier? then
                    identifier.walk(visitor);
                fi
            fi
            accept(visitor);
        si
    si
si
