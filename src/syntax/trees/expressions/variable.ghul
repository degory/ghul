namespace Syntax.Trees.Expressions is
    
    use Source;
    
    class VARIABLE: Expression is
        name: Identifiers.Identifier;
        initializer: Expression;
        type_expression: TypeExpressions.TypeExpression;

        could_be_formal_argument: bool => true;

        init(
            location: LOCATION,
            name: Identifiers.Identifier,
            type_expression: TypeExpressions.TypeExpression,
            initializer: Expression
        )
        is
            super.init(location);
            
            self.name = name;
            self.type_expression = type_expression;
            self.initializer = initializer;
        si

        try_copy_as_tuple_element() -> TUPLE_ELEMENT => new TUPLE_ELEMENT(location, name, type_expression, initializer);            

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                name.walk(visitor);
                type_expression.walk(visitor);

                if initializer? then
                    initializer.walk(visitor);
                fi
            fi

            accept(visitor);
        si
    si
si
