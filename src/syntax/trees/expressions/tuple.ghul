namespace Syntax.Trees.Expressions is
    use Source;

    use Debugging;
    
    class TUPLE: Expression is
        is_function_arguments: bool public;
        is_tuple_literal: bool => true;

        elements: LIST;
        constraint: Semantic.Types.Type;
        constraint_error_message: string;

        could_be_formal_argument: bool => true;

        init(location: LOCATION, elements: LIST, is_function_arguments: bool) is
            super.init(location);

            assert elements? else "elements is null";
            assert elements.expressions | .all(e => e?) else "at least one element is null";
            
            self.elements = elements;
            self.is_function_arguments = is_function_arguments;
        si

        set_constraint(constraint: Semantic.Types.Type, constraint_error_message: string) is
            assert constraint? else "constraint is null";
            assert constraint_error_message? \/ self.constraint_error_message? else "constraint error message is null";

            debug("{get_type()} set constraint {self.constraint} >> {constraint}");
            
            self.constraint = constraint;
            self.constraint_error_message = constraint_error_message;

            if elements.expressions.count == 1 then
                elements.expressions[0].set_constraint(constraint, constraint_error_message);               
            fi
        si

        clear_constraint() is
            debug("{get_type()} clear constraint");

            self.constraint = null;
            self.constraint_error_message = null;

            if elements.expressions.count == 1 then
                elements.expressions[0].clear_constraint();               
            fi
        si

        rewrite_as_assignment_left() -> AssignmentLeftExpression is
            if elements.expressions.count == 1 then
                return SIMPLE_LEFT_EXPRESSION(location, elements.expressions[0]);
            fi

            let result = Collections.LIST[AssignmentLeftExpression](elements.expressions.count);

            for element in elements.expressions do
                let expression = element.rewrite_as_expression();
                if element.is_tuple_literal then
                    result.add(expression.rewrite_as_assignment_left());
                else
                    result.add(SIMPLE_LEFT_EXPRESSION(element.location, expression));
                fi
            od

            return DESTRUCTURING_LEFT_EXPRESSION(location, result);
        si

        replace_element(index: int, value: Expression) is
            elements.replace_element(index, value);
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                elements.walk(visitor);
            fi
            
            accept(visitor);
        si
    si
si
