namespace Syntax.Trees.Expressions is    
    use Source;

    class AssignmentLeftExpression: Expression is
        is_simple_expression: bool => false;
        expression: Expression => null;
        expressions: Collections.Iterator[Expression] => null;
        elements: Collections.List[AssignmentLeftExpression] => null;
        assign_location: LOCATION public;

        init(location: LOCATION) is
            super.init(location);
        si

        get_names_into(into: Collections.MutableList[Expression]);

        copy() -> AssignmentLeftExpression;
    si

    class SIMPLE_LEFT_EXPRESSION: AssignmentLeftExpression is
        expression: Expression;
        is_simple_expression: bool => true;

        elements: Collections.List[AssignmentLeftExpression] => System.Array.empty`[AssignmentLeftExpression]();
        expressions: Collections.Iterator[Expression] => [expression].iterator;

        constraint: Semantic.Types.Type => expression.constraint;
        set_constraint(constraint: Semantic.Types.Type, constraint_error_message: string) =>
            expression.set_constraint(constraint, constraint_error_message);

        clear_constraint() =>
            expression.clear_constraint();

        init(
            location: LOCATION, 
            name: Expression
        ) is
            super.init(location);

            assert name? else "name is null";
            self.expression = name;

            // will be set more accurately in compile expressions
            // but must have some non-null value
            assign_location = location;
        si

        get_names_into(into: Collections.MutableList[Expression]) is
            into.add(expression);
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                expression.walk(visitor);
            fi

            accept(visitor);
        si

        copy() -> AssignmentLeftExpression is
            let result = SIMPLE_LEFT_EXPRESSION(location, expression);

            result.assign_location = assign_location;

            return result;
        si
    si

    class DESTRUCTURING_LEFT_EXPRESSION: AssignmentLeftExpression is
        elements: Collections.List[AssignmentLeftExpression];

        expressions: Collections.Iterator[Expression] => DESTRUCTURE_LEFT_NAMES_ITERATOR(elements);

        init(location: LOCATION, elements: Collections.List[AssignmentLeftExpression]) is
            super.init(location);
            self.elements = elements;
        si

        get_names_into(into: Collections.MutableList[Expression]) is
            for e in elements do
                e.get_names_into(into);
            od
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                for e in elements do
                    e.walk(visitor);
                od
            fi
            accept(visitor);
        si

        copy() -> AssignmentLeftExpression is
            let new_elements = Collections.LIST[AssignmentLeftExpression](elements.count);

            for e in elements do
                new_elements.add(e.copy());
            od

            let result = DESTRUCTURING_LEFT_EXPRESSION(location, new_elements);

            result.assign_location = assign_location;

            return result;
        si
    si

    class DESTRUCTURE_LEFT_NAMES_ITERATOR: Collections.Iterator[Expression] is
        _stack: Collections.STACK[Collections.Iterator[AssignmentLeftExpression]];

        current: Expression;

        init(elements: Collections.List[AssignmentLeftExpression]) is
            _stack = Collections.STACK[Collections.Iterator[AssignmentLeftExpression]]();

            _stack.push(elements.iterator);
        si

        move_next() -> bool is
            while _stack.count > 0 do
                let top = _stack.peek();

                if top.move_next() then
                    let c = top.current;

                    if c.is_simple_expression then
                        current = c.expression;

                        return true;
                    else
                        _stack.push(c.elements.iterator);
                        return move_next();
                    fi
                else
                    _stack.pop();
                fi
            od

            return false;
        si

        reset() is
            current = null;
            _stack.clear();
        si

        dispose() is
            current = null;
            _stack.clear();
        si
    si
si
