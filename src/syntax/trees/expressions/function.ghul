namespace Syntax.Trees.Expressions is
    
    use Source;

    class FUNCTION: Expression  is
        arguments: TUPLE;
        type_expression: TypeExpressions.TypeExpression;    
        uses: Collections.Iterable[Identifiers.Identifier];
        body: Bodies.Body;

        init(
            location: LOCATION,
            arguments: TUPLE,
            type_expression: TypeExpressions.TypeExpression,
            uses: Collections.Iterable[Identifiers.Identifier],
            body: Bodies.Body
        )
        is
            super.init(location);

            self.arguments = arguments;
            self.type_expression = type_expression;
            if uses? then
                self.uses = new Collections.LIST[Identifiers.Identifier](uses);
            fi

            self.body = body;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                type_expression.walk(visitor);
                arguments.walk(visitor);
                body.walk(visitor);

                if uses? then
                    for u in uses do
                        u.walk(visitor);
                    od
                fi
            fi

            accept(visitor);
        si
    si
si
