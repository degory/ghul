namespace Syntax.Trees.Expressions is
    use IO.Std;
    use Source;

    class STRING_INTERPOLATION: Expression is
        values: Collections.List[INTERPOLATION_FRAGMENT];
        literal_length: int;
        expression_count: int;

        init(
            location: LOCATION, 
            values: Collections.List[INTERPOLATION_FRAGMENT],
            literal_length: int,
            expression_count: int
        ) is
            super.init(location);

            self.values = values;
            self.literal_length = literal_length;
            self.expression_count = expression_count;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si
   
        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                for v in values do
                    v.expression.walk(visitor);
                od
            fi

            accept(visitor);
        si
    si

    struct INTERPOLATION_FRAGMENT is
        is_expression: bool;
        expression: Expression;
        alignment: Expression;
        format: string;

        init(
            is_expression: bool,
            expression: Expression,
            alignment: Expression,
            format: string
        ) is
            self.is_expression = is_expression;
            self.expression = expression;
            self.alignment = alignment;
            self.format = format;
        si
    si
si
