namespace Syntax.Trees.Expressions is
    
    use Source;
    
    class TUPLE_ELEMENT: Expression is
        name: Identifiers.Identifier;
        initializer: Expression;
        type_expression: TypeExpressions.TypeExpression;
        is_tuple_element: bool => true;

        init(
            location: LOCATION,
            name: Identifiers.Identifier,
            type_expression: TypeExpressions.TypeExpression,
            initializer: Expression
        )
        is
            super.init(location);
            
            self.name = name;
            self.type_expression = type_expression;
            self.initializer = initializer;
        si

        try_copy_as_variable() -> VARIABLE => VARIABLE(location, name, type_expression, initializer);
        rewrite_as_expression() -> Expression is 
            if name? then
                IoC.CONTAINER.instance.logger.error(name.location, "name not allowed here");
            fi

            if type_expression? then
                IoC.CONTAINER.instance.logger.error(type_expression.location, "type not allowed here");
            fi

            return initializer
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                name.walk(visitor);
                type_expression.walk(visitor);

                if initializer? then
                    initializer.walk(visitor);
                fi
            fi

            accept(visitor);
        si
    si
si
