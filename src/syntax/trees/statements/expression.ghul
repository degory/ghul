namespace Syntax.Trees.Statements is
    use Source;

    use Logging;

    class EXPRESSION: Statement is
        expression: Expressions.Expression;
        provides_value: bool => true;
        is_tuple_literal: bool => 
            if expression.is_tuple_literal then
                true
            else
                false
            fi;

        set_constraint(constraint: Semantic.Types.Type, constraint_error_message: string) =>
            expression.set_constraint(constraint, constraint_error_message);

        // TODO may not be wanted if it's a statement expression that
        // ends with a keyword
        expects_semicolon: bool => true; 

        init(location: LOCATION, expression: Expressions.Expression) is
            super.init(location);

            assert expression? else "expression is null";
            
            self.expression = expression;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                expression.walk(visitor);
            fi
            
            accept(visitor);
        si
    si
si
