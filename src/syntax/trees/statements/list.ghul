namespace Syntax.Trees.Statements is
        
    use Source;

    use Logging;

    class LIST: Trees.Statements.Statement, Collections.Iterable[Statement] is
        _statements: Collections.List[Statement];
        _variables_to_dispose: Collections.LIST[Semantic.Symbols.Variable];

        statements: Collections.Iterable[Statement] => _statements;
        is_tuple_literal: bool =>
            let l = last in

            if l? then
                l.is_tuple_literal
            else 
                false
            fi;
        
        constraint: Semantic.Types.Type => 
            let l = last in

            if l? then
                l.constraint
            else
                null
            fi;

        variables_to_dispose: Collections.List[Semantic.Symbols.Variable] => _variables_to_dispose;

        want_dispose: bool;
        provides_value: bool => true;

        iterator: Collections.Iterator[Statement] => _statements.iterator;

        is_empty: bool => _statements.count == 0;

        last: Statement =>
            if _statements.count == 0 then
                null
            else
                _statements[_statements.count - 1]
            fi;

        init(location: LOCATION, statements: Collections.List[Statement]) is
            super.init(location);

            assert statements? else "statements is null";
            _statements = statements;
        si

        set_constraint(constraint: Semantic.Types.Type, error_message: string) =>
            let l = last in

            if l? then
                l.set_constraint(constraint, error_message);
            fi;

        clear_constraint() =>
            let l = last in

            if l? then
                l.clear_constraint();
            fi;

        add_variable_to_dispose(v: Semantic.Symbols.Variable) is
            want_dispose = true;
            
            if !_variables_to_dispose? then
                _variables_to_dispose = Collections.LIST[Semantic.Symbols.Variable]();
            fi

            _variables_to_dispose.add(v);
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                for s in statements do
                    s.walk(visitor);
                od
            fi

            accept(visitor);
        si
    si
si
