namespace Syntax.Trees.Statements is
        
    use Source;

    class LIST: Trees.Statements.Statement, Collections.Iterable[Statement] is
        _statements: Collections.List[Statement];        
        statements: Collections.Iterable[Statement] => _statements;
        provides_value: bool => true;

        init(location: LOCATION, statements: Collections.List[Statement]) is
            super.init(location);

            _statements = statements;
        si

        @IL.name.read("GetEnumerator")
        iterator: Collections.Iterator[Statement] => _statements.iterator;

        last: Statement is
            if !_statements? \/ _statements.count == 0 then
                return null;
            fi

            return _statements[_statements.count - 1];
        si

        try_set_constraint(constraint: Semantic.Types.Type, error_message: string) is
            let l = last;

            if l? then
                l.try_set_constraint(constraint, error_message);
            fi
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                for s in statements do
                    s.walk(visitor);
                od
            fi

            accept(visitor);
        si
    si
si
