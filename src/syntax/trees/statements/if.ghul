namespace Syntax.Trees.Statements is
    use Source;

    use Logging;
    
    class IF: Statement is
        branches: Collections.Iterable[IF_BRANCH];
        provides_value: bool => true;
        constraint: Semantic.Types.Type;
        constraint_error_message: string;

        is_tuple_literal: bool => 
            if branches | .all(b => b.body.is_tuple_literal) then
                true
            else
                false
            fi;
        
        init(location: LOCATION, branches: Collections.Iterable[IF_BRANCH]) is
            super.init(location);

            self.branches = Collections.LIST(branches);
        si

        set_constraint(constraint: Semantic.Types.Type, error_message: string) is
            assert constraint? else "constraint is null";
            assert error_message? else "error message is null";

            self.constraint = constraint;
            self.constraint_error_message = error_message;

            for b in branches do
                b.body.set_constraint(constraint, error_message);
            od
        si

        clear_constraint() is
            constraint = null;
            constraint_error_message = null;
        si
        
        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                for branch in branches do
                    if branch? then
                        branch.walk(visitor);
                    fi
                od
            fi

            accept(visitor);
        si
    si

    class IF_BRANCH: Trees.Node is
        condition: Expressions.Expression;
        body: LIST;

        init(
            location: LOCATION,
            condition: Expressions.Expression,
            body: LIST
        )
        is
            super.init(location);

            self.condition = condition;
            self.body = body;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                if condition? then
                    condition.walk(visitor);
                fi

                if body? then
                    body.walk(visitor);
                fi
            fi

            accept(visitor);
        si
    si
si
