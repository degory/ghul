namespace Syntax.Tree.Expression is
    use Generic;

    use Source;

    class FUNCTION: NODE  is
        arguments: TUPLE;
        type_expression: TypeExpression.NODE;    
        uses: Collections.Iterable[Identifier.NODE];
        body: Body.NODE;

        children: Collections.Iterable[Tree.NODE] is
            let result = new Collections.LIST[Tree.NODE]([arguments, type_expression, body]: Tree.NODE);

            if uses? then
                for u in uses do
                    result.add(u);
                od
            fi

            return result;
        si        

        init(
            location: LOCATION,
            arguments: TUPLE,
            type_expression: TypeExpression.NODE,
            uses: Collections.Iterable[Identifier.NODE],
            body: Body.NODE
        )
        is
            super.init(location);

            self.arguments = arguments;
            self.type_expression = type_expression;
            if uses? then
                self.uses = new Collections.LIST[Identifier.NODE](uses);
            fi

            self.body = body;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                type_expression.walk(visitor);
                arguments.walk(visitor);
                body.walk(visitor);

                if uses? then
                    for u in uses do
                        u.walk(visitor);
                    od
                fi
            fi

            accept(visitor);
        si

        rewrite(m: Dict[Tree.NODE,Tree.NODE]) is
            arguments = cast TUPLE(m[arguments]);            
            type_expression = cast TypeExpression.NODE(m[type_expression]);
            body = cast Body.NODE(m[body]);

            if uses? then
                var nu = new Collections.LIST[Identifier.NODE]();

                for u in uses do
                    nu.add(cast Identifier.NODE(m[u]));
                od

                uses = nu;
            fi
        si
    si
si
