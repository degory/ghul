namespace Syntax.Tree.Expression is
    use Generic;

    use Source;

    class ISA: NODE  is
        type_expression: TypeExpression.NODE;    
        right: NODE;

        children: Iterable[Tree.NODE] =>
            [type_expression, right]: Tree.NODE;        
        
        init(location: LOCATION, type_expression: TypeExpression.NODE, right: NODE) is
            super.init(location);

            self.type_expression = type_expression;
            self.right = right;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                type_expression.walk(visitor);
                right.walk(visitor);
            fi
            
            accept(visitor);
        si

        rewrite(m: Dict[Tree.NODE,Tree.NODE]) is
            right = cast NODE(m[right]);
        si
    si
si
