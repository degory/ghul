namespace Syntax.Tree.Expression is
    use System;
    use Generic;

    use Source;

    class LIST: Tree.NODE, Collections.Iterable[NODE] is
        expressions: List[NODE];

        children: Collections.Iterable[Tree.NODE] is
            var result = new Collections.LIST[Tree.NODE]();

            for e in expressions do
                result.add(e);
            od

            return result;
        si
        
        init(location: LOCATION, expressions: Collections.Iterable[NODE]) is
            super.init(location);
            
            self.expressions = new Collections.LIST[NODE](expressions);
        si

        Iterator: Generic.Iterator[NODE] is
            return expressions.Iterator;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                for e in expressions do
                    e.walk(visitor);
                od
            fi
            accept(visitor);
        si

        rewrite(m: Dict[Tree.NODE,Tree.NODE]) is
            var ne = new Collections.LIST[NODE]();
            for e in expressions do
                ne.add(cast NODE(m[e]));
            od
            expressions = ne;
        si
    si
si
