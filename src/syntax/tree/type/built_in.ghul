namespace Syntax.Tree.TypeExpression is
    @IF.not.v3() use object = System.Object;
    @IF.not.v3() use string = System.String;
    @IF.not.v3() use STD = System.Console;

    use System;

    use Source;

    class BUILT_IN: NODE  is
        init(location: LOCATION) is
            super.init(location);
        si

        name: string is
            throw new NotImplementedException("" + self + " does not implement name");
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

    si

    class SCALAR: BUILT_IN  is
        init(location: LOCATION) is
            super.init(location);
        si

    si

    class INTEGER: SCALAR  is
        init(location: LOCATION) is
            super.init(location);
        si

    si

    class VOID: BUILT_IN  is
        init(location: LOCATION) is
            super.init(location);
        si

        name: string is
            return "void";
        si

    si

    class UNDEFINED: BUILT_IN  is
        init(location: LOCATION) is
            super.init(location);
            poison();
        si

        name: string is
            return "undefined";
        si

    si

    class NONE: BUILT_IN  is
        init(location: LOCATION) is
            super.init(location);
        si

        name: string is
            return "none";
        si
    si

    class INFER : NODE  is
        init(location: LOCATION) is
            super.init(location);
        si

        name: string is
            return "infer";
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        copy() -> NODE => cast INFER(clone());
    si

    class BOOL : BUILT_IN  is
        init(location: LOCATION) is
            super.init(location);
        si

        size: int is
            return 1;
        si

        name: string is
            return "bool";
        si

    si

    class BYTE : INTEGER  is
        init(location: LOCATION) is
            super.init(location);
        si

        size: int is
            return 1;
        si

        name: string is
            return "byte";
        si

    si

    class CHAR : INTEGER  is
        init(location: LOCATION) is
            super.init(location);
        si

        size: int is
            return 1;
        si

        name: string is
            return "char";
        si

    si

    class INT : INTEGER  is
        init(location: LOCATION) is
            super.init(location);
        si

        size: int is
            return 4;
        si

        name: string is
            return "int";
        si

    si

    class WORD : INTEGER  is
        init(location: LOCATION) is
            super.init(location);
        si

        size: int is
            return 8;
        si

        name: string is
            return "word";
        si

    si

    class LONG : INTEGER  is
        init(location: LOCATION) is
            super.init(location);
        si

        size: int is
            return 8;
        si

        name: string is
            return "long";
        si
    si
si
