namespace Syntax.Tree.TypeExpression is
    use Generic;

    use Source;

    class FUNCTION_GROUP: NODE, Collections.Iterable[FUNCTION] is
        functions: List[FUNCTION];
        
        Iterator: Generic.Iterator[FUNCTION] is
            return functions.Iterator;
        si

        init(location: LOCATION) is
            super.init(location);
            
            self.functions = new Collections.LIST[FUNCTION]();
        si

        add(function: FUNCTION) is
            functions.add(function);
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                for f in functions do
                    f.walk(visitor);
                od
            fi
            accept(visitor);
        si

        rewrite(m: Dict[Tree.NODE,Tree.NODE]) is
            var nf = new Collections.LIST[FUNCTION]();

            for f in functions do
                nf.add(cast FUNCTION(m[f]));
            od

            functions = nf;
        si
    si
si
