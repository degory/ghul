namespace Syntax.Tree.Pragma is
    use Source;

    use Generic;

    class NODE: Tree.NODE is
        name: Identifier.NODE;
        arguments: Expression.LIST;

        children: Iterable[Tree.NODE] is
            let result = new Vector[Tree.NODE](2);

            result.add(name);
            result.add(arguments);

            return result;
        si
        
        init(
            location: LOCATION,
            name: Identifier.NODE, 
            arguments: Expression.LIST
        ) is
            super.init(location);

            self.name = name;
            self.arguments = arguments;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                name.walk(visitor);

                arguments.walk(visitor);
            fi

            accept(visitor);
        si

        rewrite(m: Dict[Tree.NODE,Tree.NODE]) is
            name = cast Identifier.NODE(m[name]);
            arguments = cast Expression.LIST(m[arguments]);
        si        
    si
si
