namespace Syntax.Trees.Statements is
    use Source;
    
    class CASE: Statement is
        expression: Expressions.Expression;
        matches: Collections.LIST[CASE_MATCH];
        
        init(location: LOCATION, expression: Expressions.Expression, matches: Collections.LIST[CASE_MATCH]) is
            super.init(location);
            self.expression = expression;
            self.matches = matches;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                expression.walk(visitor);
                for m in matches do
                    m.walk(visitor);
                od
            fi

            accept(visitor);
        si

    si

    class CASE_MATCH: Statement is
        expressions: Expressions.LIST;
        statements: LIST;

        init(location: LOCATION, expressions: Expressions.LIST, statements: LIST) is
            super.init(location);

            self.expressions = expressions;
            self.statements = statements;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                if expressions? then
                    expressions.walk(visitor);
                fi
                
                statements.walk(visitor);
            fi

            accept(visitor);
        si
    si
si
