namespace Syntax.Tree.Definition is
    use Source;

    use Generic;

    class FUNCTION: MODIFIABLE  is
        name: Identifier.NODE;
        arguments: Variable.LIST;
        type_expression: TypeExpression.NODE;
        body: Body.NODE;

        for_property: PROPERTY public;

        // children: Collections.Iterable[Tree.NODE] is
        //     let result = new Collections.LIST[Tree.NODE](4);

        //     result.add(name);
        //     result.add(arguments);
        //     result.add(type_expression);

        //     if body? then
        //         result.add(body);
        //     fi

        //     return result;
        // si
        
        init(
            location: LOCATION,
            name: Identifier.NODE, 
            arguments: Variable.LIST,
            type_expression: TypeExpression.NODE,
            modifiers: Modifier.LIST,
            body: Body.NODE
        ) is
            super.init(location, modifiers);

            self.name = name;
            self.arguments = arguments;
            self.type_expression = type_expression;
            self.body = body;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                if name? then
                    name.walk(visitor);
                else 
                    IO.Std.err.println("function name is null");
                fi

                if arguments? then
                    arguments.walk(visitor);
                else 
                    IO.Std.err.println("function arguments is null");
                fi

                if type_expression? then
                    type_expression.walk(visitor);
                fi
                
                if body? then
                    body.walk(visitor);
                fi
            fi

            accept(visitor);
        si

        rewrite(m: Dict[Tree.NODE,Tree.NODE]) is
            name = cast Identifier.NODE(m[name]);
            arguments = cast Variable.LIST(m[arguments]);
            type_expression = cast TypeExpression.NODE(m[type_expression]);
            modifiers = cast Modifier.LIST(m[modifiers]);
            body = cast Body.NODE(m[body]);            
        si        
    si
si
