namespace Syntax.Tree.Definition is
    use Generic;
    use Source;

    class ENUM: MODIFIABLE  is
        name: Identifier.NODE;
        members: List[ENUM_MEMBER];

        // children: Collections.Iterable[Tree.NODE] is
        //     var result = new Collections.LIST[Tree.NODE]();

        //     result.add(name);

        //     for m in members do
        //         result.add(m);
        //     od         

        //     return result;
        // si

        init(
            location: LOCATION,
            name: Identifier.NODE,
            modifiers: Modifier.LIST,
            members: List[ENUM_MEMBER]
        ) is
            super.init(location, modifiers);

            self.name = name;
            self.members = members;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                name.walk(visitor);
                modifiers.walk(visitor);

                for m in members do
                    m.walk(visitor);
                od
            fi

            accept(visitor);
        si

    si

    class ENUM_MEMBER: NODE is
        name: Identifier.NODE;
        initializer: Expression.NODE;

        init(
            location: LOCATION,
            name: Identifier.NODE,
            initializer: Expression.NODE
        ) is
            super.init(location);

            self.name = name;
            self.initializer = initializer;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                name.walk(visitor
                );
                if initializer? then
                    initializer.walk(visitor);
                fi
            fi

            accept(visitor);
        si
    si
si
