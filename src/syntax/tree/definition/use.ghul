namespace Syntax.Tree.Definition is
    use Generic;

    use Source;

    class USE: NODE  is
        uses: List[Identifier.NODE];
        
        children: Collections.Iterable[Tree.NODE] is
            var result = new Collections.LIST[Tree.NODE]();

            for u in uses do
                result.add(u);
            od

            return result;
        si
        
        Iterator: Generic.Iterator[Identifier.NODE] is
            return uses.Iterator;
        si

        ReverseIterator: Generic.Iterator[Identifier.NODE] is
            return new Collections.LIST[Identifier.NODE](uses).ReverseIterator;
        si

        init(location: LOCATION, uses: List[Identifier.NODE]) is
            super.init(location);

            self.uses = uses;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            if !visitor.pre(self) then
                for u in uses do
                    u.walk(visitor);
                od
            fi
            
            accept(visitor);
        si
    si
si
