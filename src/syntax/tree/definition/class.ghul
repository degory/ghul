namespace Syntax.Tree.Definition is
    use System;
    use Generic;

    use Source;

    class CLASS: MODIFIABLE  is
        name: Identifier.NODE;
        arguments: TypeExpression.LIST;
        ancestors: TypeExpression.LIST;
        body: LIST;

        children: Collections.Iterable[Tree.NODE] is
            var result = new Collections.LIST[Tree.NODE](4);

            result.add(name);

            if arguments? then
                result.add(arguments);
            fi

            if ancestors? then
                result.add(ancestors);
            fi

            result.add(body);

            return result;
        si

        init(
            location: LOCATION,
            name: Identifier.NODE,
            arguments: TypeExpression.LIST,
            ancestors: TypeExpression.LIST,
            modifiers: Modifier.LIST,
            body: Definition.LIST
        )
        is
            super.init(location, modifiers);

            self.name = name;
            self.arguments = arguments;
            self.ancestors = ancestors;
            self.body = body;
        si

        accept(visitor: Visitor) is
            visitor.visit(self);
        si

        walk(visitor: Visitor) is
            let symbol_table = IoC.CONTAINER.instance.symbol_table;
            let symbol_table_mark = symbol_table.mark_scope_stack();

            try
                if !visitor.pre(self) then
                    name.walk(visitor);

                    if arguments? then
                        arguments.walk(visitor);
                    fi

                    if ancestors? then
                        ancestors.walk(visitor);
                    fi

                    modifiers.walk(visitor);
                    body.walk(visitor);
                fi
                
                accept(visitor);
            catch e: Exception
                IO.Std.err.println("from " + location + " swallowing " + e);

            finally
                symbol_table.release_scope_stack(symbol_table_mark);                                
            yrt
        si
    si
si
