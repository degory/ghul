namespace Syntax.Parser.Variable is
    class NODE: BASE[Tree.Variable.NODE] is
        identifier_parser: Parser[Tree.Identifier.NODE];
        type_parser: Parser[Tree.TypeExpression.NODE];
        expression_parser: Parser[Tree.Expression.NODE];

        init(
            identifier_parser: Parser[Tree.Identifier.NODE],
            type_parser: Parser[Tree.TypeExpression.NODE],
            expression_parser: Parser[Tree.Expression.NODE]
        )
        is
            super.init();
           
            self.identifier_parser = identifier_parser;
            self.type_parser = type_parser;
            self.expression_parser = expression_parser;
        si

        parse(context: CONTEXT) -> Tree.Variable.NODE is
            var start = context.location;
            
            if context.expect_token(Lexical.TOKEN.IDENTIFIER, syntax_error_message) then
                var identifier = identifier_parser.parse(context);

                if identifier == null then
                    return  null;
                fi
                
                var end = identifier.location;
                var type_expression: Tree.TypeExpression.NODE = new Tree.TypeExpression.INFER(start::context.location);
                var initializer: Tree.Expression.NODE;
                
                if context.current.token == Lexical.TOKEN.COLON then
                    context.next_token();
                    type_expression = type_parser.parse(context);
                    
                    end = type_expression.location;
                fi
                
                if context.current.token == Lexical.TOKEN.ASSIGN then
                    context.next_token();
                    initializer = expression_parser.parse(context);
                    end = initializer.location;
                fi
                
                let result = new Tree.Variable.NODE(start::end, identifier, type_expression, false, initializer);

                result.poison(type_expression.is_poisoned);

                return result;
            fi
        si
    si
si
