namespace Syntax.Parser.Expression is
    use System;
    use Generic;

    use Source;
    
    class TUPLE : BASE[Tree.Expression.TUPLE]  is
        expression_list_parser: Parser[Tree.Expression.LIST];
        description: String => "tuple";

        init(expression_list_parser: Parser[Tree.Expression.LIST]) is
            super.init();

            self.expression_list_parser = expression_list_parser;
        si

        parse(context: CONTEXT) -> Tree.Expression.TUPLE is
            var start = context.location;

            if context.next_token(Lexical.TOKEN.PAREN_OPEN, syntax_error_message) then
                var expressions: Tree.Expression.LIST;

                if context.current.token != Lexical.TOKEN.PAREN_CLOSE then
                    expressions = expression_list_parser.parse(context);
                else
                    expressions = new Tree.Expression.LIST(context.location, new Vector[Tree.Expression.NODE]());
                fi

                context.next_token(Lexical.TOKEN.PAREN_CLOSE, syntax_error_message);
                
                return new Tree.Expression.TUPLE(start::context.location, expressions);
            fi
        si
    si
si
