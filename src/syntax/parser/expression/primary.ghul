namespace Syntax.Parser.Expression is
    use object = System.Object;
    use string = System.String;
    use STD = System.Console;

    use System;
    
    use Source;

    class PRIMARY: BASE[Tree.Expression.NODE] is
        identifier_parser: Parser[Tree.Identifier.NODE];
        type_parser: Parser[Tree.TypeExpression.NODE];
        expression_parser: Parser[Tree.Expression.NODE];
        expression_list_parser: Parser[Tree.Expression.LIST];
        expression_tuple_parser: Parser[Tree.Expression.TUPLE];

        description: string => "primary expression";

        init(
            identifier_parser: Parser[Tree.Identifier.NODE],
            type_parser: Parser[Tree.TypeExpression.NODE],
            expression_parser: Parser[Tree.Expression.NODE],
            expression_list_parser: Parser[Tree.Expression.LIST],
            expression_tuple_parser: Parser[Tree.Expression.TUPLE]
        )
        is
            super.init();

            self.identifier_parser = identifier_parser;
            self.type_parser = type_parser;
            self.expression_parser = expression_parser;
            self.expression_list_parser = expression_list_parser;
            self.expression_tuple_parser = expression_tuple_parser;

            add_parsers();
        si

        add_parsers() is
            add_parser(
                (context: CONTEXT) -> Tree.Expression.NODE is
                    let start = context.location;
                    let identifier = identifier_parser.parse(context);
                    if context.allow_tuple_element && !isa Tree.Identifier.QUALIFIED(identifier) then
                        context.allow_tuple_element = false;
                        let end = identifier.location;
                        let type_expression: Tree.TypeExpression.NODE;
                        let initializer: Tree.Expression.NODE;
                        if context.current.token == Lexical.TOKEN.COLON then
                            context.next_token();
                            type_expression = type_parser.parse(context);
                            end = type_expression.location;
                        fi
                        if context.current.token == Lexical.TOKEN.ASSIGN then
                            context.next_token();
                            initializer = expression_parser.parse(context);
                            end = initializer.location;
                        fi
                        if initializer? then
                            if type_expression == null then
                                type_expression = new Tree.TypeExpression.INFER(context.location);
                            fi
                        fi
                        if type_expression? then
                            return new Tree.Expression.VARIABLE(start::end, identifier, type_expression, initializer);
                        fi
                    fi

                    return new Tree.Expression.IDENTIFIER(identifier.location, identifier);
                si, Lexical.TOKEN.IDENTIFIER
            );
            
            add_parser(
                (context: CONTEXT) -> Tree.Expression.NODE is
                    let start = context.location;
                    context.next_token();
                    let elements = expression_list_parser.parse(context);
                    let type_expression: Tree.TypeExpression.NODE;
                    let end = context.location;
                    context.next_token(Lexical.TOKEN.SQUARE_CLOSE);
                    if context.current.token == Lexical.TOKEN.COLON then
                        context.next_token();
                        type_expression = type_parser.parse(context);
                        end = type_expression.location;
                    else
                        type_expression = new Tree.TypeExpression.INFER(start::end);
                    fi

                    return new Tree.Expression.SEQUENCE(start::end, elements, type_expression);
                si,
                Lexical.TOKEN.SQUARE_OPEN
            );

            add_parser(
                (context: CONTEXT) -> Tree.Expression.NODE is
                    return expression_tuple_parser.parse(context);
                si,
                Lexical.TOKEN.PAREN_OPEN
            );

            add_parser(
                (context: CONTEXT) -> Tree.Expression.NODE is
                    let start = context.location;

                    context.next_token(Lexical.TOKEN.NEW);

                    let type_expression = type_parser.parse(context);

                    let arguments: Tree.Expression.LIST;

                    if context.next_token(Lexical.TOKEN.PAREN_OPEN) then
                        if context.current.token != Lexical.TOKEN.PAREN_CLOSE then
                            arguments = expression_list_parser.parse(context);
                        fi
                        context.next_token(Lexical.TOKEN.PAREN_CLOSE, syntax_error_message);
                    fi

                    if arguments == null then
                        arguments = new Tree.Expression.LIST(context.location, new Collections.LIST[Tree.Expression.NODE]());
                    fi

                    return new Tree.Expression.NEW(start::arguments.location, type_expression, arguments);
                si,
                Lexical.TOKEN.NEW
            );

            add_parser(
                (context: CONTEXT) -> Tree.Expression.NODE is
                    let start = context.location;

                    context.next_token(Lexical.TOKEN.CAST);

                    let type_expression = type_parser.parse(context);

                    context.next_token(Lexical.TOKEN.PAREN_OPEN);

                    let value = expression_parser.parse(context);
                    let result = new Tree.Expression.CAST(start::context.location, type_expression, value);

                    context.next_token(Lexical.TOKEN.PAREN_CLOSE);
                    return result;
                si,
                Lexical.TOKEN.CAST
            );

            add_parser(
                (context: CONTEXT) -> Tree.Expression.NODE is
                    let start = context.location;
                    context.next_token(Lexical.TOKEN.ISA);
                    let type_expression = type_parser.parse(context);
                    context.next_token(Lexical.TOKEN.PAREN_OPEN);
                    let value = expression_parser.parse(context);
                    let result = new Tree.Expression.ISA(start::context.location, type_expression, value);
                    context.next_token(Lexical.TOKEN.PAREN_CLOSE);
                    return result;
                si,
                Lexical.TOKEN.ISA
            );

            add_parser(
                (context: CONTEXT) -> Tree.Expression.NODE is
                    let start = context.location;
                    context.next_token(Lexical.TOKEN.TYPEOF);
                    let type_expression = type_parser.parse(context);
                    let result = new Tree.Expression.TYPEOF(start::context.location, type_expression);

                    // context.next_token(Lexical.TOKEN.PAREN_OPEN);
                    // context.next_token(Lexical.TOKEN.PAREN_CLOSE);
                    return result;
                si,
                Lexical.TOKEN.TYPEOF
            );

            add_parser(
                (context: CONTEXT) -> Tree.Expression.NODE is
                    let location = context.location;
                    let value_string = context.current.value_string;
                    context.next_token();
                    return new Tree.Expression.Literal.INTEGER(location, value_string);
                si,
                Lexical.TOKEN.INT_LITERAL
            );

            add_parser(
                (context: CONTEXT) -> Tree.Expression.NODE is
                    let location = context.location;
                    let value_string = context.current.value_string;
                    context.next_token();
                    return new Tree.Expression.Literal.FLOAT(location, value_string);
                si,
                Lexical.TOKEN.FLOAT_LITERAL
            );

            add_parser(
                (context: CONTEXT) -> Tree.Expression.NODE is
                    let location = context.location;
                    let value_string = context.current.value_string;
                    context.next_token();
                    return new Tree.Expression.Literal.STRING(location, value_string);
                si,
                Lexical.TOKEN.STRING_LITERAL
            );

            add_parser(
                (context: CONTEXT) -> Tree.Expression.NODE is
                    let location = context.location;
                    let value_string = context.current.value_string;
                    context.next_token();
                    return new Tree.Expression.Literal.CHARACTER(location, value_string);
                si,
                Lexical.TOKEN.CHAR_LITERAL
            );

            add_parser(
                (context: CONTEXT) -> Tree.Expression.NODE is
                    let location = context.location;
                    let value_string = context.current.value_string;
                    context.next_token();
                    return new Tree.Expression.Literal.BOOLEAN(location, value_string);
                si,
                new Collections.LIST[Lexical.TOKEN]([Lexical.TOKEN.TRUE, Lexical.TOKEN.FALSE])
            );

            add_parser(
                (context: CONTEXT) -> Tree.Expression.NODE is
                    let location = context.location;
                    context.next_token();
                    return new Tree.Expression.Literal.NONE(location);
                si,
                Lexical.TOKEN.NONE
            );

            add_parser(
                (context: CONTEXT) -> Tree.Expression.NODE is
                    let location = context.location;
                    context.next_token();
                    return new Tree.Expression.NULL(location);
                si,
                Lexical.TOKEN.NULL
            );

            add_parser(
                (context: CONTEXT) -> Tree.Expression.NODE is
                    let location = context.location;
                    context.next_token();
                    return new Tree.Expression.SELF(location);
                si,
                Lexical.TOKEN.SELF
            );

            add_parser(
                (context: CONTEXT) -> Tree.Expression.NODE is
                    let location = context.location;
                    context.next_token();
                    return new Tree.Expression.SUPER(location);
                si, Lexical.TOKEN.SUPER
            );
        si

        other_token(context: CONTEXT) -> Tree.Expression.NODE is
            super.other_token(context);

            let result = new Tree.Expression.Literal.NONE(context.location);

            result.poison();

            return result;
        si        
    si
si
