namespace Syntax.Parser.Definition is
    use System;
    use Generic;

    use Source;
    
    class MEMBER: BASE[Tree.Definition.NODE]  is
        function_parser: Parser[Tree.Definition.FUNCTION];
        property_parser: Parser[Tree.Definition.PROPERTY];
        indexer_parser: Parser[Tree.Definition.INDEXER];
        description: String => "member";

        expected_tokens: Collections.Iterable[Lexical.TOKEN] => property_tokens;

        property_tokens: Collections.List[Lexical.TOKEN];

        init(
            function_parser: Parser[Tree.Definition.FUNCTION],
            property_parser: Parser[Tree.Definition.PROPERTY],
            indexer_parser: Parser[Tree.Definition.INDEXER]
        )
        is
            super.init();
            self.function_parser = function_parser;
            self.property_parser = property_parser;
            self.indexer_parser = indexer_parser;
            property_tokens = new Collections.LIST[Lexical.TOKEN]([Lexical.TOKEN.COLON, Lexical.TOKEN.ASSIGN, Lexical.TOKEN.ARROW_FAT, Lexical.TOKEN.SEMICOLON]);
        si

        parse(context: CONTEXT) -> Tree.Definition.NODE is
            if context.current.token == Lexical.TOKEN.SQUARE_OPEN then
                return indexer_parser.parse(context);
            fi

            context.mark();
            context.next_token();

            if property_tokens.contains(context.current.token) then
                context.backtrack();
                return property_parser.parse(context);
            elif 
                context.current.token == Lexical.TOKEN.SQUARE_OPEN ||
                context.current.token == Lexical.TOKEN.PAREN_OPEN
            then
                context.backtrack();
                return function_parser.parse(context);
            fi

            context.commit();
            other_token(context);
        si
    si
si
