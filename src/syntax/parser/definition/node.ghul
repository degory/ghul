namespace Syntax.Parser.Definition is
    use System;
    use Generic;

    use Source;

    class NODE: BASE[Tree.Definition.NODE]  is
        definition_import_parser: Parser[Tree.Definition.IMPORT];
        definition_namespace_parser: Parser[Tree.Definition.NAMESPACE];
        definition_user_parser: Parser[Tree.Definition.USE];
        definition_class_parser: Parser[Tree.Definition.CLASS];
        definition_trait_parser: Parser[Tree.Definition.TRAIT];
        definition_struct_parser: Parser[Tree.Definition.STRUCT];
        definition_enum_parser: Parser[Tree.Definition.ENUM];
        definition_member_parser: Parser[Tree.Definition.NODE];

        description: String => "definition";

        init(
            definition_import_parser: Parser[Tree.Definition.IMPORT],
            definition_namespace_parser: Parser[Tree.Definition.NAMESPACE],
            definition_user_parser: Parser[Tree.Definition.USE],
            definition_class_parser: Parser[Tree.Definition.CLASS],
            definition_trait_parser: Parser[Tree.Definition.TRAIT],
            definition_struct_parser: Parser[Tree.Definition.STRUCT],
            definition_enum_parser: Parser[Tree.Definition.ENUM],
            definition_member_parser: Parser[Tree.Definition.NODE]
        ) is
            super.init();

            self.definition_import_parser = definition_import_parser;
            self.definition_namespace_parser = definition_namespace_parser;
            self.definition_user_parser = definition_user_parser;
            self.definition_class_parser = definition_class_parser;
            self.definition_trait_parser = definition_trait_parser;
            self.definition_struct_parser = definition_struct_parser;            
            self.definition_enum_parser = definition_enum_parser;
            self.definition_member_parser = definition_member_parser;

            add_parser(
                (context: CONTEXT) -> Tree.Definition.NODE is
                    return definition_import_parser.parse(context);
                si,
                Lexical.TOKEN.IMPORT
            );
            
            add_parser(
                (context: CONTEXT) -> Tree.Definition.NODE is
                    return definition_namespace_parser.parse(context);
                si,
                Lexical.TOKEN.NAMESPACE
            );

            add_parser(
                (context: CONTEXT) -> Tree.Definition.NODE is
                    return definition_user_parser.parse(context);
                si,
                Lexical.TOKEN.USE
            );

            add_parser(
                (context: CONTEXT) -> Tree.Definition.NODE is
                    return definition_class_parser.parse(context);
                si,
                Lexical.TOKEN.CLASS
            );

            add_parser(
                (context: CONTEXT) -> Tree.Definition.NODE is
                    return definition_trait_parser.parse(context);
                si, Lexical.TOKEN.TRAIT
            );

            add_parser(
                (context: CONTEXT) -> Tree.Definition.NODE is
                    return definition_struct_parser.parse(context);
                si, Lexical.TOKEN.STRUCT
            );

            add_parser(
                (context: CONTEXT) -> Tree.Definition.NODE is
                    return definition_enum_parser.parse(context);
                si,
                Lexical.TOKEN.ENUM
            );

            add_parser(
                (context: CONTEXT) -> Tree.Definition.NODE is
                    return definition_member_parser.parse(context);
                si,
                [Lexical.TOKEN.IDENTIFIER, Lexical.TOKEN.OPERATOR, Lexical.TOKEN.SQUARE_OPEN]
            );
        si
    si
si
