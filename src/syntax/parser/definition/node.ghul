namespace Syntax.Parsers.Definitions is
    @IF.not.v3() use object = System.Object;
    @IF.not.v3() use string = System.String;
    @IF.not.v3() use Std = System.Console;

    use System;
    
    use Source;

    class DEFINITION: Base[Trees.Definitions.Definition]  is
        definition_namespace_parser: Parser[Trees.Definitions.NAMESPACE];
        definition_use_parser: Parser[Trees.Definitions.USE];
        definition_class_parser: Parser[Trees.Definitions.CLASS];
        definition_trait_parser: Parser[Trees.Definitions.TRAIT];
        definition_struct_parser: Parser[Trees.Definitions.STRUCT];
        definition_enum_parser: Parser[Trees.Definitions.ENUM];
        definition_member_parser: Parser[Trees.Definitions.Definition];
        definition_pragma_parser: Parser[Trees.Definitions.PRAGMA];

        description: string => "definition";

        init(
            definition_namespace_parser: Parser[Trees.Definitions.NAMESPACE],
            definition_use_parser: Parser[Trees.Definitions.USE],
            definition_class_parser: Parser[Trees.Definitions.CLASS],
            definition_trait_parser: Parser[Trees.Definitions.TRAIT],
            definition_struct_parser: Parser[Trees.Definitions.STRUCT],
            definition_enum_parser: Parser[Trees.Definitions.ENUM],
            definition_member_parser: Parser[Trees.Definitions.Definition],
            definition_pragma_parser: Parser[Trees.Definitions.PRAGMA]
        ) is
            super.init();

            self.definition_namespace_parser = definition_namespace_parser;
            self.definition_use_parser = definition_use_parser;
            self.definition_class_parser = definition_class_parser;
            self.definition_trait_parser = definition_trait_parser;
            self.definition_struct_parser = definition_struct_parser;            
            self.definition_enum_parser = definition_enum_parser;
            self.definition_member_parser = definition_member_parser;
            self.definition_pragma_parser = definition_pragma_parser;

            add_parsers();
        si

        add_parsers() is            
            add_parser(
                (context: CONTEXT) -> Trees.Definitions.Definition => definition_namespace_parser.parse(context),
                Lexical.TOKEN.NAMESPACE
            );

            add_parser(
                (context: CONTEXT) -> Trees.Definitions.Definition => definition_use_parser.parse(context),
                Lexical.TOKEN.USE
            );

            add_parser(
                (context: CONTEXT) -> Trees.Definitions.Definition => definition_class_parser.parse(context),
                Lexical.TOKEN.CLASS
            );

            add_parser(
                (context: CONTEXT) -> Trees.Definitions.Definition => definition_trait_parser.parse(context),
                Lexical.TOKEN.TRAIT
            );

            add_parser(
                (context: CONTEXT) -> Trees.Definitions.Definition => definition_struct_parser.parse(context),
                Lexical.TOKEN.STRUCT
            );

            add_parser(
                (context: CONTEXT) -> Trees.Definitions.Definition => definition_enum_parser.parse(context),
                Lexical.TOKEN.ENUM
            );

            add_parser(
                (context: CONTEXT) -> Trees.Definitions.Definition => definition_member_parser.parse(context),
                new Collections.LIST[Lexical.TOKEN]([Lexical.TOKEN.IDENTIFIER, Lexical.TOKEN.OPERATOR, Lexical.TOKEN.SQUARE_OPEN])
            );

            add_parser(
                (context: CONTEXT) -> Trees.Definitions.Definition => definition_pragma_parser.parse(context),
                Lexical.TOKEN.AT
            );
        si
    si
si
