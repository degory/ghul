namespace Syntax.Parsers.Definitions is
    @IF.not.v3() use object = System.Object;
    @IF.not.v3() use string = System.String;
    @IF.not.v3() use Std = System.Console;

    use System;
    
    use Source;

    class LIST: Base[Trees.Definitions.LIST] is
        definition_parser: Parser[Trees.Definitions.Definition];
        description: string => "definition list";

        init(definition_parser: Parser[Trees.Definitions.Definition]) is
            super.init();
            self.definition_parser = definition_parser;
        si

        parse(context: CONTEXT) -> Trees.Definitions.LIST is
            let start = context.location;
            let end = context.location;
            let definitions = new Collections.LIST[Trees.Definitions.Definition]();

            while !context.is_end_of_file && context.current.token != Lexical.TOKEN.SI do
                try                        
                    let definition = definition_parser.parse(context);

                    if definition? then
                        end = definition.location;

                        definitions.add(definition);
                    fi
                catch e: Exception
                    IoC.CONTAINER.instance.logger.exception(context.current.location, e, "parse exception: " + e.message);

                    while 
                        !context.is_end_of_file &&
                        context.current.token != Lexical.TOKEN.SI &&
                        context.current.token != Lexical.TOKEN.SEMICOLON
                    do
                        context.next_token();
                    od

                    if context.is_end_of_file then
                        break;
                    fi
                yrt
            od

            return new Trees.Definitions.LIST(start::end, definitions);
        si
    si
si
