namespace Syntax.Parser.Definition is
    use System;
    use Source;

    class CLASS: BASE[Tree.Definition.CLASS] is
        identifier_parser: Parser[Tree.Identifier.NODE];
        type_parser: Parser[Tree.TypeExpression.NODE];
        type_list_parser: Parser[Tree.TypeExpression.LIST];
        modifier_list_parser: Parser[Tree.Modifier.LIST];
        definition_list_parser: Parser[Tree.Definition.LIST];

        init(
            identifier_parser: Parser[Tree.Identifier.NODE],
            type_parser: Parser[Tree.TypeExpression.NODE],
            type_list_parser: Parser[Tree.TypeExpression.LIST],
            modifier_list_parser: Parser[Tree.Modifier.LIST],
            definition_list_parser: Parser[Tree.Definition.LIST]
        )
        is
            super.init();
            self.identifier_parser = identifier_parser;
            self.type_parser = type_parser;
            self.type_list_parser = type_list_parser;
            self.modifier_list_parser = modifier_list_parser;
            self.definition_list_parser = definition_list_parser;
        si

        parse(context: CONTEXT) -> Tree.Definition.CLASS is
            var start = context.location;
            context.next_token(Lexical.TOKEN.CLASS);
            var identifier = identifier_parser.parse(context);

            var is_poisoned = false;

            if identifier == null then
                return null;
            fi            

            var arguments: Tree.TypeExpression.LIST;
            var ancestors: Tree.TypeExpression.LIST;

            if context.current.token == Lexical.TOKEN.SQUARE_OPEN then
                context.next_token();

                arguments = type_list_parser.parse(context);

                is_poisoned = arguments.is_poisoned;
                
                if
                    !is_poisoned ||
                    context.current.token == Lexical.TOKEN.SQUARE_CLOSE
                then
                    is_poisoned = !context.next_token(Lexical.TOKEN.SQUARE_CLOSE) || is_poisoned;
                fi
            fi

            if context.current.token == Lexical.TOKEN.COLON then
                context.next_token();
                ancestors = type_list_parser.parse(context);

                is_poisoned = is_poisoned || ancestors.is_poisoned;
            fi

            var modifiers = modifier_list_parser.parse(context);

            let expect_body = !is_poisoned || context.current.token == Lexical.TOKEN.IS;
            var have_body = false;

            var body: Tree.Definition.LIST;
            
            if expect_body && context.next_token(Lexical.TOKEN.IS) then
                body = definition_list_parser.parse(context);

                have_body = true;
            else
                body = new Tree.Definition.LIST(LOCATION.dummy, new Collections.LIST[Tree.Definition.NODE](0));
                is_poisoned = true;
            fi

            var result = new Tree.Definition.CLASS(
                start::context.location, 
                identifier, 
                arguments, 
                ancestors, 
                modifiers, 
                body
            );

            result.poison(is_poisoned);

            if have_body then
                context.next_token(Lexical.TOKEN.SI);                
            fi
            
            return result;
        si
    si
si
