namespace Syntax.Parser.Statement is
    use object = System.Object;
    use string = System.String;
    use STD = System.Console;

    use System;
    
    class NODE: BASE[Tree.Statement.NODE] is
        labellable_statement_tokens: Collections.LIST[Lexical.TOKEN];
        identifier_parser: Parser[Tree.Identifier.NODE];
        expression_parser: Parser[Tree.Expression.NODE];
        expression_list_parser: Parser[Tree.Expression.LIST];
        variable_parser: Parser[Tree.Variable.NODE];
        variable_list_parser: Parser[Tree.Variable.LIST];
        statement_list_parser: Parser[Tree.Statement.LIST];
        if_parser:  (CONTEXT) -> Tree.Statement.NODE;
        pragma_parser: Parser[Tree.Statement.PRAGMA];

        description: string => "statement";

        init(
            labellable_statement_tokens: Collections.LIST[Lexical.TOKEN],
            identifier_parser: Parser[Tree.Identifier.NODE],
            expression_parser: Parser[Tree.Expression.NODE],
            expression_list_parser: Parser[Tree.Expression.LIST],
            variable_parser: Parser[Tree.Variable.NODE],
            variable_list_parser: Parser[Tree.Variable.LIST],
            statement_list_parser: Parser[Tree.Statement.LIST],
            pragma_parser: Parser[Tree.Statement.PRAGMA]
        )
        is
            super.init();

            self.labellable_statement_tokens = labellable_statement_tokens;
            self.identifier_parser = identifier_parser;
            self.expression_parser = expression_parser;
            self.expression_list_parser = expression_list_parser;
            self.variable_parser = variable_parser;
            self.variable_list_parser = variable_list_parser;
            self.statement_list_parser = statement_list_parser;
            self.pragma_parser = pragma_parser;

            add_parsers();
        si
        
        add_parsers() is
            add_parser(
                (context: CONTEXT) -> Tree.Statement.NODE is
                    var start = context.location;
                    if context.next_token(Lexical.TOKEN.LET, syntax_error_message) then
                        var variable_list = variable_list_parser.parse(context);
                        var result = new Tree.Statement.LET(start::variable_list.location, variable_list);

                        context.next_token(Lexical.TOKEN.SEMICOLON);
                        
                        return result;
                    fi
                si,
                Lexical.TOKEN.LET
            );

            add_parser(
                (context: CONTEXT) -> Tree.Statement.NODE is
                    var start = context.location;
                    if context.next_token(Lexical.TOKEN.VAR, syntax_error_message) then
                        var variable_list = variable_list_parser.parse(context);
                        var result = new Tree.Statement.VAR(start::variable_list.location, variable_list);

                        context.next_token(Lexical.TOKEN.SEMICOLON);
                        
                        return result;
                    fi
                si,
                Lexical.TOKEN.VAR
            );

            add_parser(
                (context: CONTEXT) -> Tree.Statement.NODE is
                    var start = context.location;
                    var end = context.location;

                    if context.next_token(Lexical.TOKEN.RETURN, syntax_error_message) then
                        var expression: Tree.Expression.NODE;
                        if context.current.token != Lexical.TOKEN.SEMICOLON then
                            expression = expression_parser.parse(context);
                            end = expression.location;
                        fi

                        context.next_token(Lexical.TOKEN.SEMICOLON);
                        return new Tree.Statement.RETURN(start::end, expression);
                    fi
                si,
                Lexical.TOKEN.RETURN
            );

            add_parser(
                (context: CONTEXT) -> Tree.Statement.NODE is
                    var start = context.location;
                    var end = context.location;
                    if context.next_token(Lexical.TOKEN.THROW, syntax_error_message) then
                        var expression: Tree.Expression.NODE;
                        if context.current.token != Lexical.TOKEN.SEMICOLON then
                            expression = expression_parser.parse(context);
                            end = expression.location;
                        fi
                        context.next_token(Lexical.TOKEN.SEMICOLON);
                        return new Tree.Statement.THROW(start::end, expression);
                    fi
                si,
                Lexical.TOKEN.THROW
            );

            add_parser(
                (context: CONTEXT) -> Tree.Statement.NODE is
                    let start = context.location;
                    if context.next_token(Lexical.TOKEN.ASSERT, syntax_error_message) then
                        let end = start;

                        let expression = expression_parser.parse(context);
                        end = expression.location;
                        
                        let message: Tree.Expression.NODE;

                        if context.current_token == Lexical.TOKEN.ELSE then
                            context.next_token();

                            message = expression_parser.parse(context);
                            end = message.location;                            
                        fi

                        let result = new Tree.Statement.ASSERT(
                            start::end,
                            expression,
                            message
                        );

                        context.next_token(Lexical.TOKEN.SEMICOLON);
                        
                        return result;
                    fi
                si,
                Lexical.TOKEN.ASSERT
            );

            add_parser(
                (context: CONTEXT) -> Tree.Statement.NODE => parse_if(context),
                Lexical.TOKEN.IF
            );

            add_parser(
                (context: CONTEXT) -> Tree.Statement.NODE is
                    var start = context.location;

                    context.next_token(Lexical.TOKEN.CASE);
                    var expression = expression_parser.parse(context);
                    var seen_default = false;
                    var match_list = new Collections.LIST[Tree.Statement.CASE_MATCH]();

                    while 
                        context.current.token == Lexical.TOKEN.WHEN ||
                        context.current.token == Lexical.TOKEN.DEFAULT
                    do
                        var match_start = context.location;
                        var match_expressions: Tree.Expression.LIST = null;
                        if context.current.token != Lexical.TOKEN.DEFAULT then
                            context.next_token(Lexical.TOKEN.WHEN);
                            match_expressions = expression_list_parser.parse(context);
                            context.next_token(Lexical.TOKEN.COLON);
                        else
                            if seen_default then
                                context.error(context.location, "more than one default in case statement");
                            else
                                seen_default = true;
                            fi
                            context.next_token(Lexical.TOKEN.DEFAULT);
                        fi
                        var match_statements = statement_list_parser.parse(context);
                        match_list.add(new Tree.Statement.CASE_MATCH(match_start::match_statements.location, match_expressions, match_statements));
                    od

                    var result = new Tree.Statement.CASE(start::context.location, expression, match_list);
                    context.next_token(Lexical.TOKEN.ESAC);

                    return result;
                si,
                Lexical.TOKEN.CASE
            );

            add_parser(
                (context: CONTEXT) -> Tree.Statement.NODE is
                    var start = context.location;
                    context.next_token(Lexical.TOKEN.TRY);
                    var body = statement_list_parser.parse(context);
                    var catches = new Collections.LIST[Tree.Statement.CATCH]();
                    while context.current.token == Lexical.TOKEN.CATCH do
                        var catch_start = context.location;
                        context.next_token();
                        var catch_variable = variable_parser.parse(context);
                        var catch_body = statement_list_parser.parse(context);
                        catches.add(new Tree.Statement.CATCH(catch_start::catch_body.location, catch_variable, catch_body));
                    od
                    var finally_: Tree.Statement.LIST;
                    if context.current.token == Lexical.TOKEN.FINALLY then
                        context.next_token();
                        finally_ = statement_list_parser.parse(context);
                    fi
                    var result = new Tree.Statement.TRY(start::context.location, body, catches, finally_);
                    context.next_token(Lexical.TOKEN.YRT);
                    return result;
                si,
                Lexical.TOKEN.TRY
            );

            add_parser(
                (context: CONTEXT) -> Tree.Statement.NODE is
                    var start = context.location;
                    var condition: Tree.Expression.NODE;

                    if context.current.token == Lexical.TOKEN.WHILE then
                        context.next_token();
                        condition = expression_parser.parse(context);
                    fi

                    var body: Tree.Statement.LIST;

                    if context.next_token(Lexical.TOKEN.DO, syntax_error_message) then
                        
                        body = statement_list_parser.parse(context);

                        var result = new Tree.Statement.DO(start::context.location, condition, body);

                        context.next_token(Lexical.TOKEN.OD);

                        return result;
                    else
                        return 
                            new Tree.Statement.DO(
                                start::context.current.location,
                                condition,
                                new Tree.Statement.LIST(start::context.current.location, new Collections.LIST[Tree.Statement.NODE](0)));
                    fi
                si,
                new Collections.LIST[Lexical.TOKEN]([Lexical.TOKEN.WHILE, Lexical.TOKEN.DO])
            );

            add_parser(
                (context: CONTEXT) -> Tree.Statement.NODE is
                    var start = context.location;
                    context.next_token(Lexical.TOKEN.FOR);
                    var variable = variable_parser.parse(context);
                    context.next_token(Lexical.TOKEN.IN);
                    var expression = expression_parser.parse(context);
                    context.next_token(Lexical.TOKEN.DO, syntax_error_message);
                    var body = statement_list_parser.parse(context);
                    var result = new Tree.Statement.FOR(start::context.location, variable, expression, body);
                    context.next_token(Lexical.TOKEN.OD);

                    return result;
                si,
                Lexical.TOKEN.FOR
            );

            add_parser(
                (context: CONTEXT) -> Tree.Statement.NODE is
                    var start = context.location;
                    var end = context.location;
                    context.next_token();
                    var label: Tree.Identifier.NODE;
                    if context.current.token == Lexical.TOKEN.IDENTIFIER then
                        label = identifier_parser.parse(context);
                        end = label.location;
                    fi
                    var result = new Tree.Statement.BREAK(start::end, label);
                    context.next_token(Lexical.TOKEN.SEMICOLON);
                    return result;
                si,
                Lexical.TOKEN.BREAK
            );

            add_parser(
                (context: CONTEXT) -> Tree.Statement.NODE is
                    var start = context.location;
                    var end = context.location;
                    context.next_token();
                    var label: Tree.Identifier.NODE;
                    if context.current.token == Lexical.TOKEN.IDENTIFIER then
                        label = identifier_parser.parse(context);
                        end = label.location;
                    fi
                    var result = new Tree.Statement.CONTINUE(start::end, label);
                    context.next_token(Lexical.TOKEN.SEMICOLON);
                    return result;
                si,
                Lexical.TOKEN.CONTINUE
            );

            add_parser(
                (context: CONTEXT) -> Tree.Statement.NODE => pragma_parser.parse(context),
                Lexical.TOKEN.AT                
            );
        si

        parse_if(context: CONTEXT) -> Tree.Statement.IF is
            var start = context.location;
            var branches = new Collections.LIST[Tree.Statement.IF_BRANCH]();

            do
                var branch_start = context.location;
                var condition: Tree.Expression.NODE;

                if 
                    context.current.token == Lexical.TOKEN.ELIF || context.current.token == Lexical.TOKEN.IF
                then
                    context.next_token();
                    condition = expression_parser.parse(context);

                    if !context.next_token(Lexical.TOKEN.THEN) then
                        branches.add(
                            new Tree.Statement.IF_BRANCH(
                                branch_start::context.current.location,
                                condition, 
                                new Tree.Statement.LIST(
                                    start::context.current.location,
                                    new Collections.LIST[Tree.Statement.NODE](0)
                                )
                            )
                        );

                        if 
                            context.current_token != Lexical.TOKEN.FI && 
                            context.current_token != Lexical.TOKEN.ELIF &&
                            context.current_token != Lexical.TOKEN.ELSE then
                            break;
                        fi
                    fi
                else
                    condition = null;
                    if !context.next_token(Lexical.TOKEN.ELSE) then
                        break;
                    fi
                fi

                var body = statement_list_parser.parse(context);

                branches.add(new Tree.Statement.IF_BRANCH(branch_start::body.location, condition, body));

                if context.current.token == Lexical.TOKEN.FI then
                    context.next_token();
                    break;
                fi
            od

            return new Tree.Statement.IF(start::context.location, branches);
        si

        other_token(context: CONTEXT) -> Tree.Statement.NODE is
            if context.current.token == Lexical.TOKEN.IDENTIFIER then
                context.mark();

                var label = identifier_parser.parse(context);

                if context.current.token == Lexical.TOKEN.COLON then
                    context.next_token();

                    if labellable_statement_tokens.contains(context.current.token) then
                        context.commit();
                        var statement = self.parse(context);
                        return new Tree.Statement.LABELLED(label.location::statement.location, label, statement);
                    fi
                fi

                context.backtrack();
            fi

            var left = expression_parser.parse(context);

            if isa Tree.Expression.Literal.NONE(left) then
                return null;
            elif context.current.token == Lexical.TOKEN.ASSIGN then
                context.next_token();
                var right = expression_parser.parse(context);
                context.next_token(Lexical.TOKEN.SEMICOLON);

                return new Tree.Statement.ASSIGNMENT(left.location::right.location, left, right);
            else
                context.next_token(Lexical.TOKEN.SEMICOLON);

                return new Tree.Statement.EXPRESSION(left.location, left);
            fi
        si
    si
si
