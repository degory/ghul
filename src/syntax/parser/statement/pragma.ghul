namespace Syntax.Parser.Statement is
    use System;
    
    use Source;

    class PRAGMA: BASE[Tree.Statement.PRAGMA] is
        pragma_parser: Parser[Tree.Pragma.NODE];
        statement_parser: Parser[Tree.Statement.NODE];

        init(
            pragma_parser: Parser[Tree.Pragma.NODE],
            statement_parser: Parser[Tree.Statement.NODE]
        ) is
            super.init();

            self.pragma_parser = pragma_parser;
            self.statement_parser = statement_parser;
        si

        parse(context: CONTEXT) -> Tree.Statement.PRAGMA is
            IO.Std.err.println("parse statement pragma: parse pragma node...");
            let pragma_ = pragma_parser.parse(context);

            IO.Std.err.println("parse statement pragma: pragma node is: " + pragma_);

            if pragma_? && !pragma_.is_poisoned then
                IO.Std.err.println("parse statement pragma: pragma node is valid: " + pragma_);

                let statement = statement_parser.parse(context);

                IO.Std.err.println("parse statement pragma: wrapped statement is: " + statement);

                if statement? && !statement.is_poisoned then
                    IO.Std.err.println("parse statement pragma: wrapped statement is valid: " + statement);

                    return new Tree.Statement.PRAGMA(pragma_.location::statement.location, pragma_, statement);
                fi
            fi
        si
    si
si
