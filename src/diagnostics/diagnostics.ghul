namespace Diagnostics is
    use IO;

    enum SEVERITY is
        NONE,
        error,
        warn,
        info,
        hint,
        fatal,
        poison
    si
    
    class DIAGNOSTIC is
        range: RANGE;
        severity: SEVERITY;
        message: string;
        relatedInformation: Collections.List[RELATED_INFORMATION];

        // Do not use - for deserializer only
        init() is si

        init(
            severity: SEVERITY,
            location: Source.LOCATION,
            message: string
        ) is
            self.severity = severity;
            range = new RANGE(location);
            self.message = message;            
        si
        
        init(
            uri: string, from_line: int, from_char: int, to_line: int, to_char: int,
            severity: SEVERITY,
            message: string,
            relatedInformation: Collections.List[RELATED_INFORMATION]
        ) is
            range = new RANGE(from_line, from_char, to_line, to_char);
            self.severity = severity;
            self.message = message;
            self.relatedInformation = relatedInformation;  
        si

        init(
            uri: string, from_line: int, from_char: int, to_line: int, to_char: int,
            severity: SEVERITY,
            message: string
        ) is
            self.init(uri, from_line, from_char, to_line, to_char, severity, message, null);
        si

        to_string() -> string is
            return string.format(
                "{0},{1}..{2},{3}: {4}: {5}",
                [
                    range.start.line, 
                    range.start.character, 
                    range.end.line, 
                    range.end.character + 1,
                    severity,
                    message
                ] 
            );
        si
    si
    
    class RELATED_INFORMATION is
        location: LOCATION;
        message: string;

        // Do not use - for deserializer only
        init() is si

        init(uri: string, from_line: int, from_char: int, to_line: int, to_char: int, message: string) is
            location = new LOCATION(uri, from_line, from_char, to_line, to_char);

            self.message = message;
        si
    si
    
    class LOCATION is
        uri: string;
        range: RANGE;

        // Do not use - for deserializer only
        init() is si

        init(location: Source.LOCATION) is
            self.uri = location.file_name;

            self.range = new RANGE(location.start_line, location.start_column, location.end_line, location.end_column);
        si
                
        init(uri: string, from_line: int, from_char: int, to_line: int, to_char: int) is
            self.uri = uri;

            range = new RANGE(from_line, from_char, to_line, to_char);
        si        
    si
    
    struct RANGE is
        start: POSITION;
        end: POSITION;

        init(location: Source.LOCATION) is
            start = new POSITION(location.start_line, location.start_column);
            end = new POSITION(location.end_line, location.end_column);
        si

        init(from_line: int, from_char: int, to_line: int, to_char: int) is
            start = new POSITION(from_line, from_char);
            end = new POSITION(to_line, to_char);
        si        
    si

    struct POSITION is
        line: int;
        character: int;

        init(line: int, character: int) is
            self.line = line;
            self.character = character;
        si        
    si
si