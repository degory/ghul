namespace Diagnostics is
    trait DiagnosticWriter is
        write(uri: string, diagnostic: DIAGNOSTIC);
        write(uri: string, diagnostics: Collections.Iterable[DIAGNOSTIC]);
    si

    class DiagnosticWriterBase: DiagnosticWriter is
        _writer: IO.TextWriter;

        init(writer: IO.TextWriter) is
            _writer = writer;            
        si

        write(uri: string, diagnostic: DIAGNOSTIC); // abstract

        write(uri: string, diagnostics: Collections.Iterable[DIAGNOSTIC]) is
            for diagnostic in diagnostics do
                write(uri, diagnostic);
            od
        si
    si    
    
    class TAB_DELIMITED_DIAGNOSTIC_WRITER: DiagnosticWriterBase is
        _writer: IO.TextWriter;

        init(writer: IO.TextWriter) is
            _writer = writer;            
        si

        write(uri: string, diagnostic: DIAGNOSTIC) is
            _writer.write(
                "{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\n",
                [
                    uri, 
                    diagnostic.range.start.line, 
                    diagnostic.range.start.character, 
                    diagnostic.range.end.line, 
                    diagnostic.range.end.character + 1,
                    diagnostic.severity,
                    diagnostic.message
                ] 
            );            
        si
    si

    class HUMAN_READABLE_DIAGNOSTIC_WRITER: DiagnosticWriterBase is
        _writer: IO.TextWriter;

        init(writer: IO.TextWriter) is
            _writer = writer;            
        si

        write(uri: string, diagnostic: DIAGNOSTIC) is
            _writer.write(
                "{0}: {1},{2}..{3},{4}: {5}: {6}\n",
                [
                    uri, 
                    diagnostic.range.start.line, 
                    diagnostic.range.start.character, 
                    diagnostic.range.end.line, 
                    diagnostic.range.end.character + 1,
                    diagnostic.severity,
                    diagnostic.message
                ] 
            );            
        si
    si

    class MSBUILD_DIAGNOSTIC_WRITER: DiagnosticWriterBase is
        _writer: IO.TextWriter;

        init(writer: IO.TextWriter) is
            _writer = writer;            
        si

        write(uri: string, diagnostic: DIAGNOSTIC) is
            let severity: string;

            if diagnostic.severity == SEVERITY.warn then
                severity = "warning";
            else
                severity = diagnostic.severity.to_string();                
            fi

            _writer.write(
                "{0}({1},{2}): {3}: {4}\n",
                [
                    uri,
                    diagnostic.range.start.line,
                    diagnostic.range.start.character,
                    severity,
                    diagnostic.message
                ]
            );            
        si
    si

    class DIAGNOSTIC_WRITER_WRAPPER: DiagnosticWriter is
        diagnostic_writer: DiagnosticWriter public;

        init(diagnostic_writer: DiagnosticWriter) is
            self.diagnostic_writer = diagnostic_writer;
        si

        write(uri: string, diagnostic: DIAGNOSTIC) =>
            diagnostic_writer.write(uri, diagnostic);

        write(uri: string, diagnostics: Collections.Iterable[DIAGNOSTIC]) =>
            diagnostic_writer.write(uri, diagnostics);
    si
si
