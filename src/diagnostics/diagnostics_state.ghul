namespace Diagnostics is
    use Collections.MutableMap;
    use Collections.MAP;
    use Collections.LIST;

    class DIAGNOSTIC_STATE: Logging.LoggerState is
        _problem_lists: MutableMap[string,LIST[DIAGNOSTIC]];

        is_poisoned: bool;
        has_errors: bool =>
            _problem_lists.values | .has(list => list.count > 0);

        init() is
            _problem_lists = new MAP[string,LIST[DIAGNOSTIC]]();
        si

        write_to(writer: DiagnosticWriter) is
            for list in _problem_lists do
                writer.write(list.key, list.value);
            od
        si

        poison() is
            is_poisoned = true;
        si
        
        add(uri: string, diagnostic: DIAGNOSTIC) is
            let list = _get_list_for(uri);

            list.add(diagnostic);
        si

        add(uri: string, diagnostics: Collections.Iterable[DIAGNOSTIC]) is
            let list = _get_list_for(uri);

            list.add_range(diagnostics);
        si

        merge(state: DIAGNOSTIC_STATE) is
            for list in state._problem_lists do
                add(list.key, list.value);
            od

            if state.is_poisoned then
                poison();
            fi            
        si
        
        _get_list_for(uri: string) -> LIST[DIAGNOSTIC] is
            let result: LIST[DIAGNOSTIC];

            if !_problem_lists.try_get_value(uri, result ref) then
                result = new LIST[DIAGNOSTIC]();
                _problem_lists[uri] = result;
            fi

            return result;            
        si        
    si
si
