namespace Semantic is
    use System;
    use Generic;

    use Source;

    trait SymbolDefinitionListener is
        add_symbol_definition(location: LOCATION, symbol: Symbol.BASE);
    si

    class SYMBOL_DEFINITION_LOCATIONS: Object, SymbolDefinitionListener is
        _symbol_use_listener: SymbolUseListener;

        _symbol_definition_map: Dict[String,Collections.LIST[Symbol.BASE]];
        _workspace_definition_map: Dict[String,Collections.LIST[Symbol.BASE]];

        init(symbol_use_listener: SymbolUseListener) is
            _symbol_use_listener = symbol_use_listener;

            clear();
        si

        dump_counts() is
            IO.Std.err.println("symbol definition map: " + _symbol_definition_map.Length);
            IO.Std.err.println("workspace definition map: " + _workspace_definition_map.Length);
        si                

        clear() is
            _symbol_definition_map = new Map[String,Collections.LIST[Symbol.BASE]]();
            _workspace_definition_map = new Map[String,Collections.LIST[Symbol.BASE]]();
        si

        add_symbol_definition(location: LOCATION, symbol: Symbol.BASE) is
            if symbol? && symbol.location.file_name !~ "internal" && !symbol.name.startsWith("__") then
                get_symbol_list_for_file_name(location.file_name).add(symbol);

                _symbol_use_listener.add_symbol_use(location, symbol);
            fi
        si

        find_definitions_from_file(file_name: String, workspace_search: bool) -> Collections.Iterable[Symbol.BASE] is
            if workspace_search then
                return get_workspace_list_for_file_name(file_name);
            else
                return get_symbol_list_for_file_name(file_name);
            fi
        si

        get_symbol_list_for_file_name(file_name: String) -> Collections.LIST[Symbol.BASE] is
            var result = _symbol_definition_map[file_name];

            if result == null then
                result = new Collections.LIST[Symbol.BASE]();

                _symbol_definition_map[file_name] = result;
            fi

            return result;
        si

        get_workspace_list_for_file_name(file_name: String) -> Collections.LIST[Symbol.BASE] is
            var result = _workspace_definition_map[file_name];

            if result == null then
                result = new Collections.LIST[Symbol.BASE]();

                _workspace_definition_map[file_name] = result;

                for symbol in get_symbol_list_for_file_name(file_name) do
                    if symbol.is_workspace_visible then
                        result.add(symbol);
                    fi
                od                
            fi

            return result;
        si        
    si
si
