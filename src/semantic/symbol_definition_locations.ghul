namespace Semantic is
    use System;
    
    use Source;

    trait SymbolDefinitionListener is
        add_symbol_definition(location: LOCATION, symbol: Symbol.BASE);
    si

    class SYMBOL_DEFINITION_LOCATIONS: Object, SymbolDefinitionListener is
        _symbol_use_listener: SymbolUseListener;

        _symbol_definition_map: Collections.MAP[String,Collections.LIST[Symbol.BASE]];
        _workspace_definition_map: Collections.MAP[String,Collections.LIST[Symbol.BASE]];

        init(symbol_use_listener: SymbolUseListener) is
            _symbol_use_listener = symbol_use_listener;

            clear();
        si

        dump_counts() is
            System.Console.error.write_line("symbol definition map: " + _symbol_definition_map.count);
            System.Console.error.write_line("workspace definition map: " + _workspace_definition_map.count);
        si                

        clear() is
            _symbol_definition_map = new Collections.MAP[String,Collections.LIST[Symbol.BASE]]();
            _workspace_definition_map = new Collections.MAP[String,Collections.LIST[Symbol.BASE]]();
        si

        add_symbol_definition(location: LOCATION, symbol: Symbol.BASE) is
            if symbol? && !symbol.location.is_internal && !symbol.name.starts_with("__") then
                get_symbol_list_for_file_name(location.file_name).add(symbol);

                _symbol_use_listener.add_symbol_use(location, symbol);
            fi
        si

        find_definitions_from_file(file_name: String, workspace_search: bool) -> Collections.Iterable[Symbol.BASE] is
            if workspace_search then
                return get_workspace_list_for_file_name(file_name);
            else
                return get_symbol_list_for_file_name(file_name);
            fi
        si

        get_symbol_list_for_file_name(file_name: String) -> Collections.LIST[Symbol.BASE] is
            if _symbol_definition_map.contains_key(file_name) then
                return _symbol_definition_map[file_name];
            fi

            let result = new Collections.LIST[Symbol.BASE]();

            _symbol_definition_map[file_name] = result;

            return result;
        si

        get_workspace_list_for_file_name(file_name: String) -> Collections.LIST[Symbol.BASE] is
            if _workspace_definition_map.contains_key(file_name) then
                return _workspace_definition_map[file_name];                
            fi
            
            let result = new Collections.LIST[Symbol.BASE]();

            _workspace_definition_map[file_name] = result;

            for symbol in get_symbol_list_for_file_name(file_name) do
                if symbol.is_workspace_visible then
                    result.add(symbol);
                fi
            od                

            return result;
        si        
    si
si
