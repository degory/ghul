namespace Semantic is
    use Collections.MAP;

    use Syntax.Trees.Node;

    struct STABLE_SYMBOL is
        generation: int;
        symbol: Scope;

        init(generation: int, symbol: Scope) is
            self.generation = generation;
            self.symbol = symbol;
        si
        
        to_string() -> string => "" + symbol + " gen " + generation; 
    si

    class STABLE_SYMBOLS is
        _generation: int;
        _symbols: MAP[Node,STABLE_SYMBOL];
        _is_enabled: bool;

        [node: Node] -> Scope is
            let result: STABLE_SYMBOL;

            _symbols.try_get_value(node, result ref);

            return result.symbol;
        si        

        init() is
            _symbols = new MAP[Node,STABLE_SYMBOL]();
        si

        enable() is
            _is_enabled = true;
        si

        is_stable(node: Node) -> bool is
            let symbol: STABLE_SYMBOL;

            if !_is_enabled then
                return false;
            fi
            
            if _symbols.try_get_value(node, symbol ref) then
                @IF.debug() Std.error.write_line("SSSSSS: is stable: " + symbol + " vs " + _generation + ": " + (_generation > symbol.generation));

                return _generation > symbol.generation;
            fi
        si
        
        try_get_symbol(node: Node, result: STABLE_SYMBOL ref) -> bool is
            if !_is_enabled then
                return false;
            fi

            return _symbols.try_get_value(node, result);
        si

        add(node: Node, scope: Scope) is
            if !_is_enabled then
                return;
            fi
            
            _symbols[node] = new STABLE_SYMBOL(_generation, scope);
        si

        next_generation() is
            _generation = _generation + 1;
        si        
    si
si
