namespace Semantic.Symbols is
    use IO.Std;

    use System.Text.StringBuilder;
    
    use IoC;
    use Logging;
    use Source;

    use Types.Type;

    class GENERIC_ARGUMENT: Scoped, Types.SettableTyped is
        type: Type;
        set_type(value: Type) is type = value; si

        is_value_type: bool => true;
        is_type: bool => true;
        is_type_variable: bool => true;
        
        _ancestor_type: Type;

        index: int;

        // FIXME: should ancestor be a type not a symbol? We could then just use Symbol.ancestors.
        // We'll need multiple ancestors to support multiple constraints anyway
        ancestors: Collections.List[Type] is
            if _ancestor_type == null then
                return Collections.LIST[Type](0);
            fi

            return [_ancestor_type];
        si

        set_ancestor_type(ancestor: Type) is
            _ancestor_type = ancestor;
        si
        
        symbol_kind: SYMBOL_KIND => SYMBOL_KIND.TYPE_PARAMETER;
        completion_kind: COMPLETION_KIND => COMPLETION_KIND.TYPE_PARAMETER;

        // description: string => name + ": {type} // type variable";
        // short_description: string => description;

        description: string =>
            if !_gen_type_override? then
                name + ": {type} // type variable"
            else
                let buffer = StringBuilder();
                buffer.append(name).append(" (");
                _gen_type_override(self, buffer);
                buffer.append(")");
                buffer.to_string();
            fi;

        _gen_type_override: (Symbol, StringBuilder) -> void;

        init(location: LOCATION, owner: Scope, name: string, index: int) is
            init(location, owner, name, Types.NAMED(self));

            self.index = index; 
        si

        init(location: LOCATION, owner: Scope, name: string, type: Type) is
            super.init(location, owner, name);

            self.type = type;
        si

        freeze() -> Symbol is
            let result = cast GENERIC_ARGUMENT(memberwise_clone());

            result._gen_type_override = null;
            result.type = new Types.NAMED(result);

            return result;
        si

        get_ancestor(i: int) -> Type 
            => ancestors[i];

        find_member(name: string) -> Symbol is
            if _ancestor_type? then
                return _ancestor_type.find_member(name);
            fi
        si

        find_member_matches(prefix: string, matches: Collections.MAP[string, Symbol]) is
            if _ancestor_type? then
                _ancestor_type.scope.find_member_matches(prefix, matches);
            fi
        si

        specialize(type_map: Collections.Map[string,Type], owner: GENERIC) -> Symbol is
            if type_map.contains_key(name) then
                return GENERIC_ARGUMENT(
                    location,
                    self,
                    name,
                    type_map[name]
                );                
            fi

            return self;
        si

        gen_type_override(override: (Symbol, StringBuilder) -> void) is
            _gen_type_override = override;
        si

        gen_type(buffer: StringBuilder) is
            if _gen_type_override? then
                _gen_type_override(self, buffer);
            else

                buffer
                    .append('!')
                    .append(index)
                    .append(' ');
            fi
        si        

        gen_reference(buffer: StringBuilder) is
            gen_type(buffer);
        si

        gen_class_name(buffer: StringBuilder) is
            gen_type(buffer);
        si
    si
si
