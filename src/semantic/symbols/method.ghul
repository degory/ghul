namespace Semantic.Symbols is
    use IO.Std;

    use System.Text.StringBuilder;

    use Collections.Iterable;
    use Collections.LIST;
    
    use IoC;
    use Logging;
    use Source;

    use IR.Values.Value;

    use Types.Type;

    class Method: Function is
        is_constructor: bool => self.il_name_override =~ "'.ctor'";

        init(location: LOCATION, span: LOCATION, owner: Scope, name: string, enclosing_scope: Scope) is
            super.init(location, span, owner, name, enclosing_scope);
        si

        gen_dot(buffer: System.Text.StringBuilder) is
            buffer.append("::");
        si
    si
    
    class INSTANCE_METHOD: Method is
        description: string => "{qualified_name}{generic_argument_descriptions}({argument_descriptions}) {if is_constructor then "// constructor" else "-> {return_type} // method" fi}";
        symbol_kind: SYMBOL_KIND => SYMBOL_KIND.METHOD;
        completion_kind: COMPLETION_KIND => COMPLETION_KIND.METHOD;

        is_instance: bool => true;

        init(location: LOCATION, span: LOCATION, owner: Scope, name: string, enclosing_scope: Scope) is
            super.init(location, span, owner, name, enclosing_scope);
        si

        declare_closure(location: LOCATION, name: string, owner: Scope, enclosing: Scope, is_recursive: bool, symbol_definition_listener: SymbolDefinitionListener) -> Symbol is
            let result = Symbols.INSTANCE_CLOSURE(location, owner, name, enclosing, is_recursive);

            declare(location, result, null);

            return result;
        si

        load(location: LOCATION, from: Value, loader: SYMBOL_LOADER) -> Value is
            return loader.load_instance_method(location, from, self);
        si

        load_self(location: LOCATION, loader: SYMBOL_LOADER) -> Value is
            let context = IoC.CONTAINER.instance.symbol_table.current_instance_context;

            return IR.Values.Load.REFERENCE_SELF(context, context.type);
        si

        call(location: Source.LOCATION, from: Value, arguments: Collections.List[Value], type: Type, caller: FUNCTION_CALLER) -> Value is           
            return caller.call_instance_method(location, from, self, arguments, self.arguments, type);
        si

        try_override(into: Classy, overridee: Function, logger: Logging.Logger) is
            overridee.try_instance_override_me(into, self, logger);
        si

        try_instance_override_me(into: Classy, overrider: Function, logger: Logger) is
            let return_type_matches = overrider.ensure_return_type_matches(into, self, true, logger);

            let il_name_matches = overrider.ensure_il_name_matches(into, self, "override", logger);

            overrider.add_overridee(self);
            self.add_overrider(overrider);
        si

        try_struct_override_me(into: Classy, overrider: Function, logger: Logger) is
            let return_type_matches = overrider.ensure_return_type_matches(into, self, true, logger);

            let il_name_matches = overrider.ensure_il_name_matches(into, self, "override", logger);

            overrider.add_overridee(self);
            self.add_overrider(overrider);
        si

        try_abstract_override_me(into: Classy, overrider: Function, logger: Logger) is
            logger.error(overrider.location, "cannot override abstract method {self}");
        si

        gen_calling_convention(buffer: StringBuilder) is            
            buffer.append("instance ");
        si

        gen_flags(buffer: StringBuilder) is
            if name =~ "init" then
                buffer
                    .append("hidebysig specialname ");
            elif is_internal then
                buffer
                    .append("virtual hidebysig specialname ");
            else
                buffer
                    .append("virtual hidebysig ");
            fi
        si
    si

    class STRUCT_METHOD: INSTANCE_METHOD is
        description: string => "{qualified_name}{generic_argument_descriptions}({argument_descriptions}) {if is_constructor then "// constructor" else "-> {return_type} // method" fi}";
        symbol_kind: SYMBOL_KIND => SYMBOL_KIND.METHOD;
        completion_kind: COMPLETION_KIND => COMPLETION_KIND.METHOD;

        override: Function public;

        init(location: LOCATION, span: LOCATION, owner: Scope, name: string, enclosing_scope: Scope) is
            super.init(location, span, owner, name, enclosing_scope);
        si

        load(location: LOCATION, from: Value, loader: SYMBOL_LOADER) -> Value is
            return loader.load_struct_method(location, from, self);
        si

        load_self(location: LOCATION, loader: SYMBOL_LOADER) -> Value is
            let context = IoC.CONTAINER.instance.symbol_table.current_instance_context;

            return IR.Values.Load.REFERENCE_SELF(context, context.type);
        si

        declare_closure(location: LOCATION, name: string, owner: Scope, enclosing: Scope, is_recursive: bool, symbol_definition_listener: SymbolDefinitionListener) -> Symbol is
            let result = Symbols.INSTANCE_CLOSURE(location, owner, name, enclosing, is_recursive);

            declare(location, result, null);

            return result;
        si

        call(location: Source.LOCATION, from: Value, arguments: Collections.List[Value], type: Type, caller: FUNCTION_CALLER) -> Value =>
            caller.call_struct_method(location, from, self, arguments, self.arguments, type);

        try_override(into: Classy, overridee: Function, logger: Logging.Logger) =>
            overridee.try_struct_override_me(into, self, logger);

        try_struct_override_me(into: Classy, overrider: Function, logger: Logger) =>
            logger.error(overrider.location, "cannot override struct method {self}");

        try_instance_override_me(into: Classy, overrider: Function, logger: Logger) =>
            logger.error(overrider.location, "cannot override struct method {self}");

        try_abstract_override_me(into: Classy, overrider: Function, logger: Logger) =>
            logger.error(overrider.location, "cannot override struct method {self}");

        gen_calling_convention(buffer: StringBuilder) is
            buffer.append("instance ");
        si

        gen_flags(buffer: StringBuilder) is
            if name !~ "init" then
                buffer
                    .append("final virtual hidebysig ");
            elif is_internal then
                buffer
                    .append("hidebysig specialname ");
            else
                buffer
                    .append("hidebysig specialname ");
            fi
        si
    si

    class ABSTRACT_METHOD: INSTANCE_METHOD is
        description: string => qualified_name + generic_argument_descriptions +"({argument_descriptions}) -> {return_type} // abstract method";

        is_abstract: bool => true;

        init(location: LOCATION, span: LOCATION, owner: Scope, name: string, enclosing_scope: Scope) is
            super.init(location, span, owner, name, enclosing_scope);

            assert owner? else "abstract method created without owner";
        si

        call(location: Source.LOCATION, from: Value, arguments: Collections.List[Value], type: Type, caller: FUNCTION_CALLER) -> Value is
            return caller.call_abstract_method(location, from, self, arguments, self.arguments, type);
        si

        try_pull_down_into(
            into: Classy,
            other_overridee_symbols: Collections.Iterable[Symbol],
            logger: Logging.Logger
        ) is
            if !into.is_trait /\ !into.is_stub then
                logger.error(into.location, "must implement {self}");
            fi
            
            into.add_member(self);
        si

        try_override(into: Classy, overridee: Function, logger: Logging.Logger) =>
            overridee.try_abstract_override_me(into, self, logger);

        try_instance_override_me(into: Classy, overrider: Function, logger: Logger) is
            let return_type_matches = overrider.ensure_return_type_matches(into, self, false, logger);

            let il_name_matches = overrider.ensure_il_name_matches(into, self, "implement", logger);

            overrider.add_overridee(self);
            self.add_overrider(overrider);
        si

        try_struct_override_me(into: Classy, overrider: Function, logger: Logger) is
            let return_type_matches = overrider.ensure_return_type_matches(into, self, false, logger);

            let il_name_matches = overrider.ensure_il_name_matches(into, self, "implement", logger);

            overrider.add_overridee(self);
            self.add_overrider(overrider);
        si

        try_abstract_override_me(into: Classy, overrider: Function, logger: Logger) =>
            logger.info(overrider.location, "hides {self}");

        gen_calling_convention(buffer: StringBuilder) is            
            buffer.append("instance ");
        si

        gen_flags(buffer: StringBuilder) is
            if is_internal then
                buffer
                    .append("virtual hidebysig specialname abstract ");
            else
                buffer
                    .append("virtual hidebysig abstract ");
            fi
        si
    si

    class STATIC_METHOD: Method is
        description: string => qualified_name + generic_argument_descriptions + "({argument_descriptions}) -> {return_type} // class method";
        symbol_kind: SYMBOL_KIND => SYMBOL_KIND.METHOD;
        completion_kind: COMPLETION_KIND => COMPLETION_KIND.METHOD;

        override: Function public;

        init(location: LOCATION, span: LOCATION, owner: Scope, name: string, enclosing_scope: Scope) is
            super.init(location, span, owner, name, enclosing_scope);
        si

        declare_closure(location: LOCATION, name: string, owner: Scope, enclosing: Scope, is_recursive: bool, symbol_definition_listener: SymbolDefinitionListener) -> Symbol is
            let result = Symbols.STATIC_CLOSURE(location, owner, name, enclosing, is_recursive);

            declare(location, result, null);

            return result;
        si

        load(location: LOCATION, from: Value, loader: SYMBOL_LOADER) -> Value is
            return loader.load_static_method(self);
        si

        call(location: Source.LOCATION, from: Value, arguments: Collections.List[Value], type: Type, caller: FUNCTION_CALLER) -> Value is
            return caller.call_static_method(self, arguments, self.arguments, type);
        si

        try_override(into: Classy, overridee: Function, logger: Logging.Logger) is
            // This is arguably not an issue as the hidden instance remains available via super.method()
            if !is_internal /\ overridee.is_instance then
                logger.warn(self.location, "static method hides {overridee}");                
            fi
        si

        // Don't believe it makes sense to report an instance methods hiding a static method
        // as the static method remains available via CLASS.method()
        try_instance_override_me(into: Classy, overrider: Function, logger: Logger) is
        si

        try_struct_override_me(into: Classy, overrider: Function, logger: Logger) is
        si

        try_abstract_override_me(into: Classy, overrider: Function, logger: Logger) is
        si

        gen_flags(buffer: StringBuilder) is
            if is_internal then
                buffer
                    .append("hidebysig specialname static ");
            else
                buffer
                    .append("hidebysig static ");
            fi
        si

        gen_body_header(context: IR.CONTEXT) is            
            gen_entrypoint(context);
        si
    si
si
