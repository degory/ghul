namespace Semantic.Symbols is
    use System.Text.StringBuilder;
    
    use Logging;
    use Source;

    use IR.Values.Value;

    use Types.Type;

    // FIXME: doesn't really have a type, not sure how to represent this:
    class NAMESPACE: ScopedWithEnclosingScope, NamespaceContext, ExtensionMethodSearchContext, Types.Typed is
        qualified_name: string;

        type: Type;

        description: string is
            let qn = qualified_name;
            
            if qn.starts_with('.') then
                qn = qn.substring(1);
            fi

            return "namespace {qn}";
        si

        short_description: string => "namespace {name}";

        symbol_kind: SYMBOL_KIND => SYMBOL_KIND.NAMESPACE;
        completion_kind: COMPLETION_KIND => COMPLETION_KIND.MODULE;

        is_namespace: bool => true;
        is_classy: bool => false;
        is_internal: bool => false;
        is_compiler_generated: bool;

        init(
            location: LOCATION, 
            name: string, 
            enclosing_scope: Scope, 
            qualified_name: string,
            is_compiler_generated: bool
        ) is
            super.init(location, self, name, enclosing_scope);

            self.qualified_name = qualified_name;
            self.is_compiler_generated = is_compiler_generated;

            type = Types.NAMED(self);
        si

        qualify(name: string) -> string is
            if is_compiler_generated then
                return name;
            fi

            let q = qualified_name;

            if q.length > 1 then
                return "{qualified_name.substring(1)}.{name}";                
            fi
            
            return name;
        si

        find_direct(name: string) -> Symbol is
            assert name? else "searched name is null";

            let result = super.find_direct(name);

            if result? then
                return result;
            fi

            let dotnet_symbol_table = IoC.CONTAINER.instance.dotnet_symbol_table.value;
            
            let qn = qualified_name;

            if qn =~ "." \/ qn.length == 0 then
                return null;
            fi
            
            if qn.starts_with(".") then
                qn = qn.substring(1);
            fi

            return dotnet_symbol_table.get_symbol("{qn}.{name}");                
        si
        
        find_member(name: string) -> Symbol
            => find_direct(name);

        find_member_matches(prefix: string, matches: Collections.MutableMap[string, Symbols.Symbol]) is
            find_direct_matches(prefix, matches);

            let qn = qualified_name;

            let namespaces = IoC.CONTAINER.instance.namespaces;
            let dotnet_symbol_table = IoC.CONTAINER.instance.dotnet_symbol_table.value;

            if qn =~ "." \/ qn.length == 0 then
                // FIXME: don't think this is ever hit:
                namespaces.find_root_matches(matches);
                dotnet_symbol_table.find_root_matches(matches);

                return;
            fi

            if qn.starts_with(".") then
                qn = qn.substring(1);
            fi

            namespaces.find_namespace_matches(qn, matches);

            dotnet_symbol_table.find_member_matches(qn, matches);
        si

        all_members() -> Collections.Iterable[Symbol] is
            // let use debug_dispose = debug_enter();

            let all_symbols_in_scope = Collections.MAP[string, Symbols.Symbol]();
            
            find_member_matches("", all_symbols_in_scope);

            // debug("NNNN all members of {self} {self.qualified_name}: {all_symbols_in_scope.keys|}");

            let result =
                all_symbols_in_scope.values | 
                    .map(s => cast NAMESPACE(s))
                    .filter(s => s?)
                    .flat_map(s => s.all_members())
                    .cat(
                        all_symbols_in_scope.values | 
                        // .debug(s => debug("NNNN namespace {self} {self.qualified_name} member {s} ({s.get_type()}) is classy: {s.is_classy} is extension: {s.is_extension}"))
                        .filter(s => s.is_classy /\ s.is_extension));

            // debug("NNNN filtered and aggregated: {result|}");

            return result;
        si

        // FIXME may never be referenced, or at least never return a useful result
        // vs the implementation in NAMESPACE_SCOPE
        // TODO cache this result?
        find_extension_method(left_type: Semantic.Types.Type, name: string) -> Symbols.FUNCTION_GROUP =>
            let functions =
                all_members() | 
                    // .debug(c is debug_always("NNNN namespace {self} {self.qualified_name} consider symbol {c}") si)
                    .map(symbol => cast Symbols.Classy(symbol)) 
                        // .debug(c is 
                        //     if c? then debug_always("NNNN maybe extension class {c} {c.is_extension}") fi
                        // si)
                        .filter(maybe_class => maybe_class? /\ maybe_class.is_extension)
                        // .debug(c is debug_always("NNNN extension class {c} {c.is_extension}") si)
                        .flat_map(
                            `class => `class.find_extension_method(left_type, name)
                        )
            in
                if functions.count() > 0 then
                    Symbols.FUNCTION_GROUP(LOCATION.internal, enclosing_scope, name, functions);
                else
                    null
                fi;

        declare_stable(symbol: Symbol) is
            declare(symbol.location, symbol, null);
        si

        declare_namespace(location: LOCATION, name: string, `namespace: Symbols.NAMESPACE, symbol_definition_listener: SymbolDefinitionListener) is
            assert name?;
            assert `namespace?;
            assert `namespace.name?;

            declare(location, `namespace, symbol_definition_listener);
        si

        declare_class(location: LOCATION, span: LOCATION, name: string, arguments: Collections.List[string], is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol is
            let result = Symbols.CLASS(location, span, self, name, arguments, is_stub, enclosing);

            declare(location, result, symbol_definition_listener);

            return result;
        si

        declare_trait(location: LOCATION, span: LOCATION, name: string, arguments: Collections.List[string], is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol is
            let result = Symbols.TRAIT(location, span, self, name, arguments, is_stub, enclosing);

            declare(location, result, symbol_definition_listener);

            return result;
        si

        declare_struct(location: LOCATION, span: LOCATION, name: string, arguments: Collections.List[string], is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol is
            let result = Symbols.STRUCT(location, span, self, name, arguments, is_stub, enclosing);

            declare(location, result, symbol_definition_listener);

            return result;
        si

        declare_union(location: LOCATION, span: LOCATION, name: string, arguments: Collections.List[string], is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol is
            let result = Symbols.UNION(location, span, self, name, arguments, is_stub, enclosing);

            declare(location, result, symbol_definition_listener);

            return result;
        si

        declare_enum(location: LOCATION, span: LOCATION, name: string, is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol is
            let result = Symbols.ENUM_STRUCT(location, span, self, name, false, self);

            declare(location, result, symbol_definition_listener);

            return result;
        si

        declare_innate(location: LOCATION, name: string, innate_name: string, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol is
            let result = Symbols.INNATE_FUNCTION(location, self, name, enclosing, innate_name);

            declare_function_group(location, result, symbol_definition_listener);

            return result;
        si        

        declare_function(location: LOCATION, span: LOCATION, name: string, is_static: bool, is_private: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol is
            let result = Symbols.GLOBAL_FUNCTION(location, span, self, name, enclosing);

            declare_function_group(location, result, symbol_definition_listener);

            return result;
        si

        declare_variable(location: LOCATION, name: string, is_static: bool, symbol_definition_listener: SymbolDefinitionListener) -> Symbol is
            let result = Symbols.GLOBAL_VARIABLE(location, self, name);

            declare(location, result, symbol_definition_listener);

            return result;
        si

        declare_property(location: LOCATION, span: LOCATION, name: string, is_static: bool, is_private: bool, is_assignable: bool, symbol_definition_listener: SymbolDefinitionListener) -> Symbol is
            let result = Symbols.GLOBAL_PROPERTY(location, span, self, name, is_assignable);

            declare(location, result, symbol_definition_listener);

            return result;
        si

        load(location: LOCATION, from: Value, loader: SYMBOL_LOADER) -> Value is
            return loader.load_namespace(self);
        si

        gen_reference(buffer: StringBuilder) is
            gen_dotted_name(buffer, null);
        si

        gen_dot(buffer: System.Text.StringBuilder) is
            buffer.append(".");
        si
        
        gen_dotted_name(buffer: System.Text.StringBuilder, qualifying: Scope) is            
            if qualified_name.length <= 1 then
                return;
            fi

            let parts = qualified_name.substring(1).split(['.']);

            let seen_any = false;

            for part in parts do
                if seen_any then
                    buffer.append('.');
                fi                

                buffer
                    .append("'")
                    .append(part)
                    .append("'");

                seen_any = true;
            od

            if qualifying? then
                qualifying.gen_dot(buffer);
            else
                buffer.append(' ');
            fi
        si
    si
si
