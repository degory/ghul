namespace Semantic.Symbols is
    use IO.Std;

    use System.Text.StringBuilder;
    
    use IoC;
    use Logging;
    use Source;

    use Types.Type;

    use IR.Values.Value;
    use IR.Values.DUMMY;

    class Variable: Symbol, Types.SettableTyped is
        type: Type;
        set_type(value: Type) is type = value; si

        short_description: string => "{name}: {type.short_description}";

        symbol_kind: SYMBOL_KIND => SYMBOL_KIND.VARIABLE;
        completion_kind: COMPLETION_KIND => COMPLETION_KIND.VARIABLE;

        is_defined: bool;
        is_variable: bool => true;
        is_assigned: bool public;
        is_captured: bool public;

        init(location: LOCATION, owner: Scope, name: string) is
            super.init(location, owner, name);
        si

        specialize(type_map: Collections.Map[string,Type], owner: GENERIC) -> Symbol is
            let result = cast Variable(memberwise_clone());

            result.specialized_from = self;

            if type? then
                let specialized_type = type.specialize(type_map);

                result.type = specialized_type;                
            fi

            result.owner = owner;

            return result;
        si

        gen_reference(buffer: StringBuilder) is
            gen_name(buffer);
        si

        gen_definition_header(buffer: StringBuilder) is
            gen_directive(buffer);

            gen_access(buffer);

            gen_flags(buffer);

            gen_open_paren(buffer);

            type.gen_type(buffer);

            gen_owner_name(buffer);

            gen_name(buffer);

            gen_close_paren(buffer);
        si

        gen_directive(buffer: StringBuilder);

        gen_access(buffer: StringBuilder) is
        si

        gen_flags(buffer: StringBuilder) is
        si

        gen_owner_name(buffer: StringBuilder) is
        si
        
        gen_open_paren(buffer: StringBuilder) is            
        si

        gen_close_paren(buffer: StringBuilder) is            
        si        
    si

    // FIXME: pull up common code into a local + argument superclass:
    class LOCAL_VARIABLE: Variable, Types.SettableTyped is
        description: string is
            let kind: string;

            if is_captured then
                kind = "captured value";
            elif is_assigned then
                kind = "local variable";
            else
                kind = "local value";                
            fi

            return "{name}: {type} // {kind}";
        si
            
        init(location: LOCATION, owner: Scope, name: string) is
            super.init(location, owner, name);

            il_name_override = IoC.CONTAINER.instance.local_id_generator.get_unique_il_name_for(name);
        si

        define() is
            is_defined = true;
        si

        check_is_defined(location: LOCATION) is
            if !is_defined then
                IoC.CONTAINER.instance.logger.error(location, "variable is not defined here");            
            fi            
        si
        
        load(location: LOCATION, from: Value, loader: SYMBOL_LOADER) -> Value is
            assert !from?;

            check_is_defined(location);

            return loader.load_local_variable(location, self);
        si

        load_outer(location: LOCATION, from: Value, loader: SYMBOL_LOADER) -> Value is
            assert !from?;

            return loader.load_outer_local_variable(location, self);
        si

        store(location: LOCATION, from: Value, value: Value, loader: SYMBOL_LOADER, is_initialize: bool) -> Value is
            assert !from?;

            check_is_defined(location);

            is_assigned = true;

            return loader.store_local_variable(location, self, value, is_initialize);
        si

        gen_directive(buffer: StringBuilder) is
            buffer.append(".locals ");
        si

        gen_access(buffer: StringBuilder) is
        si

        gen_flags(buffer: StringBuilder) is
            buffer.append("init ");
        si

        gen_open_paren(buffer: StringBuilder) is
            buffer.append("(");
        si
        
        gen_close_paren(buffer: StringBuilder) is
            buffer.append(")");
        si
    si

    // FIXME: pull up common code into a local + argument superclass:
    class LOCAL_ARGUMENT: Variable, Types.SettableTyped is
        is_argument: bool => true;
        
        description: string is
            let kind: string;

            if is_captured then
                kind = "captured value";
            elif is_assigned then
                kind = "local variable";
            else
                kind = "local argument";                
            fi

            return "{name}: {type} // {kind}";
        si

        init(location: LOCATION, owner: Scope, name: string) is
            super.init(location, owner, name);
        si

        load(location: LOCATION, from: Value, loader: SYMBOL_LOADER) -> Value is
            assert !from?;
            return loader.load_local_argument(location, self);
        si

        load_outer(location: LOCATION, from: Value, loader: SYMBOL_LOADER) -> Value is
            assert !from?;
            return loader.load_outer_local_argument(location, self);
        si

        store(location: LOCATION, from: Value, value: Value, loader: SYMBOL_LOADER, is_initialize: bool) -> Value is
            assert !from?;

            is_assigned = true;

            return loader.store_local_argument(location, self, value, is_initialize);
        si

        gen_definition_header(buffer: StringBuilder) is
        si
    si

    class Field: Variable, Types.SettableTyped is
        unspecialized_type: Type;

        symbol_kind: SYMBOL_KIND => SYMBOL_KIND.FIELD;
        completion_kind: COMPLETION_KIND => COMPLETION_KIND.FIELD;

        is_private: bool;
        is_field: bool => true;
        is_public_readable: bool => !is_private;
        is_workspace_visible: bool => name? /\ !name.starts_with('_');

        init(location: LOCATION, owner: Scope, name: string) is
            super.init(location, owner, name);

            self.is_private = name? /\ name.starts_with('_');
        si

        specialize(type_map: Collections.Map[string,Type], owner: GENERIC) -> Symbol is
            let result = cast Field(super.specialize(type_map, owner));

            result.unspecialized_type = type;

            return result;
        si

        gen_reference(buffer: StringBuilder) is
            let t = unspecialized_type;

            if !t? then
                t = type;
            fi

            t.gen_type(buffer);
            owner.gen_reference(buffer);
            gen_dot(buffer);
            gen_name(buffer);
        si

        gen_access(buffer: StringBuilder) is
            // TODO: ideally would be 'family' as all fields are protected access, but closure frames need to be able to access
            // static fields as if from the owning class:
            buffer.append("assembly ");
        si
        
        gen_directive(buffer: StringBuilder) is
            buffer.append(".field ");
        si
        
        gen_dot(buffer: StringBuilder) is
            buffer.append("::");
        si
    si

    class GLOBAL_VARIABLE: Field, Types.SettableTyped is
        init(location: LOCATION, owner: Scope, name: string) is
            super.init(location, owner, name);
        si

        load(location: LOCATION, from: Value, loader: SYMBOL_LOADER) -> Value is
            assert !from? else "load global function from instance context";
            return loader.load_global_variable(self);
        si

        store(location: LOCATION, from: Value, value: Value, loader: SYMBOL_LOADER, is_initialize: bool) -> Value is
            assert !from? else "load global function from instance context";
            return loader.store_global_variable(self, value);
        si

        gen_flags(buffer: StringBuilder) is
            buffer.append("static ");
        si

        gen_owner_name(buffer: StringBuilder) is
            owner.gen_dotted_name(buffer, true);
        si

        gen_dot(buffer: StringBuilder) is
            buffer.append(".");
        si
    si

    class INSTANCE_FIELD: Field is
        description: string => "{qualified_name}: {type} // field";

        is_instance: bool => true;

        init(location: LOCATION, owner: Scope, name: string) is
            super.init(location, owner, name);
        si

        load(location: LOCATION, from: Value, loader: SYMBOL_LOADER) -> Value is
            return loader.load_instance_variable(location, from, self);
        si

        store(location: LOCATION, from: Value, value: Value, loader: SYMBOL_LOADER, is_initialize: bool) -> Value is
            return loader.store_instance_variable(location, from, self, value);
        si
    si

    class STATIC_FIELD: Field is
        description: string => "{qualified_name}: {type} // class field";

        init(location: LOCATION, owner: Scope, name: string) is
            super.init(location, owner, name);
        si

        load(location: LOCATION, from: Value, loader: SYMBOL_LOADER) -> Value is
            return loader.load_static_field(self);
        si

        store(location: LOCATION, from: Value, value: Value, loader: SYMBOL_LOADER, is_initialize: bool) -> Value is
            return loader.store_static_field(self, value);
        si

        gen_flags(buffer: StringBuilder) is
            buffer.append("static ");
        si
    si
si

