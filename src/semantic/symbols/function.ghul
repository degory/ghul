namespace Semantic.Symbols is
    use IO.Std;

    use System.Exception;
    use System.NotImplementedException;
    use System.Text.StringBuilder;

    use Collections.Iterable;
    
    use IoC;
    use Logging;
    use Source;

    use IR.Values.Value;

    use Types.Type;

    class Function: ScopedWithEnclosingScope, Types.Typed is
        _arguments: Collections.List[Type];

        _seen_entrypoint: bool static;

        _declaring_arguments: bool;
        _override_class: METHOD_OVERRIDE_CLASS;

        override_class: METHOD_OVERRIDE_CLASS is
            if !_override_class? then
                _override_class = METHOD_OVERRIDE_CLASS(arguments);
            fi

            return _override_class;
        si

        _overriders: Collections.MutableList[Symbol];
        _overridees: Collections.MutableList[Symbol];

        span: LOCATION;

        type: Type public;
        return_type: Type public;

        arguments: Collections.List[Type] public => _arguments,
            = value is
                assert value? else "setting arguments to null for {name}";
                assert value | .all(a => a?) else "setting an argument to null for {name}"; 

                _arguments = value;
            si

        generic_arguments: Collections.List[Type] public;
        generic_argument_names: Collections.List[string] public;
        unspecialized_arguments: Collections.List[Type] public;
        unspecialized_return_type: Type public;

        argument_names: Collections.List[string] public;
        symbol_kind: SYMBOL_KIND => SYMBOL_KIND.FUNCTION;
        completion_kind: COMPLETION_KIND => COMPLETION_KIND.FUNCTION;

        is_function: bool => true;
        is_generic: bool public;
        is_abstract: bool => false;
        is_capture_context: bool => true;
        is_workspace_visible: bool => name? /\ !name.starts_with('_');
        is_recursive: bool => false; // only applicable if a closure

        short_description: string => "{name}{generic_argument_descriptions}({short_argument_descriptions}) -> {return_type.short_description}";
        search_description: string => short_description;
        
        argument_descriptions: string =>
            (0..arguments.count) | .map(i => get_argument_description(i)).to_string();

        short_argument_descriptions: string =>
            (0..arguments.count) | .map(i => get_short_argument_description(i)).to_string();

        generic_argument_descriptions: string is
            if !generic_arguments? \/ generic_arguments.count == 0 then
                return "";
            fi            

            let result = System.Text.StringBuilder();

            result.append('[');

            generic_arguments | .append_to(result, ",");

            result.append(']');

            return result.to_string();
        si
        
        overriders: Collections.Iterable[Symbol] => _overriders;
        overridees: Collections.Iterable[Symbol] => _overridees;

        =~(other: Function) -> bool => self == other;

        init(location: LOCATION, span: LOCATION, owner: Scope, name: string, enclosing_scope: Scope) is
            super.init(location, owner, name, enclosing_scope);

            self.span = span;

            if name =~ "init" then
                il_name_override = "'.ctor'";
            fi
            
            type = Types.NAMED(self);
        si

        set_arguments(argument_names: Collections.List[string], argument_types: Collections.List[Type]) is
            self.arguments = argument_types;

            assert argument_names? else "setting argument names to null for {name} (B)";
            assert argument_names | .all(a => a?) else "setting an argument name to null for {name} (B)";

            self.argument_names = argument_names;
        si

        add_overrider(overrider: Symbol) is
            let rsf = root_specialized_from;
            if rsf != self then
                rsf.add_overrider(overrider);
                return;
            fi

            if !_overriders? then
                _overriders = Collections.LIST[Symbol]();
            fi 

            overrider = overrider.root_specialized_from;

            _overriders.add(overrider);
        si

        add_overridee(overridee: Symbol) is
            let rsf = root_specialized_from;
            if rsf != self then
                rsf.add_overridee(overridee);
                return;
            fi

            if !_overridees? then
                _overridees = Collections.LIST[Symbol]();
            fi 

            overridee = overridee.root_specialized_from;

            _overridees.add(overridee);
        si

        load_self(location: LOCATION, loader: SYMBOL_LOADER) -> Value is
            IoC.CONTAINER.instance.logger.error(location, "cannot access instance member from non-instance context");

            return IR.Values.DUMMY(Types.ERROR(), location);
        si

        load_outer_self(location: LOCATION, loader: SYMBOL_LOADER) -> Value is
            IoC.CONTAINER.instance.logger.error(location, "cannot access instance member from non-instance context");

            return IR.Values.DUMMY(Types.ERROR(), location);
        si        
        
        load_captured_value(location: LOCATION, symbol: Variable, loader: SYMBOL_LOADER) -> Value is
            throw NotImplementedException("{get_type()} cannot load captured value: {symbol} from: {location}");
        si

        load_outer_captured_value(location: LOCATION, symbol: Variable, loader: SYMBOL_LOADER) -> Value is
            throw NotImplementedException("{get_type()} cannot load outer captured value: {symbol} from: {location}");
        si
                
        start_declaring_arguments() is
            _declaring_arguments = true;
        si

        end_declaring_arguments() is
            _declaring_arguments = false;
        si

        try_bind_generic_arguments(location: Source.LOCATION, args: Collections.List[Type]) -> Types.GENERIC_ARGUMENT_BIND_RESULTS is
            if !is_generic then
                return null;
            fi

            assert args.count == arguments.count;

            let results = Types.GENERIC_ARGUMENT_BIND_RESULTS();

            let all_ok = true;

            for i in 0..args.count do
                if !arguments[i].bind_type_variables(args[i], results) then
                    return null;
                fi
            od

            if results.check_complete(location, generic_arguments) then
                return results;
            fi

            return results;
        si
        
        specialize_function(type_map: Collections.Map[string,Type], owner: GENERIC) -> Function is
            let result = cast Function(memberwise_clone());
            
            result.specialized_from = self;
            result._override_class = null;

            if !return_type? then
                IoC.CONTAINER.instance.logger.poison(self.location, "specialized with null return type");
            else
                result.return_type = return_type.specialize(type_map);
            fi
            
            if unspecialized_arguments? then
                result.unspecialized_arguments = unspecialized_arguments;
            else
                result.unspecialized_arguments = arguments;
            fi

            if unspecialized_return_type? then
                result.unspecialized_return_type = unspecialized_return_type;
            else
                result.unspecialized_return_type = return_type;
            fi
            
            let ra = Collections.LIST[Type](arguments);

            result.arguments = ra;

            for i in 0..arguments.count do
                let a = arguments[i];

                if a? then
                    ra[i] = arguments[i].specialize(type_map);
                fi
            od

            if generic_arguments? then
                let specialized_arguments = Collections.LIST[Type](generic_arguments.count);

                for ga in generic_arguments do
                    specialized_arguments.add(ga.specialize(type_map));
                od

                result.generic_arguments = specialized_arguments;
            fi

            if owner? then
                if result.owner == owner.unspecialized_symbol then
                    result.owner = owner;
                elif result.owner != owner then
                    result.owner = result.owner.type.specialize(owner.type_map).symbol;
                else
                    Std.error.write_line("{result} is already owned by {owner}");
                fi
            fi

            return result;
        si

        specialize(type_map: Collections.Map[string,Type], owner: GENERIC) -> Symbol =>
            specialize_function(type_map, owner);

        try_specialize(
            location: LOCATION,
            logger: Logger,
            actual_type_arguments: Collections.List[Type]
        ) -> Symbol is
            if !is_generic then
                logger.error(location, "cannot explicitly specialize non-generic type");
                return null;
            elif actual_type_arguments.count != generic_argument_names.count then
                logger.error(location, "expected {generic_argument_names.count} explicit generic type arguments");
                return null;
            fi

            return specialize(actual_type_arguments);
        si
        
        specialize(actual_type_arguments: Collections.List[Type]) -> Symbol is
            assert is_generic else "trying to specialize non generic function {qualified_name}";

            let type_map = Collections.MAP[string,Type]();

            for (index, value) in actual_type_arguments | .index() do
                type_map[generic_argument_names[index]] = value;
            od

            let result = specialize_function(type_map, null);

            if result.is_generic then
                result.is_generic = false;
            fi

            return result;
        si
        
        set_void_return_type() is
            return_type = IoC.CONTAINER.instance.innate_symbol_lookup.get_void_type();
        si

        set_return_type(rt: Type) is
            return_type = rt;

            if rt? /\ arguments? then
                type = IoC.CONTAINER.instance.innate_symbol_lookup.get_function_type(
                    arguments | .cat([rt]).collect_list()
                );
            else
                type = Types.ERROR();            
            fi

            type_updated(type);
        si

        type_updated(type: Type) is
            // override me
        si

        get_full_type(innate_symbol_lookup: Lookups.InnateSymbolLookup) -> Types.Type is
            let types = Collections.LIST[Type](arguments.count + 1);

            types.add_range(arguments);
            types.add(return_type);

            return innate_symbol_lookup.get_function_type(types);
        si

        try_override(into: Classy, function: Function, logger: Logger) is
            logger.error(location, "cannot override {function}");
        si

        try_instance_override_me(into: Classy, function: Function, logger: Logger) is
            logger.error(function.location, "cannot be overridden by {function}");
        si

        try_struct_override_me(into: Classy, function: Function, logger: Logger) is
            logger.error(function.location, "cannot be overridden by {function}");
        si

        try_abstract_override_me(into: Classy, function: Function, logger: Logger) is
            logger.error(function.location, "cannot be overridden by {function}");
        si

        inheritance_warn(logger: Logger, into: Classy, message: string) is
            if owner == into then
                logger.warn(location, message);                    
            else
                logger.warn(into.location, "{self} {message}");
            fi
        si

        inheritance_error(logger: Logger, into: Classy, message: string) is
            if owner == into then
                logger.error(location, message);
            else
                logger.error(into.location, "{self} {message}");
            fi
        si
                
        ensure_return_type_matches(into: Classy, overridee: Function, want_override: bool, logger: Logger) -> bool is
            if !into.is_stub then
                if return_type !~ overridee.return_type then
                    if want_override then
                        inheritance_warn(logger, into, "does not override {overridee} due to different return type {return_type}");
                    else
                        inheritance_error(logger, into, "does not implement {overridee} due to different return type {return_type}");                            
                    fi
                    return false;
                fi
            fi

            return true;
        si

        ensure_il_name_matches(into: Classy, overridee: Function, override_type: string, logger: Logger) -> bool is
            if il_name !~ overridee.il_name then
                if il_name_override? then
                    logger.warn(location, "does not {override_type} {overridee} due to inconsistent IL names ({il_name} vs {overridee.il_name})");
                    return false;
                else
                    il_name_override = overridee.il_name;                    
                fi
            fi

            return true;
        si

        declare_type(location: LOCATION, name: string, index: int, symbol_definition_listener: SymbolDefinitionListener) -> Symbol is
            let result = FUNCTION_GENERIC_ARGUMENT(location, self, name, index);

            declare(location, result, symbol_definition_listener);

            return result;
        si
                
        declare_variable(location: LOCATION, name: string, is_static: bool, symbol_definition_listener: SymbolDefinitionListener) -> Symbol is
            let result: Variable =
                if _declaring_arguments then
                    Symbols.LOCAL_ARGUMENT(location, self, name);
                else
                    Symbols.LOCAL_VARIABLE(location, self, name);
                fi;

            declare(location, result, symbol_definition_listener);

            return result;
        si

        declare_function(location: LOCATION, span: LOCATION, name: string, is_static: bool, is_private: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol is
            let result = Symbols.GLOBAL_FUNCTION(location, span, self, name, enclosing);

            declare_function_group(location, result, symbol_definition_listener);

            return result;
        si

        get_argument_description(index: int) -> string is
            let result = System.Text.StringBuilder();

            result
                .append(argument_names[index])
                .append(": ")
                .append(arguments[index]);

            return result.to_string();
        si

        get_short_argument_description(index: int) -> string is
            let result = System.Text.StringBuilder();

            result
                .append(argument_names[index])
                .append(": ");

            let arg_type = arguments[index];
            
            if arg_type? then
                result.append(arguments[index].short_description);
            else
                result.append("!!!");
            fi

            return result.to_string();
        si

        to_string() -> string is
            let result = System.Text.StringBuilder();

            try
                if name.starts_with("$get_") then
                    result
                        .append(owner.qualified_name)
                        .append(".")
                        .append(name.substring(5))
                        .append(": ")
                        .append(return_type);
                elif name.starts_with("$set_") then
                    result
                        .append(owner.qualified_name)
                        .append(".")
                        .append(name.substring(5))
                        .append(": ")
                        .append(return_type)
                        .append(" = ")
                        .append(argument_names[0]);
                elif name =~ "get_Item" then
                    result
                        .append(owner.qualified_name)
                        .append("[")
                        .append(argument_names[0])
                        .append(": ")
                        .append(arguments[0])
                        .append("]: ")

                        .append(return_type);
                elif name =~ "set_Item" then
                    result
                        .append(owner.qualified_name)
                        .append("[")
                        .append(argument_names[0])
                        .append(": ")
                        .append(arguments[0])
                        .append("]: ")

                        .append(return_type)
                        .append(" = ")
                        .append(argument_names[1]);
                else
                    result
                        .append(qualified_name)
                        .append(generic_argument_descriptions)
                        .append("(")
                        .append(short_argument_descriptions)
                        .append(") -> ")
                        .append(return_type);
                fi

                return result.to_string();
            catch ex: Exception
                return "[garbled function: {result}]";
            yrt
        si

        gen_entrypoint(context: IR.CONTEXT) is
            if name !~ context.entry_point_name \/ arguments.count > 1 \/ !return_type? then
                return;
            fi

            if arguments.count == 1 then
                let lookup = IoC.CONTAINER.instance.innate_symbol_lookup;

                if return_type !~ lookup.get_int_type() /\ return_type !~ lookup.get_void_type() then
                    IoC.CONTAINER.instance.logger.warn(location, "not an entrypoint because return type is not int or void");                    
                    return;
                fi

                let array_type = lookup.get_array_type(lookup.get_string_type());

                if arguments[0] !~ array_type then
                    IoC.CONTAINER.instance.logger.warn(location, "not an entrypoint because argument type is not string[]");                    
                    return;
                fi                
            fi

            if context.seen_entrypoint then
                IoC.CONTAINER.instance.logger.error(location, "duplicate entrypoint");
                return;
            fi

            context.seen_entrypoint = true;

            context.write_line(".entrypoint");
        si

        gen_reference(buffer: StringBuilder) is
            debug("function gen reference...");

            gen_calling_convention(buffer);

            let rt = unspecialized_return_type;

            if !rt? then
                rt = return_type;
            fi

            rt.gen_type(buffer);
            
            owner.gen_reference(buffer);

            gen_dot(buffer);

            gen_name(buffer);

            if generic_arguments? then
                debug("function gen generic arguments...");

                buffer.append('<');
                
                gen_generic_arguments_list(buffer);

                buffer.append('>');
            else
                debug("function no generic arguments");
            fi            

            buffer.append('(');

            gen_actual_arguments_list(buffer);

            buffer.append(')');
        si

        gen_dot(buffer: StringBuilder) is
            buffer.append("::");
        si
        
        gen_reference_for_property(buffer: StringBuilder) is
            gen_calling_convention(buffer);

            let rt = unspecialized_return_type;

            if !rt? then
                rt = return_type;
            fi

            rt.gen_type(buffer);
            
            owner.gen_dotted_name(buffer, self);
            
            gen_name(buffer);

            buffer.append('(');

            gen_actual_arguments_list(buffer);

            buffer.append(')');            
        si
        
        gen_definition_header(buffer: StringBuilder) is
            buffer.append(".method ");

            gen_access(buffer);

            gen_flags(buffer);

            gen_calling_convention(buffer);

            buffer.append(" default ");

            return_type.gen_type(buffer);

            gen_owner_name(buffer);

            gen_name(buffer);

            if generic_arguments? then
                buffer.append('<');
                
                gen_generic_arguments_names(buffer);

                buffer.append('>');
            fi

            buffer.append('(');

            gen_formal_arguments_list(buffer);

            buffer.append(") cil managed");
        si

        gen_body_header(context: IR.CONTEXT) is            
        si
        
        gen_access(buffer: StringBuilder) is
            buffer.append("public ");
        si

        gen_flags(buffer: StringBuilder) is
        si

        gen_calling_convention(buffer: StringBuilder) is            
        si

        gen_owner_name(buffer: StringBuilder) is
        si
        
        gen_formal_arguments_list(buffer: StringBuilder) is
            let seen_any = false;

            for i in 0..argument_names.count do
                if seen_any then
                    buffer.append(',');
                fi

                arguments[i].gen_type(buffer);
                
                buffer
                    .append('\'')
                    .append(argument_names[i])
                    .append('\'');

                seen_any = true;
            od
        si

        gen_actual_arguments_list(buffer: StringBuilder) is
            let seen_any = false;
            let args = unspecialized_arguments;

            if !args? then
                args = arguments;
            fi
            
            for argument in args do
                if seen_any then
                    buffer.append(',');
                fi

                argument.gen_type(buffer);

                seen_any = true;
            od            
        si

        gen_generic_arguments_list(buffer: StringBuilder) is
            let seen_any = false;
            
            for argument in generic_arguments do
                if seen_any then
                    buffer.append(',');
                fi

                argument.gen_type(buffer);

                seen_any = true;
            od            
        si
        
        gen_generic_arguments_names(buffer: StringBuilder) is
            let seen_any = false;
            
            for argument in generic_arguments do
                if seen_any then
                    buffer.append(',');
                fi

                buffer.append(argument.name);

                seen_any = true;
            od            
        si
    si

    class GLOBAL_FUNCTION: Function is
        description: string => qualified_name + generic_argument_descriptions + "({argument_descriptions}) -> {return_type} // global function";

        init(location: LOCATION, span: LOCATION, owner: Scope, name: string, enclosing_scope: Scope) is
            super.init(location, span, owner, name, enclosing_scope);
        si

        declare_closure(location: LOCATION, name: string, owner: Scope, enclosing: Scope, is_recursive: bool, symbol_definition_listener: SymbolDefinitionListener) -> Symbol is
            let result = Symbols.GLOBAL_CLOSURE(location, owner, name, enclosing, is_recursive);

            declare(location, result, null);

            return result;
        si

        load(location: LOCATION, from: IR.Values.Value, loader: SYMBOL_LOADER) -> IR.Values.Value is
            if from? /\ from.is_consumable then
                IoC.CONTAINER.instance.logger.poison(location, "global function load shouldn't have a left expression");
            fi
            
            return loader.load_global_function(self);
        si

        call(location: Source.LOCATION, from: IR.Values.Value, arguments: Collections.List[IR.Values.Value], type: Type, caller: FUNCTION_CALLER) -> IR.Values.Value is
            if from? /\ from.is_consumable then
                IoC.CONTAINER.instance.logger.poison(location, "global function call shouldn't have a left expression");
            fi

            return caller.call_global_function(self, arguments, self.arguments, type);
        si

        gen_owner_name(buffer: StringBuilder) is
            owner.gen_dotted_name(buffer, self);
        si

        gen_dot(buffer: StringBuilder) is
            buffer.append(".");
        si      
        
        // FIXME: should storage class be split out of here:
        gen_flags(buffer: StringBuilder) is
            buffer
                .append("hidebysig static ");
        si

        gen_body_header(context: IR.CONTEXT) is            
            gen_entrypoint(context);
        si
    si
si