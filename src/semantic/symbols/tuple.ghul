namespace Semantic.Symbols is
    use Collections.List;

    use IO.Std;
    
    use IoC;
    use Logging;
    use Source;

    use Types.Type;

    class TUPLE: GENERIC is
        names: List[string];

        description: string =>
            Types.TUPLE.get_short_description(type, names);

        qualified_name: string => description;
        
        init(location: LOCATION, symbol: Symbols.Classy, arguments: Collections.List[Type], names: List[string]) is
            super.init(location, symbol, arguments);

            self.names = names;
        si

        find_named_element(name: string) -> Symbol is
            if !names? then 
                return null;
            fi

            let m = names | .index() .find(iv => iv.value =~ name);

            if !m.has_value then
                return null;
            fi

            let s = symbol.find_direct("`{m.value.index}");
            return _specialize(s);
        si

        find_direct(name: string) -> Symbol is
            assert_symbols_pulled_down();

            return _specialize(symbol.find_direct(name));
        si

        find_member(name: string) -> Symbol is
            let named_element = find_named_element(name);

            if named_element? then
                return named_element;
            fi

            return _specialize(symbol.find_member(name));
        si

        find_enclosing(name: string) -> Symbol is
            let unspecialized = symbol.find_enclosing(name);

            if unspecialized? /\ unspecialized.owner == symbol then
                return _specialize(unspecialized);
            else
                return unspecialized;
            fi
        si

        find_direct_matches(prefix: string, matches: Collections.MutableMap[string, Symbols.Symbol]) is
            let m = new Collections.MAP[string, Symbols.Symbol]();

            symbol.find_direct_matches(prefix, m);

            if names? then
                for (index, name) in names | .index() do
                    m[name] = symbol.find_direct("`{index}");
                    m.remove("`{index}");
                od
            fi    

            for p in m do
                if !matches.contains_key(p.key) then
                    matches[p.key] = _specialize(p.value).collapse_group_if_single_member();
                fi
            od
        si

        find_member_matches(prefix: string, matches: Collections.MutableMap[string, Symbols.Symbol]) is
            find_direct_matches(prefix, matches);
            symbol.find_ancestor_matches(prefix, matches);
        si

        find_enclosing_matches(prefix: string, matches: Collections.MutableMap[string, Symbols.Symbol]) is
        si
        
        to_string() -> string => description;
    si
si