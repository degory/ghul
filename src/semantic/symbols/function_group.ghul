namespace Semantic.Symbols is
    use System.NotImplementedException;
    
    use IoC;
    use Logging;
    use Source;

    use IR.Values.Value;

    use Types.Type;

    class FUNCTION_GROUP: Symbol, Types.Typed is
        _functions: Collections.LIST[Function];

        count: int => _functions.count;
        is_empty: bool => _functions.count == 0;

        description: string => qualified_name + "(...) // function group";
        short_description: string => name + "(...)";
        symbol_kind: SYMBOL_KIND => SYMBOL_KIND.FUNCTION;
        completion_kind: COMPLETION_KIND => COMPLETION_KIND.FUNCTION;

        is_function_group: bool => true;

        type: Type;

        set_type(value: Type) is type = value; si

        functions: Collections.List[Function] => _functions;

        init(location: LOCATION, owner: Scope, name: string) is
            super.init(location, owner, name);

            type = new Types.FUNCTION_GROUP(name, self);
            _functions = new Collections.LIST[Function]();
        si

        specialize_function_group(type_map: Collections.Map[string,Type], owner: GENERIC) -> FUNCTION_GROUP is
            let result = cast FUNCTION_GROUP(memberwise_clone());

            result.specialized_from = self;

            result.type = new Types.FUNCTION_GROUP(
                name,
                result
            );

            result._functions = new Collections.LIST[Function](_functions);

            for i in 0.._functions.count do
                result._functions[i] = _functions[i].specialize_function(type_map, owner);
            od

            return result;
        si

        specialize(type_map: Collections.Map[string,Type], owner: GENERIC) -> Symbol =>
            specialize_function_group(type_map, owner);

        try_specialize(
            location: LOCATION,
            logger: Logger,
            actual_type_arguments: Collections.List[Type]
        ) -> Symbol is
            let result_functions = new Collections.LIST[Symbol]();
            let result = new FUNCTION_GROUP(location, owner, name);

            for f in _functions do
                if f.is_generic /\ f.generic_arguments.count == actual_type_arguments.count then
                    let sf = cast Function(f.specialize(actual_type_arguments));

                    result.add(sf);
                fi
            od

            if result.is_empty then
                logger.error(location, "no generic function could be specialized");

                return null;
            fi

            return result;            
        si
        
        add(function: Function) is
            _functions.add(function);
        si

        add(fg: FUNCTION_GROUP) is
            _functions.add_range(fg.functions);
        si

        load(location: LOCATION, from: Value, loader: SYMBOL_LOADER) -> Value is
            return loader.load_function_group(from, self);
        si

        call(location: Source.LOCATION, from: Value, arguments: Collections.List[Value], type: Type, caller: FUNCTION_CALLER) -> IR.Values.Value is
            throw new NotImplementedException("cannot call unresolved function overload group: " + self);
        si

        collapse_group_if_single_member() -> Symbols.Symbol is
            if _functions.count == 1 then
                return _functions[0];
            else
                return self;
            fi
        si

        to_string() -> string =>
            description + " [" + _functions| + "]";
    si
si