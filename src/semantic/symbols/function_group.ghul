namespace Semantic.Symbols is
    use System.NotImplementedException;
    
    use IoC;
    use Logging;
    use Source;

    use IR.Values.Value;

    use Types.Type;

    class FUNCTION_GROUP: Symbol, Types.Typed is
        _functions: Collections.LIST[Function];

        count: int => _functions.count;
        is_empty: bool => _functions.count == 0;

        description: string => qualified_name + "(...) // function group";
        short_description: string => name + "(...)";
        symbol_kind: SYMBOL_KIND => SYMBOL_KIND.FUNCTION;
        completion_kind: COMPLETION_KIND => COMPLETION_KIND.FUNCTION;

        is_function_group: bool => true;

        type: Type;

        set_type(value: Type) is type = value; si

        functions: Collections.List[Function] => _functions;

        init(location: LOCATION, owner: Scope, name: string) is
            super.init(location, owner, name);

            type = Types.FUNCTION_GROUP(name, self);
            _functions = Collections.LIST[Function]();
        si

        specialize_function_group(type_map: Collections.Map[string,Type], owner: GENERIC) -> FUNCTION_GROUP is
            let result = cast FUNCTION_GROUP(memberwise_clone());

            result.specialized_from = self;

            result.type = Types.FUNCTION_GROUP(
                name,
                result
            );

            result._functions = Collections.LIST[Function](_functions);

            for i in 0.._functions.count do
                result._functions[i] = _functions[i].specialize_function(type_map, owner);
            od

            return result;
        si

        specialize(type_map: Collections.Map[string,Type], owner: GENERIC) -> Symbol =>
            specialize_function_group(type_map, owner);

        try_specialize(
            location: LOCATION,
            logger: Logger,
            actual_type_arguments: Collections.List[Type]
        ) -> Symbol is
            let result_functions = Collections.LIST[Symbol]();
            let result = FUNCTION_GROUP(location, owner, name);

            let expected_argument_counts = Collections.LIST[int]();

            for f in _functions do
                if f.is_generic then
                    if f.generic_arguments.count == actual_type_arguments.count then
                        let sf = f.specialize(actual_type_arguments);

                        assert sf? else "failed to specialize {f}";

                        result.add(cast Function(sf));
                    else
                        expected_argument_counts.add(f.generic_arguments.count);
                    fi
                fi
            od

            if result.is_empty then
                if expected_argument_counts.count > 0 then
                    let counts_string = expected_argument_counts | .sort() .join(", ");
                    let last_comma_index = counts_string.last_index_of(", ");

                    if last_comma_index >= 0 then
                        counts_string = counts_string.remove(last_comma_index, 2).insert(last_comma_index, " or ");
                    fi

                    logger.error(location, "expected {counts_string} type arguments but found {actual_type_arguments.count}");
                else
                    logger.error(location, "cannot supply type arguments here");
                fi

                return null;
            fi

            return result;
        si
        
        add(function: Function) is
            _functions.add(function);
        si

        add(fg: FUNCTION_GROUP) is
            _functions.add_range(fg.functions);
        si

        try_remove(function: Symbol) is
            for i in 0.._functions.count do
                if _functions[i] == function then
                    _functions.remove_at(i);
                    return;
                fi
            od
        si

        load(location: LOCATION, from: Value, loader: SYMBOL_LOADER) -> Value =>
            loader.load_function_group(from, self);

        call(location: Source.LOCATION, from: Value, arguments: Collections.List[Value], type: Type, caller: FUNCTION_CALLER) -> IR.Values.Value is
            throw NotImplementedException("cannot call unresolved function overload group: {self}");
        si

        collapse_group_if_single_member() -> Symbols.Symbol =>
            if _functions.count == 1 then
                _functions[0];
            else
                self;
            fi;

        to_string() -> string =>
            description + " [{_functions|}]";
    si
si