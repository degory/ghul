namespace Semantic.Symbols is
    use System.Exception;
    use System.NotImplementedException;
    use System.Text.StringBuilder;

    use IO.Std;

    use IoC;
    use Logging;
    use Source;

    use IR.Values.Value;

    use Semantic.Types.Type;

    enum ACCESS is
        PRIVATE, PUBLIC, PROTECTED 
    si

    // FIXME: think the language server needs to declare it can
    // use the newer list below for completions as well as symbol info:
    enum COMPLETION_KIND is
        UNDEFINED = 0,
        METHOD = 2,
        FUNCTION = 3,
        CONSTRUCTOR = 4,
        FIELD = 5,
        VARIABLE = 6,
        CLASS = 7,
        INTERFACE = 8,
        MODULE = 9,
        PROPERTY = 10,
        ENUM = 13,
        KEYWORD = 14,
        SNIPPET = 15,
        COLOR = 16,
        FILE = 17,
        REFERENCE = 18,
        FOLDER = 19,
        ENUM_MEMBER = 20,
        CONSTANT = 21,
        STRUCT = 22,
        EVENT = 23,
        OPERATOR = 24,
        TYPE_PARAMETER = 25    
    si

    enum SYMBOL_KIND is
        UNDEFINED = 0,
        FILE = 1,
        MODULE = 2,
        NAMESPACE = 3,
        PACKAGE = 4,
        CLASS = 5,
        METHOD = 6,
        PROPERTY = 7,
        FIELD = 8,
        CONSTRUCTOR = 9,
        ENUM = 10,
        INTERFACE = 11,
        FUNCTION = 12,
        VARIABLE = 13,
        CONSTANT = 14,
        STRING = 15,
        NUMBER = 16,
        BOOLEAN = 17,
        ARRAY = 18,
        OBJECT = 19,
        KEY = 20,
        NULL = 21,
        ENUM_MEMBER = 22,
        STRUCT = 23,
        EVENT = 24,
        OPERATOR = 25,
        TYPE_PARAMETER = 26
    si

    class Symbol: Scope is
        _location: LOCATION;
        _name: string;

        owner: Scope;
        type: Type => Types.NONE.instance;

        symbols: Collections.Iterable[Symbol] => new Collections.LIST[Symbol]();

        overridees: Collections.Iterable[Symbol] => null;

        unspecialized_symbol: Symbol => self;

        root_unspecialized_symbol: Symbol => self;
        
        location: LOCATION => _location;
        span: LOCATION => _location;

        name: string => _name;

        is_internal: bool => _name.starts_with("$") \/ location.is_internal;
        is_reflected: bool => location.is_reflected;
        is_object: bool => false;
        is_type: bool => false;
        is_argument: bool => false;
        is_field: bool => false;
        is_private: bool => false;
        is_public_readable: bool => true;
        is_assignable: bool => false;
        is_function_group: bool => false;
        
        qualified_name: string is
            if owner? then
                return owner.qualify(name);
            else
                return name;
            fi
        si
        
        il_name: string is
            if il_name_override? then
                return il_name_override;
            else
                return "'" + name + "'";
            fi
        si

        il_name_override: string public;

        // FIXME: can these go somewhere more specific?
        il_is_primitive_type: bool public;
       
        argument_names: Collections.List[string] => new Collections.LIST[string](0);        
        arguments: Collections.List[Type] => new Collections.LIST[Type](0);
        ancestors: Collections.List[Type] => new Collections.LIST[Type](0);

        specialized_from: Symbol public;

        root_specialized_from: Symbol is
            let sf = specialized_from;

            if sf? then
                return sf.root_specialized_from;
            else
                return self;
            fi
        si

        access: ACCESS => ACCESS.PUBLIC;

        description: string => qualified_name;
        short_description: string => name;
        search_description: string => name;

        symbol_kind: SYMBOL_KIND => SYMBOL_KIND.UNDEFINED;
        completion_kind: COMPLETION_KIND => COMPLETION_KIND.UNDEFINED;

        is_stub: bool => false;
        is_value_type: bool => false;
        is_instance: bool => false;
        is_innate: bool => false;
        is_inheritable: bool => false;
        is_class: bool => false;
        is_trait: bool => false;
        is_variable: bool => false;
        is_capture_context: bool => false;
        is_closure: bool => false;
        is_namespace: bool => false;
        is_classy: bool => false;
        is_workspace_visible: bool => false;

        =~(other: object) -> bool is
            if !other? /\ !isa Symbol(other) then
                return false;
            fi

            return self == other;
        si

        =~(other: Symbol) -> bool => self == other;
        
        init(location: LOCATION, owner: Scope, name: string) is
            _location = location;
            self.owner = owner;
            _name = name;
        si
    
        define() is
        si        
    
        add_member(function: Symbol) -> bool is
            throw new System.NotImplementedException("cannot add member to " + self);
        si

        get_ancestor(i: int) -> Type is
            if ancestors.count > 0 then
                Std.error.write_line("oops: " + self.get_type() + " " + self + " has ancestors but expected none");

                for a in ancestors do
                    Std.error.write_line("ancestor: " + a);                    
                od
            fi

            throw new NotImplementedException("" + get_type() + " has no ancestor " + i);
        si
        
        qualify(name: string) -> string => qualified_name + "." + name;

        compare_type(other: Symbol) -> Types.MATCH
            => Types.MATCH.DIFFERENT;

        specialize(type_map: Collections.Map[string,Type], owner: GENERIC) -> Symbol is
            throw new NotImplementedException("" + get_type() + " cannot be specialized: " + self);
        si

        load(location: LOCATION, from: Value, loader: SYMBOL_LOADER) -> Value =>
            // will report error when consumed:
            new IR.Values.Load.SYMBOL(from, self);

        load_outer(location: LOCATION, from: Value, loader: SYMBOL_LOADER) -> Value =>
            // will report error when consumed:
            new IR.Values.Load.SYMBOL(from, self);

        store(location: LOCATION, from: Value, value: Value, loader: SYMBOL_LOADER, is_initialize: bool) -> Value =>
            // will report error when consumed:
            new IR.Values.Store.SYMBOL(from, self, value);

        call(location: Source.LOCATION, from: Value, arguments: Collections.List[Value], type: Type, caller: FUNCTION_CALLER) -> Value is
            throw new NotImplementedException("" + get_type() + " cannot be called: " + self);
        si

        try_pull_down_into(
            into: Classy,
            other_overridee_symbols: Collections.Iterable[Symbol],
            logger: Logging.Logger
        ) is
            into.add_member(self);
        si

        assert_symbols_pulled_down() is
            throw new System.NotImplementedException("abstract method: implement me");
        si

        pull_down_super_symbols() is
            throw new System.NotImplementedException("abstract method: implement me");
        si
        
        find_direct(name: string) -> Symbol => null;

        find_member(name: string) -> Symbol => null;

        find_enclosing(name: string) -> Symbol => null;

        // FIXME: the way we handle inheritance and specialization of generics makes it tricky to get the correctly specialized owner of methods that
        // are interited from a super class or trait. The following works, but the fact that it's needed suggests we ought to be tracking this some other way
        find_owning_ancestor(o: Scope) -> Scope is
            let search_symbol = o.unspecialized_symbol;

            if !search_symbol? then
                return null;
            fi

            if self.unspecialized_symbol == search_symbol then
                return self;
            fi
            
            if ancestors.count == 0 then
                return o;
            fi
            
            for i in 0..ancestors.count do
                let aa = get_ancestor(i);

                if aa.unspecialized_symbol == o.unspecialized_symbol then
                    return get_ancestor(i).symbol;
                fi

                let result = aa.symbol.find_owning_ancestor(o);

                if result? then
                    return result;
                fi
            od        
        si

        find_ancestor(search_type: Type) -> Type is
            if unspecialized_symbol == search_type.unspecialized_symbol then
                return self.type;
            fi
            
            for a in ancestors do
                let result = a.find_ancestor(search_type);
                
                if result? then
                    return result;
                fi                
            od
        si

        get_all_direct_ancestor_members() -> Collections.Iterable[Symbol] is
            let result = new Collections.LIST[Symbol]();

            for i in 0..ancestors.count do
                let a = get_ancestor(i);

                if a? /\ a.scope? then
                    for member in a.scope.symbols do
                        if isa FUNCTION_GROUP(member) then
                            for function in cast FUNCTION_GROUP(member).functions do
                                if 
                                    function.is_abstract \/
                                    (function.name !~ "init" /\ !a.is_trait)
                                then
                                    result.add(function);
                                fi
                            od
                        elif isa Function(member) then
                            let function = cast Function(member);

                            if 
                                function.is_abstract \/
                                (function.name !~ "init" /\ !a.is_trait)
                            then
                                result.add(function);
                            fi
                        elif !isa Semantic.Symbols.TYPE(member) then
                            result.add(member);
                        fi
                    od
                fi
            od

            return result;
        si
        
        find_direct_matches(prefix: string, matches: Collections.MutableMap[string, Symbol]) is
        si

        find_ancestor_matches(prefix: string, matches: Collections.MutableMap[string, Symbol]) is
        si

        find_member_matches(prefix: string, matches: Collections.MutableMap[string, Symbol]) is
        si

        find_enclosing_matches(prefix: string, matches: Collections.MutableMap[string, Symbol]) is
        si

        collapse_group_if_single_member() -> Symbol is
            return self;
        si
        
        get_il_reference() -> string is
            let buffer = new StringBuilder();

            gen_reference(buffer);

            return buffer.to_string();
        si

        gen_dotted_name(buffer: StringBuilder, want_trailing_dot: bool) is
            if owner? then
                owner.gen_dotted_name(buffer, true);
            fi

            gen_name(buffer);
            
            if want_trailing_dot then
                buffer.append('.');
            else
                buffer.append(' ');
            fi
        si

        gen_name(buffer: StringBuilder) is
            let iln = il_name;

            if !iln.starts_with('\'') then
                buffer
                    .append('\'')
                    .append(iln)
                    .append('\'');
            else
                buffer.append(iln);
            fi            
        si

        gen_definition_header(buffer: StringBuilder) is
            throw new System.NotImplementedException("not implemented by " + get_type());
        si

        gen_definition_header(context: IR.CONTEXT) is
            let buffer = new StringBuilder();

            gen_definition_header(buffer);

            context.write_line(buffer);
        si
        
        gen_type_prefix(buffer: StringBuilder) is
            throw new System.NotImplementedException("not implemented by " + get_type());
        si

        gen_reference(buffer: StringBuilder) is
            throw new System.NotImplementedException("not implemented by " + get_type());
        si

        gen_type(buffer: StringBuilder) is
            throw new System.NotImplementedException("not implemented by " + get_type());
        si
        
        gen_class_name(buffer: StringBuilder) is
            throw new System.NotImplementedException("not implemented by " + get_type());
        si

        to_string() -> string => short_description;
    si

    class Scoped: Symbol, Scope, DeclarationContext is
        _symbols: SYMBOL_STORE;

        symbols: Collections.Iterable[Symbol] => _symbols.values;
        is_empty: bool => _symbols.count == 0;

        init(location: LOCATION, owner: Scope, name: string) is
            super.init(location, owner, name);
            _symbols = new SYMBOL_STORE();
        si

        clear() is
            _symbols.clear();
        si

        find_direct(name: string) -> Symbol => _symbols[name];

        find_direct_matches(prefix: string, matches: Collections.MutableMap[string, Symbol]) is
            _symbols.find_matches(prefix, matches);
        si

        declare(location: LOCATION, symbol: Symbol, symbol_definition_listener: SymbolDefinitionListener) is
            assert symbol? else "declared symbol is null";
                
            let existing = find_direct(symbol.name);

            if existing? then
                CONTAINER.instance.logger.error(location, "redefining symbol " + symbol.name + " originally defined at " + existing.location);
                CONTAINER.instance.logger.error(existing.location, "symbol " + symbol.name + " is redefined at " + location);

                return;
            fi

            if symbol_definition_listener? then
                symbol_definition_listener.add_symbol_definition(location, symbol);
            fi

            _symbols[symbol.name] = symbol;
        si

        declare_undefined(location: LOCATION, kind: string, name: string) -> UNDEFINED is
            CONTAINER.instance.logger.error(location, "cannot declare " + kind + " here" + get_type());

            return new UNDEFINED(location, self, name);
        si

        declare_stable(symbol: Symbols.Symbol) is
            declare_undefined(Source.LOCATION.internal, "internal", symbol.name);
        si

        declare_namespace(location: LOCATION, name: string, `namespace: NAMESPACE, symbol_definition_listener: SymbolDefinitionListener) is
            declare_undefined(location, "namespace", name);
        si

        declare_class(location: LOCATION, span: LOCATION, name: string, arguments: Collections.List[string], is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "class", name);

        declare_trait(location: LOCATION, span: LOCATION, name: string, arguments: Collections.List[string], is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "trait", name);

        declare_struct(location: LOCATION, span: LOCATION, name: string, arguments: Collections.List[string], is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "struct", name);

        declare_type(location: LOCATION, name: string, index: int, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "type", name);

        declare_enum(location: LOCATION, span: LOCATION, name: string, is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "enum", name);

        declare_enum_member(location: LOCATION, name: string, value: string, symbol_definition_listener: SymbolDefinitionListener) is
            declare_undefined(location, "enum member", name);
        si

        declare_closure(location: LOCATION, name: string, owner: Scope, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "closure", name);

        declare_innate(location: LOCATION, name: string, innate_name: string, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "innate", name);

        declare_function(location: LOCATION, span: LOCATION, name: string, is_static: bool, is_private: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "function", name);

        declare_variable(location: LOCATION, name: string, is_static: bool, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "variable", name);

        declare_property(location: LOCATION, span: LOCATION, name: string, is_static: bool, is_private: bool, is_assignable: bool, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "property", name);

        declare_label(location: LOCATION, name: string, symbol_definition_listener: SymbolDefinitionListener) is
            declare_undefined(location, "label", name);
        si

        declare_function_group(location: LOCATION, function: Function, symbol_definition_listener: SymbolDefinitionListener) is
            let existing = find_direct(function.name);
            let function_group: Symbols.FUNCTION_GROUP;

            if existing? then
                if !isa Symbols.FUNCTION_GROUP(existing) then
                    CONTAINER.instance.logger.error(location, "redefining symbol " + function.name + " originally defined at " + existing.location);
                    CONTAINER.instance.logger.error(existing.location, "symbol " + function.name + " is redefined at " + location);

                    return;
                fi

                function_group = cast Symbols.FUNCTION_GROUP(existing);
            else
                function_group = new Symbols.FUNCTION_GROUP(location, self, function.name);
                _symbols[function.name] = function_group;
            fi

            symbol_definition_listener.add_symbol_definition(location, function);

            function_group.add(function);
        si

        add_member(member: Symbol) -> bool is
            if _symbols.contains_key(member.name) then

                let existing = _symbols[member.name];

                if existing == member then
                    return true;
                fi
                
                if isa FUNCTION_GROUP(existing) then
                    if isa Function(member) then
                        cast FUNCTION_GROUP(existing).add(cast Function(member));
                    elif !member.is_reflected \/ !existing.is_reflected then                        
                        throw new Exception("cannot add function " + member + " over the top of non function member " + existing);
                    fi

                    return true;
                elif isa Function(existing) then
                    if isa Function(member) then
                        let fg = new FUNCTION_GROUP(location, self, member.name);

                        fg.add(cast Function(existing));
                        fg.add(cast Function(member));

                        _symbols[member.name] = fg;
                    elif !member.is_reflected \/ !existing.is_reflected then
                        throw new Exception("cannot add function " + member + " over the top of non function member " + existing);
                    fi

                    return true;
                elif !member.is_reflected \/ !existing.is_reflected then
                    throw new System.Exception("cannot add non-function " + member + " over the top of non-function member " + existing);
                fi

                // FIXME: specific error?

                return false;                
            fi

            if isa Function(member) then
                let fg = new FUNCTION_GROUP(location, self, member.name);

                fg.add(cast Function(member));
    
                _symbols[member.name] = fg;
            else
                _symbols[member.name] = member;                                    
            fi

            return true;
        si
    si

    class NONE: Symbol, Scope is
        _instance: NONE static;

        instance: NONE static is
            if !_instance? then
                _instance = new NONE();
            fi

            return _instance;
        si

        init() is
            super.init(LOCATION.internal, null, "!!!");
        si
    si
    
    class UNDEFINED: Symbol, Scope, DeclarationContext, Types.Typed is
        type: Type => new Types.ERROR();

        description: string => "undefined";

        init(location: LOCATION, owner: Scope, name: string) is
            super.init(location, owner, name);
        si

        declare_undefined(location: LOCATION, kind: string, name: string) -> UNDEFINED is
            CONTAINER.instance.logger.error(location, "cannot declare " + kind + " here" + get_type());

            return new UNDEFINED(location, self, name);
        si

        declare_stable(symbol: Symbols.Symbol) is
            declare_undefined(Source.LOCATION.internal, "internal", symbol.name);
        si
        
        declare_namespace(location: LOCATION, name: string, `namespace: NAMESPACE, symbol_definition_listener: SymbolDefinitionListener) is
            declare_undefined(location, "namespace", name);
        si

        declare_class(location: LOCATION, span: LOCATION, name: string, arguments: Collections.List[string], is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "class", name);

        declare_trait(location: LOCATION, span: LOCATION, name: string, arguments: Collections.List[string], is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "trait", name);

        declare_struct(location: LOCATION, span: LOCATION, name: string, arguments: Collections.List[string], is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "struct", name);

        declare_type(location: LOCATION, name: string, index: int, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "type", name);

        declare_enum(location: LOCATION, span: LOCATION, name: string, is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "enum", name);

        declare_enum_member(location: LOCATION, name: string, value: string, symbol_definition_listener: SymbolDefinitionListener) is
            declare_undefined(location, "enum member", name);
        si

        declare_closure(location: LOCATION, name: string, owner: Scope, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "closure", name);

        declare_innate(location: LOCATION, name: string, innate_name: string, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "innate", name);

        declare_function(location: LOCATION, span: LOCATION, name: string, is_static: bool, is_private: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "function", name);

        declare_variable(location: LOCATION, name: string, is_static: bool, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "variable", name);

        declare_property(location: LOCATION, span: LOCATION, name: string, is_static: bool, is_private: bool, is_assignable: bool, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "undefine", name);        

        declare_label(location: LOCATION, name: string, symbol_definition_listener: SymbolDefinitionListener) is
            declare_undefined(location, "label", name);
        si
    si

    class ScopedWithEnclosingScope: Scoped is
        enclosing_scope: Scope;

        init(location: LOCATION, owner: Scope, name: string, enclosing_scope: Scope) is
            super.init(location, owner, name);

            self.enclosing_scope = enclosing_scope;
        si

        find_enclosing_only(name: string) -> Symbol is
            if enclosing_scope? then
                return enclosing_scope.find_enclosing(name);
            fi

            return null;
        si

        find_enclosing(name: string) -> Symbol is
            let result = find_direct(name);

            if result? then
                return result;
            else
                return find_enclosing_only(name);
            fi
        si

        find_enclosing_only_matches(prefix: string, matches: Collections.MutableMap[string, Symbol]) is
            if enclosing_scope? then
                enclosing_scope.find_enclosing_matches(prefix, matches);
            fi
        si

        find_enclosing_matches(prefix: string, matches: Collections.MutableMap[string, Symbol]) is
            find_direct_matches(prefix, matches);
            find_enclosing_only_matches(prefix, matches);
        si
    si
si
