namespace Semantic.Symbols is
    use IO.Std;

    use System.Text.StringBuilder;
    
    use IoC;
    use Logging;
    use Source;

    use Types.Type;

    class TYPE: Scoped, Types.SettableTyped is
        type: Type;
        set_type(value: Type) is type = value; si
        
        is_value_type: bool => true;
        ancestor: Semantic.Scope public;

        index: int;

        // FIXME: should ancestor be a type not a symbol? We could then just use Symbol.ancestors.
        // We'll need multiple ancestors to support multiple constraints anyway
        ancestors: Collections.LIST[Type] is
            if ancestor == null then
                return new Collections.LIST[Type](0);
            fi

            let result = new Collections.LIST[Type](1);
            result.add(new Types.NAMED(cast Symbol(ancestor)));

            return result;
        si
        
        symbol_kind: SYMBOL_KIND => SYMBOL_KIND.TYPE_PARAMETER;
        completion_kind: COMPLETION_KIND => COMPLETION_KIND.TYPE_PARAMETER;

        description: string => name + ": " + type + " // type variable";
        short_description: string => description;

        init(location: LOCATION, owner: Scope, name: string, index: int) is
            init(location, owner, name, new Types.NAMED(self));

            self.index = index; 
        si

        init(location: LOCATION, owner: Scope, name: string, type: Type) is
            super.init(location, owner, name);

            assert isa Types.SettableTyped(self) else "oops: should implement SettableTyped: " + self.get_type();

            self.type = type;
        si

        get_ancestor(i: int) -> Type is
            return ancestors[i];
        si

        find_member(name: string) -> Symbol is
            if ancestor? then
                let result = ancestor.find_member(name);

                return result;
            fi
        si

        find_member_matches(prefix: string, matches: Collections.MAP[string, Symbol]) is
            if ancestor? then
                ancestor.find_member_matches(prefix, matches);
            fi
        si

        compare_type(other: Symbol) -> Types.MATCH is
            if self == other then
                return Types.MATCH.SAME;
            fi

            return Types.MATCH.DIFFERENT;
        si

        specialize(type_map: Collections.MAP[string,Type], owner: GENERIC) -> Symbol is
            if type_map.contains_key(name) then
                return new TYPE(
                    location,
                    self,
                    name,
                    type_map[name]
                );                
            fi

            return self;
        si

        gen_type(buffer: StringBuilder) is
            buffer
                .append('!')
                .append(index)
                .append(' ');
        si        

        gen_reference(buffer: StringBuilder) is
            gen_type(buffer);
        si

        gen_class_name(buffer: StringBuilder) is
            gen_type(buffer);
        si
    si
si
