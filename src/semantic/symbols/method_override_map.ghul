namespace Semantic is
    use IO.Std;

    use System.Text.StringBuilder;

    use Collections.Iterable;
    use Collections.Iterator;

    use Collections.MAP;
    use Collections.SET;

    use Symbols.Symbol;
    use Symbols.Function;
    
    class METHOD_OVERRIDE_MAP: Iterable[METHOD_OVERRIDE_SET] is
        _symbols: SET[SYMBOL_WRAPPER];

        name: string;

        methods: MAP[METHOD_OVERRIDE_CLASS,METHOD_OVERRIDE_SET];

        // FIXME: resuing this pipe should reset the underlying iterator
        // it but it seems to cause an infinite loop - may be a runtime library bug
        symbols: Iterable[Symbol] => _symbols | .map(w => w.symbol) .collect_array();

        iterator: Iterator[METHOD_OVERRIDE_SET] => methods.values.iterator;

        contains_any_methods: bool => methods.count > 0;
        contains_any_symbols: bool => _symbols.count > 0;

        [method_class: METHOD_OVERRIDE_CLASS]: METHOD_OVERRIDE_SET is
            if methods.contains_key(method_class) then
                return methods[method_class];
            fi

            return null;
        si

        init(name: string) is
            methods = new MAP[METHOD_OVERRIDE_CLASS,METHOD_OVERRIDE_SET]();
            _symbols = new SET[SYMBOL_WRAPPER]();

            self.name = name;
        si

        contains(override_class: METHOD_OVERRIDE_CLASS) -> bool => methods.contains_key(override_class);

        add(symbol: Symbol) is
            if isa Function(symbol) then
                add(cast Function(symbol));

                return;
            fi

            let wrapper = new SYMBOL_WRAPPER(symbol);

            if !_symbols.contains(wrapper) then
                _symbols.add(wrapper);
            fi            
        si

        add(group: Symbols.FUNCTION_GROUP) is
            for f in group.functions do
                add(f);
            od            
        si

        add(functions: Iterable[Function]) is
            for f in functions do
                add(f);
            od
        si

        add(method: Function) is
            if !method? \/ !method.override_class? then
                return;
            fi

            let c = method.override_class;

            let method_set: METHOD_OVERRIDE_SET;

            if methods.contains_key(c) then
                method_set = methods[c];

                if !method_set? then
                    IO.Std.error.write_line("oops: method set is null for {method}");
                fi
            else
                method_set = new METHOD_OVERRIDE_SET(c);
                methods[c] = method_set;
            fi

            method_set.add(method);
        si

        to_string() -> string is
            let result = new StringBuilder();

            for s in methods do
                result.append("{name}: [{s.key}: {s.value}]");
            od

            result.append(" others: ").append(symbols|);
            
            return result.to_string();
        si
    si
si
