namespace Semantic.Symbols is
    use IO.Std;

    use System.Text.StringBuilder;

    use Collections.List;
    use Collections.Map;

    use IoC;
    use Logging;
    use Source;

    use IR.Values.Value;
    use Types.Type;

    // A GENERIC represents a particular specialization of a generic class, trait or struct - i.e. a version of that symbol
    // with actual type arguments specified for its formal type parameters, and all its member symbols' signatures rewritten 
    // with all instances of each formal type parameter replaced with the corresponding actual type argument  
    class GENERIC: Symbol, Scope is
        _symbol: Classy;
        _type_map: Collections.MAP[string,Type];

        type_map: Collections.MAP[string,Type] => _type_map;
        arguments: Collections.List[Type];
        ancestors: Collections.List[Type] => symbol.ancestors;

        symbol: Classy => _symbol;

        symbols: Collections.Iterable[Symbol] is
            let result = new Collections.LIST[Symbol]();
            
            for s in symbol.symbols do
                result.add(_specialize(s));
            od
            
            return result;
        si

        owner: Scope public => symbol.owner, = value is si

        unspecialized_symbol: Symbols.Symbol => symbol;
        root_unspecialized_symbol: Symbols.Symbol => symbol.root_unspecialized_symbol;

        location: LOCATION => symbol.location;
        name: string => symbol.name;

        access: ACCESS => symbol.access;

        is_value_type: bool => symbol.is_value_type;
        is_inheritable: bool => symbol.is_inheritable;
        is_class: bool => symbol.is_class;
        is_trait: bool => symbol.is_trait;

        qualified_name: string => symbol.qualified_name + "[" + arguments_string + "]";

        arguments_string: string is
            let result = new System.Text.StringBuilder();

            let seen_any = false;

            for a in arguments do
                if seen_any then
                    result.append(',');
                fi

                result.append(a);

                seen_any = true;
            od

            return result.to_string();
        si
        
        description: string => qualified_name;

        short_description: string is
            let result = new System.Text.StringBuilder();

            result.append("&SSD&");

            result
                .append(name)
                .append('[');

            let seen_any = false;

            for a in arguments do
                if seen_any then
                    result.append(',');
                fi

                result.append(a.short_description);

                seen_any = true;
            od

            result
                .append(']');

            return result.to_string();
        si

        symbol_kind: SYMBOL_KIND => symbol.symbol_kind;
        completion_kind: COMPLETION_KIND => symbol.completion_kind;

        type: Type is
            return new Types.GENERIC(self.location, self.symbol, self.arguments);
        si
        
        init(location: LOCATION, symbol: Classy, arguments: Collections.List[Type]) is
            assert symbol? else "generic symbol is null";
            assert symbol.name? else "generic symbol name is null";

            super.init(
                symbol.location,
                symbol,
                symbol.name);

            self._symbol = symbol;

            assert arguments? else "generic arguments is null";
            assert arguments.count > 0 else "generic has 0 arguments";
            assert symbol.argument_names? else "symbol argument names is null"; 

            let length = arguments.count;

            if arguments.count != symbol.argument_names.count then
                if length > symbol.argument_names.count then
                    length = symbol.argument_names.count;
                fi

                IO.Std.error.write_line("XXXXXX: symbol is: " + symbol);

                IoC.CONTAINER.instance.logger.error(location, "expected " + symbol.argument_names.count + " type arguments");                
            fi

            self.arguments = arguments;
            _type_map = new Collections.MAP[string,Type]();

            for i in 0..length do
                type_map[symbol.argument_names[i]] = arguments[i];
            od
        si

        add_member(symbol: Symbol) -> bool is            
            IoC.CONTAINER.instance.logger.warn(location, "cannot inherit " + symbol + " into to specialized generic " + self);
            return true;
        si

        assert_symbols_pulled_down() is
            symbol.assert_symbols_pulled_down();
        si
    
        pull_down_super_symbols() is
            symbol.pull_down_super_symbols();
        si        

        get_ancestor(i: int) -> Type
            => ancestors[i].specialize(type_map);

        // set_argument(i: int, type: Type) is
        //     arguments[i] = type;
        // si        
        
        =~(other: Symbol) -> bool is
            if !isa GENERIC(other) then
                return false;
            fi

            let other_generic = cast GENERIC(other);

            if other_generic.symbol != symbol then
                return false;
            fi

            assert
                other_generic.arguments.count == arguments.count
            else
                "generics with the same symbol should have same number of arguments";

            for i in 0..arguments.count do
                if arguments[i] !~ other_generic.arguments[i] then
                    return false;
                fi
            od

            return true;
        si

        load(location: LOCATION, from: Value, loader: SYMBOL_LOADER) -> Value is
            return symbol.load(location, from, loader);
        si

        store(location: LOCATION, from: Value, value: Value, loader: SYMBOL_LOADER, is_initialize: bool) -> Value is
            return symbol.store(location, from, value, loader, is_initialize);
        si

        call(location: Source.LOCATION, from: Value, arguments: Collections.List[Value], type: Type, caller: FUNCTION_CALLER) -> Value is
            return symbol.call(location, from, arguments, type, caller);
        si

        dump_ancestors(depth: int) is
            for i in 0..self.ancestors.count do
                for j in 0..depth do
                    Std.error.write("  ");
                od
                
                let a = get_ancestor(i);
                Std.error.write_line("" + self + " has ancestor: " + a);
            
                if isa Types.GENERIC(a) then
                    let s = cast Types.GENERIC(a).symbol;

                    if isa Symbols.GENERIC(s) then
                        let gs = cast Symbols.GENERIC(s);

                        gs.dump_ancestors(depth + 1);
                    fi                    
                fi
            od
        si

        // given a member of the class, trait or struct that this generic wraps, we want to get a copy of it
        // with all references to formal type parameters replaced with the corresponding actual type arguments
        _specialize(member: Symbols.Symbol) -> Symbols.Symbol is
            if member? then
                // result is owned by the class/trait that we wrap and so
                // needs to be specialized according to our type map

                return member.specialize(type_map, self);
            else
                return null;
            fi
        si

        find_direct(name: string) -> Symbol is
            assert_symbols_pulled_down();

            return _specialize(symbol.find_direct(name));
        si

        find_member(name: string) -> Symbol is            
            return _specialize(symbol.find_member(name));
        si

        find_enclosing(name: string) -> Symbol is
            let unspecialized = symbol.find_enclosing(name);

            if unspecialized? /\ unspecialized.owner == symbol then
                return _specialize(unspecialized);
            else
                return unspecialized;
            fi
        si

        find_direct_matches(prefix: string, matches: Collections.MAP[string, Symbols.Symbol]) is
            let m = new Collections.MAP[string, Symbols.Symbol]();

            symbol.find_direct_matches(prefix, m);

            for p in m.iterator do
                if !matches.contains_key(p.key) then
                    matches[p.key] = _specialize(p.value).collapse_group_if_single_member();
                fi
            od
        si

        find_member_matches(prefix: string, matches: Collections.MAP[string, Symbols.Symbol]) is
            find_direct_matches(prefix, matches);
            symbol.find_ancestor_matches(prefix, matches);
        si

        find_enclosing_matches(prefix: string, matches: Collections.MAP[string, Symbols.Symbol]) is
        si

        get_hash_code() -> int is
            let result = symbol.get_hash_code();

            for a in arguments do
                result = result + a.get_hash_code();
            od

            return result;
        si

        gen_reference(buffer: StringBuilder) is
            gen_type(buffer);
        si

        gen_class_name(buffer: StringBuilder) is
            // class name == type for generics - i.e. they must always be prefixed with 'class' or 'valuetype'
            gen_type(buffer);
        si

        gen_type(buffer: StringBuilder) is
            symbol.gen_type(buffer);

            buffer.append('<');            

            gen_actual_type_arguments(buffer);

            buffer.append("> ");            
        si

        gen_actual_type_arguments(buffer: StringBuilder) is
            let seen_any = false;
            for argument in arguments do
                if seen_any then
                    buffer.append(',');
                fi
                
                argument.gen_type(buffer);

                seen_any = true;
            od            
        si
                
        to_string() -> string => qualified_name;
    si
si
