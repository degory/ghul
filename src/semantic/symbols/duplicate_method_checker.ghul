namespace Semantic is
    use IO.Std;

    use Collections.Iterable;
    use Collections.Iterator;

    use Collections.SET;

    use Pair = Collections.KeyValuePair`2;

    use Symbols.Symbol;
    use Symbols.Scope;
    use Symbols.Function;
    use Symbols.FUNCTION_GROUP;

    use Types.Type;
    
    class DUPLICATE_METHOD_CHECKER is
        _logger: Logging.Logger;

        init(logger: Logging.Logger) is
            _logger = logger;
        si
        
        check(scope: Scope, message: string) is
            for function_group in scope.symbols | .filter(s => s.is_function_group) .map(f => cast Symbols.FUNCTION_GROUP(f)) do
                check(function_group.name, function_group.functions | .filter(f => f.is_instance), message);
                check(function_group.name, function_group.functions | .filter(f => !f.is_instance), message);
            od
        si
        
        check(name: string, functions: Iterable[Function], message: string) is
            let map = new METHOD_OVERRIDE_MAP(name);

            map.add(functions);

            for s in map do
                if s.count > 1 then
                    for function in s.iterable | .filter(s => !s.is_internal) do
                        _logger.error(function.location, message);
                    od                        
                fi
            od
        si
    si
si
