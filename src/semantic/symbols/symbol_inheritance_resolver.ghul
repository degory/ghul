namespace Semantic is
    use IO.Std;

    use Collections.Iterable;
    use Collections.Iterator;

    use Collections.SET;

    use Pair = Collections.KeyValuePair`2;

    use Symbols.Symbol;
    use Symbols.Classy;
    use Symbols.Function;
    use Symbols.FUNCTION_GROUP;

    use Types.Type;

    use Logging;
    
    // TODO this really needs cleaning up. Could use double dispatch between the overrider and the overridee
    // for non-method symbols to determine what to do, which might simplify it a bit
    class SYMBOL_INHERITANCE_RESOLVER is
        into: Classy;

        init(into: Classy) is
            self.into = into;
        si

        pull_down_super_symbols_into() is
            // let use debug_dispose = debug_enter();

            debug("pull down super symbols for {into}");

            let logger = IoC.CONTAINER.instance.logger;

            let members = into.get_all_direct_ancestor_members();

            debug("pull down into {into} ancestor members {members|}");

            let overridees = get_overridees_map(members);
        
            for p in overridees do
                let overridee_name = p.key;
                let overridee_map = p.value;

                pull_down_for_name(overridee_name, overridee_map, logger);
            od
        si

        pull_down_for_name(overridee_name: string, overridee_map: METHOD_OVERRIDE_MAP, logger: Logging.Logger) is
            let overriders = get_overriders_map_for(overridee_name);
            
            let overrider_other_symbol = overriders.symbols | .first().value;

            let overridee_other_symbols = overridee_map.symbols;
            
            if overridee_map.contains_any_methods then
                debug("have some methods");

                for overridee_list in overridee_map do
                    let overrider_list = overriders[overridee_list.override_class];
                    
                    try_inherit_including_methods(
                        overridee_name,
                        overrider_list, 
                        overrider_other_symbol,
                        overridee_list, 
                        overridee_other_symbols,                        
                        logger
                    );
                od
            elif overridee_map.contains_any_symbols /\ !overriders.contains_any_methods then
                try_inherit_non_methods(
                    overridee_name,
                    overrider_other_symbol,
                    overridee_other_symbols,
                    logger
                );
            fi
        si        

        get_overridees_map(members: Collections.Iterable[Symbol]) -> Collections.Map[string, METHOD_OVERRIDE_MAP] is
            let overridees = Collections.MAP[string,METHOD_OVERRIDE_MAP]();

            for symbol in members do
                let overridees_with_this_name: METHOD_OVERRIDE_MAP;

                if overridees.contains_key(symbol.name) then
                    overridees_with_this_name = overridees[symbol.name];
                else
                    overridees_with_this_name = METHOD_OVERRIDE_MAP(symbol.name);
                    overridees[symbol.name] = overridees_with_this_name;
                fi

                overridees_with_this_name.add(symbol);
            od

            return overridees;
        si
        
        try_inherit_including_methods(
            name: string,
            overriders: METHOD_OVERRIDE_SET, 
            other_overrider_symbol: Symbol,
            overridees: METHOD_OVERRIDE_SET, 
            other_overridee_symbols: Iterable[Symbol],
            logger: Logging.Logger
        )
        is
            let is_stub = into.is_stub;
            let other_overridee_symbols_count = other_overridee_symbols | .count();
            let overriding_method: Function;

            if overriders? then
                overriding_method = overriders.get_overrider(into);
            fi

            if overriding_method? then
                try_override_methods(overriding_method, overridees, other_overridee_symbols, is_stub, logger);
            elif other_overrider_symbol? then
                handle_non_method_overrider(other_overrider_symbol, overridees, other_overridee_symbols, is_stub, logger);
            elif other_overridee_symbols_count == 1 /\ overridees.count != 0 then
                into.add_member(other_overridee_symbols | .only());
            elif other_overridee_symbols_count > 0 then
                handle_multiple_symbols_with_same_name(overridees, other_overridee_symbols, into, logger);
            else
                handle_inherit_nothing_to_override(overridees, other_overridee_symbols, into, logger);
            fi
        si

        try_override_methods(
            overriding_method: Function,
            overridees: METHOD_OVERRIDE_SET,
            other_overridee_symbols: Iterable[Symbol],
            is_stub: bool,
            logger: Logging.Logger
        )
        is
            for f in overridees.iterable do
                overriding_method.try_override(into, f, logger);
            od

            if !is_stub then
                for os in other_overridee_symbols do
                    logger.warn(overriding_method.location, "hides {os} (case A)");
                od
            fi
        si

        handle_non_method_overrider(
            other_overrider_symbol: Symbol,
            overridees: METHOD_OVERRIDE_SET,
            other_overridee_symbols: Iterable[Symbol],
            is_stub: bool,
            logger: Logging.Logger
        )
        is
            if !is_stub then
                for f in overridees.iterable do    
                    logger.warn(other_overrider_symbol.location, "hides {f} (case B)");
                od

                for os in other_overridee_symbols do
                    logger.warn(other_overrider_symbol.location, "hides {os} (case C)");
                od                        
            fi
        si

        handle_multiple_symbols_with_same_name(
            overridees: METHOD_OVERRIDE_SET,
            other_overridee_symbols: Iterable[Symbol],
            into: Classy,
            logger: Logging.Logger
        )
        is
            let all_symbols = Collections.LIST[Symbol]();

            all_symbols.add_range(         
                overridees.iterable |
                    .map(function -> Symbol => function)
            );

            all_symbols.add_range(other_overridee_symbols);

            logger.error(into.location, 
                "cannot inherit multiple symbols with the same name: {all_symbols| .sort()}"
            );
        si

        handle_inherit_nothing_to_override(
            overridees: METHOD_OVERRIDE_SET,
            other_overridee_symbols: Iterable[Symbol],
            into: Classy,
            logger: Logging.Logger
        )
        is
            let other_overridee_symbols_count = other_overridee_symbols| .count();

            if overridees.count == 1 then
                let first = overridees.iterable | .only();
                first.try_pull_down_into(into, other_overridee_symbols, logger);
            elif overridees.count == 0 then
                if other_overridee_symbols_count == 0 then
                    // nothing to do
                elif other_overridee_symbols_count == 1 then
                    let first = other_overridee_symbols | .only();
                    first.try_pull_down_into(into, other_overridee_symbols, logger);
                else
                    for os in other_overridee_symbols do
                        os.try_pull_down_into(into, other_overridee_symbols, logger);                            
                    od
                       
                    logger.error(
                        into.location, 
                        "cannot inherit multiple symbols with the same name: {
                            overridees.iterable |
                                .map(f => f.to_string())
                                .sort()
                        }"                                    
                    );
                fi
            else
                handle_inherit_multiple_methods(overridees, into, logger);
            fi
        si
        
        handle_inherit_multiple_methods(
            overridees: METHOD_OVERRIDE_SET,
            into: Classy,
            logger: Logging.Logger
        )
        is
            let concrete: Function;
            let abstract: Function;

            let seen_multiple_concrete = false;
            let seen_multiple_abstract = false;

            for f in overridees.iterable do
                if f.is_abstract then
                    if abstract? then
                        seen_multiple_abstract = true;
                    else
                        abstract = f;
                    fi
                elif f.is_instance then
                    if concrete? /\ f != concrete then
                        seen_multiple_concrete = true;
                    else
                        concrete = f;
                    fi
                fi
            od

            if 
                seen_multiple_concrete /\ 
                overridees.iterable | 
                    .any(function => function.is_instance /\ !function.is_reflected)
            then
                let concretes = 
                    overridees.iterable |
                        .filter(function => function.is_instance);
                
                logger
                    .error(
                        into.location, 
                        "cannot inherit multiple concrete methods: {
                            concretes
                                .map(f => f.to_string())
                                .sort()
                        }"
                    );

            elif concrete? then
                into.add_member(concrete);

                for f in overridees.iterable do
                    if f != concrete then
                        concrete.try_override(into, f, logger);                                
                    fi
                od
                      
            elif seen_multiple_abstract /\ !into.location.is_internal then
                let abstracts =
                    overridees.iterable |
                        .filter(function => function.is_abstract);

                logger.error(
                    into.location,
                    "cannot inherit multiple abstract methods: { 
                        abstracts |
                            .map(f => f.to_string())
                            .sort()
                    }"
                );

            elif abstract? then
                into.add_member(abstract);
            fi
        si

        try_inherit_non_methods(
            name: string,
            overrider_symbol: Symbol,
            overridee_symbols: Iterable[Symbol],
            logger: Logging.Logger
        )
        is
            if overrider_symbol? then
                if isa Symbols.Property(overrider_symbol) then
                    handle_property_overrider(
                        cast Symbols.Property(overrider_symbol), overridee_symbols, logger);
                else
                    handle_non_property_overrider(overrider_symbol, overridee_symbols, logger);
                fi

                return;
            fi

            let count = overridee_symbols | .count();

            if count == 1 then
                let first = overridee_symbols | .only();

                into.add_member(first);
            elif count > 1 then
                handle_multiple_overridee_symbols(overridee_symbols, logger);
            fi
        si

        handle_property_overrider(
            overrider_symbol: Symbols.Property,
            overridee_symbols: Iterable[Symbol],
            logger: Logging.Logger
        )
        is
            for overridee in overridee_symbols do
                if isa Symbols.Property(overridee) then
                    handle_property_overridee(
                        overrider_symbol, cast Symbols.Property(overridee), logger);
                elif !(isa Symbols.Variable(overridee)) then
                    logger.warn(overrider_symbol.location, "{overrider_symbol} hides non-property {overridee}");
                fi
            od
        si

        handle_property_overridee(
            overrider_symbol: Symbols.Property,
            overridee: Symbols.Property,
            logger: Logging.Logger
        )
        is
            if !overridee.type.is_assignable_from(overrider_symbol.type) then
                if overridee.is_instance /\ overrider_symbol.is_instance then
                    logger.warn(overrider_symbol.location, "{overrider_symbol} does not override {overridee} due to non-assignable type ({overrider_symbol.type} vs {overridee.type})");
                else
                    logger.warn(overrider_symbol.location, "{overrider_symbol} hides {overridee}");
                fi
            else
                let overrides = true;

                if overridee.is_assignable then
                    if overridee.is_private then
                        if !overrider_symbol.is_assignable then
                            logger.warn(overrider_symbol.location, "does not override assign accessor for {overridee}");
                        fi
                    else
                        if !overrider_symbol.is_assignable then
                            logger.error(overrider_symbol.location, "does not override public assign accessor for {overridee}");
                        elif overrider_symbol.is_private then
                            logger.error(overrider_symbol.location, "hides public assign accessor for {overridee}");
                        fi
                    fi
                fi

                if overrider_symbol.il_name_override? then
                    if overridee.il_name_override? /\ overrider_symbol.il_name_override !~ overridee.il_name_override then
                        logger.warn(overrider_symbol.location, "{overrider_symbol} does not override {overridee} due to different IL name ({overrider_symbol.il_name_override} vs {overridee.il_name_override})");
                        overrides = false;
                    fi
                else
                    overrider_symbol.il_name_override = overridee.il_name_override;
                fi

                if overrides then
                    overrider_symbol.add_overridee(overridee);
                    overridee.add_overrider(overrider_symbol);
                fi
            fi
        si

        handle_non_property_overrider(
            overrider_symbol: Symbol,
            overridee_symbols: Iterable[Symbol],
            logger: Logging.Logger
        )
        is
            if overrider_symbol.can_hide_inherited then
                // we don't care if this particular symbol hides an inherited symbol
                return;
            fi

            for overridee in overridee_symbols do
                if !(isa Symbols.Variable(overridee)) /\ !overridee.can_hide_inherited then
                    logger.info(overrider_symbol.location, "overrider {overrider_symbol.get_type()} hides overridee {overridee.get_type()}");
                    logger.warn(overrider_symbol.location, "{overrider_symbol} hides (case 3): {overridee_symbols|}");
                fi
            od
        si

        handle_multiple_overridee_symbols(
            overridee_symbols: Iterable[Symbol],
            logger: Logging.Logger
        )
        is
            let type: Type;
            let inconsistent_types = false;
            let any_non_properties = false;
            let property: Symbol;

            for s in overridee_symbols do
                if isa Symbols.Property(s) then
                    property = s;

                    if type? then
                        if s.type !~ type then
                            inconsistent_types = true;
                            property = null;
                            break;
                        fi
                    else
                        type = s.type;
                    fi
                else
                    property = null;
                    any_non_properties = true;
                    break;
                fi
            od

            if any_non_properties then
                overridee_symbols | .reset();
                logger.error(
                    into.location,
                    "cannot inherit multiple symbols with the same name { 
                    overridee_symbols |
                        .map(s => s.to_string())
                        .sort()
                    }"
                );
            elif inconsistent_types then
                overridee_symbols | .reset();
                logger.error(
                    into.location,
                    "cannot inherit multiple properties with the same name but different types { 
                        overridee_symbols |
                            .map(s => s.to_string())
                            .sort()
                    }"
                );
            elif property? then
                into.add_member(property);
            else
                overridee_symbols | .reset();
                logger.error(
                    into.location,
                    "did nothing with multiple parent symbols { 
                        overridee_symbols |
                            .map(s => s.to_string())
                            .sort()
                    }"
                );
            fi
        si

        get_overriders_map_for(overridee_name: string) -> METHOD_OVERRIDE_MAP is
            let result = METHOD_OVERRIDE_MAP(overridee_name);

            let symbol = into.find_direct(overridee_name);

            if !symbol? then
                // do nothing
            elif isa FUNCTION_GROUP(symbol) then
                for f in cast FUNCTION_GROUP(symbol).functions do
                    result.add(f);
                od
            elif !symbol.is_type_variable then
                result.add(symbol);
            fi

            return result;
        si
    si
si
