namespace Semantic is
    use IO.Std;

    use Collections.Iterable;
    use Collections.Iterator;

    use Collections.SET;

    use Pair = Collections.KeyValuePair`2;

    use Pipes;

    use Symbols.Symbol;
    use Symbols.Classy;
    use Symbols.Function;
    use Symbols.FUNCTION_GROUP;
    use Symbols.TYPE;

    use Types.Type;

    class SYMBOL_INHERITANCE_RESOLVER is
        into: Classy;

        init(into: Classy) is
            self.into = into;
        si
        
        pull_into() is
            @IF.debug() Std.error.write_line("");
            @IF.debug() Std.error.write_line("IIIIII: start pull down: " + into);

            let logger = IoC.CONTAINER.instance.logger;
            
            let overridees = new Collections.MAP[string,METHOD_OVERRIDE_MAP]();

            let members = into.get_all_direct_ancestor_members();

            for symbol in members do
                let overridees_with_this_name: METHOD_OVERRIDE_MAP;

                if overridees.contains_key(symbol.name) then
                    overridees_with_this_name = overridees[symbol.name];
                else
                    overridees_with_this_name = new METHOD_OVERRIDE_MAP(symbol.name);
                    overridees[symbol.name] = overridees_with_this_name;
                fi

                overridees_with_this_name.add(symbol);
            od

            @IF.debug() let entries = Pipe.from(overridees).join("\n    ");

            @IF.debug() Std.error.write_line("all potential overridees:");
            @IF.debug() Std.error.write_line("    " + entries);

            // FIXME: detect duplicate methods when no identically named symbol in any superclass/trait?

            for p in overridees do
                let overridee_name = p.key;
                let overridee_map = p.value;

                @IF.debug() Std.error.write_line("overridee name: " + overridee_name);

                let overriders = get_overriders_map_for(overridee_name);

                @IF.debug() Std.error.write_line("potential overriding method set: " + overriders);
                
                let overrider_other_symbol = new Shim.ONLY[Symbol](overriders.symbols).result;

                let overridee_other_symbols = overridee_map.symbols;
                
                if overridee_map.contains_any_methods then
                    for overridee_list in overridee_map do
                        @IF.debug() Std.error.write_line("get overrider list for: " + overridee_list.override_class);
                        
                        let overrider_list = overriders[overridee_list.override_class];
    
                        @IF.debug() Std.error.write_line("overrider list is: " + overriders);
                        
                        try_inherit(
                            overridee_name,
                            overrider_list, 
                            overrider_other_symbol,
                            overridee_list, 
                            overridee_other_symbols,                        
                            logger
                        );
                    od
                elif overridee_map.contains_any_symbols then
                    @IF.debug()  Std.error.write_line("overridee map contains some symbols: " + overridee_map);

                    if !overriders.contains_any_methods then
                        @IF.debug() Std.error.write_line("overriders contains no methods");
                        try_inherit(
                            overridee_name,
                            overrider_other_symbol,
                            overridee_other_symbols,
                            logger
                        );
                    else
                        @IF.debug() Std.error.write_line("any inheritable symbols are symbols are hidden by methods: " + overriders + " vs " + overridee_map);
                    fi
                fi
            od  
        si
        
        try_inherit(
            name: string,
            overriders: METHOD_OVERRIDE_SET, 
            other_overrider_symbol: Symbol,
            overridees: METHOD_OVERRIDE_SET, 
            other_overridee_symbols: Iterable[Symbol],
            logger: Logging.Logger
        )
        is
            @IF.debug() Std.error.write_line("try inherit A");
            let is_stub = into.is_stub;

            @IF.debug() Std.error.write_line("other overriding symbols: " + new Pipe.from(other_overridee_symbols));

            let other_overridee_symbols_count = Pipe.from(other_overridee_symbols).count();

            let overriding_method: Function;

            if overriders? then
                overriding_method = overriders.get_overrider(into);
            fi

            if overriding_method? then
                @IF.debug() Std.error.write_line("have overriding method: " + overriding_method);

                for f in overridees.iterable do
                    @IF.debug() Std.error.write_line("have overridee: " + f);
                    // check if we can/do override, implement or hide it:
                    overriding_method.try_override(into, f, logger);
                od

                if !is_stub then
                    @IF.debug() Std.error.write_line("not a stub - warn hides other overridees");
                    // for all non-method symbols in superclasses/traits:
                    for os in other_overridee_symbols do
                        logger.warn(overriding_method.location, "hides " + os + " (case A)");
                    od

                    @IF.debug() Std.error.write_line("warn hides other overridees");
                fi                

                @IF.debug() Std.error.write_line("done 1");
            elif other_overrider_symbol? then
                @IF.debug() Std.error.write_line("name is: " + name);
                @IF.debug() Std.error.write_line("overrider symbol is: " + other_overrider_symbol);
            
                if !is_stub then
                    for f in overridees.iterable do    
                        logger.warn(other_overrider_symbol.location, "hides " + f + " (case B)");
                    od
    
                    for os in other_overridee_symbols do
                        logger.warn(other_overrider_symbol.location, "hides " + os + " (case C)");
                    od                        
                fi
            elif other_overridee_symbols_count == 1 /\ overridees.count != 0 then
                into.add_member(new Shim.FIRST[Symbol](other_overridee_symbols).result);
            elif other_overridee_symbols_count > 0 then
                let all_symbols = new Collections.LIST[Symbol]();

                all_symbols.add_range(         
                    Pipe
                        .from(overridees.iterable)
                        .map((function: Function) -> Symbol => function));

                all_symbols.add_range(other_overridee_symbols);

                logger.error(into.location, 
                    "cannot inherit multiple symbols with the same name: " + Pipe.from(all_symbols).sort()
                );
            else
                @IF.debug() Std.error.write_line("no overriders: look for method or other symbol to pull down");

                // @IF.debug() Std.error.write_line("MO 008: " + into);
                let concrete_method: Function;

                if overridees.count == 1 then
                    @IF.debug() Std.error.write_line("no overriders: exactly one overridee method");

                    // @IF.debug() Std.error.write_line("MO 008 A3: " + into);

                    let first = Pipe.from(overridees.iterable).first();

                    first.try_pull_down_into(into, other_overridee_symbols, logger);
                elif overridees.count == 0 then
                    @IF.debug() Std.error.write_line("no overriders: no overridee methods, look for other symbols");

                    // @IF.debug() Std.error.write_line("MO 008 A: " + into);

                    if other_overridee_symbols_count == 0 then
                        // @IF.debug() Std.error.write_line("MO 008 A1: " + into);
                        // nothing to do
                    elif other_overridee_symbols_count == 1 then
                        // @IF.debug() Std.error.write_line("MO 008 A2: " + into);
                        // exactly one method symbol with this name: pull it down:

                        let first = new Shim.FIRST[Symbol](other_overridee_symbols).result;

                        first.try_pull_down_into(into, other_overridee_symbols, logger);

                        // into.add_member(first);
                    else
                        // @IF.debug() Std.error.write_line("MO 008 A2: " + into);

                        // let function_names = new Shim.MAPPER[FUNCTION_WRAPPER,string](
                        //     _set, (function: FUNCTION_WRAPPER) -> string => $1.to_strin
                        // );

                        for os in other_overridee_symbols do
                            os.try_pull_down_into(into, other_overridee_symbols, logger);                            
                        od
                        
                        logger.error(
                            into.location, 
                            "cannot inherit multiple symbols with the same name: " + 
                                Pipe
                                    .from(overridees.iterable)
                                    .map((s: Function) -> string => s.to_string())
                                    .sort()
                                    
                        );
                    fi
                else
                    // @IF.debug() Std.error.write_line("MO 008 A4: " + into);

                    let concrete: Function;
                    let abstract: Function;

                    let seen_multiple_concrete = false;
                    let seen_multiple_abstract = false;

                    for f in overridees.iterable do
                        if f.is_abstract then
                            if abstract? then
                                seen_multiple_abstract = true;
                            else
                                abstract = f;
                            fi
                        elif f.is_instance then
                            if concrete? /\ f != concrete then
                                @IF.debug() Std.error.write_line("attempting to pull down multiple concrete methods: " + concrete + " vs " + f);
                                seen_multiple_concrete = true;
                            else
                                concrete = f;
                            fi
                        fi
                    od

                    if seen_multiple_concrete then
                        let concretes = 
                            Pipe
                                .from(overridees.iterable)
                                .filter((function: Function) -> bool => function.is_instance);
                        
                        logger
                            .error(
                                into.location, 
                                "inherits multiple concrete methods: " + 
                                    Pipe
                                        .from(concretes)
                                        .map((s: Function) -> string => s.to_string())
                                        .sort()
                            );

                        @IF.debug()
                        for m in concretes do
                            Std.error.write_line("" + m + ": " + m.get_hash_code() + " m.owner: " + m.owner + ": " + m.owner.get_hash_code());
                        od
                        
                    elif concrete? then
                        into.add_member(concrete);

                        for f in overridees.iterable do
                            if f != concrete then
                                concrete.try_override(into, f, logger);                                
                            fi
                        od
                        
                    elif seen_multiple_abstract /\ !into.location.is_internal then
                        let abstracts = new Shim.FILTER[Function](
                            overridees.iterable, (function: Function) -> bool => function.is_abstract
                        );

                        logger.error(
                            into.location,
                            "cannot inherit multiple abstract methods: " + 
                                Pipe
                                    .from(abstracts)
                                    .map((s: Function) -> string => s.to_string())
                                    .sort()
                        );

                    elif abstract? then
                        into.add_member(abstract);
                    fi
                fi
            fi
        si

        try_inherit(
            name: string,
            overrider_symbol: Symbol,
            overridee_symbols: Iterable[Symbol],
            logger: Logging.Logger
        )
        is
            @IF.debug() Std.error.write_line("try inherit B");

            if overrider_symbol? then
                @IF.debug() Std.error.write_line("have overrider symbol: " + overrider_symbol);

                if isa Symbols.Property(overrider_symbol) then
                    @IF.debug() Std.error.write_line("overrider symbol is a property: " + overrider_symbol + " with type: " + overrider_symbol.type);

                    let property_symbol = cast Symbols.Property(overrider_symbol);

                    for overridee in overridee_symbols do
                        @IF.debug() Std.error.write_line("have overridee symbol: " + overridee);

                        if isa Symbols.Property(overridee) then
                            @IF.debug() Std.error.write_line("overridee symbol is a property: " + overridee + " with type: " + overridee.type);

                            if !overridee.type.is_assignable_from(overrider_symbol.type) then
                                if overridee.is_instance /\ overrider_symbol.is_instance then
                                    logger.warn(overrider_symbol.location, "" + overrider_symbol + " does not override " + overridee + " due to non-assignable type (" + overrider_symbol.type + " vs " + overridee.type + ")");
                                else                                    
                                    logger.warn(overrider_symbol.location, "" + overrider_symbol + " hides " + overridee);
                                fi
                            else
                                let overrides = true;
                                if property_symbol.il_name_override? then
                                    if overridee.il_name_override? /\ property_symbol.il_name_override !~ overridee.il_name_override then
                                        logger.warn(overrider_symbol.location, "" + overrider_symbol + " does not override " + overridee + " due to different IL name (" + overrider_symbol.il_name_override + " vs " + overridee.il_name_override + ")");
                                        overrides = false;
                                    fi
                                else
                                    property_symbol.il_name_override = overridee.il_name_override;
                                fi

                                if overrides then
                                    property_symbol.add_overridee(overridee);                                    
                                fi                                
                            fi
                        elif !(isa Symbols.Variable(overridee)) then
                            logger.warn(overrider_symbol.location, "" + overrider_symbol + " hides non-property " + Pipe.from(overridee_symbols));                            
                        fi                        
                    od                    
                else
                    @IF.debug() Std.error.write_line("overrider symbol is not a property: " + overrider_symbol);

                    for overridee in overridee_symbols do
                        @IF.debug() Std.error.write_line("have overridee symbol: " + overridee);

                        if !(isa Symbols.Variable(overridee)) then
                            @IF.debug() Std.error.write_line("overridee symbol is not a variable: " + overrider_symbol);

                            logger.warn(overrider_symbol.location, "" + overrider_symbol + " hides (case 3): " + Pipe.from(overridee_symbols));                            
                        fi
                    od
                fi
                
                return;
            else
                @IF.debug() Std.error.write_line("no overrider symbol");
            fi

            let count = Pipe.from(overridee_symbols).count();
            
            if count == 1 then
                let first = new Shim.FIRST[Symbol](overridee_symbols).result;

                @IF.debug() Std.error.write_line("add sole overridee: " + first);

                into.add_member(first);
            elif count > 1 then
                @IF.debug() Std.error.write_line("multiple potential overridees: " + Pipe.from(overridee_symbols));

                // FIXME: can we do this in a more OOP way?

                let type: Type;

                let inconsistent_types = false;
                let any_non_properties = false;

                let property: Symbol;

                for s in overridee_symbols do
                    if isa Symbols.Property(s) then
                        property = s;

                        if type? then
                            if s.type !~ type then
                                inconsistent_types = true;
                                property = null;

                                break;
                            fi
                        else
                            type = s.type;
                        fi
                    else
                        property = null;
                        any_non_properties = true;
                        break;
                    fi                    
                od

                if any_non_properties then
                    logger.error(
                        into.location, 
                        "inherit multiple symbols with the same name " + 
                        Pipe
                            .from(overridee_symbols)
                            .map((s: Symbol) -> string => s.to_string())
                            .sort()
                    );

                elif inconsistent_types then
                    for os in overridee_symbols do
                        Std.error.write_line("OVERRIDEE SYMBOL: " + os);
                    od

                    logger.error(
                        into.location, 
                        "inherit multiple properties with the same name but different types " + 
                            Pipe
                                .from(overridee_symbols)
                                .map((s: Symbol) -> string => s.to_string())
                                .sort()
                    );

                elif property? then    
                    @IF.debug() Std.error.write_line("pull down property: " + property + " into " + into);

                    into.add_member(property);
                else
                    logger
                        .error(
                            into.location, 
                            "did nothing with multiple parent symbols " + 
                                Pipe
                                    .from(overridee_symbols)
                                    .map((f: Symbol) -> string => f.to_string())
                                    .sort()
                                    );
                fi
            fi
        si

        get_overriders_map_for(overridee_name: string) -> METHOD_OVERRIDE_MAP is
            let result = new METHOD_OVERRIDE_MAP(overridee_name);

            let symbol = into.find_direct(overridee_name);
            @IF.debug() Std.error.write_line("direct symbol: " + symbol);

            if !symbol? then
                @IF.debug() Std.error.write_line("no direct symbol");

                // do nothing
            elif isa FUNCTION_GROUP(symbol) then
                for f in cast FUNCTION_GROUP(symbol).functions do
                    @IF.debug() Std.error.write_line("function in function group: " + f);

                    result.add(f);
                od
            elif !isa TYPE(symbol) then
                @IF.debug() Std.error.write_line("non function group symbol: " + symbol);

                result.add(symbol);
            fi

            return result;
        si
    si
si
