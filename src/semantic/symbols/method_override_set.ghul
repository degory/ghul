namespace Semantic is
    use IO.Std;

    use System.Text.StringBuilder;
    
    use Collections.Iterable;
    use Collections.Iterator;

    use Collections.SET;

    use Pipes;

    use Symbols.Function;

    class DUMMY: object, Iterable[Function] is
        _set: SET[FUNCTION_WRAPPER];

        override_class: METHOD_OVERRIDE_CLASS;

        iterator: Iterator[Function] => iterable.iterator;
 
        iterable: Iterable[Function] => 
            Pipe
                .from(_set)
                .map((from: FUNCTION_WRAPPER) -> Function => from.function);

        count: int => _set.count;

        init(override_class: METHOD_OVERRIDE_CLASS) is
            _set = new SET[FUNCTION_WRAPPER]();

            self.override_class = override_class;
        si

        add(method: Function) is
            assert method.override_class =~ override_class;
            _set.add(new FUNCTION_WRAPPER(method));
        si
                  
        to_string() -> string => "" + override_class + ": " + Pipe.from(_set);

        get_overrider(into: Symbols.Symbol) -> Function is
            @IF.debug()  Std.error.write_line("get overrider from: " + into);

            if !into.is_stub /\ _set.count > 1 then
                for fw in _set do
                    let f = fw.function;
                    IoC.CONTAINER.instance.logger.error(f.location, "duplicate method");
                od
            fi

            return new Shim.FIRST[Function](self.iterable).result;
        si
    si

    class METHOD_OVERRIDE_SET is
        _set: SET[FUNCTION_WRAPPER];

        override_class: METHOD_OVERRIDE_CLASS;

        iterator: Iterator[Function] => iterable.iterator;
 
        iterable: Iterable[Function] => 
            Pipe
                .from(_set)
                .map((from: FUNCTION_WRAPPER) -> Function => from.function);

        count: int => _set.count;

        init(override_class: METHOD_OVERRIDE_CLASS) is
            _set = new SET[FUNCTION_WRAPPER]();

            self.override_class = override_class;
        si

        add(method: Function) is
            assert method.override_class =~ override_class;
            _set.add(new FUNCTION_WRAPPER(method));
        si
                  
        to_string() -> string => "" + override_class + ": " + Pipe.from(_set);

        get_overrider(into: Symbols.Symbol) -> Function is
            @IF.debug()  Std.error.write_line("get overrider from: " + into);

            if !into.is_stub /\ _set.count > 1 then
                for fw in _set do
                    let f = fw.function;
                    IoC.CONTAINER.instance.logger.error(f.location, "duplicate method");
                od
            fi

            return new Shim.FIRST[Function](self.iterable).result;
        si
    si
si