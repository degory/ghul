namespace Semantic.Symbols is
    use IO.Std;

    use System.Exception;
    use System.Text.StringBuilder;
    
    use IoC;
    use Logging;
    use Source;

    use IR.Values.Value;

    use Types.Type;

    class Property: Symbol, Types.SettableTyped is
        _overridees: Collections.MutableList[Symbol];

        type: Type;

        set_type(value: Type) is type = value; si

        short_description: string => name + ": " + type.short_description;
        symbol_kind: SYMBOL_KIND => SYMBOL_KIND.PROPERTY;
        completion_kind: COMPLETION_KIND => COMPLETION_KIND.PROPERTY;
        is_assignable: bool;

        read_function: Function public;
        read_function_il_name_override: string public;

        assign_function: Function public;
        assign_function_il_name_override: string public;
                    
        overridees: Collections.Iterable[Symbol] => _overridees;

        init(location: LOCATION, owner: Scope, name: string, is_assignable: bool) is
            super.init(location, owner, name);

            self.is_assignable = is_assignable;
        si
        
        add_overridee(overridee: Symbol) is
            if !_overridees? then
                _overridees = new Collections.LIST[Symbol]();
            fi 

            _overridees.add(overridee);
        si

        specialize(type_map: Collections.MAP[string,Type], owner: GENERIC) -> Symbol is
            let result = cast Property(self.memberwise_clone());

            result.specialized_from = self;

            if type? then
                result.type = type.specialize(type_map);
            fi

            if read_function? then
                result.read_function = read_function.specialize_function(type_map, owner);
            fi

            if assign_function? then
                result.assign_function = assign_function.specialize_function(type_map, owner);
            fi

            return result;
        si

        gen_reference(buffer: StringBuilder) is
            throw new System.NotImplementedException("properties cannot be referenced directly");
        si

        // .property <flags> <ret_type> <name>(<param_type>[,<param _type>*] ) 
        // [ <const_decl> ]
        // { <method_semantics_decl >* }
        // where
        // <method_semantics_decl> ::= <semantics> <method_ref>
        // <semantics> ::= .set | .get | .other
        // <const_decl> ::= = <const_type> [ ( <value> ) ]        

        gen_definition_header(buffer: StringBuilder) is
            buffer.append(".property ");

            gen_access(buffer); // <flags> just the accessibility part

            gen_flags(buffer); // <flags> everything

            type.gen_type(buffer); // <ret_type>

            gen_name(buffer); // <name>

            buffer.append("() { ");

            if read_function then
                buffer.append(".get ");
                read_function.gen_reference_for_property(buffer);
            fi

            buffer.append(' ');

            if assign_function then
                buffer.append(".set ");
                assign_function.gen_reference_for_property(buffer);
            fi

            buffer.append('}');
        si
        
        gen_access(buffer: StringBuilder) is
        si

        gen_flags(buffer: StringBuilder) is
        si

        to_string() -> string is
            let result = new System.Text.StringBuilder();

            try
                result.append(qualified_name);
                result.append(": ");
                result.append(type);
    
                // return qualified_name + " (" + short_argument_descriptions + ") -> " + return_type;
                return result.to_string();
            catch ex: Exception
                // Std.error.write_line("failed to convert function to string: " + name + ", got as far as: " + result);
                // Std.error.write_line(ex);

                return "[garbled property: " + result + "]";
            yrt
        si
    si

    class INSTANCE_PROPERTY: Property is
        description: string => qualified_name + ": " + type + " // instance property";

        is_instance: bool => true;
        
        init(location: LOCATION, owner: Scope, name: string, is_assignable: bool) is
            super.init(location, owner, name, is_assignable);
        si

        load(location: LOCATION, from: Value, loader: SYMBOL_LOADER) -> Value is
            // if !from? then
            //     let context = IoC.CONTAINER.instance.symbol_table.current_function;

            //     if !context? then
            //         IoC.CONTAINER.instance.logger.error(location, "cannot access instance property from non-function context");                    
            //     elif !context.is_instance then
            //         IoC.CONTAINER.instance.logger.error(location, "cannot access instance property from static context");                    
            //     fi
            // fi

            return loader.load_instance_property(location, from, self);
        si

        store(location: LOCATION, from: Value, value: Value, loader: SYMBOL_LOADER, is_initialize: bool) -> Value is
            return loader.store_instance_property(location, from, self, value);
        si

        gen_flags(buffer: StringBuilder) is
            buffer.append("instance callconv(8) ");
        si
    si

    class STATIC_PROPERTY: Property is
        description: string => qualified_name + ": " + type + " // class property";

        init(location: LOCATION, owner: Scope, name: string, is_assignable: bool) is
            super.init(location, owner, name, is_assignable);
        si

        load(location: LOCATION, from: Value, loader: SYMBOL_LOADER) -> Value is
            return loader.load_static_property(location, self);
        si

        store(location: LOCATION, from: Value, value: Value, loader: SYMBOL_LOADER, is_initialize: bool) -> Value is
            return loader.store_static_property(location, self, value);
        si

        gen_flags(buffer: StringBuilder) is
            buffer.append("callconv(8) ");
        si
    si

    class GLOBAL_PROPERTY: Property is
        description: string => qualified_name + ": " + type + " // global property";

        init(location: LOCATION, owner: Scope, name: string, is_assignable: bool) is
            super.init(location, owner, name, is_assignable);
        si

        load(location: LOCATION, from: Value, loader: SYMBOL_LOADER) -> Value is
            /*
            if from? then
                Std.error.write_line("expected from to be null but got " + from);
            fi
            */

            return loader.load_global_property(self);
        si

        store(location: LOCATION, from: Value, value: Value, loader: SYMBOL_LOADER, is_initialize: bool) -> Value is
            /*
            if from? then
                Std.error.write_line("expected from to be null but got " + from);
            fi
            */

            return loader.store_global_property(self, value);
        si

        gen_flags(buffer: StringBuilder) is
            buffer.append("callconv(8) ");
        si
    si
si


