namespace Semantic.Symbols is
    use System.Exception;
    use System.Text.StringBuilder;
    
    use Logging;
    use Source;

    use IR.Values.Value;

    use Types.Type;

    class Property: Symbol, Types.SettableTyped is
        _overriders: Collections.MutableList[Symbol];
        _overridees: Collections.MutableList[Symbol];

        span: LOCATION;
        type: Type;

        set_type(value: Type) is type = value; si

        short_description: string => name + ": " + type.short_description;
        symbol_kind: SYMBOL_KIND => SYMBOL_KIND.PROPERTY;
        completion_kind: COMPLETION_KIND => COMPLETION_KIND.PROPERTY;
        is_private: bool;
        is_assignable: bool;
        is_workspace_visible: bool => name? /\ !name.starts_with('_');

        read_function: Function public;
        read_function_il_name_override: string public;

        assign_function: Function public;
        assign_function_il_name_override: string public;

        overriders: Collections.Iterable[Symbol] => _overriders;
        overridees: Collections.Iterable[Symbol] => _overridees;

        init(location: LOCATION, span: LOCATION, owner: Scope, name: string, is_assignable: bool, is_private: bool) is
            super.init(location, owner, name);

            self.span = span;
            self.is_assignable = is_assignable;
            self.is_private = is_private;
        si
        
        add_overrider(overrider: Symbol) is
            if !_overriders? then
                _overriders = new Collections.LIST[Symbol]();
            fi 

            _overriders.add(overrider);
        si

        add_overridee(overridee: Symbol) is
            if !_overridees? then
                _overridees = new Collections.LIST[Symbol]();
            fi 

            _overridees.add(overridee);
        si

        specialize(type_map: Collections.Map[string,Type], owner: GENERIC) -> Symbol is
            let result = cast Property(self.memberwise_clone());

            result.specialized_from = self;

            if type? then
                result.type = type.specialize(type_map);
            fi

            if read_function? then
                result.read_function = read_function.specialize_function(type_map, owner);
            fi

            if assign_function? then
                result.assign_function = assign_function.specialize_function(type_map, owner);
            fi

            return result;
        si

        gen_reference(buffer: StringBuilder) is
            throw new System.NotImplementedException("properties cannot be referenced directly");
        si

        gen_definition_header(buffer: StringBuilder) is
            buffer.append(".property ");

            gen_access(buffer);

            gen_flags(buffer);

            type.gen_type(buffer);

            gen_name(buffer);

            buffer.append("() { ");

            if read_function? then
                buffer.append(".get ");
                read_function.gen_reference_for_property(buffer);
            fi

            buffer.append(' ');

            if assign_function? then
                buffer.append(".set ");
                assign_function.gen_reference_for_property(buffer);
            fi

            buffer.append('}');
        si
        
        gen_access(buffer: StringBuilder) is
        si

        gen_flags(buffer: StringBuilder) is
        si

        to_string() -> string is
            let result = new System.Text.StringBuilder();

            try
                result.append(qualified_name);
                result.append(": ");
                result.append(type);
    
                return result.to_string();
            catch ex: Exception
                return "[garbled property: " + result + "]";
            yrt
        si
    si

    class INSTANCE_PROPERTY: Property is
        description: string => qualified_name + ": " + type + " // instance property";

        is_instance: bool => true;
        
        init(location: LOCATION, span: LOCATION, owner: Scope, name: string, is_assignable: bool, is_private: bool) is
            super.init(location, span, owner, name, is_assignable, is_private);
        si

        load(location: LOCATION, from: Value, loader: SYMBOL_LOADER) -> Value is
            return loader.load_instance_property(location, from, self);
        si

        store(location: LOCATION, from: Value, value: Value, loader: SYMBOL_LOADER, is_initialize: bool) -> Value is
            return loader.store_instance_property(location, from, self, value);
        si

        gen_flags(buffer: StringBuilder) is
            buffer.append("instance callconv(8) ");
        si
    si

    class STATIC_PROPERTY: Property is
        description: string => qualified_name + ": " + type + " // class property";

        init(location: LOCATION, span: LOCATION, owner: Scope, name: string, is_assignable: bool, is_private: bool) is
            super.init(location, span, owner, name, is_assignable, is_private);
        si

        load(location: LOCATION, from: Value, loader: SYMBOL_LOADER) -> Value is
            return loader.load_static_property(location, self);
        si

        store(location: LOCATION, from: Value, value: Value, loader: SYMBOL_LOADER, is_initialize: bool) -> Value is
            return loader.store_static_property(location, self, value);
        si

        gen_flags(buffer: StringBuilder) is
            buffer.append("callconv(8) ");
        si
    si

    class GLOBAL_PROPERTY: Property is
        description: string => qualified_name + ": " + type + " // global property";

        init(location: LOCATION, span: LOCATION, owner: Scope, name: string, is_assignable: bool) is
            super.init(location, span, owner, name, is_assignable, false);
        si

        load(location: LOCATION, from: Value, loader: SYMBOL_LOADER) -> Value is
            return loader.load_global_property(location, self);
        si

        store(location: LOCATION, from: Value, value: Value, loader: SYMBOL_LOADER, is_initialize: bool) -> Value is
            return loader.store_global_property(location, self, value);
        si

        gen_definition_header(buffer: StringBuilder) is
        si

        gen_flags(buffer: StringBuilder) is
            buffer.append("callconv(8) ");
        si
    si
si
