namespace Semantic is
    @IF.not.v3() use object = System.Object;
    @IF.not.v3() use string = System.String;
    @IF.not.v3() use STD = System.Console;

    use System;

    class SYMBOL_MAP is
        _map: Collections.MAP[string,Symbol.BASE];

        count: int => _map.count;
        
        values: Collections.VALUE_COLLECTION[string,Symbol.BASE] => _map.values;

        init() is
            _map = new Collections.MAP[string,Symbol.BASE]();
        si

        [name: string]: Symbol.BASE is
            if _map.contains_key(name) then
                return _map[name];                
            fi            
        si,
        = v is
            _map[name] = v;
        si

        add(name: string, value: Symbol.BASE) is _map.add(name, value); si

        contains_key(name: string) -> bool => _map.contains_key(name);

        remove(name: string) is _map.remove(name); si
                
        clear() is _map.clear(); si

        find_matches(
            prefix: string,
            matches: Collections.MAP[string,Semantic.Symbol.BASE])
        is
            if prefix.length == 0 then
                for p in _map do
                    if !p.value.is_internal then
                        matches[p.key] = p.value;
                    fi
                od
            else
                for p in _map do
                    if p.key.starts_with(prefix) then
                        if !p.value.is_internal then
                            matches[p.key] = p.value;
                        fi
                    fi                    
                od
            fi
        si

        add_match(
            name: string,
            match: Semantic.Symbol.BASE,
            matches: Collections.MAP[string,Semantic.Symbol.BASE]
        ) static is
            if !name.starts_with("__") && !matches.contains_key(name) then
                matches[name] = match.collapse_group_if_single_member();
            fi
        si

        // find_first_match(
        //     prefix: string
        // ) -> Collection.TreeNode[string,Semantic.Symbol.BASE] is
        // si        
    si
si