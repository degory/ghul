namespace Semantic is
    use IO.Std;

    class SYMBOL_STORE is
        _map: Collections.MAP[string,Symbols.Symbol];

        count: int => _map.count;
        
        values: Collections.Dictionary`2_ValueCollection[string,Symbols.Symbol] => _map.values;

        init() is
            _map = Collections.MAP[string,Symbols.Symbol]();
        si

        [name: string]: Symbols.Symbol
            is
                if _map.contains_key(name) then
                    return _map[name];                
                fi            
            si,
            = v is
                _map[name] = v;
            si

        add(name: string, value: Symbols.Symbol) is _map.add(name, value); si

        contains_key(name: string) -> bool => _map.contains_key(name);

        remove(name: string) is _map.remove(name); si
                
        clear() is _map.clear(); si

        find_matches(
            prefix: string,
            matches: Collections.MutableMap[string,Semantic.Symbols.Symbol])
        is
            if prefix.length == 0 then
                for p in _map do
                    if !p.value.is_internal then
                        matches[p.key] = p.value;
                    fi
                od
            else
                for p in _map do
                    if p.key.starts_with(prefix) /\ !p.value.is_internal then
                        matches[p.key] = p.value;
                    fi                    
                od
            fi
        si

        add_match(
            name: string,
            match: Semantic.Symbols.Symbol,
            matches: Collections.MutableMap[string,Semantic.Symbols.Symbol]
        ) static is
            if !match.is_internal /\ !matches.contains_key(name) then
                matches[name] = match.collapse_group_if_single_member();
            fi
        si
    si
si