namespace Semantic is
    use System;

    class SYMBOL_MAP /* : Collections.MutableMap[String,Symbol.BASE] */ is
        _map: Collections.MAP[String,Symbol.BASE];

        count: int => _map.count;
        
        values: Collections.VALUE_COLLECTION[String,Symbol.BASE] => _map.values;

        init() is
            _map = new Collections.MAP[String,Symbol.BASE]();
        si

        [name: String]: Symbol.BASE is
            if _map.contains_key(name) then
                return _map[name];
            fi            
        si,
        = v is
            _map[name] = v;
        si

        add(name: String, value: Symbol.BASE) is _map.add(name, value); si

        contains_key(name: String) -> bool => _map.contains_key(name);

        remove(name: String) is _map.remove(name); si
                
        clear() is _map.clear(); si

        find_matches(
            prefix: String,
            matches: Collections.MAP[String,Semantic.Symbol.BASE])
        is
            if prefix.length == 0 then
                for p in _map do
                    matches[p.key] = p.value;
                od                
            fi
        si

        add_match(
            name: String,
            match: Semantic.Symbol.BASE,
            matches: Collections.MAP[String,Semantic.Symbol.BASE]
        ) static is
            if !name.starts_with("__") && !matches.contains_key(name) then
                matches[name] = match.collapse_group_if_single_member();
            fi
        si

        // find_first_match(
        //     prefix: String
        // ) -> Collection.TreeNode[String,Semantic.Symbol.BASE] is
        // si        
    si
si