namespace Semantic is
    use IO.Std;

    use Collections;

    use Pair = Collections.KeyValuePair`2;

    use Source;

    trait SymbolUseListener is
        add_symbol_use(location: LOCATION, symbol: Symbols.Symbol);
    si

    class SYMBOL_USE_LOCATIONS: SymbolUseListener is
        _symbol_use_map: LOCATION_MAP[Symbols.Symbol];
        _symbol_reference_map: Collections.MAP[Symbols.Symbol,Collections.SET[LOCATION]];

        init() is
            clear();
        si

        dump_counts() is
            _symbol_use_map.dump_counts();
            Std.error.write_line("symbol reference map: {_symbol_reference_map.count}");
        si        

        clear() is
            _symbol_use_map = new LOCATION_MAP[Symbols.Symbol]();
            _symbol_reference_map = new Collections.MAP[Symbols.Symbol,Collections.SET[LOCATION]](65521);
        si

        add_symbol_use(location: LOCATION, symbol: Symbols.Symbol) is
            if symbol? then
                symbol = symbol.root_specialized_from;
            fi

            if 
                symbol? /\ 
                !symbol.is_internal /\
                !location.is_internal /\
                !location.is_reflected
            then
                _symbol_use_map.put(location, symbol);

                _add_symbol_reference(location, symbol);
            fi
        si

        find_definition_from_use(file_name: string, line: int, column: int) -> Symbols.Symbol is
            let matches = _symbol_use_map.find_all(file_name, line, column);

            if !matches? \/ matches.count == 0 then
                return null;
            elif matches.count == 1 then
                return matches[0].value;
            else
                let shortest_length = 1_000_000_000;
                let best_match: Symbols.Symbol;

                for m in matches do
                    let location = m.location;
                    let symbol = m.value;
                    let length = location.length;

                    if length < shortest_length then
                        best_match = symbol;
                        shortest_length = length;
                    elif location.length == shortest_length /\ isa Symbols.Function(symbol) then
                        best_match = symbol;
                    fi                                        
                od
                
                return best_match;
            fi
        si

        // - include definitions only
        // - don't include the definition location of the seached symbol itself unless no other matches found
        // - for methods and properties, include all definitions that override the searched symbol
        // - for classes and traits, include all definitions that inherit from the searched symbol
        // - for other symbols, return only the searched symbol
        find_declarations_of_symbol(symbol: Symbols.Symbol) -> Collections.Iterable[LOCATION] is
            symbol = symbol.root_specialized_from;

            let results = new Collections.SET[Symbols.Symbol]();

            if symbol.is_classy then
                _get_super_class(symbol, results);                
            else
                _get_overridees(symbol, results);
            fi

            if results.count == 0 then
                results.add(symbol);
            fi
            
            return results | .map(s => s.location);            
        si

        // - include definitions only
        // - include the definition location of the seached symbol itself
        // - for methods and properties, include all definitions that override the searched symbol
        // - for classes and traits, include all definitions that inherit from the searched symbol
        // - for other symbols, return only the searched symbol
        find_implementations_of_symbol(symbol: Symbols.Symbol) -> Collections.Iterable[LOCATION] is
            symbol = symbol.root_specialized_from;

            let results = new Collections.SET[Symbols.Symbol]();

            if symbol.is_classy then
                _get_all_implementing_symbols(symbol, results);
            else
                _get_all_overriding_symbols(symbol, results);
            fi

            return results | .map(s => s.location);
        si

        // - include uses but not definitions
        // - for methods and properties, include references to all symbols that override the searched symbol
        // - for classes, traits and other symbols, include only references to the searched symbol
        find_references_to_symbol(symbol: Symbols.Symbol) -> Collections.Iterable[LOCATION] is
            symbol = symbol.root_specialized_from;

            let definitions = new Collections.SET[Symbols.Symbol]();

            if symbol.is_classy then
                definitions.add(symbol);
            else
                _get_all_overriding_symbols(symbol, definitions);                
            fi
            
            let results = new Collections.SET[LOCATION]();

            _get_use_locations_for_symbols(definitions, results, false);

            return results;
        si

        // - include definitions and references
        // - include references to the seached symbol itself
        // - for methods and properties, search up the inheritance tree to find the root symbols that are overridden
        // - include references to all symbols that override the root overridee symbols
        // - for classes, traits and other symbols, include only references to the searched symbol
        find_references_to_symbol_for_rename(symbol: Symbols.Symbol) -> Collections.Iterable[LOCATION] is
            symbol = symbol.root_specialized_from;

            if symbol.is_constructor then
                return new Collections.SET[LOCATION]();
            fi
            
            let definitions = new Collections.SET[Symbols.Symbol]();

            if symbol.is_classy then
                definitions.add(symbol);
            else
                let root_overridees = new Collections.SET[Symbols.Symbol]();
         
                _get_root_overridees(symbol, root_overridees);
    
                for overridee in root_overridees do
                    _get_all_overriding_symbols(overridee, definitions);
                od
            fi

            let results = new Collections.SET[LOCATION]();
            
            _get_use_locations_for_symbols(definitions, results, true);

            results.add(symbol.location);

            return results;
        si

        _add_symbol_reference(location: LOCATION, symbol: Symbols.Symbol) is
            let refs = _get_references_set(symbol);
                
            if !refs.contains(location) then
                // FIXME: why is this getting called multiple times for the same symbol and location?
                refs.add(location);
            fi
        si

        _get_use_locations_for_symbols(
            symbols: Collections.Iterable[Symbols.Symbol],
            into: Collections.SET[LOCATION],
            include_definitions: bool
        ) is
            for d in symbols do
                if include_definitions then
                    into.add(d.location);                    
                fi
                
                let references = _try_get_references_set(d);

                if !references? then
                    continue;
                fi

                for reference in references do
                    if include_definitions \/ reference !~ d.location then
                        into.add(reference);
                    fi
                od
            od                
        si

        _get_root_overridees(symbol: Symbols.Symbol, results: Collections.SET[Symbols.Symbol]) is
            assert symbol?;
            assert results?;

            if results.contains(symbol) then
                return;
            fi

            let overridees = symbol.overridees;

            if !overridees? \/ overridees | .count() == 0 \/ overridees | .find(o => o.is_reflected).has_value then
                results.add(symbol);
                return;
            fi

            for overridee in overridees do
                _get_root_overridees(overridee, results);
            od
        si

        _get_overridees(symbol: Symbols.Symbol, results: Collections.SET[Symbols.Symbol]) is
            assert symbol?;
            assert results?;

            let overridees = symbol.overridees;

            if !overridees? then
                return;
            fi

            for overridee in overridees | .filter(overridee => !overridee.is_internal /\ !overridee.is_reflected) do
                results.add(overridee);
            od
        si

        _get_super_class(symbol: Symbols.Symbol, results: Collections.SET[Symbols.Symbol]) is
            assert symbol?;
            assert results?;

            let ancestors = symbol.ancestors;

            if !ancestors? \/ ancestors.count == 0 then
                return;
            fi

            let result = ancestors[0].symbol;

            if result? /\ !result.is_internal /\ !result.is_reflected then
                results.add(result);
            fi            
        si

        // walk down the tree adding overriding methods
        _get_all_overriding_symbols(symbol: Symbols.Symbol, results: Collections.SET[Symbols.Symbol]) is
            if results.contains(symbol) then
                return;
            fi

            results.add(symbol);
 
            let overriders = symbol.overriders;

            if !overriders? \/ overriders | .count() == 0 then
                return;
            fi

            for overrider in overriders do
                _get_all_overriding_symbols(overrider, results);
            od
        si

        // walk down the tree adding implementing classes
        _get_all_implementing_symbols(symbol: Symbols.Symbol, results: Collections.SET[Symbols.Symbol]) is
            if results.contains(symbol) then
                return;
            fi

            results.add(symbol);

            let implementors = symbol.implementors;

            if !implementors? \/ implementors | .count() == 0 then
                return;
            fi
 
            for implementor in implementors do
                _get_all_implementing_symbols(implementor, results);
            od
        si

        _get_symbol_references_for_rename(symbol: Symbols.Symbol) -> Collections.SET[LOCATION] is
            let all_definitions = new Collections.SET[Symbols.Symbol]();

            let root_overridees = new Collections.SET[Symbols.Symbol]();

            _get_root_overridees(symbol, root_overridees);

            for root_overridee in root_overridees do
                _get_all_overriding_symbols(root_overridee, all_definitions);
            od
            
            let results = new Collections.SET[LOCATION]();

            for d in all_definitions do
                let references = _try_get_references_set(d);

                if !references? then
                    continue;
                fi

                for reference in references do
                    results.add(reference);
                od
            od

            return results;
        si        

        _try_get_references_set(symbol: Symbols.Symbol) -> Collections.SET[LOCATION] is
            let results: Collections.SET[LOCATION];                

            _symbol_reference_map.try_get_value(symbol, results ref);

            return results;
        si

        _get_references_set(symbol: Symbols.Symbol) -> Collections.SET[LOCATION] is
            // FIXME: is this correct in all cases?
            symbol = symbol.root_specialized_from;
            let results: Collections.SET[LOCATION];                

            if !_symbol_reference_map.try_get_value(symbol, results ref) then
                results = new Collections.SET[LOCATION]();
                _symbol_reference_map[symbol] = results;
            fi

            return results;
        si
    si

    class LOCATION_MAP[T] is
        _file_name_to_file: Collections.MAP[string, Collections.MAP[int, Collections.LIST[Pair[LOCATION,T]]]];

        init() is
            _file_name_to_file = new Collections.MAP[string, Collections.MAP[int, Collections.LIST[Pair[LOCATION,T]]]]();
        si

        dump_counts() is
            Std.error.write_line("file name to file map: {_file_name_to_file.count}");
        si

        put(location: LOCATION, value: T) is
            let file = _get_file(location.file_name);

            if file == null then
                file = new Collections.MAP[int, Collections.LIST[Pair[LOCATION,T]]]();
                _file_name_to_file[location.file_name] = file;
            fi

            let start_line = location.start_line;
            let end_line = location.end_line;

            let list: Collections.LIST[Pair[LOCATION,T]];

            for line in start_line::end_line do
                if file.contains_key(line) then
                    list = file[line];
                else
                    list = new Collections.LIST[Pair[LOCATION,T]]();
                    file[line] = list;
                fi
                list.add(new Pair[LOCATION,T](location,value));
            od
        si

        find_all(file_name: string, line: int, column: int) -> List[LOCATION_SEARCH_RESULT[T]] is
            let file = _get_file(file_name);

            if !file? \/ !file.contains_key(line) then
                return null;
            fi

            let list = file[line];

            if list == null then
                return null;
            fi

            let line_column = LOCATION.pair(line, column);

            let result = new LIST[LOCATION_SEARCH_RESULT[T]]();

            for p in list do
                if p.key.contains(line_column) then
                    result.add(new LOCATION_SEARCH_RESULT[T](p.key, p.value));
                fi
            od

            return result;
        si
        
        _get_file(file_name: string) -> Collections.MAP[int, Collections.LIST[Pair[LOCATION,T]]] is
            if _file_name_to_file.contains_key(file_name) then
                return _file_name_to_file[file_name];
            fi
        si        
    si
    
    struct LOCATION_SEARCH_RESULT[T] is
        location: LOCATION;
        value: T;
        
        init(location: LOCATION, value: T) is
            self.location = location;
            self.value = value;
        si 
    si    
si
