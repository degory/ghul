namespace Semantic is
    use System.String;
    use System.Text.StringBuilder;

    use Collections.Iterable;
    use Collections.Iterator;

    use Collections.MAP;
    use Collections.SET;

    use Symbol.BASE;
    use Symbol.Function;

    class METHOD_OVERRIDE_MAP: System.Object, Iterable[METHOD_OVERRIDE_SET] is
        _symbols: SET[SYMBOL_WRAPPER];
        _mapper: Shim.MAPPER[SYMBOL_WRAPPER,BASE];

        name: String;

        methods: MAP[METHOD_OVERRIDE_CLASS,METHOD_OVERRIDE_SET];
        symbols: Iterable[BASE] => _mapper;

        iterator: Iterator[METHOD_OVERRIDE_SET] => methods.values.iterator;

        contains_any_methods: bool => methods.count > 0;
        contains_any_symbols: bool => _symbols.count > 0;

        [method_class: METHOD_OVERRIDE_CLASS]: METHOD_OVERRIDE_SET is
            if methods.contains_key(method_class) then
                return methods[method_class];
            fi

            return null;            
        si

        init(name: String) is
            methods = new MAP[METHOD_OVERRIDE_CLASS,METHOD_OVERRIDE_SET]();
            _symbols = new SET[SYMBOL_WRAPPER]();
            _mapper = new Shim.MAPPER[SYMBOL_WRAPPER,BASE](_symbols, (wrapper: SYMBOL_WRAPPER) -> BASE => wrapper.symbol);

            self.name = name;
        si

        contains(override_class: METHOD_OVERRIDE_CLASS) -> bool => methods.contains_key(override_class);        

        add(symbol: BASE) is
            if isa Function(symbol) then
                add(cast Function(symbol));

                return;
            fi

            let wrapper = new SYMBOL_WRAPPER(symbol);

            if !_symbols.contains(wrapper) then
                _symbols.add(wrapper);
            fi            
        si

        add(group: Symbol.FUNCTION_GROUP) is
            for f in group.functions do
                add(f);
            od            
        si

        add(method: Function) is
            let c = method.override_class;

            let method_set: METHOD_OVERRIDE_SET;

            if methods.contains_key(c) then
                method_set = methods[c];
            else
                method_set = new METHOD_OVERRIDE_SET(c);
                methods[c] = method_set;
            fi

            method_set.add(method);
        si

        @IF.legacy()
        toString() -> String is
            let result = new StringBuilder();

            for s in methods do
                result.append(name + ": [" + s.key + ": " + s.value + "]");
            od

            result.append(" others: ").append(new Shim.JOIN[BASE](symbols));
            
            return Shim.STR.format(result);
        si
    si
si
