namespace Semantic.Symbols is
    @IF.not.v3() use object = System.Object;
    @IF.not.v3() use string = System.String;
    @IF.not.v3() use Std = System.Console;

    use System;
    
    use IoC;
    use Logging;
    use Source;

    use IR.Values.Value;

    use Types.Type;

    class InnateFunction: Function is
        innate_name: string;
        description: string => qualified_name + "(" + argument_descriptions + ") -> " + return_type + " // innate function " + innate_name;
        
        is_innate: bool => true;

        il_def: string => get_il_def("// innate ");

        init(location: LOCATION, owner: Scope, name: string, enclosing_scope: Scope, innate_name: string) is            
            super.init(location, owner, name, enclosing_scope);

            self.innate_name = innate_name;
        si

        load(location: LOCATION, from: Value, loader: SYMBOL_LOADER) -> Value is
            assert !from? else "instance load of function";

            // FIXME: this should probably error
            return loader.load_global_function(self);
        si
    si

    class INNATE_FUNCTION: InnateFunction is
        init(location: LOCATION, owner: Scope, name: string, enclosing_scope: Scope, innate_name: string) is            
            super.init(location, owner, name, enclosing_scope, innate_name);
        si        

        call(location: Source.LOCATION, from: Value, arguments: Collections.LIST[Value], type: Type, caller: FUNCTION_CALLER) -> Value is
            assert !from? else "instance call of innate function";

            return caller.call_innate_function(self, arguments, self.arguments, type);
        si
    si

    class INNATE_METHOD: InnateFunction is
        init(location: LOCATION, owner: Scope, name: string, enclosing_scope: Scope, innate_name: string) is            
            super.init(location, owner, name, enclosing_scope, innate_name);
        si        

        call(location: Source.LOCATION, from: Value, arguments: Collections.LIST[Value], type: Type, caller: FUNCTION_CALLER) -> Value is
            return caller.call_innate_function(self, from, arguments, self.arguments, type);
        si        
    si    
si
