namespace Semantic is
    use System;

    use Logging;

    class SYMBOL_LOADER is
        _null_find_symbol: (String) -> Symbol.BASE static;
    
        _logger: Logger;
        
        _symbol_table: SYMBOL_TABLE;

        _function_caller: FUNCTION_CALLER;

        _ghul_symbol_lookup: GHUL_SYMBOL_LOOKUP;

        find_symbol: (String) -> Symbol.BASE public;
    
        init(
            logger: Logger,
            symbol_table: SYMBOL_TABLE,
            function_caller: FUNCTION_CALLER,
            ghul_symbol_lookup: GHUL_SYMBOL_LOOKUP
        ) is
            super.init();

            // calls to null anon functions don't always produce a sane stack trace
            if _null_find_symbol == null then
                _null_find_symbol = 
                    (name: String) -> Symbol.BASE is
                        throw new NotImplementedException("find_symbol is not set");
                    si;
            fi

            _logger = logger;
            _symbol_table = symbol_table;            
            _function_caller = function_caller;
            _ghul_symbol_lookup = ghul_symbol_lookup;

            find_symbol = _null_find_symbol;
        si

        // FIXME: these should do more specific stuff, and some
        // are dummy values loaded only for their symbol/type information

        load_integer_literal(value: String) -> Graph.Value.BASE =>
            new Graph.Value.Literal.INTEGER(value, _ghul_symbol_lookup.get_type("int"));

        load_namespace(symbol: Symbol.NAMESPACE) -> Graph.Value.BASE =>
            new Graph.Value.Load.SYMBOL(null, symbol);

        load_class(symbol: Symbol.CLASS) -> Graph.Value.BASE =>
            new Graph.Value.Load.SYMBOL(null, symbol);

        load_trait(symbol: Symbol.TRAIT) -> Graph.Value.BASE =>
            new Graph.Value.Load.SYMBOL(null, symbol);

        load_struct(symbol: Symbol.STRUCT) -> Graph.Value.BASE =>
            new Graph.Value.Load.SYMBOL(null, symbol);

        load_enum(symbol: Symbol.ENUM_) -> Graph.Value.BASE =>
            new Graph.Value.Load.SYMBOL(null, symbol);

        load_enum_member(symbol: Symbol.ENUM_MEMBER) -> Graph.Value.BASE =>
            new Graph.Value.Load.SYMBOL(null, symbol);

        load_closure(from: Graph.Value.BASE, symbol: Symbol.BASE) -> Graph.Value.BASE =>
            new Graph.Value.Load.SYMBOL(from, symbol);            

        load_function_group(from: Graph.Value.BASE, symbol: Symbol.BASE) -> Graph.Value.BASE =>
            new Graph.Value.Load.SYMBOL(from, symbol);

        load_global_function(symbol: Symbol.BASE) -> Graph.Value.BASE =>
            new Graph.Value.Load.SYMBOL(null, symbol);

        // FIXME: this needs to create a pointer to the function that's bound to self:
        load_instance_method(from: Graph.Value.BASE, symbol: Symbol.BASE) -> Graph.Value.BASE is
            if from == null then
                from = new Graph.Value.Load.SELF(_symbol_table.current_instance_context);
            fi

            return new Graph.Value.Load.INSTANCE_FIELD(from, symbol);
        si

        // FIXME: this needs to create a pointer to the function:
        load_static_method(symbol: Symbol.BASE) -> Graph.Value.BASE is
            return new Graph.Value.Load.STATIC_FIELD(symbol);
        si
        
        load_local_variable(symbol: Symbol.BASE) -> Graph.Value.BASE =>
            new Graph.Value.Load.LOCAL_VARIABLE(symbol);

        store_local_variable(symbol: Symbol.BASE, value: Graph.Value.BASE) -> Graph.Value.BASE =>
            new Graph.Value.Store.LOCAL_VARIABLE(symbol, value);

        load_local_argument(symbol: Symbol.BASE) -> Graph.Value.BASE =>
            new Graph.Value.Load.LOCAL_ARGUMENT(symbol);

        store_local_argument(symbol: Symbol.BASE, value: Graph.Value.BASE) -> Graph.Value.BASE =>
            new Graph.Value.Store.LOCAL_ARGUMENT(symbol, value);

        load_global_variable(symbol: Symbol.BASE) -> Graph.Value.BASE =>
            new Graph.Value.Load.SYMBOL(null, symbol);

        store_global_variable(symbol: Symbol.BASE, value: Graph.Value.BASE) -> Graph.Value.BASE =>
            new Graph.Value.Store.SYMBOL(null, symbol, value);
            
        load_instance_variable(from: Graph.Value.BASE, symbol: Symbol.BASE) -> Graph.Value.BASE is
            if from == null then
                from = new Graph.Value.Load.SELF(_symbol_table.current_instance_context);
            fi

            return new Graph.Value.Load.INSTANCE_FIELD(from, symbol);
        si

        store_instance_variable(from: Graph.Value.BASE, symbol: Symbol.BASE, value: Graph.Value.BASE) -> Graph.Value.BASE is
            if from == null then
                from = new Graph.Value.Load.SELF(_symbol_table.current_instance_context);
            fi
        
            return new Graph.Value.Store.INSTANCE_FIELD(from, symbol, value);
        si

        load_static_field(symbol: Symbol.BASE) -> Graph.Value.BASE is
            return new Graph.Value.Load.STATIC_FIELD(symbol);
        si

        store_static_field(symbol: Symbol.BASE, value: Graph.Value.BASE) -> Graph.Value.BASE is
            return new Graph.Value.Store.STATIC_FIELD(symbol, value);
        si

        load_instance_property(from: Graph.Value.BASE, symbol: Symbol.Property) -> Graph.Value.BASE => load_property(from, symbol, false);
        load_static_property(symbol: Symbol.Property) -> Graph.Value.BASE => load_property(null, symbol, true);

        load_property(from: Graph.Value.BASE, symbol: Symbol.Property, is_static: bool) -> Graph.Value.BASE is
            if symbol == null then
                return null;
            fi

            if from == null && !is_static then
                from = new Graph.Value.Load.SELF(_symbol_table.current_instance_context);
            fi

            /*
            let function_group = cast Symbol.FUNCTION_GROUP(find_symbol("__read_" + symbol.name));

            if function_group == null then
                IO.Std.err.println("oops: no read function group found for property: " + symbol.qualified_name);
                return null;
            fi

            var function: Symbol.Function;

            for f in function_group.functions do
                if f.arguments.Length == 0 then
                    function = f;
                fi
            od
            */

            if symbol.read_function == null then
                IO.Std.err.println("oops: no read function found for property: " + symbol.qualified_name);
                return null;
            fi            

            find_symbol = _null_find_symbol;

            return symbol.read_function.call(from, new Graph.Value.BASE[](0), null, _function_caller);
        si

        store_instance_property(from: Graph.Value.BASE, symbol: Symbol.Property, value: Graph.Value.BASE) -> Graph.Value.BASE => store_property(from, symbol, value, false);
        store_static_property(symbol: Symbol.Property, value: Graph.Value.BASE) -> Graph.Value.BASE => store_property(null, symbol, value, true);

        store_property(from: Graph.Value.BASE, symbol: Symbol.Property, value: Graph.Value.BASE, is_static: bool) -> Graph.Value.BASE is
            if symbol == null then
                return null;
            fi

            if from == null && !is_static then
                from = new Graph.Value.Load.SELF(_symbol_table.current_instance_context);
            fi
        
            /*
            let function_group = cast Symbol.FUNCTION_GROUP(find_symbol("__assign_" + symbol.name));

            if function_group == null then
                IO.Std.err.println("oops: no assign function group found for property: " + symbol.qualified_name);
                return null;
            fi

            var function: Symbol.Function;

            for f in function_group.functions do
                if f.arguments.Length == 1 then
                    function = f;
                fi
            od
            */

            if symbol.assign_function == null then
                IO.Std.err.println("oops: no assign function found for property: " + symbol.qualified_name);
                return null;
            fi                        

            find_symbol = _null_find_symbol;

            return new Graph.Value.TYPE_WRAPPER(
                cast Type.Typed(symbol).type,
                symbol.assign_function.call(from, [value], null, _function_caller)
            );
        si

        load_global_property(symbol: Symbol.BASE) -> Graph.Value.BASE =>
            new Graph.Value.Load.SYMBOL(null, symbol);

        store_global_property(symbol: Symbol.BASE, value: Graph.Value.BASE) -> Graph.Value.BASE =>
            new Graph.Value.Store.SYMBOL(null, symbol, value);        
    si
si