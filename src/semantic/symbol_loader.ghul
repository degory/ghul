namespace Semantic is
    use System.NotImplementedException;

    use Logging;

    use IR.Values;
    use IR.VALUE_BOXER;

    use Types.Type;

    class SYMBOL_LOADER is
        _null_find_symbol: (string) -> Symbols.Symbol static;
    
        _logger: Logger;
        _symbol_table: SYMBOL_TABLE;
        _symbol_table_state: SYMBOL_TABLE_STATE;
        _function_caller: FUNCTION_CALLER;
        _value_boxer: IR.VALUE_BOXER;
        _innate_symbol_lookup: Lookups.InnateSymbolLookup;

        find_symbol: (string) -> Symbols.Symbol public;
    
        init(
            logger: Logger,
            symbol_table: SYMBOL_TABLE,
            symbol_table_state: SYMBOL_TABLE_STATE,
            function_caller: FUNCTION_CALLER,
            value_boxer: VALUE_BOXER,
            innate_symbol_lookup: Lookups.InnateSymbolLookup
        ) is
            super.init();

            // calls to null anon functions don't always produce a sane stack trace
            if _null_find_symbol == null then
                _null_find_symbol = 
                    (name: string) -> Symbols.Symbol is
                        throw new NotImplementedException("find_symbol is not set");
                    si;
            fi

            _logger = logger;
            _symbol_table = symbol_table;            
            _symbol_table_state = symbol_table_state;
            _function_caller = function_caller;
            _value_boxer = value_boxer;
            _innate_symbol_lookup = innate_symbol_lookup;

            find_symbol = _null_find_symbol;
        si

        // load_integer_literal(value: string) -> Value =>
        //     new Literal.NUMBER(value, _innate_symbol_lookup.get_type("int", typeof int), "i4");

        load_namespace(symbol: Symbols.NAMESPACE) -> Value =>
            new Load.SYMBOL(null, symbol);

        load_class(symbol: Symbols.CLASS) -> Value =>
            new Load.SYMBOL(null, symbol);

        load_trait(symbol: Symbols.TRAIT) -> Value =>
            new Load.SYMBOL(null, symbol);

        load_struct(symbol: Symbols.STRUCT) -> Value =>
            new Load.SYMBOL(null, symbol);

        load_enum(symbol: Symbols.ENUM_) -> Value =>
            new Load.SYMBOL(null, symbol);

        load_enum_member(symbol: Symbols.ENUM_MEMBER) -> Value =>
            new Literal.NUMBER("" + symbol.value, symbol.type, "i4");

        load_instance_closure(symbol: Symbols.Symbol, func_type: Type) -> Value =>
            new Load.INSTANCE_CLOSURE(symbol, func_type);            

        load_static_closure(symbol: Symbols.Symbol, func_type: Type) -> Value =>
            new Load.STATIC_CLOSURE(symbol, func_type);

        load_captured_value(symbol: Symbols.Symbol) -> Value =>
            new Load.CAPTURED_VALUE(symbol);

        load_function_group(from: Value, symbol: Symbols.Symbol) -> Value =>
            new Load.SYMBOL(from, symbol);

        load_global_function(symbol: Symbols.Symbol) -> Value =>
            new Load.SYMBOL(null, symbol);

        // FIXME: this needs to create a pointer to the function that's bound to self:
        load_instance_method(from: Value, symbol: Symbols.Symbol) -> Value is
            if from == null then
                from = new Load.SELF(_symbol_table_state.current_instance_context);
            fi

            return new Load.INSTANCE_FIELD(from, symbol);
        si

        load_struct_method(from: Value, symbol: Symbols.Symbol) -> Value is
            if from == null then
                from = new Load.SELF(_symbol_table_state.current_instance_context);
            fi

            return new Load.INSTANCE_FIELD(from, symbol);
        si

        // FIXME: this needs to create a pointer to the function:
        load_static_method(symbol: Symbols.Symbol) -> Value is
            return new Load.STATIC_FIELD(symbol);
        si
        
        load_local_variable(symbol: Symbols.Variable) -> Value =>
            new Load.LOCAL_VARIABLE(symbol);

        store_local_variable(symbol: Symbols.Variable, value: Value) -> Value =>
            new Store.LOCAL_VARIABLE(symbol, _value_boxer.box_if_needed(value, symbol.type));            

        load_local_argument(symbol: Symbols.Variable) -> Value =>
            new Load.LOCAL_ARGUMENT(symbol);

        store_local_argument(symbol: Symbols.Variable, value: Value) -> Value =>
            new Store.LOCAL_ARGUMENT(symbol, _value_boxer.box_if_needed(value, symbol.type));

        load_global_variable(symbol: Symbols.Variable) -> Value =>
            new Load.SYMBOL(null, symbol);

        store_global_variable(symbol: Symbols.Variable, value: Value) -> Value =>
            new Store.SYMBOL(null, symbol, _value_boxer.box_if_needed(value, symbol.type));
            
        load_instance_variable(location: Source.LOCATION, from: Value, symbol: Symbols.Variable) -> Value is
            if !from? then
                let context = _symbol_table_state.current_function;

                if !context? then
                    _logger.error(location, "cannot access instance field from non-function context");
                elif !context.is_instance then
                    _logger.error(location, "cannot access instance field from static context");
                fi

                from = new Load.SELF(_symbol_table_state.current_instance_context);
            fi

            return new Load.INSTANCE_FIELD(from, symbol);
        si

        store_instance_variable(location: Source.LOCATION, from: Value, symbol: Symbols.Variable, value: Value) -> Value is
            if !from? then
                let context = _symbol_table_state.current_function;

                if !context? then
                    _logger.error(location, "cannot access instance field from non-function context");
                elif !context.is_instance then
                    _logger.error(location, "cannot access instance field from static context");
                fi

                from = new Load.SELF(_symbol_table_state.current_instance_context);
            fi
        
            return new Store.INSTANCE_FIELD(from, symbol, _value_boxer.box_if_needed(value, symbol.type));
        si

        load_static_field(symbol: Symbols.Variable) -> Value is
            return new Load.STATIC_FIELD(symbol);
        si

        store_static_field(symbol: Symbols.Variable, value: Value) -> Value is
            return new Store.STATIC_FIELD(symbol, _value_boxer.box_if_needed(value, symbol.type));
        si

        load_instance_property(location: Source.LOCATION, from: Value, symbol: Symbols.Property) -> Value => load_property(location, from, symbol, false);
        load_static_property(location: Source.LOCATION, symbol: Symbols.Property) -> Value => load_property(location, null, symbol, true);

        load_property(location: Source.LOCATION, from: Value, symbol: Symbols.Property, is_static: bool) -> Value is
            if !is_static /\ !from? then
                let context = _symbol_table_state.current_function;

                if !context? then
                    _logger.error(location, "cannot read instance property from non-function context");                    
                elif !context.is_instance then
                    _logger.error(location, "cannot read instance property from static context");                    
                fi
            fi

            if symbol == null then
                return null;
            fi

            if from == null /\ !is_static then
                from = new Load.SELF(_symbol_table_state.current_instance_context);
            fi

            if symbol.read_function == null then
                _logger.poison(location, "property " + symbol.qualified_name + " does not have a read function");
                return null;
            fi            

            find_symbol = _null_find_symbol;

            return symbol.read_function.call(location, from, new Collections.LIST[Value](0), null, _function_caller);
        si

        store_instance_property(location: Source.LOCATION, from: Value, symbol: Symbols.Property, value: Value) -> Value => store_property(location, from, symbol, value, false);
        store_static_property(location: Source.LOCATION, symbol: Symbols.Property, value: Value) -> Value => store_property(location, null, symbol, value, true);

        store_property(location: Source.LOCATION, from: Value, symbol: Symbols.Property, value: Value, is_static: bool) -> Value is
            if symbol == null then
                return null;
            fi

            if from == null /\ !is_static then
                from = new Load.SELF(_symbol_table_state.current_instance_context);
            fi
        
            if symbol.assign_function == null then
                if symbol.is_assignable then
                    _logger.poison(location, "property " + symbol.qualified_name + " is assignable but does not have an assign function");                    
                else
                    _logger.poison(location, "property " + symbol.qualified_name + " does not have an assign function");
                fi
                
                return null;
            fi                        

            find_symbol = _null_find_symbol;

            return new TYPE_WRAPPER(
                cast Types.Typed(symbol).type,
                symbol.assign_function.call(location, from, new Collections.LIST[Value]([value]), null, _function_caller)
            );
        si

        load_global_property(symbol: Symbols.Symbol) -> Value =>
            new Load.SYMBOL(null, symbol);

        store_global_property(symbol: Symbols.Symbol, value: Value) -> Value =>
            new Store.SYMBOL(null, symbol, value);        
    si
si