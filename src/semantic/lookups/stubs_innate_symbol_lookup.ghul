namespace Semantic.Lookups is
    use IO.Std;
    use TYPE = System.Type2;
    use ValueType = System.ValueType;
    use Exception = System.Exception;

    use System.Lazy`1;

    use Types.Type;
    use Types.NAMED;

    class STUBS_INNATE_SYMBOL_LOOKUP: InnateSymbolLookup is
        _ghul_symbol_lookup: GHUL_STUBS_SYMBOL_LOOKUP;
        _system_symbol_lookup: SYSTEM_STUBS_SYMBOL_LOOKUP;
        _collections_symbol_lookup: COLLECTIONS_STUBS_SYMBOL_LOOKUP;

        init(logger: Logging.Logger, symbol_table: SYMBOL_TABLE) is
            _ghul_symbol_lookup = new GHUL_STUBS_SYMBOL_LOOKUP(logger, symbol_table);
            _system_symbol_lookup = new SYSTEM_STUBS_SYMBOL_LOOKUP(logger, symbol_table);
            _collections_symbol_lookup = new COLLECTIONS_STUBS_SYMBOL_LOOKUP(logger, symbol_table);
        si

        get_enum_type() -> Type;
        get_tuple_type(types: Collections.List[Type], names: Collections.List[string]) -> Type => _ghul_symbol_lookup.get_tuple_type(types, names);
        get_function_type(types: Collections.List[Types.Type]) -> Type => _ghul_symbol_lookup.get_function_type(types);
        
        get_array_type(type: Types.Type) -> Type => _ghul_symbol_lookup.get_array_type(type);

        get_pointer_type(type: Types.Type) -> Type => _ghul_symbol_lookup.get_pointer_type(type);

        get_reference_type(type: Types.Type) -> Type => _ghul_symbol_lookup.get_reference_type(type);

        get_bool_type() -> Type => _ghul_symbol_lookup.get_bool_type();

        get_char_type() -> Type => _ghul_symbol_lookup.get_char_type();

        get_byte_type() -> Type => _ghul_symbol_lookup.get_byte_type();

        get_ubyte_type() -> Type => _ghul_symbol_lookup.get_ubyte_type();
            
        get_short_type() -> Type => _ghul_symbol_lookup.get_short_type();

        get_ushort_type() -> Type => _ghul_symbol_lookup.get_ushort_type();
            
        get_int_type() -> Type => _ghul_symbol_lookup.get_int_type();

        get_uint_type() -> Type => _ghul_symbol_lookup.get_uint_type();

        get_long_type() -> Type => _ghul_symbol_lookup.get_long_type();
            
        get_ulong_type() -> Type => _ghul_symbol_lookup.get_ulong_type();

        get_word_type() -> Type => _ghul_symbol_lookup.get_word_type();

        get_uword_type() -> Type => _ghul_symbol_lookup.get_uword_type();
             
        get_single_type() -> Type => _ghul_symbol_lookup.get_single_type();            

        get_double_type() -> Type => _ghul_symbol_lookup.get_double_type();
            
        get_void_type() -> Type => _ghul_symbol_lookup.get_void_type();

        get_object_type() -> Type => _system_symbol_lookup.get_object_type();

        get_value_type() -> Type => _system_symbol_lookup.get_value_type();

        get_string_type() -> Type => _system_symbol_lookup.get_string_type();

        get_exception_type() -> Type => _system_symbol_lookup.get_exception_type();

        get_type_type() -> Type => _system_symbol_lookup.get_type_type();

        get_unspecialized_iterable_type() -> Type => _collections_symbol_lookup.get_unspecialized_iterable_type();
        get_unspecialized_iterator_type() -> Type => _collections_symbol_lookup.get_unspecialized_iterator_type();

        get_interpolated_string_handler_type() -> Type => _system_symbol_lookup.get_interpolated_string_handler_type();
    si
        
    class StubsSymbolLookup is
        _logger: Logging.Logger;
        _symbol_table: SYMBOL_TABLE;
        _namespace_name: string;

        namespace_scope: Scope => _symbol_table.global_scope.find_direct(_namespace_name);

        init(
            logger: Logging.Logger,
            symbol_table: SYMBOL_TABLE,
            namespace_name: string
        ) is
            _logger = logger;
            _symbol_table = symbol_table;
            _namespace_name = namespace_name;
        si

        get_type(
            name: string,
            create: (
                Source.LOCATION,
                Semantic.Symbols.Classy
            ) -> Type
        ) -> Type is
            assert
                create?
            else
                "no create function supplied";

            return
                create(
                    Source.LOCATION.internal,
                    get_class(name)
                );
        si

        get_type(
            name: string,
            type: Types.Type,
            create: (
                Source.LOCATION,
                Semantic.Symbols.Classy,
                Collections.List[Types.Type]
            ) -> Type
        ) -> Type
            => get_type(name, new Collections.LIST[Types.Type]([type]), -1, create);

        get_type(
            name: string,
            types: Collections.List[Types.Type],
            create: (
                Source.LOCATION,
                Semantic.Symbols.Classy,
                Collections.List[Types.Type]
            ) -> Type
        ) -> Type
            => get_type(name, types, 0, create);

        get_type(
            name: string,
            types: Collections.List[Types.Type],
            exclude_count: int,
            create: (
                Source.LOCATION,
                Semantic.Symbols.Classy,
                Collections.List[Types.Type]
            ) -> Type
        ) -> Type
        is
            if types.count > 0 then
                if exclude_count >= 0 then
                    name = name + "_" + (types.count - exclude_count);
                fi

                let symbol = get_class(name);

                if create? then
                    let result = create(
                        Source.LOCATION.internal,
                        symbol,
                        types
                    );

                    return result;
                else
                    return new Semantic.Types.GENERIC(Source.LOCATION.internal, symbol, types);
                fi
            else
                return get_type(name + "_0");
            fi
        si

        // TODO: if consuming .NET types from assemblies then lookup type in the .NET symbol table: 
        get_type(name: string) -> Type 
            => new NAMED(get_class(name));

        get_class(name: string) -> Semantic.Symbols.Classy
            => cast Semantic.Symbols.Classy(get_symbol(name));

        get_symbol(name: string) -> Semantic.Symbols.Symbol is
            assert
                namespace_scope?
            else
                "innate symbol lookup has no namespace " + _namespace_name;

            let result = namespace_scope.find_direct(name);

            assert
                result?
            else
                "could not find innate symbol " + name;

            return result;
        si
    si

    class GHUL_STUBS_SYMBOL_LOOKUP: StubsSymbolLookup is
        init(
            logger: Logging.Logger,
            symbol_table: SYMBOL_TABLE
        ) is
            super.init(
                logger,
                symbol_table,
                "Ghul");
        si

        get_enum_type(type: Types.Type) -> Type =>
            get_type(
                "ENUM",
                type,
                (
                    location: Source.LOCATION,
                    symbol: Semantic.Symbols.Classy,
                    types: Collections.List[Types.Type]
                ) =>
                    new Semantic.Types.ENUM(location, symbol, types)
            );

        get_tuple_type(
            types: Collections.List[Types.Type],
            names: Collections.List[string]
        ) -> Type =>
            get_type(
                "TUPLE",
                types,
                (
                    location: Source.LOCATION,
                    symbol: Semantic.Symbols.Classy,
                    types: Collections.List[Types.Type]
                ) is
                    let result = new Semantic.Types.TUPLE(location, symbol, types, names);

                    return result;
                si                
            );

        get_function_type(types: Collections.List[Types.Type]) -> Type is
            if types[types.count - 1].symbol != get_void_type().symbol then
                return get_type(
                    "FUNCTION",
                    types,
                    1,
                    (
                        location: Source.LOCATION,
                        symbol: Semantic.Symbols.Classy,
                        types: Collections.List[Types.Type]
                    ) =>
                        new Semantic.Types.FUNCTION(location, symbol, types)
                );
            elif types.count == 1 then
                let result = get_type(
                    "ACTION_0",
                    (
                        location: Source.LOCATION,
                        symbol: Semantic.Symbols.Classy
                    ) =>
                        new Semantic.Types.ACTION_0(symbol)
                );

                return result;
            else
                let action_types = new Collections.LIST[Types.Type](types.count - 1);

                for i in 0..types.count - 1 do
                    action_types.add(types[i]);
                od
                
                let result = get_type(
                    "ACTION",
                    action_types,
                    0,
                    (
                        location: Source.LOCATION,
                        symbol: Semantic.Symbols.Classy,
                        types: Collections.List[Types.Type]
                    ) =>
                        new Semantic.Types.FUNCTION(location, symbol, types)
                );

                return result;
            fi
        si
        
        get_array_type(type: Types.Type) -> Type =>
            get_type(
                "ARRAY",
                type,
                (
                    location: Source.LOCATION,
                    symbol: Semantic.Symbols.Classy,
                    types: Collections.List[Types.Type]
                ) =>
                        new Semantic.Types.ARRAY(location, symbol, types)
            );

        get_pointer_type(type: Types.Type) -> Type =>
            get_type(
                "POINTER",
                type,
                (
                    location: Source.LOCATION,
                    symbol: Semantic.Symbols.Classy,
                    types: Collections.List[Types.Type]
                ) =>
                        new Semantic.Types.POINTER(location, symbol, types)
            );

        get_reference_type(type: Types.Type) -> Type =>
            get_type(
                "REFERENCE",
                type,
                (
                    location: Source.LOCATION,
                    symbol: Semantic.Symbols.Classy,
                    types: Collections.List[Types.Type]
                ) =>
                        new Semantic.Types.REFERENCE(location, symbol, types)
            );

        get_bool_type() -> Type =>
            get_type(
                "bool",
                (
                    location: Source.LOCATION,
                    symbol: Semantic.Symbols.Classy
                ) =>
                    new NAMED(symbol)
            );


        get_char_type() -> Type =>
            get_type(
                "char",
                (
                    location: Source.LOCATION,
                    symbol: Semantic.Symbols.Classy
                ) => 
                    new NAMED(symbol)
            );

        get_byte_type() -> Type =>
            get_type(
                "byte",
                (
                    location: Source.LOCATION,
                    symbol: Semantic.Symbols.Classy
                ) => new NAMED(symbol)
            );

        get_ubyte_type() -> Type =>
            get_type(
                "ubyte",
                (
                    location: Source.LOCATION,
                    symbol: Semantic.Symbols.Classy
                ) => new NAMED(symbol)
            );
            
        get_short_type() -> Type =>
            get_type(
                "short",
                (
                    location: Source.LOCATION,
                    symbol: Semantic.Symbols.Classy
                ) => new NAMED(symbol)
            );

        get_ushort_type() -> Type =>
            get_type(
                "ushort",
                (
                    location: Source.LOCATION,
                    symbol: Semantic.Symbols.Classy
                ) => new NAMED(symbol)
            );
            
        get_int_type() -> Type =>
            get_type(
                "int",
                (
                    location: Source.LOCATION,
                    symbol: Semantic.Symbols.Classy
                ) => new NAMED(symbol)
            );

        get_uint_type() -> Type =>
            get_type(
                "uint",
                (
                    location: Source.LOCATION,
                    symbol: Semantic.Symbols.Classy
                ) => new NAMED(symbol)
            );

        get_long_type() -> Type =>
            get_type(
                "long",
                (
                    location: Source.LOCATION,
                    symbol: Semantic.Symbols.Classy
                ) => new NAMED(symbol)
            );
            
        get_ulong_type() -> Type =>
            get_type(
                "ulong",
                (
                    location: Source.LOCATION,
                    symbol: Semantic.Symbols.Classy
                ) => new NAMED(symbol)
            );

        get_word_type() -> Type =>
            get_type(
                "word",
                (
                    location: Source.LOCATION,
                    symbol: Semantic.Symbols.Classy
                ) => new NAMED(symbol)
            );            

        get_uword_type() -> Type =>
            get_type(
                "uword",
                (
                    location: Source.LOCATION,
                    symbol: Semantic.Symbols.Classy
                ) => new NAMED(symbol)
            );   
             
        get_single_type() -> Type =>
            get_type(
                "single",
                (
                    location: Source.LOCATION,
                    symbol: Semantic.Symbols.Classy
                ) => new NAMED(symbol)
            );            

        get_double_type() -> Type =>
            get_type(
                "double",
                (
                    location: Source.LOCATION,
                    symbol: Semantic.Symbols.Classy
                ) => new NAMED(symbol)
            );                        
            
        get_void_type() -> Type =>
            get_type("void");
    si

    class SYSTEM_STUBS_SYMBOL_LOOKUP: StubsSymbolLookup is
        init(
            logger: Logging.Logger,
            symbol_table: SYMBOL_TABLE
        ) is
            super.init(
                logger,
                symbol_table,
                "System"
            );
        si

        get_object_type() -> Type =>
            get_type("Object");

        get_value_type() -> Type =>
            get_type("ValueType");

        get_string_type() -> Type =>
            get_type("String");

        get_exception_type() -> Type =>
            get_type("Exception");

        get_type_type() -> Type =>
            get_type("Type2");

        get_interpolated_string_handler_type() -> Type =>
            get_type("DefaultInterpolatedStringHandler"); 
    si

    class COLLECTIONS_STUBS_SYMBOL_LOOKUP: StubsSymbolLookup is
        init(
            logger: Logging.Logger,
            symbol_table: SYMBOL_TABLE
        ) is
            super.init(
                logger,
                symbol_table,
                "Collections"
            );
        si

        get_unspecialized_iterable_type() -> Type =>
            get_type("Iterable");

        get_unspecialized_iterator_type() -> Type =>
            get_type("Iterator");
    si
si