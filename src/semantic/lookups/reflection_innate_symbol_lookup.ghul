namespace Semantic.Lookups is
    use IO.Std;
    use TYPE = System.Type2;
    use System.ValueType;
    use System.Exception;

    use Collections.List;
    use Collections.LIST;

    use Source.LOCATION;

    use Types;
    use ARRAY_TYPE = Types.ARRAY;

    class REFLECTION_INNATE_SYMBOL_LOOKUP: InnateSymbolLookup is
        _type_mapper: DotNet.TYPE_MAPPER;
        _symbol_table: DotNet.SYMBOL_TABLE;
        _ghul_symbol_lookup: GHUL_STUBS_SYMBOL_LOOKUP;

        _type_source: DotNet.TypeSource;

        _tuple_types: List[TYPE];
        _function_types: List[TYPE];

        _action_0_type: Type;

        _action_types: List[TYPE];

        _enum_type: Type;
        _bool_type: Type;
        _char_type: Type;
        _ubyte_type: Type;
        _byte_type: Type;
        _short_type: Type;
        _ushort_type: Type;
        _int_type: Type;
        _uint_type: Type;
        _long_type: Type;
        _ulong_type: Type;
        _word_type: Type;
        _uword_type: Type;
        _single_type: Type;
        _double_type: Type;
        _void_type: Type;
        _object_type: Type;
        _value_type: Type;
        _string_type: Type;
        _exception_type: Type;
        _type_type: Type;
        _unspecialized_iterable_type: Type;
        _unspecialized_iterator_type: Type;

        init(
            type_mapper: DotNet.TYPE_MAPPER,
            symbol_table: DotNet.SYMBOL_TABLE,
            ghul_symbol_lookup: GHUL_STUBS_SYMBOL_LOOKUP,
            type_source: DotNet.TypeSource
        ) is
            _type_mapper = type_mapper;
            _symbol_table = symbol_table;
            _ghul_symbol_lookup = ghul_symbol_lookup;

            _type_source = type_source;

            Std.error.write_line("type source add on start callback...");

            type_source.on_start(() -> void is
                Std.error.write_line("RISL: symbol lookup starting up...");

                _action_0_type = type_mapper.get_type(type_source.get_type("System.Action"));

                _tuple_types = type_source.get_types((1::7) | .map(i => "System.ValueTuple`" + i));
                _function_types = type_source.get_types((1::17) | .map(i => "System.Func`" + i));
                _action_types = type_source.get_types((1::16) | .map(i => "System.Action`" + i));
                
                _bool_type = type_mapper.get_type(type_source.get_type("System.Boolean"));
                _char_type = type_mapper.get_type(type_source.get_type("System.Char"));
                _byte_type = type_mapper.get_type(type_source.get_type("System.SByte"));
                _ubyte_type = type_mapper.get_type(type_source.get_type("System.Byte"));            
                _short_type = type_mapper.get_type(type_source.get_type("System.Int16"));
                _ushort_type = type_mapper.get_type(type_source.get_type("System.UInt16"));
                _int_type = type_mapper.get_type(type_source.get_type("System.Int32"));
                _uint_type = type_mapper.get_type(type_source.get_type("System.UInt32"));
                _long_type = type_mapper.get_type(type_source.get_type("System.Int64"));
                _ulong_type = type_mapper.get_type(type_source.get_type("System.UInt64"));
                _word_type = type_mapper.get_type(type_source.get_type("System.IntPtr"));
                _uword_type = type_mapper.get_type(type_source.get_type("System.UIntPtr"));
                _single_type = type_mapper.get_type(type_source.get_type("System.Single"));
                _double_type = type_mapper.get_type(type_source.get_type("System.Double"));
                _void_type = type_mapper.get_type(type_source.get_type("System.Void"));
                _object_type = type_mapper.get_type(type_source.get_type("System.Object"));
                _value_type = type_mapper.get_type(type_source.get_type("System.ValueType"));
                _string_type = type_mapper.get_type(type_source.get_type("System.String"));
                _exception_type = type_mapper.get_type(type_source.get_type("System.Exception"));
                _type_type = type_mapper.get_type(type_source.get_type("System.Type"));
                _unspecialized_iterable_type = type_mapper.get_type(type_source.get_type("System.Collections.Generic.IEnumerable`1"));
                _unspecialized_iterator_type =type_mapper.get_type(type_source.get_type("System.Collections.Generic.IEnumerator`1"));
            si);
        si
        
        get_tuple_type(types: Collections.List[Type], names: Collections.List[string]) -> Type => 
            new DotNet.HYBRID_TUPLE_TYPE_WRAPPER(_symbol_table, _tuple_types[types.count - 1], types, names);

        get_function_type(types: Collections.List[Type]) -> Type is
            assert types?;
            assert types.count > 0 /\ types.count < _function_types.count;

            let return_type = types[types.count - 1];            

            if return_type.is_any \/ return_type.is_type_variable \/ return_type !~ get_void_type() then
                return 
                    new DotNet.HYBRID_FUNCTION_TYPE_WRAPPER(_symbol_table, _function_types[types.count - 1], types);
            elif types.count == 1 then
                return _action_0_type;
            else
                let without_void_return_type = new LIST[Type](types.count - 1);

                for i in 0..types.count - 1 do
                    without_void_return_type.add(types[i]);
                od

                return 
                    new DotNet.HYBRID_ACTION_TYPE_WRAPPER(_symbol_table, _action_types[types.count - 2], without_void_return_type);
            fi
        si
        
        get_enum_type() -> Type => _enum_type;
               
        get_array_type(type: Type) -> Type => 
            _ghul_symbol_lookup.get_array_type(type);

        get_pointer_type(type: Type) -> Type =>
            _ghul_symbol_lookup.get_pointer_type(type);

        get_reference_type(type: Type) -> Type =>
            _ghul_symbol_lookup.get_reference_type(type);

        get_bool_type() -> Type => _bool_type;
        get_char_type() -> Type => _char_type;
        get_byte_type() -> Type => _byte_type;
        get_ubyte_type() -> Type => _ubyte_type;            
        get_short_type() -> Type => _short_type;
        get_ushort_type() -> Type => _ushort_type;
        get_int_type() -> Type => _int_type;
        get_uint_type() -> Type => _uint_type;
        get_long_type() -> Type => _long_type;
        get_ulong_type() -> Type => _ulong_type;
        get_word_type() -> Type => _word_type;
        get_uword_type() -> Type => _uword_type;
        get_single_type() -> Type => _single_type;
        get_double_type() -> Type => _double_type;
        get_void_type() -> Type => _void_type;
        get_object_type() -> Type => _object_type;
        get_value_type() -> Type => _value_type;
        get_string_type() -> Type => _string_type;
        get_exception_type() -> Type => _exception_type;
        get_type_type() -> Type => _type_type;
        get_unspecialized_iterable_type() -> Type => _unspecialized_iterable_type;
        get_unspecialized_iterator_type() -> Type => _unspecialized_iterator_type;
    si    
si
