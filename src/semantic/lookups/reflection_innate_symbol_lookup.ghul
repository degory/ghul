namespace Semantic.Lookups is
    use IO.Std;
    use TYPE = System.Type2;
    use System.ValueType;
    use System.Exception;

    use Logging;

    use Collections.List;
    use Collections.LIST;

    use Source.LOCATION;

    use Types;
    use ARRAY_TYPE = Types.ARRAY;

    class REFLECTION_INNATE_SYMBOL_LOOKUP: InnateSymbolLookup is
        _type_mapper: DotNet.TYPE_MAPPER;
        _symbol_table: DotNet.SYMBOL_TABLE;
        _ghul_symbol_lookup: GHUL_STUBS_SYMBOL_LOOKUP;

        _type_source: DotNet.TypeSource;

        _tuple_types: List[TYPE];
        _function_types: List[TYPE];
        _action_types: List[TYPE];

        init(
            type_mapper: DotNet.TYPE_MAPPER,
            symbol_table: DotNet.SYMBOL_TABLE,
            ghul_symbol_lookup: GHUL_STUBS_SYMBOL_LOOKUP,
            type_source: DotNet.TypeSource
        ) is
            _type_mapper = type_mapper;
            _symbol_table = symbol_table;
            _ghul_symbol_lookup = ghul_symbol_lookup;

            _type_source = type_source;

            _tuple_types = _type_source.get_types((1::7) | .map(i => "System.ValueTuple`{i}"));
            _function_types = _type_source.get_types((1::17) | .map(i => "System.Func`{i}"));
            _action_types = _type_source.get_types((1::16) | .map(i => "System.Action`{i}"));
        si
        
        get_tuple_type(types: Collections.List[Type], names: Collections.List[string]) -> Type => 
            new DotNet.HYBRID_TUPLE_TYPE_WRAPPER(_symbol_table, _tuple_types[types.count - 1], types, names);

        get_function_type(types: Collections.List[Type]) -> Type is
            assert types?;
            assert types.count > 0 /\ types.count < _function_types.count;

            let return_type = types[types.count - 1];            

            if return_type.is_any \/ return_type.is_type_variable \/ return_type !~ get_void_type() then
                return 
                    new DotNet.HYBRID_FUNCTION_TYPE_WRAPPER(_symbol_table, _function_types[types.count - 1], types);
            elif types.count == 1 then
                return 
                    _type_mapper.get_type(_type_source.get_type("System.Action"));
            else
                let without_void_return_type = new LIST[Type](types.count - 1);

                for i in 0..types.count - 1 do
                    without_void_return_type.add(types[i]);
                od

                return 
                    new DotNet.HYBRID_ACTION_TYPE_WRAPPER(_symbol_table, _action_types[types.count - 2], without_void_return_type);
            fi
        si
        
        get_enum_type() -> Type =>
            _type_mapper.get_type(_type_source.get_type("System.Enum"));
               
        get_array_type(type: Type) -> Type => 
            _ghul_symbol_lookup.get_array_type(type);

        get_pointer_type(type: Type) -> Type =>
            _ghul_symbol_lookup.get_pointer_type(type);

        get_reference_type(type: Type) -> Type =>
            _ghul_symbol_lookup.get_reference_type(type);

        get_bool_type() -> Type => _type_mapper.get_type(_type_source.get_type("System.Boolean"));
        get_char_type() -> Type => _type_mapper.get_type(_type_source.get_type("System.Char"));
        get_byte_type() -> Type => _type_mapper.get_type(_type_source.get_type("System.SByte"));
        get_ubyte_type() -> Type => _type_mapper.get_type(_type_source.get_type("System.Byte"));            
        get_short_type() -> Type => _type_mapper.get_type(_type_source.get_type("System.Int16"));
        get_ushort_type() -> Type => _type_mapper.get_type(_type_source.get_type("System.UInt16"));
        get_int_type() -> Type => _type_mapper.get_type(_type_source.get_type("System.Int32"));
        get_uint_type() -> Type => _type_mapper.get_type(_type_source.get_type("System.UInt32"));
        get_long_type() -> Type => _type_mapper.get_type(_type_source.get_type("System.Int64"));
        get_ulong_type() -> Type => _type_mapper.get_type(_type_source.get_type("System.UInt64"));
        get_word_type() -> Type => _type_mapper.get_type(_type_source.get_type("System.IntPtr"));
        get_uword_type() -> Type => _type_mapper.get_type(_type_source.get_type("System.UIntPtr"));
        get_single_type() -> Type => _type_mapper.get_type(_type_source.get_type("System.Single"));
        get_double_type() -> Type => _type_mapper.get_type(_type_source.get_type("System.Double"));
        get_void_type() -> Type => _type_mapper.get_type(_type_source.get_type("System.Void"));
        get_object_type() -> Type => _type_mapper.get_type(_type_source.get_type("System.Object"));
        get_value_type() -> Type => _type_mapper.get_type(_type_source.get_type("System.ValueType"));
        get_string_type() -> Type => _type_mapper.get_type(_type_source.get_type("System.String"));
        get_exception_type() -> Type => _type_mapper.get_type(_type_source.get_type("System.Exception"));
        get_type_type() -> Type => _type_mapper.get_type(_type_source.get_type("System.Type"));
        get_unspecialized_iterable_type() -> Type => _type_mapper.get_type(_type_source.get_type("System.Collections.Generic.IEnumerable`1"));
        get_unspecialized_iterator_type() -> Type => _type_mapper.get_type(_type_source.get_type("System.Collections.Generic.IEnumerator`1"));

        get_interpolated_string_handler_type() -> Type => _type_mapper.get_type(_type_source.get_type("System.Runtime.CompilerServices.DefaultInterpolatedStringHandler"));
    si
si
