namespace Semantic.Lookups is
    use IO.Std;
    use TYPE = System.Type2;
    use System.ValueType;
    use System.Exception;

    use Collections.List;
    use Collections.LIST;

    use Source.LOCATION;

    use Types;
    use ARRAY_TYPE = Types.ARRAY;

    class REFLECTION_INNATE_SYMBOL_LOOKUP: InnateSymbolLookup is
        _type_mapper: DotNet.TYPE_MAPPER;
        _symbol_table: DotNet.SYMBOL_TABLE;

        _ghul_symbol_lookup: GHUL_STUBS_SYMBOL_LOOKUP;

        _tuple_types: List[TYPE];
        _function_types: List[TYPE];
        _action_types: List[TYPE];

        init(
            type_mapper: DotNet.TYPE_MAPPER,
            symbol_table: DotNet.SYMBOL_TABLE,
            ghul_symbol_lookup: GHUL_STUBS_SYMBOL_LOOKUP
        ) is
            _type_mapper = type_mapper;
            _symbol_table = symbol_table;
            _ghul_symbol_lookup = ghul_symbol_lookup;

            _tuple_types = [
                typeof TUPLE_1,
                typeof TUPLE_2,
                typeof TUPLE_3,
                typeof TUPLE_4,
                typeof TUPLE_5,
                typeof TUPLE_6,
                typeof TUPLE_7,
                typeof TUPLE_8
            ];

            _function_types = [
                typeof FUNCTION_0,
                typeof FUNCTION_1,
                typeof FUNCTION_2,
                typeof FUNCTION_3,
                typeof FUNCTION_4,
                typeof FUNCTION_5,
                typeof FUNCTION_6,
                typeof FUNCTION_7,
                typeof FUNCTION_8
            ];

            _action_types = [
                typeof ACTION_1,
                typeof ACTION_2,
                typeof ACTION_3,
                typeof ACTION_4,
                typeof ACTION_5,
                typeof ACTION_6,
                typeof ACTION_7,
                typeof ACTION_8
            ];
        si
        
        get_enum_type(type: Type) -> Type => _ghul_symbol_lookup.get_enum_type(type);

        get_tuple_type(types: Collections.LIST[Type], names: Collections.List[string]) -> Type => 
            new DotNet.HYBRID_TUPLE_TYPE_WRAPPER(_symbol_table, _tuple_types[types.count - 1], types, names);

        get_function_type(types: Collections.LIST[Type]) -> Type is
            assert types?;
            assert types.count > 0 /\ types.count < _function_types.count;

            let return_type = types[types.count - 1];            

            if return_type.is_any \/ return_type.is_type_variable \/ return_type !~ get_void_type() then
                return 
                    new DotNet.HYBRID_FUNCTION_TYPE_WRAPPER(_symbol_table, _function_types[types.count - 1], types);
            elif types.count == 1 then
                return 
                    _type_mapper.get_type(typeof ACTION_0);
            else
                let without_void_return_type = new LIST[Type](types.count - 1);

                for i in 0..types.count - 1 do
                    without_void_return_type.add(types[i]);
                od

                return 
                    new DotNet.HYBRID_ACTION_TYPE_WRAPPER(_symbol_table, _action_types[types.count - 2], without_void_return_type);
            fi
        si    
               
        get_array_type(type: Type) -> Type => 
            _ghul_symbol_lookup.get_array_type(type);

        get_pointer_type(type: Type) -> Type =>
            _ghul_symbol_lookup.get_pointer_type(type);

        get_reference_type(type: Type) -> Type =>
            _ghul_symbol_lookup.get_reference_type(type);

        get_bool_type() -> Type => _type_mapper.get_type(typeof bool);

        get_char_type() -> Type => _type_mapper.get_type(typeof char);

        get_byte_type() -> Type => _type_mapper.get_type(typeof byte);

        get_ubyte_type() -> Type => _type_mapper.get_type(typeof ubyte);
            
        get_short_type() -> Type => _type_mapper.get_type(typeof short);

        get_ushort_type() -> Type => _type_mapper.get_type(typeof ushort);
            
        get_int_type() -> Type => _type_mapper.get_type(typeof int);

        get_uint_type() -> Type => _type_mapper.get_type(typeof uint);

        get_long_type() -> Type => _type_mapper.get_type(typeof long);
            
        get_ulong_type() -> Type => _type_mapper.get_type(typeof ulong);

        get_word_type() -> Type => _type_mapper.get_type(typeof word);

        get_uword_type() -> Type => _type_mapper.get_type(typeof uword);
             
        get_single_type() -> Type => _type_mapper.get_type(typeof single);            

        get_double_type() -> Type => _type_mapper.get_type(typeof double);
            
        get_void_type() -> Type => _type_mapper.get_type(typeof void);

        get_unspecialized_enum_type() -> Type;

        get_object_type() -> Type => _type_mapper.get_type(typeof object);

        get_value_type() -> Type => _type_mapper.get_type(typeof ValueType);

        get_string_type() -> Type => _type_mapper.get_type(typeof string);

        get_exception_type() -> Type => _type_mapper.get_type(typeof Exception);

        get_type_type() -> Type => _type_mapper.get_type(typeof TYPE);

        get_unspecialized_iterable_type() -> Type => _type_mapper.get_type(typeof Collections.Iterable);

        get_unspecialized_iterator_type() -> Type => _type_mapper.get_type(typeof Collections.Iterator);        
    si    
si
