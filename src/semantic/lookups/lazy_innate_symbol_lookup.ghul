namespace Semantic.Lookups is
    use System.LAZY;

    use Types.Type;
    use Types.NAMED;

    class LAZY_INNATE_SYMBOL_LOOKUP: InnateSymbolLookup is
        _lookup: LAZY[InnateSymbolLookup];

        init(create: () -> InnateSymbolLookup) is
            _lookup = new LAZY[InnateSymbolLookup](create);
        si

        get_enum_type(type: Type) -> NAMED => _lookup.value.get_enum_type(type);
        get_tuple_type(types: Collections.LIST[Type]) -> NAMED => _lookup.value.get_tuple_type(types);
        get_function_type(types: Collections.LIST[Type]) -> NAMED => _lookup.value.get_function_type(types);
        
        get_array_type(type: Type) -> NAMED => _lookup.value.get_array_type(type);

        get_pointer_type(type: Type) -> NAMED => _lookup.value.get_pointer_type(type);

        get_reference_type(type: Type) -> NAMED => _lookup.value.get_reference_type(type);

        get_bool_type() -> NAMED => _lookup.value.get_bool_type();

        get_char_type() -> NAMED => _lookup.value.get_char_type();

        get_byte_type() -> NAMED => _lookup.value.get_byte_type();

        get_ubyte_type() -> NAMED => _lookup.value.get_ubyte_type();
            
        get_short_type() -> NAMED => _lookup.value.get_short_type();

        get_ushort_type() -> NAMED => _lookup.value.get_ushort_type();
            
        get_int_type() -> NAMED => _lookup.value.get_int_type();

        get_uint_type() -> NAMED => _lookup.value.get_uint_type();

        get_long_type() -> NAMED => _lookup.value.get_long_type();
            
        get_ulong_type() -> NAMED => _lookup.value.get_ulong_type();

        get_word_type() -> NAMED => _lookup.value.get_word_type();

        get_uword_type() -> NAMED => _lookup.value.get_uword_type();
             
        get_single_type() -> NAMED => _lookup.value.get_single_type();            

        get_double_type() -> NAMED => _lookup.value.get_double_type();
            
        get_void_type() -> NAMED => _lookup.value.get_void_type();

        get_unspecialized_enum_type() -> NAMED => _lookup.value.get_unspecialized_enum_type();

        get_object_type() -> NAMED => _lookup.value.get_object_type();

        get_value_type() -> NAMED => _lookup.value.get_value_type();

        get_string_type() -> NAMED => _lookup.value.get_string_type();

        get_exception_type() -> NAMED => _lookup.value.get_exception_type();

        get_type_type() -> NAMED => _lookup.value.get_type_type();

        get_unspecialized_iterable_type() -> NAMED => _lookup.value.get_unspecialized_iterable_type();

        get_unspecialized_iterator_type() -> NAMED => _lookup.value.get_unspecialized_iterator_type();        
    si
si