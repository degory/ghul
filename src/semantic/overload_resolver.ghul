namespace Semantic is
    use System.Exception;

    use Logging;
    use Source;

    use Types.Type;

    class OVERLOAD_RESOLVE_RESULT is
        function: Symbols.Function;
        score: Types.MATCH;

        init(function: Symbols.Function, score: Types.MATCH) is
            self.function = function;
            self.score = score;
        si
    si

    class OVERLOAD_MATCHES_RESULT is
        results: Collections.List[Symbols.Function];
        best_result_index: int;
        current_parameter_index: int public;

        init(
            results: Collections.List[Symbols.Function],
            best_result_index: int,
            current_parameter_index: int
        )
        is
            self.results = results;
            self.best_result_index = best_result_index;
            self.current_parameter_index = current_parameter_index;
        si
    si

    class OVERLOAD_RESOLVER is
        _logger: Logger;

        init(logger: Logger) is
            super.init();

            _logger = logger;
        si

        resolve(
            location: LOCATION,
            group: Symbols.FUNCTION_GROUP,
            arguments: Collections.List[Type],
            want_infer: bool,
            want_instance: bool,
            is_constructor_call: bool
        ) -> OVERLOAD_RESOLVE_RESULT
        is
            let mark = _logger.mark();

            try
                return _resolve(location, group, arguments, want_infer, want_instance, is_constructor_call);
            catch e: Exception
                _logger.release(mark);

                _logger.exception(location, e, "exception resolving overload: {group} arguments {arguments}");
                return null;

            finally
                _logger.release(mark);
            yrt
        si

        find_matches(
            group: Symbols.FUNCTION_GROUP,
            arguments: Collections.List[Type]
        ) -> OVERLOAD_MATCHES_RESULT
        is
            let mark = _logger.mark();

            try
                return _find_matches(group, arguments);
            catch e: Exception
                _logger.release(mark);

                _logger.exception(null, e, "exception resolving overload: {group} arguments {arguments}");
                return null;

            finally
                _logger.release(mark);
            yrt
        si

        _resolve(
            location: LOCATION,
            group: Symbols.FUNCTION_GROUP,
            arguments: Collections.List[Type],
            want_infer: bool,
            want_instance: bool,
            is_constructor_call: bool
        ) -> OVERLOAD_RESOLVE_RESULT
        is
            if group == null \/ group.functions == null \/ arguments == null then
                return null;
            fi

            // let use debug_dispose = debug_enter();

            // FIXME: this could just as well be applied to any parameters of generic type, not just anon functions
            let needs_second_call = arguments | .any(a => a? /\ a.is_function_with_any_implicit_argument_types);

            let is_ambiguous = false;

            let best_score = cast int (Types.MATCH.DIFFERENT);
            let result: Symbols.Function;

            let ambiguous_matches: Collections.LIST[Symbols.Function];

            let functions_to_search = group.functions | .filter(f => want_instance \/ !f.is_instance);

            // We need to return PARTIAL if any actual argument types are wild. 'PARTIAL' provides
            // the caller with the best match we can find, and the caller is expecte to use that
            // to bind any unknown types in the actual arguments and retry

            for f in functions_to_search do
                debug("consider {f} vs {arguments |}");
                let actual = f;

                if f.arguments == null then
                    return OVERLOAD_RESOLVE_RESULT(f, Types.MATCH.DIFFERENT);
                elif f.arguments.count == 0 /\ arguments.count == 0 then
                    return OVERLOAD_RESOLVE_RESULT(f, Types.MATCH.SAME);
                elif f.arguments.count == arguments.count then
                    let want_try_bind_owner_generic_arguments = false;
                    let want_try_bind_function_generic_arguments = false;

                    if is_constructor_call then
                        debug("constructor call: only owner generic arguments can be supported");
                        
                        want_try_bind_owner_generic_arguments = true;
                        want_try_bind_function_generic_arguments = false;                    
                    elif f.is_instance then                                        
                        debug("instance method: only function generic arguments can be supported");      

                        want_try_bind_owner_generic_arguments = false;
                        want_try_bind_function_generic_arguments = true;                    
                    elif f.is_generic then
                        debug("generic function: owner and function generic arguments can be supported");

                        want_try_bind_owner_generic_arguments = true;
                        want_try_bind_function_generic_arguments = true;
                    else
                        debug("not a generic function: only owner generic arguments can be supported");

                        want_try_bind_owner_generic_arguments = true;
                        want_try_bind_function_generic_arguments = false;
                    fi

                    let try_bind_generic_arguments = false;
                    let score = cast int(Types.MATCH.SAME);

                    let owner_symbol = cast Symbols.Classy(f.owner);

                    for i in 0..f.arguments.count do
                        let match: Types.MATCH;

                        let f_arg = f.arguments[i];
                        let arg = arguments[i];

                        if f_arg? /\ arg? then
                            match = f_arg.compare(arg);

                            debug("arg #{i} match {match} {f_arg} vs {arg}");

                            if match == Types.MATCH.DIFFERENT then
                                if arg.is_any_any then
                                    debug("types are different but actual is any any");
                                else
                                    debug("types are different");
                                fi
                                // if any argument type compare returns DIFFERENT then
                                // this overload cannot match the supplied arguments
                                // even allowing for type argument inference of any
                                // type arguments in the formal arguments or of
                                // unknown types in the actual arguments, so
                                // bail on this overload immediately:
                                score = cast int(Types.MATCH.DIFFERENT);
                                break;
                            elif match == Types.MATCH.WILD then
                                debug("match wild...");
                                // either of both of the following has occurred:
                                // 1. the formal argument type is 'wild', i.e. its type expression
                                // includes at least one generic type argument that could be free
                                // to be bound to the type in corresponding position in the actual
                                // argument type. The type argument could be appear inside the type
                                // expression at any depth, for example `List[T]` or `int -> T`
                                // 2. the actual argument type is 'any', i.e. its type expression
                                // includes at least one unknown type where the actual type can
                                // potentially be infered based on the formal argument type
                               
                                // we need first to figure out which it is. If it's both then type
                                // inference probably isn't possible, but we can still attempt it

                                if arg.is_any_any then
                                    debug("actual arg #{i} {arg} is any any");

                                    // TODO not clear if we should be trying to bind generic arg in this
                                    // scenario

                                    // or do we need an alternative binding mechanism for binding any?

                                    // in practice I think we currently only need this to work for lambda
                                    // literals, where the formal argument type will be a function type,
                                    // which is a generic

                                    // however, the formal argument type in this case could have only bound
                                    // type arguments, and we'd still like lambda argument type inference
                                    // to work correctly
                                    
                                    // the caller doesn't care if we have to bind the arguments or not, it
                                    // just wants to be told 'PARTIAL' match and be given argument types
                                    // so it can push them down into the lambda where they can be used
                                    // for type inference
                                    
                                    score = cast int(Types.MATCH.PARTIAL);
                                elif f_arg.is_wild then
                                    // this formal argument is wild, we need to figure out if any
                                    // type arguments in it could be free in this context

                                    // if the overload is an instance method we then can't supply
                                    // actual type parameters to its owning class/struct either explicitly
                                    // or via inferrence - they're already applied to the instance we're
                                    // calling the method on

                                    // if the overload is a static method, we can potentially supply
                                    // actual type arguments for its owning class

                                    // and in either case we can supply actual type arguments for the
                                    // method itself

                                    // if the function is a global function then we can supply actual
                                    // type arguments for it

                                    // if the function is a constructor, and we're calling it for a
                                    // constructor expression, it cannot have generic arguments but
                                    // its owning type can, and we do want to supply them if we
                                    // can infer them from this overload

                                    // score = cast int(Types.MATCH.SAME);
                                    match = Types.MATCH.SAME;

                                    let generic_arguments = f_arg.get_type_arguments();

                                    debug("formal arg #{i} generic arguments are {generic_arguments |}");
                                    
                                    for ga in generic_arguments do
                                        debug("ga {ga} owner {ga.symbol.owner} is function arg {ga.is_function_generic_argument} is classy arg {ga.is_classy_generic_argument} can bind {(want_try_bind_function_generic_arguments /\ ga.is_function_generic_argument) \/ (want_try_bind_owner_generic_arguments /\ ga.is_classy_generic_argument)}");

                                        debug("want bind function ga {want_try_bind_function_generic_arguments}");
                                        debug("want bind owner ga {want_try_bind_owner_generic_arguments}");

                                        if ga.is_function_generic_argument /\ !want_try_bind_function_generic_arguments then
                                            score = cast int(Types.MATCH.DIFFERENT);
                                            break;

                                            debug("cannot match unbindable function generic argument {ga}");
                                        elif ga.is_classy_generic_argument /\ !want_try_bind_owner_generic_arguments then
                                            score = cast int(Types.MATCH.DIFFERENT);
                                            break;

                                            debug("cannot match unbindable classy generic argument {ga}");
                                        else
                                            // score = cast int(Types.MATCH.SAME);
                                            match = Types.MATCH.SAME;
                                            debug("potentially bindable generic argument");
                                        fi
                                    od

                                    try_bind_generic_arguments = true;
                                fi

                                if arg.is_any_any then
                                    debug("actual arg #{i} {arg} is any any");

                                    // TODO not clear if we should be trying to bind generic arg in this
                                    // scenario

                                    // or do we need an alternative binding mechanism for binding any?

                                    // in practice I think we currently only need this to work for lambda
                                    // literals, where the formal argument type will be a function type,
                                    // which is a generic

                                    // however, the formal argument type in this case could have only bound
                                    // type arguments, and we'd still like lambda argument type inference
                                    // to work correctly
                                    
                                    // the caller doesn't care if we have to bind the arguments or not, it
                                    // just wants to be told 'PARTIAL' match and be given argument types
                                    // so it can push them down into the lambda where they can be used
                                    // for type inference 
                                fi

                            elif match == Types.MATCH.ASSIGNABLE then
                                if arg.is_any_any then
                                    debug("assignable any any match: should fold to partial");                                    
                                fi
                            else
                                debug("something else {match}");
                            fi
                        else
                            debug("bogus argument - treat as assignable");
                            match = Types.MATCH.ASSIGNABLE;
                        fi

                        score = cast int(score) + cast int(match);
                    od

                    if try_bind_generic_arguments then
                        let function_generic_argument_bindings = 
                            if want_try_bind_function_generic_arguments then
                                f.try_bind_generic_arguments(location, arguments);
                            else
                                null;
                            fi;

                        let owner_generic_argument_bindings =
                            if want_try_bind_owner_generic_arguments then
                                f.try_bind_owner_generic_arguments(location, arguments);
                            else
                                null
                            fi;

                        if function_generic_argument_bindings? then
                            debug("have function bindings");

                            if function_generic_argument_bindings.is_bound then
                                debug("is bound specialize function...");
                                actual = f.specialize_function(function_generic_argument_bindings.map, null);
                            elif needs_second_call then
                                debug("needs second call specialize function...");
                                actual = f.specialize_function(function_generic_argument_bindings.map, null);
                                score = cast int(Types.MATCH.PARTIAL);
                            else
                                debug("not bound and doesn't need second call: different");
                                score = cast int(Types.MATCH.DIFFERENT);
                            fi
                        elif owner_generic_argument_bindings? then
                            debug("have classy bindings");

                            if owner_generic_argument_bindings.is_bound then
                                debug("is bound specialize owner...");
                                let specialized_owner = Symbols.GENERIC.try_create_from(location, owner_symbol, owner_generic_argument_bindings.map);

                                if specialized_owner? then
                                    actual = specialized_owner.find_specialized_function(f);
                                    debug("successfully specialized owner new function is {actual}");
                                else
                                    debug("couldn't specialize owner result is: different");
                                    score = cast int(Types.MATCH.DIFFERENT);
                                fi
                            elif needs_second_call then
                                debug("not bound but needs second call try specialize owner");
                                let specialized_owner = Symbols.GENERIC.try_create_from(location, owner_symbol, owner_generic_argument_bindings.map);

                                if specialized_owner? then
                                    actual = specialized_owner.find_specialized_function(f);
                                    debug("successfully specialized owner new function is {actual} result: partial");
                                    score = cast int(Types.MATCH.PARTIAL);
                                else
                                    debug("couldn't specialize owner result is: different");
                                    score = cast int(Types.MATCH.DIFFERENT);
                                fi
                            else
                                debug("not bound and no second call needed: different");
                                score = cast int(Types.MATCH.DIFFERENT);
                            fi
                        else
                            debug("neither bindings and no second call needed: different");
                            score = cast int(Types.MATCH.DIFFERENT);                        
                        fi
                    else
                        debug("no generic binding attempted: score {score}");
                    fi

                    // TODO what if both are bound? Could happen with a generic static method in a generic class 

                    if score == best_score /\ score != cast int(Types.MATCH.DIFFERENT) then
                        debug("ambiguous");

                        if !ambiguous_matches? then
                            ambiguous_matches = Collections.LIST[Symbols.Function]();
                        fi

                        if ambiguous_matches.count == 0 then
                            ambiguous_matches.add(result);
                        fi

                        ambiguous_matches.add(actual);

                        is_ambiguous = true;
                    elif score < best_score then
                        debug("best match yet {f} {score}");

                        if ambiguous_matches? then
                            ambiguous_matches.clear();
                        fi

                        is_ambiguous = false;
                        best_score = score;
                        result = actual;
                    fi
                fi
            od

            if is_ambiguous then
                debug("ambiguous strip out object matches...");
                let non_object_matches = 
                    ambiguous_matches |
                        .filter(f => !f.arguments | .any(a => a.is_object));

                let count = non_object_matches | .count();

                if count == 1 then
                    result = non_object_matches | .only();
                    is_ambiguous = false;
                elif count > 1 then
                    ambiguous_matches = Collections.LIST[Symbols.Function](non_object_matches);
                fi
            fi

            if is_ambiguous then
                debug("ambiguous strip out generic matches...");

                let non_generic_matches = 
                    ambiguous_matches | 
                        .filter(f => !f.is_generic);

                let count = non_generic_matches | .count();

                if count == 1 then
                    result = non_generic_matches | .only();
                    is_ambiguous = false;
                elif count > 1 then
                    ambiguous_matches = Collections.LIST[Symbols.Function](non_generic_matches);
                fi
            fi

            if result? /\ !is_ambiguous then
                if needs_second_call then
                    debug("needs second call return PARTIAL");

                    best_score = cast int(Types.MATCH.PARTIAL);
                else
                    debug("no second call return {best_score}");
                fi
                
                return OVERLOAD_RESOLVE_RESULT(result, cast Types.MATCH(best_score));
            fi

            if 
                arguments | .any(a => a.is_error \/ (!want_infer /\ a.is_any))
            then
                debug("bad arguments no result");
                return null;
            fi

            let tried = Collections.LIST[Symbols.Function](20);

            for f in functions_to_search do
                if f.arguments.count == arguments.count then
                    tried.add(f);
                fi
            od

            let maybe_static = "";

            if !want_instance then
                maybe_static = "static ";
            fi

            if is_ambiguous then
                _logger.error(
                    location, 
                    "call is ambiguous {group.name}({arguments|}), tried {get_sorted_function_list_as_string(ambiguous_matches)}"
                );
            elif tried.count > 0 then
                _logger.error(
                    location, 
                    "no {maybe_static}overload found for {group.name}({arguments|}), tried {get_sorted_function_list_as_string(tried)}"
                );
            else
                _logger.error(location, "no {maybe_static}overload found for {group.name}({arguments|})");
            fi

            debug("no result");

            return null;
        si

        get_sorted_function_list_as_string(functions: Collections.Iterable[Symbols.Function]) -> string static =>
            functions |
                .map(f => f.to_string())
                .sort()
                .to_string();        

        _find_matches(
            group: Symbols.FUNCTION_GROUP,
            arguments: Collections.List[Type]
        ) -> OVERLOAD_MATCHES_RESULT
        is
            if group == null \/ group.functions == null \/ arguments == null then
                return null;
            fi

            if group.functions.count == 0 then
                return null;
            fi

            if group.functions.count == 1 \/ arguments.count == 0 then
                return OVERLOAD_MATCHES_RESULT(group.functions, 0, -1);
            fi

            let results = Collections.LIST[Symbols.Function]();

            let best_score = cast int(Types.MATCH.DIFFERENT) * arguments.count;
            let best_index = -1;

            for f in group.functions do
                if f.arguments.count >= arguments.count then
                    let score = cast int(Types.MATCH.SAME);

                    for i in 0..arguments.count do
                        let match: Types.MATCH;

                        if f.arguments[i]? /\ arguments[i]? then
                            match = f.arguments[i].compare(arguments[i]);

                            if match == Types.MATCH.DIFFERENT then
                                score = cast int(Types.MATCH.DIFFERENT);
                            fi
                        else
                            match = Types.MATCH.ASSIGNABLE;
                        fi

                        score = score + cast int(match);
                    od

                    results.add(f);

                    if score < best_score then
                        best_score = score;
                        best_index = results.count - 1;
                    fi
                fi
            od

            return
                OVERLOAD_MATCHES_RESULT(
                    results,
                    best_index,
                    -1
                );
        si
    si
si