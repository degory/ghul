namespace Semantic is
    use System.Exception;

    use Logging;
    use Source;

    use Types.Type;

    class OVERLOAD_RESOLVE_RESULT is
        function: Symbols.Function;
        score: Types.MATCH;

        init(function: Symbols.Function, score: Types.MATCH) is
            self.function = function;
            self.score = score;
        si
    si

    class OVERLOAD_MATCHES_RESULT is
        results: Collections.List[Symbols.Function];
        best_result_index: int;
        current_parameter_index: int public;

        init(
            results: Collections.List[Symbols.Function],
            best_result_index: int,
            current_parameter_index: int
        )
        is
            self.results = results;
            self.best_result_index = best_result_index;
            self.current_parameter_index = current_parameter_index;
        si
    si

    class OVERLOAD_RESOLVER is
        _logger: Logger;

        init(logger: Logger) is
            super.init();

            _logger = logger;
        si

        resolve(
            location: LOCATION,
            group: Symbols.FUNCTION_GROUP,
            arguments: Collections.List[Type],
            want_infer: bool,
            want_instance: bool
        ) -> OVERLOAD_RESOLVE_RESULT
        is
            let mark = _logger.mark();

            try
                return _resolve(location, group, arguments, want_infer, want_instance);
            catch e: Exception
                _logger.exception(location, e, "exception resolving overload: " + group + " arguments " + arguments);
                return null;

            finally
                _logger.release(mark);
            yrt
        si

        find_matches(
            group: Symbols.FUNCTION_GROUP,
            arguments: Collections.List[Type]
        ) -> OVERLOAD_MATCHES_RESULT
        is
            let mark = _logger.mark();

            try
                return _find_matches(group, arguments);
            catch e: Exception
                _logger.exception(null, e, "exception resolving overload: " + group + " arguments " + arguments);
                return null;

            finally
                _logger.release(mark);
            yrt
        si

        _resolve(
            location: LOCATION,
            group: Symbols.FUNCTION_GROUP,
            arguments: Collections.List[Type],
            want_infer: bool,
            want_instance: bool
        ) -> OVERLOAD_RESOLVE_RESULT
        is
            if group == null \/ group.functions == null \/ arguments == null then
                return null;
            fi

            // FIXME: this could just as well be applied to any parameters of generic type, not just anon functions
            let needs_second_call = want_infer /\ arguments | .has(a => a? /\ a.is_function_with_any_implicit_argument_types);

            let is_ambiguous = false;

            let best_score = cast int (Types.MATCH.DIFFERENT);
            let result: Symbols.Function;

            let ambiguous_matches: Collections.LIST[Symbols.Function];

            let functions_to_search = group.functions | .filter(f => want_instance \/ !f.is_instance);

            let want_debug = group.name =~ "find";

            debug_enter(want_debug);

            try
                            

            for f in functions_to_search do
                let actual = f;

                if f.arguments == null then
                    return new OVERLOAD_RESOLVE_RESULT(f, Types.MATCH.DIFFERENT);
                elif f.arguments.count == 0 /\ arguments.count == 0 then
                    return new OVERLOAD_RESOLVE_RESULT(f, Types.MATCH.SAME);
                elif f.arguments.count == arguments.count then
                    let score = cast int(Types.MATCH.SAME);

                    debug("checking " + f);

                    for i in 0..f.arguments.count do
                        let match: Types.MATCH;

                        let f_arg = f.arguments[i];
                        let arg = arguments[i];

                        if f_arg? /\ arg? then
                            match = f_arg.compare(arg);

                            debug("checking " + f_arg + " against " + arg + " got " + match);

                            if match == Types.MATCH.DIFFERENT then
                                score = cast int(Types.MATCH.DIFFERENT);

                                if in_debug() then
                                    debug("mismatch " + f_arg + " against " + arg);
                                    debug("f_arg symbol " + f_arg.symbol);
                                    debug("f_arg is GENERIC " + isa Types.GENERIC(f_arg));
                                    debug("f_arg arguments " + f_arg.arguments|);
                                    debug("arg symbol " + arg.symbol);
                                    debug("arg is GENERIC " + isa Types.GENERIC(arg));
                                    debug("arg arguments " + arg.arguments|);

                                    if isa Types.GENERIC(f_arg) /\ isa Types.GENERIC(arg) then
                                        let generic_f_arg = cast Types.GENERIC(f_arg);
                                        let generic_arg = cast Types.GENERIC(arg);
                                        
                                        // FIXME is this generic somehow double wrapped?

                                        debug("identical generic symbols " + (generic_f_arg.symbol == generic_arg.symbol) + " " + generic_f_arg.symbol + " " + generic_arg.symbol);
                                    else
                                        debug("not both generic");
                                    fi

                                    if f_arg.arguments.count == 2 /\ arg.arguments.count == 2 then
                                        debug("argument[0] same " + (f_arg.arguments[0] =~ arg.arguments[0]) + " " + f_arg.arguments[0] + " " + arg.arguments[0]);
                                        debug("argument[1] same " + (f_arg.arguments[1] =~ arg.arguments[1]) + " " + f_arg.arguments[1] + " " + arg.arguments[1]);
                                    else
                                        debug("unexpected argument count " + f_arg.arguments.count + " vs " + arg.arguments.count);
                                    fi
                                fi

                                break;
                            fi

                            if match == Types.MATCH.WILD then
                                match = Types.MATCH.SAME;
                            fi
                        else
                            if !f_arg? then
                                debug("missing parameter " + i + " in " + f);
                            fi
                            
                            if !arg? then
                                debug("missing argument " + i + " in " + f);
                            fi

                            match = Types.MATCH.ASSIGNABLE;
                        fi

                        score = cast int(score) + cast int(match);

                        debug("score at arg " + i + " is " + score);
                    od

                    debug("score for " + f + " is " + score);

                    if f.is_generic /\ score <= best_score /\ score != cast int(Types.MATCH.DIFFERENT) then
                        debug("trying to bind " + f + " to " + arguments);

                        let bindings = f.try_bind_generic_arguments(location, arguments);

                        debug("got bindings " + bindings);

                        if !bindings? then
                            debug("no bindings for " + f + " to " + arguments);

                            score = cast int(Types.MATCH.DIFFERENT);
                        elif bindings.is_bound then
                            debug("bound " + f + " to " + arguments);

                            actual = f.specialize_function(bindings.map, null);

                            debug("got specialized " + actual);
                        elif want_infer then
                            debug("trying to infer " + f + " to " + arguments);

                            actual = f.specialize_function(bindings.map, null);

                            debug("got specialized " + actual);

                            score = cast int(Types.MATCH.PARTIAL);
                        else
                            debug("no bindings for " + f + " to " + arguments);

                            score = cast int(Types.MATCH.DIFFERENT);
                        fi

                        debug("score for " + actual + " is " + score);
                    fi

                    if score == best_score /\ score != cast int(Types.MATCH.DIFFERENT) then
                        debug("ambiguous " + f + " against " + actual);

                        if !ambiguous_matches? then
                            ambiguous_matches = new Collections.LIST[Symbols.Function]();
                        fi

                        if ambiguous_matches.count == 0 then
                            ambiguous_matches.add(result);
                        fi

                        ambiguous_matches.add(actual);
                        is_ambiguous = true;
                    elif score < best_score then
                        debug("better " + f + " against " + actual);

                        if ambiguous_matches? then
                            debug("clearing ambiguous matches");
                            ambiguous_matches.clear();
                        fi

                        is_ambiguous = false;
                        best_score = score;
                        result = actual;
                    fi
                fi

                debug("best score is " + best_score + " for " + result);
            od

            debug("final score is " + best_score + " for " + result);

            if is_ambiguous then
                debug("ambiguous " + group.name + "(" + arguments| + "), try excluding object matches");

                let non_object_matches = 
                    ambiguous_matches |
                        .filter(f => !f.arguments | .has(a: Type => a.is_object)); // FIXME: intermittent issue in VSCE if a's type not explicit here

                let count = non_object_matches | .count();

                if count == 1 then
                    result = non_object_matches | .only();
                    is_ambiguous = false;
                elif count > 1 then
                    ambiguous_matches = new Collections.LIST[Symbols.Function](non_object_matches);
                fi
            fi

            if is_ambiguous then
                debug("ambiguous " + group.name + "(" + arguments| + "), try excluding generic matches");

                let non_generic_matches = 
                    ambiguous_matches | 
                        .filter(f => !f.is_generic);

                let count = non_generic_matches | .count();

                if count == 1 then
                    result = non_generic_matches | .only();
                    is_ambiguous = false;
                elif count > 1 then
                    ambiguous_matches = new Collections.LIST[Symbols.Function](non_generic_matches);
                fi
            fi

            if result? /\ !is_ambiguous then
                debug("resolved " + group.name + "(" + arguments| + ") to " + result);

                if needs_second_call then
                    debug("need to call again to infer " + result);

                    best_score = cast int(Types.MATCH.PARTIAL);
                fi
                
                return new OVERLOAD_RESOLVE_RESULT(result, cast Types.MATCH(best_score));
            fi

            if 
                arguments | .has(a => a.is_error \/ (!want_infer /\ a.is_any))
            then
                debug("no " + group.name + "(" + arguments| + ") because of error or any");

                return null;
            fi

            debug("no " + group.name + "(" + arguments| + "), report error");

            let tried = new Collections.LIST[Symbols.Function](20);

            for f in functions_to_search do
                if f.arguments.count == arguments.count then
                    tried.add(f);
                fi
            od

            let maybe_static = "";

            if !want_instance then
                maybe_static = "static ";
            fi

            if is_ambiguous then
                _logger.error(
                    location, 
                    "call is ambiguous " + group.name + "(" + arguments| + "), tried " + get_sorted_function_list_as_string(ambiguous_matches)
                );
            elif tried.count > 0 then

                _logger.error(
                    location, 
                    "no " + maybe_static + "overload found for " + group.name + "(" + arguments| + "), tried " + get_sorted_function_list_as_string(tried)
                );
            else
                _logger.error(location, "no " + maybe_static + "overload found for " + group.name + "(" + arguments| + ")");
            fi

            finally
                debug_exit(want_debug);
            yrt

            return null;
        si

        get_sorted_function_list_as_string(functions: Collections.Iterable[Symbols.Function]) -> string static =>
            functions |
                .map(f => f.to_string())
                .sort()
                .to_string();        

        _find_matches(
            group: Symbols.FUNCTION_GROUP,
            arguments: Collections.List[Type]
        ) -> OVERLOAD_MATCHES_RESULT
        is
            if group == null \/ group.functions == null \/ arguments == null then
                return null;
            fi

            let results = new Collections.LIST[Symbols.Function]();

            let best_score = cast int(Types.MATCH.DIFFERENT);
            let best_index = -1;

            for f in group.functions do
                if f.arguments.count >= arguments.count then
                    let score = cast int(Types.MATCH.SAME);

                    for i in 0..arguments.count do
                        let match: Types.MATCH;

                        if f.arguments[i]? /\ arguments[i]? then
                            match = f.arguments[i].compare(arguments[i]);

                            if match == Types.MATCH.DIFFERENT then
                                score = cast int(Types.MATCH.DIFFERENT);
                            fi
                        else
                            match = Types.MATCH.ASSIGNABLE;
                        fi

                        score = score + cast int(match);
                    od

                    results.add(f);

                    if score < best_score then
                        best_score = score;
                        best_index = results.count - 1;
                    fi
                fi
            od

            return
                new OVERLOAD_MATCHES_RESULT(
                    results,
                    best_index,
                    -1
                );
        si
    si
si