namespace Semantic.Types is
    use IO.Std;

    class MEMBER: Type is
        left: Type;
        name: string;

        short_description: string =>
            "{left.short_description}.{name}";

        init(left: Type, name: string) is
            self.left = left;
            self.name = name;
        si
        
        specialize(type_map: Collections.Map[string,Type]) -> Type is
            let specialized_left = left.specialize(type_map);

            return specialized_left.find_member(name).type;
        si

        specialize(type_map: Collections.Map[Symbols.GenericArgument,Type]) -> Type is
            let specialized_left = left.specialize(type_map);

            return specialized_left.find_member(name).type;
        si

        to_string() -> string =>
            if symbol? then
                symbol.qualified_name;
            else
                "(null symbol) {name}";
            fi;
    si
si