namespace Semantic.Types is
    use Source.LOCATION;
    
    class FUNCTION: GENERIC is
        is_function: bool => true;

        short_description: string => get_short_description(self);
        
        get_short_description(function: GENERIC) -> string static is
            let result = new System.Text.StringBuilder();

            let args = function.arguments;

            if args.count == 2 then
                result
                    .append(args[0])
                    .append(" -> ")
                    .append(args[1]);
            elif args.count == 1 then
                result
                    .append("() -> ")
                    .append(args[0]);
            else
                result.append('(');

                (0..args.count-1) | .map(i => args[i]).append_to(result);

                result
                    .append(") -> ")
                    .append(args[args.count-1]);
            fi

            return result.to_string();
        si
        
        init(
            location: LOCATION,
            symbol: Symbols.Classy,
            arguments: Collections.List[Type]
        ) is
            super.init(location, symbol, arguments);
        si

        get_argument_type_variance(index: int) -> TYPE_VARIANCE =>
            if index == arguments.count - 1 then
                TYPE_VARIANCE.COVARIANT;
            else
                TYPE_VARIANCE.CONTRAVARIANT;
            fi;

        create(
            location: LOCATION,
            symbol: Symbols.Classy,
            arguments: Collections.List[Type]
        ) -> GENERIC =>
            new FUNCTION(location, symbol, arguments);

        to_string() -> string => get_short_description(self);
    si
si
