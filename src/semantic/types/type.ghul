namespace Semantic.Types is
    use IO.Std;

    use System.Text.StringBuilder;

    use Source;

    trait SettableTyped: Typed is
        set_type(value: Type);
    si

    trait Typed is
        type: Type;
    si

    enum MATCH is
        SAME = 0,
        ASSIGNABLE = 1,
        CONVERTABLE = 2,
        PARTIAL = 3,
        WILD = 4,
        DIFFERENT = 100000
    si

    class Type: Typed is
        type: Type => self;

        name: string => null;
        depth: int => symbol.depth;

        scope: Scope => null;

        symbol: Symbols.Symbol =>
            if scope? /\ isa Symbols.Symbol(scope) then
                cast Symbols.Symbol(scope);
            else
                Symbols.NONE.instance;
            fi;

        ancestors: Collections.List[Type] => symbol.ancestors;
        arguments: Collections.List[Type] => Collections.LIST[Type](0);

        short_description: string => to_string();

        unspecialized_symbol: Symbols.Symbol is
            let s = scope;

            if s? then
                return s.unspecialized_symbol;
            fi
        si
        
        // FIXME: better than isa XXXX, but still should not need these:
        is_none: bool => false;
        is_null: bool => false;
        is_consumable: bool => !is_any /\ !is_error /\ !is_wild;
        is_any: bool => false;
        is_any_any: bool => false;
        is_error: bool => false;
        is_wild: bool => false;
        is_inferred: bool => false;
        is_named: bool => false; // FIXME: what would it mean not to be named?
        is_object: bool => false;
        is_root_value_type: bool => false;
        is_void: bool => false;
        is_type_variable: bool => false;
        is_value_type: bool => false;
        is_inheritable: bool => false;
        is_class: bool => false;
        is_trait: bool => false;
        is_action: bool => false;
        is_function: bool => false;
        is_function_with_any_implicit_argument_types: bool => false;
        is_ref: bool => false; // specifically 'ref', not just a reference type
        is_value_tuple: bool => false;

        init() is
        si

        =~(other: Type) -> bool => false;

        is_assignable_from(other: Type) -> bool
            => cast int(compare(other)) <= cast int (MATCH.ASSIGNABLE);

        compare(other: Type) -> MATCH
            => MATCH.DIFFERENT;

        find_member(name: string) -> Symbols.Symbol
            => null;

        find_destructure_member(index: int) -> Symbols.Symbol =>
            let name = get_destructure_member_name(index) in

            if name? then
                let result = find_member(name);
                result;
            else
                null;
            fi;

        get_destructure_member_name(index: int) -> string
            => null;

        find_ancestor(type: Type) -> Type => null;

        specialize(type_map: Collections.Map[string,Type]) -> Type is
            throw System.NotImplementedException("not implemented by {self.get_type()}");
        si

        bind_type_variables(other: Type, results: GENERIC_ARGUMENT_BIND_RESULTS) -> bool =>
            true;

        get_type_arguments_into(results: Collections.LIST[GenericArgument]) is
        si

        get_type_arguments() -> Collections.LIST[GenericArgument] is
            let result = Collections.LIST[GenericArgument]();
            get_type_arguments_into(result);
            return result;
        si

        freeze() -> Type => null;

        walk(action: (Type) -> void) is
            throw System.NotImplementedException("not implemented by {self.get_type()}");
        si

        get_element_type() -> Type => null;
        
        get_il_type() -> string is
            let result = StringBuilder();

            gen_type(result);

            return result.to_string();
        si

        get_il_class_name() -> string is
            let result = StringBuilder();

            gen_class_name(result);

            return result.to_string();
        si
        
        // output IL name for this type in a normal context:
        gen_type(buffer: StringBuilder) is
            throw System.NotImplementedException("not implemented by {self.get_type()}");
        si

        // output IL name for this type in a context that requires a 'class name' (i.e. a type without 'class' or 'valuetype' prefix)
        gen_class_name(buffer: StringBuilder) is
            throw System.NotImplementedException("not implemented by {self.get_type()}");
        si

        format(result: StringBuilder) is
            result.append(self);
        si

        get_hash_code() -> int => symbol.get_hash_code();
    si
si