namespace Semantic.Types is
    use IO.Std;

    use System.Text.StringBuilder;

    use Source;

    trait SettableTyped: Typed is
        set_type(value: Type);
    si

    trait Typed is
        type: Type;
    si

    enum MATCH is
        SAME = 0,
        ASSIGNABLE = 1,
        CONVERTABLE = 2,
        PARTIAL = 3,
        DIFFERENT = 100000
    si

    class Type: Typed is
        type: Type => self;

        name: string => null;
        scope: Scope => null;

        symbol: Symbols.Symbol is
            if scope? /\ isa Symbols.Symbol(scope) then
                return cast Symbols.Symbol(scope);
            else
                return Symbols.NONE.instance;
            fi
        si

        ancestors: Collections.List[Type] => symbol.ancestors;
        arguments: Collections.List[Type] => new Collections.LIST[Type](0);

        short_description: string => to_string();

        unspecialized_symbol: Symbols.Symbol is
            let s = scope;

            if s? then
                return s.unspecialized_symbol;
            fi
        si
        
        // FIXME: better than isa XXXX, but still should not need these:
        is_none: bool => false;
        is_null: bool => false;
        is_any: bool => false;
        is_error: bool => false;
        is_wild: bool => false;
        is_object: bool => false;
        is_type_variable: bool => false;
        is_value_type: bool => false;
        is_inheritable: bool => false;
        is_class: bool => false;
        is_trait: bool => false;
        is_function: bool => false;
        is_function_with_any_implicit_argument_types: bool => false;

        init() is
        si

        =~(other: Type) -> bool => false;

        is_assignable_from(other: Type) -> bool
            => cast int(compare(other)) <= cast int (MATCH.ASSIGNABLE);

        compare(other: Type) -> MATCH
            => MATCH.DIFFERENT;

        find_member(name: string) -> Symbols.Symbol
            => null;

        find_ancestor(type: Type) -> Type => null;        

        specialize(type_map: Collections.MAP[string,Type]) -> Type is
            throw new System.NotImplementedException("not implemented by " + self.get_type());
        si

        bind_type_variables(other: Type, results: GENERIC_ARGUMENT_BIND_RESULTS) -> bool is
            @IF.debug() IO.Std.error.write_line("try bind variables: NO-OP: " + self + ": returns true");

            return true;
        si
        
        get_il_type() -> string is
            let result = new StringBuilder();

            gen_type(result);

            return result.to_string();
        si

        get_il_class_name() -> string is
            let result = new StringBuilder();

            gen_class_name(result);

            return result.to_string();
        si
        
        // output IL name for this type in a normal context:
        gen_type(buffer: StringBuilder) is
            throw new System.NotImplementedException("not implemented by " + self.get_type());
        si

        // output IL name for this type in a context that requires a 'class name' (i.e. a type without 'class' or 'valuetype' prefix)
        gen_class_name(buffer: StringBuilder) is
            throw new System.NotImplementedException("not implemented by " + self.get_type());
        si

        format(result: StringBuilder) is
            result.append(self);
        si
    si
si