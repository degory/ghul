namespace Semantic.Types is

    use Source.LOCATION;
    
    class ARRAY: GENERIC is
        short_description: string => get_short_description(self);

        get_short_description(reference: GENERIC) -> string static => reference.arguments[0].to_string() + "[]";

        init(
            location: LOCATION,
            symbol: Symbols.Classy,
            arguments: Collections.List[Type]
        ) is
            super.init(Symbols.ARRAY(location, symbol, arguments[0]));
        si

        get_argument_type_variance(index: int) -> TYPE_VARIANCE =>
            if arguments[0].is_value_type then
                TYPE_VARIANCE.INVARIANT;
            else
                TYPE_VARIANCE.COVARIANT;
            fi;

        create(
            location: LOCATION,
            symbol: Symbols.Classy,
            arguments: Collections.List[Type]
        ) -> GENERIC =>
            Types.ARRAY(location, symbol, arguments);

        gen_class_name(buffer: System.Text.StringBuilder) is
            gen_type(buffer);
        si

        gen_type(buffer: System.Text.StringBuilder) is
            arguments[0].gen_type(buffer);
            buffer.append("[] ");
        si

        to_string() -> string => get_short_description(self);            
    si
si
