namespace Semantic.Types is

    class NULL: Type is
        is_null: bool => true;

        init() is
            super.init();
        si

        specialize(type_map: Collections.Map[string,Type]) -> Type => self;

        =~(other: Type) -> bool
            => true;

        compare(other: Type) -> Types.MATCH
            => if !other.is_value_type \/ other.is_type_variable then MATCH.ASSIGNABLE else MATCH.DIFFERENT fi;

        to_string() -> string => "null";
    si
si
