namespace Semantic.Types is
    use System.Text.StringBuilder;

    use Source;

    class GenericArgument: NAMED is
        is_wild: bool => true;
        is_function_generic_argument: bool => false;
        is_classy_generic_argument: bool => false;

        any_count: int => 1;

        init(symbol: Symbols.Symbol) is
            super.init(symbol);
        si

        get_type_arguments_into(results: Collections.LIST[GenericArgument]) is
            results.add(self);
        si

        unbound_count(context: UnboundChecker) -> int =>
            if context.is_unbound(self) then
                1
            else
                0
            fi;

        freeze() -> Type is
            let frozen = symbol.freeze();

            if !frozen? then
                return null;
            fi

            return frozen.type;
        si

        specialize(type_map: Collections.Map[string,Type]) -> Type is
            let result: Type;

            if type_map.try_get_value(name, result ref) then
                return result;
            fi
            
            return self;
        si

        specialize(type_map: Collections.Map[Symbols.GenericArgument,Type]) -> Type is
            let result: Type;

            if type_map.try_get_value(cast Symbols.GenericArgument(symbol), result ref) then
                return result;
            fi
            
            return self;
        si

        bind_type_variables(other: Type, results: GENERIC_ARGUMENT_BIND_RESULTS) -> bool is
            let existing: Type;

            let result = results.bind(self, other);

            return result;
        si

        gen_class_name(buffer: System.Text.StringBuilder) is
            symbol.gen_class_name(buffer);
        si

        gen_type(buffer: System.Text.StringBuilder) is
            symbol.gen_type(buffer);
        si

        get_hash_code() -> int => symbol.get_hash_code();

        equals(other: object) -> bool =>
            let other_generic_argument = cast GenericArgument(other) in

            other_generic_argument? /\ symbol == other_generic_argument.symbol;

        to_string() -> string => symbol.name;
    si

    // TODO can get is classy vs is function from underlying symbol,
    // delete these sub-classes and go back to having just 
    // one class representing a generic argument type
    class CLASSY_GENERIC_ARGUMENT: GenericArgument is
        is_classy_generic_argument: bool => true;

        init(symbol: Symbols.Symbol) is
            super.init(symbol);
        si
    si

    class FUNCTION_GENERIC_ARGUMENT: GenericArgument is
        is_function_generic_argument: bool => true;

        init(symbol: Symbols.Symbol) is
            super.init(symbol);
        si
    si
si