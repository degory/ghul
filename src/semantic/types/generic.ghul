namespace Semantic.Types is
    use IO.Std;

    use Source.LOCATION;

    class GENERIC: NAMED is
        arguments: Collections.List[Type] => symbol.arguments;

        short_description: string is
            assert self? else "self is null";
            assert symbol? else "symbol is null";
            assert symbol.name? else "symbol.name is null";
            assert arguments? else "arguments is null";

            let result = new System.Text.StringBuilder();

            result
                .append(symbol.name)
                .append('[');

            var seen_any = false;

            for a in arguments do
                assert a? else "argument is null";

                if seen_any then
                    result.append(',');
                fi

                if a? then
                    result.append(a.short_description);
                fi

                seen_any = true;
            od

            result.append(']');

            return result.to_string();
        si

        init(
            symbol: Symbols.GENERIC
        ) is
            super.init(symbol);
        si
        
        init(
            location: LOCATION,
            symbol: Symbols.Classy,
            arguments: Collections.LIST[Type]
        ) is
            super.init(new Symbols.GENERIC(location, symbol, arguments));
        si

        create(
            location: LOCATION,
            symbol: Symbols.Classy,
            arguments: Collections.LIST[Type]
        ) -> GENERIC
        is
            let result = new GENERIC(location, symbol, arguments);
            
            return result;
        si

        is_same_symbol(other: Type) -> bool is
            if !isa GENERIC(other) then
                return false;
            fi
            
            let other_generic = cast GENERIC(other);

            let generic_symbol = cast Symbols.GENERIC(symbol);
            let generic_other_symbol = cast Symbols.GENERIC(other_generic.symbol);

            return generic_symbol.symbol == generic_other_symbol.symbol;
        si
        
        specialize_generic(type_map: Collections.MAP[string,Type]) -> Types.GENERIC is
            let context = IoC.CONTAINER.instance.symbol_table.current_instance_context;

            let we_are_generic = context.arguments.count > 0;
            
            let seen_any_new = false;

            let generic_symbol = cast Symbols.GENERIC(symbol);

            let new_arguments = new Collections.LIST[Type](arguments.count);

            for i in 0..arguments.count do
                let argument_name
                    = generic_symbol.symbol.argument_names[i];

                let mapped_type: Type;

                // FIXME: this seems to fix #118 but don't think this is the correct place to put this check:
                if we_are_generic /\ type_map.contains_key(argument_name) then
                    mapped_type = type_map[argument_name];
                fi

                if mapped_type? then
                    new_arguments.add(mapped_type);

                    seen_any_new = true;
                else
                    let oa = generic_symbol.arguments[i];
                    let na = oa.specialize(type_map);

                    new_arguments.add(na);

                    if oa != na then
                        seen_any_new = true;
                    fi
                fi
            od

            if seen_any_new then
                let result = create(symbol.location, generic_symbol.symbol, new_arguments);

                return result;
            else
                return self;
            fi
        si

        specialize(type_map: Collections.MAP[string,Type]) -> Type =>
            specialize_generic(type_map);

        =~(other: Type) -> bool is
            if !isa GENERIC(other) then
                return false;
            fi

            if other.is_any then
                return true;
            fi

            let generic_other = cast GENERIC(other);

            if symbol == generic_other.symbol then
                return true;
            fi

            let generic_symbol = cast Symbols.GENERIC(symbol);
            let generic_other_symbol = cast Symbols.GENERIC(generic_other.symbol);

            if generic_symbol.symbol != generic_other_symbol.symbol then
                return false;
            fi

            if generic_symbol.arguments.count != generic_other_symbol.arguments.count then
                return false;
            fi

            for i in 0..generic_symbol.arguments.count do
                // TODO: implement type variance here:
                if generic_symbol.arguments[i] !~ generic_other_symbol.arguments[i] then
                    return false;
                fi
            od

            return true;
        si

        compare(other: Type) -> Types.MATCH is
            if other.is_null then
                return Types.MATCH.ASSIGNABLE;
            elif symbol == null \/ other == null then
                return Types.MATCH.DIFFERENT;
            elif isa NAMED(other) then
                let other_named = cast NAMED(other);

                if self =~ other then
                    return Types.MATCH.SAME;
                fi

                for i in 0..other_named.symbol.ancestors.count do
                    let a = other_named.symbol.get_ancestor(i);

                    let match = self.compare(a);

                    if match <= Types.MATCH.ASSIGNABLE then
                        return Types.MATCH.ASSIGNABLE;
                    elif match == Types.MATCH.CONVERTABLE then
                        return Types.MATCH.CONVERTABLE;
                    fi

                    @IF.debug() Std.error.write_line("CCCCCC: different ancestor: " + self + " ancestor " + a + " different to " + other);
                od
            fi

            @IF.debug() Std.error.write_line("CCCCCC: compare: " + self + " is different to " + other);

            return Types.MATCH.DIFFERENT;
        si
        
        set_argument(index: int, type: Type) is
            symbol.set_argument(index, type);
        si
        
        bind_type_variables(other: Type, results: GENERIC_ARGUMENT_BIND_RESULTS) -> bool is
            if other.is_null then
                @IF.debug() Std.error.write_line("generic try bind: " + self + " vs " + other + ": not bound, but not an error");

                return true;
            fi

            if isa GENERIC(other) then
                @IF.debug() Std.error.write_line("generic try bind: " + self + " vs " + other);

                let other_generic = cast GENERIC(other);

                let generic_symbol = cast Symbols.GENERIC(symbol);
                let generic_other_symbol = cast Symbols.GENERIC(other_generic.symbol);
    
                if generic_symbol.symbol == generic_other_symbol.symbol then
                    @IF.debug() Std.error.write_line("same symbol, try bind type arguments");

                    let result = true;

                    for i in 0..arguments.count do
                        @IF.debug() Std.error.write_line("generic try bind arg " + self + "[" + i + "] " + arguments[i] + " vs " + other.arguments[i]);

                        result = arguments[i].bind_type_variables(other.arguments[i], results) /\ result;
                    od

                    @IF.debug()
                    if result then
                        Std.error.write_line("generic: " + self + " no argument failed");
                    else
                        Std.error.write_line("generic: " + self + " one or more arguments failed");
                    fi

                    return result;
                else
                    @IF.debug() Std.error.write_line("generic: " + self + " different symbol: " + other + " - try bind ancestors...");

                    for i in 0..other_generic.ancestors.count do
                        let a = other_generic.symbol.get_ancestor(i);

                        @IF.debug() Std.error.write_line("generic: " + self + "bind base #" + i + " " + a);

                        if bind_type_variables(a, results) then
                            @IF.debug() Std.error.write_line("generic: " + self + "successfully bound base #" + i + " " + a);

                            return true;
                        fi
                    od

                    @IF.debug() Std.error.write_line("generic: " + self + " no matching base");

                    return false;
                fi
            else
                for a in other.ancestors do
                    @IF.debug() Std.error.write_line("non-generic: try bind base " + self + " vs " + a);

                    if bind_type_variables(a, results) then
                        @IF.debug() Std.error.write_line("non-generic: " + self + "successfully bound base " + a);

                        return true;
                    fi
                od

                @IF.debug() Std.error.write_line("non-generic: " + self + " no matching base");

                return false;
            fi
        si

        get_hash_code() -> int => symbol.get_hash_code();

        to_string() -> string => symbol.to_string();
    si
si
