namespace Semantic.Types is
    use IO.Std;

    use Collections.MutableList;
    use Collections.LIST;
    use Collections.MAP;

    use Logging;

    class GENERIC_ARGUMENT_BINDING is
        type_argument: GenericArgument;
        actual_type: Type public;

        init(
            type_argument: GenericArgument,
            actual_type: Type
        ) is
            self.type_argument = type_argument;
            self.actual_type = actual_type;
        si

        to_string() -> string =>
            "{type_argument} bound to {actual_type}";
    si

    class GENERIC_ARGUMENT_BIND_RESULTS is
        is_bound: bool;

        bindings: MAP[string,GENERIC_ARGUMENT_BINDING];

        unbound: MutableList[Type];

        map: MAP[string,Type] is
            let result = MAP[string,Type]();

            for binding in bindings do
                result.add(binding.key, binding.value.actual_type);
            od
            
            return result;
        si        

        init() is
            bindings = MAP[string,GENERIC_ARGUMENT_BINDING]();
        si

        bind(type_argument: GenericArgument, actual_type: Type) -> bool is
            let existing: GENERIC_ARGUMENT_BINDING;

            actual_type =
                if actual_type.get_type_arguments().count > 0 then
                    debug("specialize {actual_type} with {get_type_map() |}");
                    actual_type.specialize(get_type_map());
                else
                    actual_type
                fi;

            if bindings.try_get_value(type_argument.name, existing ref) then
                debug("existing binding: {type_argument.name} => {existing}");
                if !existing.actual_type.is_none then

                    debug("check compatible {actual_type} vs {existing.actual_type}...");
                    if actual_type.is_assignable_from(existing.actual_type) then
                        debug("OK actual {actual_type} <- existing {existing.actual_type}");
                        if !actual_type.is_null /\ !actual_type.is_any then
                            debug("not null or any: update to less derived {actual_type}");
                            existing.actual_type = actual_type;
                        fi

                        return true;
                    elif existing.actual_type.is_assignable_from(actual_type) then
                        debug("OK existing {existing.actual_type} <- actual {actual_type} (doesn't need update)");
                        return true;
                    else
                        debug("not compatible");

                        existing.actual_type = NONE.instance;
                        return false;
                    fi
                else
                    // already know can't be bound
                    return false;
                fi
            elif actual_type.is_null \/ actual_type.is_any then
                debug("is any, continue but can't set actual type");

                return true;
            else
                debug("initial binding {actual_type}");

                bindings.add(type_argument.name, GENERIC_ARGUMENT_BINDING(type_argument, actual_type));

                return true;
            fi

            debug("can't happen");
            assert false else "can't happen";

            return false;
        si

        check_complete(location: Source.LOCATION, expected_arguments: Collections.List[Type]) -> bool is
            is_bound = true;

            unbound = LIST[Type]();

            for binding in bindings do
                if binding.value.actual_type.is_none then
                    IoC.CONTAINER.instance.logger.info(location, "conflicting types inferred for {binding.value.type_argument}");
                    is_bound = false;
                fi
            od

            if !is_bound then
                is_bound = false;
                return false;
            fi

            for expected_argument in expected_arguments do
                let argument_is_bound = false;

                for bound_argument in bindings.values do
                    if bound_argument.type_argument.symbol == expected_argument.symbol then
                        argument_is_bound = true;
                        break;
                    else
                        unbound.add(expected_argument);
                    fi                    
                od    

                if !argument_is_bound then
                    is_bound = false;
                    return false;
                fi                    
            od

            return is_bound;
        si

        get_type_map() -> Collections.Map[string,Type] => Collections.MAP[string,Type](
            bindings | .map(b => Collections.KeyValuePair`2[string,Type](b.key, b.value.actual_type)));
        
        to_string() -> string is
            let result = System.Text.StringBuilder();

            let seen_any = false;

            for binding in bindings.values do
                if seen_any then
                    result.append(",");
                fi
                
                result
                    .append(binding.type_argument)
                    .append("=>")
                    .append(binding.actual_type);

                seen_any = true;
            od

            return result.to_string();
        si
    si
si
