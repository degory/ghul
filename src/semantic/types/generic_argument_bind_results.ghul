namespace Semantic.Types is
    use IO.Std;

    use Collections.MAP;

    use Pipes;

    class GENERIC_ARGUMENT_BINDING is
        type_argument: FUNCTION_GENERIC_ARGUMENT;
        actual_type: Type;

        init(
            type_argument: FUNCTION_GENERIC_ARGUMENT,
            actual_type: Type
        ) is
            self.type_argument = type_argument;
            self.actual_type = actual_type;
        si
    si

    class GENERIC_ARGUMENT_BIND_RESULTS is
        bound_any: bool;
        bound_all: bool;

        bindings: MAP[string,GENERIC_ARGUMENT_BINDING];

        map: MAP[string,Type] is
            let result = new MAP[string,Type]();

            for binding in bindings do
                result.add(binding.key, binding.value.actual_type);
            od
            
            return result;
        si        

        init() is
            bindings = new MAP[string,GENERIC_ARGUMENT_BINDING]();

            bound_all = true;
        si

        bind(type_argument: FUNCTION_GENERIC_ARGUMENT, actual_type: Type) -> bool is
            @IF.debug() Std.error.write_line("try bind: " + type_argument + " <- " + actual_type);

            let existing: GENERIC_ARGUMENT_BINDING;

            if bindings.try_get_value(type_argument.name, existing ref) then
                @IF.debug() Std.error.write_line("existing: " + existing.actual_type + " <- " + actual_type);

                if !existing.actual_type.is_none then
                    if actual_type.is_assignable_from(existing.actual_type) then
                        @IF.debug() Std.error.write_line("bind: " + actual_type + " <: " + existing.actual_type);

                        if !actual_type.is_null && !actual_type.is_any then
                            existing.actual_type = actual_type;
                        fi
                        
                        return true;
                    elif existing.actual_type.is_assignable_from(actual_type) then
                        @IF.debug() Std.error.write_line("bind: " + actual_type + " :> " + existing.actual_type);
                        return true;

                    else
                        @IF.debug() Std.error.write_line("bind: " + existing.actual_type + " != " + actual_type);

                        existing.actual_type = NONE.instance;
                        bound_all = false;
                    fi
                fi
            elif actual_type.is_null || actual_type.is_any then
                return true;
            else
                @IF.debug() Std.error.write_line("add bind: " + type_argument + " <- " + actual_type);

                bindings.add(type_argument.name, new GENERIC_ARGUMENT_BINDING(type_argument, actual_type));
                bound_any = true;

                return true;
            fi

            return false;
        si

        check_complete(location: Source.LOCATION, expected_arguments: Collections.List[Type]) -> bool is
            let result = true;

            @IF.debug() IO.Std.error.write_line("BR: Bind results: " + self);
            @IF.debug() IO.Std.error.write_line("BR: Expected arguments: " + Pipe.from(expected_arguments));

            for binding in bindings do
                if binding.value.actual_type.is_none then
                    @IF.debug() IO.Std.error.write_line("BR: NOT conflicting: " + binding.value.type_argument);
                    IoC.CONTAINER.instance.logger.info(location, "conflicting types inferred for " + binding.value.type_argument);
                    result = false;
                fi
            od

            if !result then                
                return false;
            fi

            for expected_argument in expected_arguments do
                let is_bound = false;

                @IF.debug() IO.Std.error.write_line("BR: expected: " + expected_argument);

                for bound_argument in bindings.values do
                    @IF.debug() IO.Std.error.write_line("BR: compare expected: " + expected_argument + " (symbol " + expected_argument.symbol.get_hash_code() + ") vs bound: " + bound_argument.type_argument + " (symbol " + bound_argument.type_argument.symbol.get_hash_code() + ")");

                    if bound_argument.type_argument.symbol == expected_argument.symbol then
                        @IF.debug() IO.Std.error.write_line("BR: BOUND: " + expected_argument + " same as " + bound_argument.type_argument);
                        is_bound = true;
                        break;
                    else
                        @IF.debug() IO.Std.error.write_line("BR: NOT BOUND: " + expected_argument + " (hash " + expected_argument.get_hash_code() + ") vs bound: " + bound_argument.type_argument + " (hash " + bound_argument.get_hash_code() + ")");
                    fi                    
                od    

                if !is_bound then
                    @IF.debug() IO.Std.error.write_line("BR: NOT bound: " + expected_argument);
                    @IF.not.release() IoC.CONTAINER.instance.logger.info(location, "no type inferred for " + expected_argument);
                    result = false;
                fi                    
            od    

            return result;
        si
        
        to_string() -> string is
            if !bound_any then
                return "bound none";
            fi
            
            let result = new System.Text.StringBuilder();

            if bound_all then
                result.append("bound all: ");
            else
                result.append("bound some: ");
            fi

            let seen_any = false;

            for binding in bindings.values do
                if seen_any then
                    result.append(",");
                fi
                
                result
                    .append(binding.type_argument)
                    .append("=>")
                    .append(binding.actual_type);

                seen_any = true;
            od

            return result.to_string();
        si
    si
si
