namespace Semantic.Types is
    use System.Text.StringBuilder;

    use Source;

    class INFERED_RETURN_TYPE: Type is
        location: LOCATION;

        is_null: bool => true;
        is_any: bool => true;
        is_any_any: bool => true;
        is_wild: bool => true;
        is_inferred: bool => true;

        any_count: int => 1;

        init(location: LOCATION) is
            super.init();

            assert location? else "location is null";

            self.location = location;
        si

        specialize(type_map: Collections.Map[string,Type]) -> Type => self;

        =~(other: Type) -> bool
            => true;

        compare(other: Type) -> Types.MATCH
            => MATCH.ASSIGNABLE;

        gen_type(buffer: System.Text.StringBuilder) is
            IoC.CONTAINER.instance.logger.error(location, "no return type inferred for anonymous function");
        si

        to_string() -> string => "***";
    si
si