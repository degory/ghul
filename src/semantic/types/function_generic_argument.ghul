namespace Semantic.Types is
    @IF.not.v3() use Std = System.Console;

    use System.Text.StringBuilder;

    use Source;

    class FUNCTION_GENERIC_ARGUMENT: Type is
        symbol: Symbols.Symbol;
        name: string => symbol.name;

        init(symbol: Symbols.Symbol) is
            super.init();

            self.symbol = symbol;
        si

        specialize(type_map: Collections.MAP[string,Type]) -> Type is
            let result: Type;

            if type_map.try_get_value(name, result ref) then
                return result;
            fi
            
            return self;
        si

        =~(other: Type) -> bool
            => true;

        compare(other: Type) -> Types.MATCH
            => MATCH.SAME;
            
        try_bind_variables(other: Type, results: GENERIC_ARGUMENT_BIND_RESULTS) -> bool is
            let existing: Type;

            results.bind(self, other);
        si

        gen_class_name(buffer: System.Text.StringBuilder) is
            symbol.gen_class_name(buffer);
        si

        gen_type(buffer: System.Text.StringBuilder) is
            symbol.gen_type(buffer);
        si

        to_string() -> string => symbol.name;
    si
si