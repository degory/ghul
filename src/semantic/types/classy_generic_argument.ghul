namespace Semantic.Types is
    use System.Text.StringBuilder;

    use Source;

    class GenericArgument: NAMED is
        init(symbol: Symbols.Symbol) is
            super.init(symbol);
        si

        get_type_arguments_into(results: Collections.LIST[GenericArgument]) is
            results.add(self);
        si

        is_function_generic_argument: bool => false;
        is_classy_generic_argument: bool => false;
    si

    class CLASSY_GENERIC_ARGUMENT: GenericArgument is
        is_wild: bool => true;

        is_classy_generic_argument: bool => true;

        init(symbol: Symbols.Symbol) is
            super.init(symbol);
        si

        freeze() -> Type is
            let frozen = symbol.freeze();

            if !frozen? then
                return null;
            fi

            return new CLASSY_GENERIC_ARGUMENT(frozen);
        si

        specialize(type_map: Collections.Map[string,Type]) -> Type is
            let result: Type;

            if type_map.try_get_value(name, result ref) then
                return result;
            fi
            
            return self;
        si

        bind_type_variables(other: Type, results: GENERIC_ARGUMENT_BIND_RESULTS) -> bool is
            let existing: Type;

            let result = results.bind(self, other);

            return result;
        si

        gen_class_name(buffer: System.Text.StringBuilder) is
            symbol.gen_class_name(buffer);
        si

        gen_type(buffer: System.Text.StringBuilder) is
            symbol.gen_type(buffer);
        si

        to_string() -> string => symbol.name;
    si
si