namespace Semantic.Types is
    use Source.LOCATION;

    use Logging;

    class TUPLE: GENERIC is
        names: Collections.List[string];

        short_description: string => get_short_description(self, names);
        
        get_short_description(tuple: Type, names: Collections.List[string]) -> string static is
            let args = tuple.arguments;

            debug("TUPLE: get_short_description: ...");
            debug("TUPLE: get_short_description: names is non-null: {names?}");
            debug("TUPLE: get_short_description: args is non-null: {args?}");

            if args? then
                debug("TUPLE: get_short_description: args: {args | }");
            else 
                debug("TUPLE: get_short_description: args is null");

                return "()";
            fi

            if names? then
                debug("TUPLE: get_short_description: names: {names | }");

                return
                    "({(0..args.count) | .map(i => "{names[i]}: {args[i].short_description}")})";

            else
                return
                    "({(0..args.count) | .map(i => args[i].short_description)})";
            fi
        si

        init(
            location: LOCATION,
            symbol: Symbols.Classy,
            arguments: Collections.List[Type],
            names: Collections.List[string]
        ) is
            super.init(new Symbols.TUPLE(location, symbol, arguments, names));
            self.names = names; 
        si

        // FIXME: requires type conversions in generated IL:
        // get_argument_type_variance(index: int) -> Types.TYPE_VARIANCE => Types.TYPE_VARIANCE.COVARIANT;

        create(
            location: LOCATION,
            symbol: Symbols.Classy,
            arguments: Collections.List[Type]
        ) -> GENERIC =>
            new TUPLE(location, symbol, arguments, names);

        to_string() -> string => get_short_description(self, names);
    si
si
