namespace Semantic.Types is
    use Source.LOCATION;

    use Logging;

    class TUPLE: GENERIC is
        names: Collections.List[string];

        short_description: string => get_short_description(self, names);
        
        get_short_description(tuple: Type, names: Collections.List[string]) -> string static is
            let args = tuple.arguments;

            assert args? else "tuple args are null";
            assert args | .all(a => a?) else "tuple at least one null argument";

            assert !names? \/ names | .all(n => n?) else "tuple at least one null name";

            return
                if !args? then
                    "()";
                elif names? then
                    "({(0..args.count) | .map(i => "{_get_element_name(names, i)}{args[i].short_description}")})";
                else
                    "({args | .map(a => a.short_description)})";
                fi
        si

        _get_element_name(names: Collections.List[string], index: int) -> string static =>
            if names? /\ index < names.count then
                "{names[index]}: "
            else
                ""
            fi;

        init(
            location: LOCATION,
            symbol: Symbols.Classy,
            arguments: Collections.List[Type],
            names: Collections.List[string]
        ) is
            super.init(Symbols.TUPLE(location, symbol, arguments, names));

            assert !names? \/ names | .all(n => n?) else "tuple at least one null name";

            self.names = names; 
        si

        // FIXME: requires type conversions in generated IL:
        // get_argument_type_variance(index: int) -> Types.TYPE_VARIANCE => Types.TYPE_VARIANCE.COVARIANT;

        create(
            location: LOCATION,
            symbol: Symbols.Classy,
            arguments: Collections.List[Type]
        ) -> GENERIC =>
            TUPLE(location, symbol, arguments, names);

        to_string() -> string => get_short_description(self, names);
    si
si
