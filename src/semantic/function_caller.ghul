namespace Semantic is
    use System;
    use Generic;

    use Logging;

    class FUNCTION_CALLER is
        _symbol_table: SYMBOL_TABLE;
        _value_boxer: IR.VALUE_BOXER;

        init(
            symbol_table: SYMBOL_TABLE,
            value_boxer: IR.VALUE_BOXER
        )
        is
            super.init();

            _value_boxer = value_boxer;
            _symbol_table = symbol_table;
        si

        call_innate_function(
            function: Symbol.INNATE_FUNCTION, 
            arguments: Collections.LIST[Graph.Value.BASE],
            argument_types: Collections.LIST[Type.BASE],
            type: Type.BASE
        ) -> Graph.Value.BASE =>
            new Graph.Value.Call.INNATE(
                function,
                null,
                arguments,
                type
            );        

        call_innate_function(
            function: Symbol.INNATE_METHOD, 
            from: Graph.Value.BASE, 
            arguments: Collections.LIST[Graph.Value.BASE],
            argument_types: Collections.LIST[Type.BASE],
            type: Type.BASE
        ) -> Graph.Value.BASE =>
            new Graph.Value.Call.INNATE(
                function,
                from,
                arguments,
                type
            );        
    
        call_global_function(
            function: Symbol.Function, 
            arguments: Collections.LIST[Graph.Value.BASE], 
            argument_types: Collections.LIST[Type.BASE],
            type: Type.BASE
        ) -> Graph.Value.BASE =>
            new Graph.Value.Call.GLOBAL(
                function,
                _value_boxer.box_arguments(arguments, function.arguments),
                type
            );        

        call_instance_method(
            from: Graph.Value.BASE, 
            function: Symbol.Function, 
            arguments: Collections.LIST[Graph.Value.BASE], 
            argument_types: Collections.LIST[Type.BASE],
            type: Type.BASE
        ) -> Graph.Value.BASE is
            if from == null then
                from = new Graph.Value.Load.SELF(_symbol_table.current_instance_context);
            fi

            return 
                new Graph.Value.Call.INSTANCE(
                    _value_boxer.box_if_value(from),
                    function,
                    _value_boxer.box_arguments(arguments, function.arguments),
                    type
                );
        si

        call_struct_method(
            from: Graph.Value.BASE, 
            function: Symbol.Function, 
            arguments: Collections.LIST[Graph.Value.BASE], 
            argument_types: Collections.LIST[Type.BASE],
            type: Type.BASE
        ) -> Graph.Value.BASE is
            if from == null then
                from = new Graph.Value.Load.SELF(_symbol_table.current_instance_context);
            else
                from = new Graph.Value.ADDRESS(from);
            fi

            return 
                new Graph.Value.Call.STRUCT(
                    from,
                    function,
                    _value_boxer.box_arguments(arguments, function.arguments),
                    type
                );
        si

        call_abstract_method(
            from: Graph.Value.BASE, 
            function: Symbol.Function, 
            arguments: Collections.LIST[Graph.Value.BASE], 
            argument_types: Collections.LIST[Type.BASE],
            type: Type.BASE
        ) -> Graph.Value.BASE is
            if from == null then
                from = new Graph.Value.Load.SELF(_symbol_table.current_instance_context);
            elif from.is_value_type then
                from = new Graph.Value.ADDRESS(from);
            fi

            return 
                new Graph.Value.Call.INSTANCE(
                    from,
                    function,
                    _value_boxer.box_arguments(arguments, function.arguments),
                    type
                );
        si

        call_static_method(
            function: Symbol.Function,
            arguments: Collections.LIST[Graph.Value.BASE],
            argument_types: Collections.LIST[Type.BASE],
            type: Type.BASE
        ) -> Graph.Value.BASE =>
            new Graph.Value.Call.STATIC(
                function,
                _value_boxer.box_arguments(arguments, function.arguments),
                type
            );
    si
si