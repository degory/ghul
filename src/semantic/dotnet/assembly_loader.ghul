namespace Semantic.DotNet is
    use TYPE = System.Type2;

    use System.Reflection.PathAssemblyResolver;
    use System.Reflection.MetadataLoadContext;
    use System.Reflection.MetadataAssemblyResolver;
    use System.Reflection.Assembly;

    use IO.Std;

    use Collections.MAP;
    use Collections.SET;
    use Collections.LIST;
    use Collections.Map;
    use Collections.Iterable;

    use Logging.TIMERS;

    class ASSEMBLY_LOADER: TypeSource is
        _timers: TIMERS;

        _flags: Driver.BUILD_FLAGS;
        _paths: Driver.PATH_CONFIG;

        _callbacks: LIST[() -> void];

        _metadata_load_context: MetadataLoadContext;

        _assemblies_by_name: MAP[string,Assembly];

        _is_started: bool;
        _default_imports_are_needed: bool;

        // FIXME: does this need to vary with System.Environment.version? What's the Mono equivalent? Can we get it via config?
        _sdk_path: string => "/usr/share/dotnet/packs/Microsoft.NETCore.App.Ref/5.0.0/ref/net5.0/"; 

        blocked_assemblies: SET[string];

        assemblies_by_name: Map[string,Assembly] => _assemblies_by_name;
        all_assemblies: Iterable[Assembly] => _assemblies_by_name.values;
        assembly_details: LIST[(assembly: Assembly, name: string, version: string)];
        
        init(
            timers: TIMERS,
            flags: Driver.BUILD_FLAGS,
            paths: Driver.PATH_CONFIG
        ) is
            _timers = timers;
            _flags = flags;
            _paths = paths;

            _default_imports_are_needed = true;

            _callbacks = new LIST[() -> void]();

            _assemblies_by_name = new MAP[string,Assembly]();

            blocked_assemblies = new SET[string]();
            block_all_unsupported_assemblies();
        si

        on_start(callback: () -> void) is
            _callbacks.add(callback);
        si
        
        load(assembly_names: Iterable[string]) is
            if _is_started then
                return;
            fi

            _is_started = true;

            @IF.not.release() Std.error.write_line("assemblies starting up...");

            if !assembly_names? \/ assembly_names | .count() == 0 then
                let default_imports = 
                    ["System.Console", "System.Runtime", "System.IO.FileSystem", "System.Collections", "System.Threading"] |
                        .map((name: string) -> string => _sdk_path + name + ".dll")
                        .collect_list();

                if !_flags.exclude_runtime_symbols then
                    default_imports.add(_paths.install_folder + "ghul-runtime.dll");                    
                fi
                
                assembly_names = default_imports;
            fi

            let path_resolver = new PathAssemblyResolver(assembly_names);

            _metadata_load_context = new MetadataLoadContext(path_resolver, null);

            assembly_details = new LIST[(assembly: Assembly, name: string, version: string)]();

            for path in assembly_names do
                let name = IO.Path.get_file_name_without_extension(path);

                if _assemblies_by_name.contains_key(name) \/ blocked_assemblies.contains(name) then
                    continue;
                fi                

                let assembly = _metadata_load_context.load_from_assembly_path(path);
                let version = assembly.get_name().version.to_string().replace('.', ':');

                assembly_details.add((assembly, name, version));

                _assemblies_by_name.add(name, assembly);
            od
            
            for c in _callbacks do
                Std.error.write_line("call callback: " + c);
                c();
            od
        si
 
        block_all_unsupported_assemblies() is
            blocked_assemblies.add("netstandard");
            blocked_assemblies.add("mscorlib");
            blocked_assemblies.add("WindowsBase");            
            blocked_assemblies.add("System.Configuration");
            blocked_assemblies.add("System.Core");
            blocked_assemblies.add("System.Data");
            blocked_assemblies.add("System");
            blocked_assemblies.add("System.Drawing");
            blocked_assemblies.add("System.Net");
            blocked_assemblies.add("System.Private.CoreLib");
            blocked_assemblies.add("System.Security");
            blocked_assemblies.add("System.ServiceModel.Web");
            blocked_assemblies.add("System.ServiceProcess");
            blocked_assemblies.add("System.Transactions");
            blocked_assemblies.add("System.Configuration.ConfigurationManager");
        si
    si
si