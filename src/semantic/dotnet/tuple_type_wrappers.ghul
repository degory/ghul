namespace Semantic.DotNet is
    use IO.Std;

    use TYPE = System.Type2;
    use Collections.LIST;

    use Source.LOCATION;

    use Types.Type;
    
    class TUPLE_TYPE_WRAPPER: GENERIC_TYPE_WRAPPER is
        is_function: bool => true;

        short_description: string => Types.TUPLE.get_short_description(self);
        
        init(symbol_table: SYMBOL_TABLE, type_mapper: TYPE_MAPPER, dotnet_type: TYPE) is
            super.init(symbol_table, type_mapper, dotnet_type);
        si

        create(
            location: LOCATION,
            symbol: Symbols.Classy,
            arguments: Collections.LIST[Type]
        ) -> Types.GENERIC =>
             new Types.TUPLE(location, symbol, arguments);

        to_string() -> string => Types.TUPLE.get_short_description(self);
    si

    class HYBRID_TUPLE_TYPE_WRAPPER: HYBRID_GENERIC_TYPE_WRAPPER is
        is_function: bool => true;

        short_description: string => Types.TUPLE.get_short_description(self);
        
        init(symbol_table: SYMBOL_TABLE, dotnet_type: TYPE, arguments: LIST[Type]) is
            super.init(symbol_table, dotnet_type, arguments);
        si

        init(symbol_table: SYMBOL_TABLE, dotnet_type: TYPE, argument: Type) is
            super.init(symbol_table, dotnet_type, argument);
        si

        create(
            location: LOCATION,
            symbol: Symbols.Classy,
            arguments: Collections.LIST[Type]
        ) -> Types.GENERIC
            => new Types.TUPLE(location, symbol, arguments);

        to_string() -> string => Types.TUPLE.get_short_description(self);
    si
si
