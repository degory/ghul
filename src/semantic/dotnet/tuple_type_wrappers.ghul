namespace Semantic.DotNet is
    use IO.Std;

    use TYPE = System.Type2;
    use Collections.List;

    use Source.LOCATION;

    use Types.Type;
    
    class TUPLE_TYPE_WRAPPER: GENERIC_TYPE_WRAPPER is
        names: Collections.List[string];

        short_description: string => Types.TUPLE.get_short_description(self, names);
        
        init(symbol_table: SYMBOL_TABLE, type_mapper: TYPE_MAPPER, dotnet_type: TYPE, names: Collections.List[string]) is
            super.init(symbol_table, type_mapper, dotnet_type);
            self.names = names;
        si

        // FIXME: requires type conversions in generated IL (see #776):
        // get_argument_type_variance(index: int) -> Types.TYPE_VARIANCE => Types.TYPE_VARIANCE.COVARIANT;

        create(
            location: LOCATION,
            symbol: Symbols.Classy,
            arguments: Collections.List[Type]
        ) -> Types.GENERIC => new Types.TUPLE(location, symbol, arguments, names);

        create_symbol(unspecialized: Symbols.Classy, arguments: List[Types.Type]) -> Symbols.GENERIC =>
            new Symbols.TUPLE(Source.LOCATION.internal, unspecialized, arguments, names);
 
        to_string() -> string => Types.TUPLE.get_short_description(self, names);
    si

    class HYBRID_TUPLE_TYPE_WRAPPER: HYBRID_GENERIC_TYPE_WRAPPER is
        names: Collections.List[string];

        short_description: string => Types.TUPLE.get_short_description(self, names);
        
        init(symbol_table: SYMBOL_TABLE, dotnet_type: TYPE, arguments: List[Type], names: Collections.List[string]) is
            super.init(symbol_table, dotnet_type, arguments);
            self.names = names; 
        si

        // FIXME: requires type conversions in generated IL (see #776):
        // get_argument_type_variance(index: int) -> Types.TYPE_VARIANCE => Types.TYPE_VARIANCE.COVARIANT;

        create(
            location: LOCATION,
            symbol: Symbols.Classy,
            arguments: Collections.List[Type]
        ) -> Types.GENERIC => new Types.TUPLE(location, symbol, arguments, names);        

        create_symbol(unspecialized: Symbols.Classy, arguments: List[Types.Type]) -> Symbols.GENERIC =>
            new Symbols.TUPLE(Source.LOCATION.internal, unspecialized, arguments, names);            

        to_string() -> string => Types.TUPLE.get_short_description(self, names);
    si
si
