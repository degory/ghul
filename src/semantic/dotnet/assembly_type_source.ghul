namespace Semantic.DotNet is
    use TYPE = System.Type2;

    use System.Reflection;

    use Collections.Iterable;
    use Collections.List;

    class ASSEMBLY_TYPE_SOURCE: TypeSource is
        _assemblies_by_name: Collections.Map[string,Assembly];

        init() is
        si

        start(assemblies_by_name: Collections.Map[string,Assembly]) is
            _assemblies_by_name = assemblies_by_name;
        si        

        // assume assembly is System.Runtime:
        get_type(type_name: string) -> TYPE =>
            get_type("System.Runtime", type_name);

        get_type(assembly_name: string, type_name: string) -> TYPE is
            if assembly_name == null then
                assembly_name = "System.Runtime";
            fi

            // Std.error.write_line("get type [" + assembly_name + "]" + type_name);

            return _assemblies_by_name[assembly_name].get_type(type_name);
        si        

        get_types(type_names: Iterable[string]) -> Collections.List[TYPE] =>
            type_names | .map(name => get_type(name)).collect();

        get_types(assembly_and_type_names: Iterable[(assembly_name: string, type_name: string)]) -> Collections.List[TYPE] =>
            assembly_and_type_names | .map(names => get_type(names.assembly_name, names.type_name)).collect();
    si
si

/*


        get_type(type_name: string) -> TYPE =>
            get_type("System.Runtime", type_name);

        get_type(assembly_name: string, type_name: string) -> TYPE is
            if assembly_name == null then
                assembly_name = "System.Runtime";
            fi

            // Std.error.write_line("get type [" + assembly_name + "]" + type_name);

            return _assemblies_by_name[assembly_name].get_type(type_name);
        si        

        get_types(type_names: Iterable[string]) -> Collections.List[TYPE] =>
            type_names | .map(name => get_type(name)).collect();

        get_types(assembly_and_type_names: Iterable[(assembly_name: string, type_name: string)]) -> Collections.List[TYPE] =>
            assembly_and_type_names | .map(names => get_type(names.assembly_name, names.type_name)).collect();


*/