namespace Semantic.DotNet is
    use TYPE = System.Type2;

    use Collections.Iterable;
    use Collections.List;

    class ASSEMBLY_LOAD_ORCHESTRATOR is
        _type_details_lookup: Semantic.DotNet.TYPE_DETAILS_LOOKUP;
        _type_name_map: TYPE_NAME_MAP;

        _assembly_loader: ASSEMBLY_LOADER;
        _assemblies: ASSEMBLIES;
        _assembly_type_source: ASSEMBLY_TYPE_SOURCE;

        _type_mapper: TYPE_MAPPER;
        _symbol_table: SYMBOL_TABLE;

        start(assemblies_to_load: Iterable[string]) is
            _assembly_loader.load(assemblies_to_load);

            _assembly_type_source.start(_assembly_loader.assemblies_by_name);

            _type_name_map.start(_assembly_type_source);

            _


/*

            ghul_namespace_creator = new Semantic.DotNet.GHUL_NAMESPACE_CREATOR(timers, symbol_table, namespaces, type_details_lookup);

            dotnet_symbol_table =
                new System.Lazy`1[Semantic.DotNet.SYMBOL_TABLE](
                    () =>
                        new Semantic.DotNet.SYMBOL_TABLE(type_details_lookup, symbol_factory)
                );

            type_name_map = new Semantic.DotNet.TYPE_NAME_MAP(build_flags, type_details_lookup);

            assembly_type_source = new Semantic.DotNet.ASSEMBLY_TYPE_SOURCE();
            
            assemblies = new Semantic.DotNet.ASSEMBLIES(
                timers,
                build_flags,
                path_config, 
                symbol_table, 
                namespaces, 
                type_name_map,
                type_details_lookup
            );

            referenced_assemblies = new Semantic.DotNet.REFERENCED_ASSEMBLIES(boilerplate_generator, assemblies);

            innate_symbol_lookup =
                new Semantic.Lookups.REFLECTION_INNATE_SYMBOL_LOOKUP(
                    type_mapper, 
                    dotnet_symbol_table.value,
                    new Semantic.Lookups.GHUL_STUBS_SYMBOL_LOOKUP(logger, symbol_table),
                    assembly_loader
                );

            type_mapper = new Semantic.DotNet.TYPE_MAPPER(dotnet_symbol_table, innate_symbol_lookup, type_name_map, assembly_loader);

            // innate_types = new Semantic.DotNet.INNATE_TYPES(assemblies, type_mapper);

            symbol_factory = new Semantic.DotNet.SYMBOL_FACTORY(namespaces, type_name_map, type_mapper, referenced_assemblies, assemblies);



            */
        si        
    si
si
