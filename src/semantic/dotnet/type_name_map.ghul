namespace Semantic.DotNet is
    use TYPE = System.Type2;

    use System.Reflection;
    use System.Text.StringBuilder;

    use IO.Std;
    
    use Collections.Iterable;
    use Collections.Map;
    use Collections.MutableMap;
    use Collections.SET;
    use Collections.LIST;
    use Collections.MAP;

    class TYPE_NAME_MAP is
        _build_flags: Compiler.BUILD_FLAGS;
        _type_details_lookup: TYPE_DETAILS_LOOKUP;
        _type_source: TypeSource;

        _is_started: bool;

        _ghul_keywords: SET[string];

        _type_details_by_dotnet_type: MutableMap[TYPE,TYPE_DETAILS];

        _namespace_details_by_dotnet_namespace: MutableMap[string,NAMESPACE_DETAILS];
        _namespace_details_by_ghul_name: MutableMap[string,NAMESPACE_DETAILS];

        init(build_flags: Compiler.BUILD_FLAGS, type_details_lookup: TYPE_DETAILS_LOOKUP) is
            _build_flags = build_flags;
            _type_details_lookup = type_details_lookup;

            _ghul_keywords = new SET[string]();

            _type_details_by_dotnet_type = new MAP[TYPE,TYPE_DETAILS]();

            _namespace_details_by_dotnet_namespace = new MAP[string,NAMESPACE_DETAILS]();
            _namespace_details_by_ghul_name = new MAP[string,NAMESPACE_DETAILS]();
        si
        
        start(type_source: TypeSource) is
            if _is_started then
                return;
            fi

            assert type_source?;

            _type_source = type_source;

            // Mappings: ghul name -> .NET type / IL name
    
            _ghul_keywords.add("namespace");
            _ghul_keywords.add("class");
            _ghul_keywords.add("struct");
            _ghul_keywords.add("enum");
            _ghul_keywords.add("public");
            _ghul_keywords.add("protected");
            _ghul_keywords.add("private");
            _ghul_keywords.add("const");
            _ghul_keywords.add("static");
            _ghul_keywords.add("innate");
            _ghul_keywords.add("if");
            _ghul_keywords.add("else");
            _ghul_keywords.add("while");
            _ghul_keywords.add("do");
            _ghul_keywords.add("for");
            _ghul_keywords.add("in");
            _ghul_keywords.add("case");
            _ghul_keywords.add("when");
            _ghul_keywords.add("default");
            _ghul_keywords.add("break");
            _ghul_keywords.add("continue");
            _ghul_keywords.add("ref");
            _ghul_keywords.add("ptr");
            _ghul_keywords.add("new");
            _ghul_keywords.add("throw");
            _ghul_keywords.add("return");
            _ghul_keywords.add("cast");
            _ghul_keywords.add("var");
            _ghul_keywords.add("try");
            _ghul_keywords.add("let");
            _ghul_keywords.add("catch");
            _ghul_keywords.add("finally");
            _ghul_keywords.add("self");
            _ghul_keywords.add("super");
            _ghul_keywords.add("null");
            _ghul_keywords.add("use");
            _ghul_keywords.add("trait");
            _ghul_keywords.add("isa");
            _ghul_keywords.add("typeof");
            _ghul_keywords.add("operator");
            _ghul_keywords.add("is");
            _ghul_keywords.add("si");
            _ghul_keywords.add("then");
            _ghul_keywords.add("elif");
            _ghul_keywords.add("fi");
            _ghul_keywords.add("esac");
            _ghul_keywords.add("od");
            _ghul_keywords.add("yrt");
            _ghul_keywords.add("true");
            _ghul_keywords.add("false");
            _ghul_keywords.add("assert");

            map_namespace("Collections", "System.Collections.Generic", null);
            map_namespace("DotNet.NonGeneric.Collections", "System.Collections", null);
            map_namespace("IO", "System.IO", null);

            map_type("System.Void", "Ghul", "void", "void", "System.Runtime", "5:0:0:0");
            map_type("System.Boolean", "Ghul", "bool", "bool", "System.Runtime", "5:0:0:0");
            map_type("System.Char", "Ghul", "char", "char", "System.Runtime", "5:0:0:0");
            map_type("System.Byte", "Ghul", "ubyte", "unsigned int8", "System.Runtime", "5:0:0:0");
            map_type("System.SByte", "Ghul", "byte", "int8", "System.Runtime", "5:0:0:0");
            map_type("System.UInt16", "Ghul", "ushort", "unsigned int16", "System.Runtime", "5:0:0:0");
            map_type("System.Int16", "Ghul", "short", "int16", "System.Runtime", "5:0:0:0");
            map_type("System.UInt32", "Ghul", "uint", "unsigned int32", "System.Runtime", "5:0:0:0");
            map_type("System.Int32", "Ghul", "int", "int32", "System.Runtime", "5:0:0:0");
            map_type("System.UInt64", "Ghul", "ulong", "unsigned int64", "System.Runtime", "5:0:0:0");
            map_type("System.Int64", "Ghul", "long", "int64", "System.Runtime", "5:0:0:0");
            map_type("System.UIntPtr", "Ghul", "uword", "native unsigned int", "System.Runtime", "5:0:0:0");
            map_type("System.IntPtr", "Ghul", "word", "native int", "System.Runtime", "5:0:0:0");
            map_type("System.Single", "Ghul", "single", "float32", "System.Runtime", "5:0:0:0");
            map_type("System.Double", "Ghul", "double", "float64", "System.Runtime", "5:0:0:0");

            map_type("System.Object", "Ghul", "object", null, "System.Runtime", "5:0:0:0");
            map_type("System.String", "Ghul", "string", null, "System.Runtime", "5:0:0:0");

            for i in 0..16 do
                map_type("System.Func`{i + 1}", "Ghul", "FUNCTION_{i}");
            od

            map_type("System.Action", "Ghul", "ACTION_0");

            for i in 1::16 do
                map_type("System.Action`{i}", "Ghul", "ACTION_{i}");
            od

            for i in 1::8 do
                map_type("System.ValueTuple`{i}", "Ghul", "TUPLE_{i}");
            od

            map_type("System.IDisposable", "Ghul", "Disposable");

            map_type("System.Type", "System", "Type2");
            map_type("System.Console", "IO", "Std", "System.Console", "System.Console", "5:0:0:0");

            map_type("System.Collections.IEnumerable", "Collections", "NonGenericIterable");

            map_type("System.Collections.Generic.IReadOnlyCollection`1", "Collections", "Bag");
            map_type("System.Collections.Generic.ICollection`1", "Collections", "MutableBag");
            map_type("System.Collections.IEnumerator", "Collections", "MoveNext");
            map_type("System.Collections.Generic.IEnumerable`1", "Collections", "Iterable");
            map_type("System.Collections.Generic.IEnumerator`1", "Collections", "Iterator");

            map_type("System.Collections.Generic.List`1", "Collections", "LIST", "System.Collections.Generic.List`1", "System.Collections", "5:0:0:0");
            map_type("System.Collections.Generic.IList`1", "Collections", "MutableList");
            map_type("System.Collections.Generic.IReadOnlyList`1", "Collections", "List");

            map_type("System.Collections.Generic.Dictionary`2", "Collections", "MAP", "System.Collections.Generic.Dictionary`2", "System.Collections", "5:0:0:0");
            map_type("System.Collections.Generic.IDictionary`2", "Collections", "MutableMap");
            map_type("System.Collections.Generic.IReadOnlyDictionary`2", "Collections", "Map");

            map_type("System.Collections.Generic.HashSet`1", "Collections", "SET", "System.Collections.Generic.HashSet`1", "System.Collections", "5:0:0:0");
            map_type("System.Collections.Generic.Stack`1", "Collections", "STACK", "System.Collections.Generic.Stack`1", "System.Collections", "5:0:0:0");
            
            _is_started = true;
        si

        map_type(dotnet_type_name: string, namespace_name: string, type_name: string) is
            map_type(dotnet_type_name, namespace_name, type_name, null, null, null);
        si

        map_type(dotnet_type_name: string, namespace_name: string, type_name: string, il_name: string, assembly_name: string, assembly_version: string) is
            let dotnet_type = _type_source.get_type(assembly_name, dotnet_type_name);

            assert dotnet_type?;

            let type_details = new TYPE_DETAILS(dotnet_type, namespace_name, type_name, il_name, assembly_name, assembly_version);

            _type_details_by_dotnet_type.add(dotnet_type, type_details);

            _type_details_lookup.add_type(type_details);
        si

        map_namespace(ghul_namespace_name: string, dotnet_namespace_name: string, dotnet_assembly: string) is
            let namespace_details = new NAMESPACE_DETAILS(ghul_namespace_name, dotnet_namespace_name, dotnet_assembly);

            _namespace_details_by_dotnet_namespace.add(dotnet_namespace_name, namespace_details);

            _namespace_details_by_ghul_name.add(ghul_namespace_name, namespace_details);
        si

        get_type_details(type: TYPE) -> TYPE_DETAILS is
            let result: TYPE_DETAILS;
            _type_details_by_dotnet_type.try_get_value(type, result ref);

            return result;
        si

        get_namespace_details(type: TYPE) -> NAMESPACE_DETAILS is
            let result: NAMESPACE_DETAILS;

            _namespace_details_by_dotnet_namespace.try_get_value(type.`namespace, result ref);

            return result;
        si

        get_namespace_details(ghul_namespace_name: string) -> NAMESPACE_DETAILS is
            let result: NAMESPACE_DETAILS;
            _namespace_details_by_ghul_name.try_get_value(ghul_namespace_name, result ref);

            return result;
        si
        
        get_member_name(owner_ghul_name: string, member_dotnet_name: string, is_private: bool, is_special_name: bool) -> string is
            let result: string;

            result = de_camel(member_dotnet_name);

            if is_special_name then
                result = "${result}";
            elif is_private then
                result = "_{result}";
            fi

            if _ghul_keywords.contains(result) then
                result = "`{result}";
            fi
        
            return result;
        si

        get_constant_name(owner_ghul_name: string, member_dotnet_name: string, is_private: bool) -> string is
            let result: string;

            result = de_camel(member_dotnet_name).to_upper_invariant();

            if is_private then
                result = "_{result}";
            fi

            if _ghul_keywords.contains(result) then
                result = "`{result}";
            fi
        
            return result;
        si

        de_camel(name: string) -> string is
            let buffer = new StringBuilder();
            let seenAnyLowerCase = false;

            for c in name do
                // FIXME: use System.Char.IsUpper here:

                if c >= 'A' /\ c <= 'Z' then
                    if seenAnyLowerCase /\ buffer.get_chars(buffer.length -1) != '_' then
                        buffer.append('_');
                    fi

                    buffer.append(c - 'A' + 'a');
                elif c != '$' then
                    if c >= 'a' /\ c <= 'z' then
                        seenAnyLowerCase = true;
                    fi
                    
                    buffer.append(c);
                fi
            od

            let result = buffer.to_string();

            return result;
        si
    si
si