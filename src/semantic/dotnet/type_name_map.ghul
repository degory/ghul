namespace Semantic.DotNet is
    @IF.not.v3() use object = System.Object;
    @IF.not.v3() use string = System.String;
    @IF.not.v3() use STD = System.Console;
    @IF.not.v3() use TYPE = System.Type2;

    use System.Reflection;
    use System.Text.StringBuilder;
    
    use Collections.Iterable;
    use Collections.Map;
    use Collections.MutableMap;
    use Collections.SET;
    use Collections.LIST;
    use Collections.MAP;

    class TYPE_NAME_MAP is
        type_details_by_dotnet_type: MutableMap[TYPE,TYPE_DETAILS];
        type_details_by_ghul_name: MutableMap[string,TYPE_DETAILS];

        namespace_details_by_dotnet_namespace: MutableMap[string,NAMESPACE_DETAILS];
        namespace_details_by_ghul_name: MutableMap[string,NAMESPACE_DETAILS];

        assembly_name_overrides: MutableMap[string,string];

        init() is
            type_details_by_dotnet_type = new MAP[TYPE,TYPE_DETAILS]();
            type_details_by_ghul_name = new MAP[string,TYPE_DETAILS]();

            namespace_details_by_dotnet_namespace = new MAP[string,NAMESPACE_DETAILS]();
            namespace_details_by_ghul_name = new MAP[string,NAMESPACE_DETAILS]();

            assembly_name_overrides = new MAP[string,string]();

            // Mappings: ghul name -> .NET type / IL name
    
            map_namespace_to_assembly("Ghul", "System.Runtime");

            map_namespace("Collections", "System.Collections.Generic", null);
            map_namespace("DotNet.NonGeneric.Collections", "System.Collections", null);
            map_namespace("IO", "System.IO", null);

            map_assembly("System.Collections", "mscorlib");
            map_assembly("System.Private.CoreLib", "System.Runtime");

            map_type(typeof void, "Ghul.void", "void", null);
            map_type(typeof bool, "Ghul.bool", "bool", null);
            map_type(typeof char, "Ghul.char", "char", null);
            map_type(typeof ubyte, "Ghul.ubyte", "unsigned int8", null);
            map_type(typeof byte, "Ghul.byte", "int8", null);
            map_type(typeof ushort, "Ghul.ushort", "unsigned int16", null);
            map_type(typeof short, "Ghul.short", "int16", null);
            map_type(typeof uint, "Ghul.uint", "unsigned int32", null);
            map_type(typeof int, "Ghul.int", "int32", null);
            map_type(typeof ulong, "Ghul.ulong", "unsigned int64", null);
            map_type(typeof long, "Ghul.long", "int64", null);
            map_type(typeof uword, "Ghul.uword", "unsigned native int", null);
            map_type(typeof word, "Ghul.word", "native int", null);
            map_type(typeof single, "Ghul.single", "single", null);
            map_type(typeof double, "Ghul.double", "double", null);

            map_type(typeof object, "Ghul.object", null, null);
            map_type(typeof string, "Ghul.string", null, null);
            map_type(typeof System.Type2, "System.Type2", null, null);
            map_type(typeof System.Console, "IO.STD", null, null);

            map_type(typeof Collections.NonGenericIterable, "Collections.NonGenericIterable", null, null);

            map_type(typeof Collections.Bag, "Collections.Bag", null, null);
            map_type(typeof Collections.MoveNext, "Collections.MoveNext", null, null);
            map_type(typeof Collections.Iterable, "Collections.Iterable", null, null);
            map_type(typeof Collections.Iterator, "Collections.Iterator", null, null);

            map_type(typeof Collections.LIST, "Collections.LIST", null, null);
            map_type(typeof Collections.MutableList, "Collections.MutableList", null, null);
            map_type(typeof Collections.List, "Collections.List", null, null);

            map_type(typeof Collections.MAP, "Collections.MAP", null, null);
            map_type(typeof Collections.MutableMap, "Collections.MutableMap", null, null);
            map_type(typeof Collections.Map, "Collections.Map", null, null);

            map_type(typeof Collections.SET, "Collections.SET", null, null);
            map_type(typeof Collections.STACK, "Collections.STACK", null, null);
        si

        map_type(dotnet_type: TYPE, ghul_name: string, il_name: string, assembly_name: string) is
            let type_details = new TYPE_DETAILS(dotnet_type, ghul_name, il_name, assembly_name);

            type_details_by_dotnet_type.add(dotnet_type, type_details);
            type_details_by_ghul_name.add(ghul_name, type_details);
        si

        map_namespace_to_assembly(ghul_namespace: string, dotnet_assembly: string) is
            let namespace_details = new NAMESPACE_DETAILS(ghul_namespace, null, dotnet_assembly);

            namespace_details_by_ghul_name.add(ghul_namespace, namespace_details);
        si

        map_namespace(ghul_namespace_name: string, dotnet_namespace_name: string, dotnet_assembly: string) is
            let namespace_details = new NAMESPACE_DETAILS(ghul_namespace_name, dotnet_namespace_name, dotnet_assembly);

            namespace_details_by_dotnet_namespace.add(dotnet_namespace_name, namespace_details);
            namespace_details_by_ghul_name.add(ghul_namespace_name, namespace_details);
        si

        map_assembly(apparent_assembly_name: string, actual_assembly_name: string) is
            assembly_name_overrides[apparent_assembly_name] = actual_assembly_name;
        si        

        get_type_details(type: TYPE) -> TYPE_DETAILS is
            let result: TYPE_DETAILS;
            type_details_by_dotnet_type.try_get_value(type, result ref);

            return result;
        si

        get_type_details(ghul_qualified_name: string) -> TYPE_DETAILS is
            let result: TYPE_DETAILS;
            type_details_by_ghul_name.try_get_value(ghul_qualified_name, result ref);

            return result;
        si

        get_namespace_details(type: TYPE) -> NAMESPACE_DETAILS is
            let result: NAMESPACE_DETAILS;
            namespace_details_by_dotnet_namespace.try_get_value(type.namespace_, result ref);

            return result;
        si

        get_namespace_details(ghul_namespace_name: string) -> NAMESPACE_DETAILS is
            let result: NAMESPACE_DETAILS;
            namespace_details_by_ghul_name.try_get_value(ghul_namespace_name, result ref);

            return result;
        si

        get_ghul_namespace(dotnet_type: TYPE) -> string is
            let type_details = get_type_details(dotnet_type);

            if type_details? then
                return new TYPE_NAME(type_details.ghul_name).namespace_name;
            fi

            let namespace_details = get_namespace_details(dotnet_type);

            if namespace_details? then
                return namespace_details.ghul_name;
            fi
            
            return dotnet_type.namespace_;
        si
        
        get_assembly_name(type: TYPE) -> string is
            let type_details = get_type_details(type);

            if type_details? then
                return type_details.assembly_name;
            fi

            let namespace_details = get_namespace_details(type);

            if namespace_details? && namespace_details.assembly_name? then
                return namespace_details.assembly_name;
            fi
            
            return type.assembly.get_name().name;
        si

        get_il_name(type: TYPE) -> string is
            let type_details = get_type_details(type);

            let assembly_name: string;

            if type_details? then
                if type_details.il_name? then
                    return type_details.il_name;
                elif type_details.assembly_name? then
                    assembly_name = type_details.assembly_name;
                fi                
            fi
            
            if !assembly_name? then
                let namespace_details = get_namespace_details(type);

                if namespace_details? then
                    assembly_name = namespace_details.assembly_name;
                fi

                if !assembly_name? then
                    assembly_name = type.assembly.get_name().name;
                fi
                
                let an: string;

                if assembly_name_overrides.try_get_value(assembly_name, an ref) then
                    assembly_name = an;
                fi                
            fi
            
            let buffer = new StringBuilder();
            
            if type.is_value_type then
                buffer.append("valuetype [");
            else
                buffer.append("class [");
            fi
            
            buffer
                .append(assembly_name)
                .append(']')
                .append(type.full_name);

            // don't believe there is any benefit in caching this as the symbol that needs it is uniquied:
            return buffer.to_string();
        si
        
        get_member_name(owner_ghul_name: string, member_dotnet_name: string) -> string is
            let result: string;

            result = de_camel(member_dotnet_name);

            return result;
        si

        de_camel(name: string) -> string is
            let buffer = new StringBuilder();
            let seenAnyLowerCase = false;

            for c in name do
                // FIXME: use System.Char.IsUpper here:

                if c >= 'A' && c <= 'Z' then
                    if seenAnyLowerCase && buffer.get_at(buffer.length -1) != '_' then
                        buffer.append('_');
                    fi

                    buffer.append(c - 'A' + 'a');
                else
                    seenAnyLowerCase = true;
                    buffer.append(c);
                fi
            od

            var result = buffer.to_string();

            // if is_field then
            //     result = "_" + result;
            // fi

            // if keywords.Contains(result) then
            //     result = result + "_";
            // fi

            return result;
        si

        get_type_name(
            name_map: MutableMap[string,string],
            namespace_name_map: Map[string,string], 
            qualified_name: string
        ) -> string
        is
            let result: string;
            
            // First look for an exact mapping for the qualified name
            if name_map.try_get_value(qualified_name, result ref) then
                STD.error.write_line("MAP: manually mapped: " + qualified_name + " -> " + result);
                return result;
            fi

            let type_name = new TYPE_NAME(qualified_name);

            // Get the namespace name from the qualified name:
            let namespace_name = type_name.namespace_name;

            // Is the name qualified with a namespace?
            if !namespace_name? then
                STD.error.write_line("MAP: not qualified: " + qualified_name + " -> " + qualified_name);
                return qualified_name;
            fi

            // Is the namespace name mapped to something else?
            if namespace_name_map.try_get_value(namespace_name, result ref) then
                STD.error.write_line("MAP: namespace mapped: " + qualified_name + " -> " + result + "." + type_name.name);
                return result + "." + type_name.name;
            fi

            // no mapping:
            STD.error.write_line("MAP: no mapping: " + qualified_name + " -> " + qualified_name);
            return qualified_name;            
        si

        /*
        get_ghul_type_name(type: TYPE) -> string =>
            get_ghul_type_name(type.full_name);
        
        get_dotnet_type_name(qualified_name: string) -> string =>


            get_type_name(ghul_to_dotnet_type_name_map, qualified_name);

        get_ghul_type_name(qualified_name: string) -> string is
            
        si
        */
    si
si