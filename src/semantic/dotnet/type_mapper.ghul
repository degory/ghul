namespace Semantic.DotNet is
    @IF.not.v3() use object = System.Object;
    @IF.not.v3() use string = System.String;
    @IF.not.v3() use Std = System.Console;

    @IF.not.v3() use TYPE = System.Type2;
    use System.Console;

    use System.Reflection;

    use Collections.LIST;
    use Collections.MAP;

    use Types.Type;

    class TYPE_MAPPER is
        _symbol_table: System.LAZY[SYMBOL_TABLE];
        _type_name_map: TYPE_NAME_MAP;

        // we don't need to intern types for correctness, but expecting to encounter a lot of references
        // to identical types, so interning them will result in lower memory usage and fewer calls into the 
        // symbol table/symbol cache to materialize the associated ghul symbols
        _type_cache: MAP[TYPE,Type];

        init(
            symbol_table: System.LAZY[SYMBOL_TABLE],
            type_name_map: TYPE_NAME_MAP
        ) is
            _symbol_table = symbol_table;
            _type_name_map = type_name_map;

            _type_cache = new MAP[TYPE,Type]();
        si

        get_type(type: TYPE) -> Type is
            let result: Type;

            if _type_cache.try_get_value(type, result ref) then
                return result;
            fi

            if type.is_generic_type_parameter || type.is_generic_parameter then
                return new Types.NAMED(
                    new Symbols.TYPE(Source.LOCATION.dummy, null, type.name, type.generic_parameter_position)
                );
            fi

            if type.is_generic_type || type.is_generic_type_definition then
                return new GENERIC_TYPE_WRAPPER(_symbol_table.value, self, type.get_generic_type_definition());
            fi
            
            if type.is_array then
                let elements = new LIST[Type](1);

                let element_type = get_type(type.get_element_type());

                return IoC.CONTAINER.instance.ghul_symbol_lookup.get_array_type(element_type);
            fi
            
            // FIXME: create specific types for native ghul structured types, e.g. map ValueType to TUPLE etc.

            result = new TYPE_WRAPPER(_symbol_table.value, type);

            _type_cache.add(type, result);

            return result;
        si
    si
si