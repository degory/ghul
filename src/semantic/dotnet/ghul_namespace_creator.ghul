namespace Semantic.DotNet is
    use TYPE = System.Type2;

    use System.Reflection.Assembly;

    use IO.Std;

    use Collections.MAP;
    use Collections.SET;
    use Collections.LIST;
    use Collections.Iterable;

    use Logging.TIMERS;

    class GHUL_NAMESPACE_CREATOR is
        _is_enabled: bool;
        _timers: TIMERS;

        _type_details_lookup: TYPE_DETAILS_LOOKUP;
        _ghul_symbol_table: Semantic.SYMBOL_TABLE;
        _namespaces: NAMESPACES;

        _is_started: bool;

        init(
            timers: TIMERS,
            ghul_symbol_table: Semantic.SYMBOL_TABLE,
            namespaces: NAMESPACES,
            type_details_lookup: TYPE_DETAILS_LOOKUP
        ) is
            _timers = timers;
            _ghul_symbol_table = ghul_symbol_table;
            _namespaces = namespaces;
            _type_details_lookup = type_details_lookup;

            _is_enabled = true;
        si

        disable() is
            _is_enabled = false;
        si
        
        create_namespaces() is
            if !_is_enabled then
                return;
            fi

            let current = LIST[string]();

            let namespaces = LIST[string]();

            for ns in _type_details_lookup.ghul_namespaces do
                namespaces.add(ns);
            od

            namespaces.sort();

            for a in namespaces do
                let to_create = LIST[string](a.split(['.']));

                while current.count > to_create.count do
                    _namespaces.leave_namespace(null, null);
                    _ghul_symbol_table.leave_scope();
                    current.remove_at(current.count - 1);
                od

                let index = 0;

                while index < current.count /\ current[index] =~ to_create[index] do
                    index = index + 1;
                od
                
                while current.count > index do
                    _namespaces.leave_namespace(null, null);
                    _ghul_symbol_table.leave_scope();
                    current.remove_at(current.count - 1);
                od

                for i in index..to_create.count do
                    let ns = _namespaces.declare_and_enter_namespace(Source.LOCATION.internal, to_create[i], null);
                    _ghul_symbol_table.enter_scope(ns);
                od
                
                current = to_create;
            od

            while current.count > 0 do
                _namespaces.leave_namespace(null, null);
                _ghul_symbol_table.leave_scope();
                current.remove_at(current.count - 1);                
            od            
        si
    si
si