namespace Semantic.DotNet is
    use IO.Std;

    use TYPE = System.Type2;
    use Collections.LIST;
    use Collections.List;

    use Source.LOCATION;

    use Types.Type;

    class TYPE_WRAPPER: Types.NAMED is
        _symbol_table: SYMBOL_TABLE;
        _dotnet_type: TYPE;

        symbol: Symbols.Symbol is
            if !_symbol? then
                materialize();
            fi
                           
            return _symbol;
        si        

        init(
            symbol_table: SYMBOL_TABLE,
            dotnet_type: TYPE
        ) is
            super.init(null);
            assert symbol_table? else "symbol table is null";
            assert dotnet_type? else "dotnet type is null";

            _symbol_table = symbol_table;
            _dotnet_type = dotnet_type;
        si

        materialize() is
            _symbol = _symbol_table.get_symbol(_dotnet_type);
        si        
    si

    class GENERIC_TYPE_WRAPPER: Types.GENERIC is
        _symbol_table: SYMBOL_TABLE;
        _type_mapper: TYPE_MAPPER;
        _dotnet_type: TYPE;

        symbol: Symbols.Symbol is
            if !_symbol? then
                materialize();
            fi

            return _symbol;
        si

        init(
            symbol_table: SYMBOL_TABLE,
            type_mapper: TYPE_MAPPER,
            dotnet_type: TYPE
        ) is
            assert symbol_table? else "symbol table is null";
            assert type_mapper? else "type mapper is null";
            assert dotnet_type? else "dotnet type is null";
            assert dotnet_type.get_generic_type_definition()? else "dotnet type is non-null {dotnet_type} but has no generic type definition";
           
            _symbol_table = symbol_table;
            _type_mapper = type_mapper;
            _dotnet_type = dotnet_type;
        si

        materialize() is
            let s = _symbol_table.get_symbol(_dotnet_type.get_generic_type_definition());

            let unspecialized = cast Symbols.Classy(s);

            let arguments = new LIST[Types.Type]();

            for a in _dotnet_type.get_generic_arguments() do
                arguments.add(_type_mapper.get_type(a));
            od
            
            _symbol = create_symbol(unspecialized, arguments);
        si

        create_symbol(unspecialized: Symbols.Classy, arguments: List[Types.Type]) -> Symbols.GENERIC =>
            new Symbols.GENERIC(Source.LOCATION.internal, unspecialized, arguments);
    si

    class HYBRID_GENERIC_TYPE_WRAPPER: Types.GENERIC is
        _symbol_table: SYMBOL_TABLE;
        _dotnet_type: TYPE;
        _arguments: List[Type];

        // _symbol: Symbols.GENERIC;

        symbol: Symbols.Symbol is
            if !_symbol? then
                materialize();
            fi

            return _symbol;
        si

        init(
            symbol_table: SYMBOL_TABLE,
            dotnet_type: TYPE,
            arguments: List[Type]
        ) is
            assert symbol_table? else "symbol table is null";
            assert dotnet_type? else "dotnet type is null";
            assert arguments? else "arguments is null";
            
            assert arguments.count > 0 else "expected at least one type argument";

            _symbol_table = symbol_table;
            _dotnet_type = dotnet_type;
            _arguments = arguments;
        si

        init(
            symbol_table: SYMBOL_TABLE,
            dotnet_type: TYPE,
            argument: Type
        ) is
            assert symbol_table? else "symbol table is null";
            assert dotnet_type? else "dotnet type is null";
            assert arguments? else "arguments is null";
            
            _symbol_table = symbol_table;
            _dotnet_type = dotnet_type;
            _arguments = new LIST[Type]([argument]);
        si

        materialize() is
            let s = _symbol_table.get_symbol(_dotnet_type);

            let unspecialized = cast Symbols.Classy(s);
            
            _symbol = create_symbol(unspecialized, _arguments);
        si

        create_symbol(unspecialized: Symbols.Classy, arguments: List[Types.Type]) -> Symbols.GENERIC =>
            new Symbols.GENERIC(Source.LOCATION.internal, unspecialized, arguments);
    si

    class HYBRID_ARRAY_TYPE_WRAPPER: HYBRID_GENERIC_TYPE_WRAPPER is
        short_description: string => Types.ARRAY.get_short_description(self);

        init(
            symbol_table: SYMBOL_TABLE,
            dotnet_type: TYPE,
            argument: Type
        ) is
            super.init(
                symbol_table,
                dotnet_type,
                argument
            );
        si

        create(location: LOCATION, symbol: Symbols.Classy, arguments: Collections.List[Type]) -> Types.GENERIC =>
            new Types.ARRAY(location, symbol, arguments);

        to_string() -> string => Types.ARRAY.get_short_description(self);
    si
   
    class HYBRID_REFERENCE_TYPE_WRAPPER: HYBRID_GENERIC_TYPE_WRAPPER is
        short_description: string => Types.REFERENCE.get_short_description(self);
        
        init(
            symbol_table: SYMBOL_TABLE,
            dotnet_type: TYPE,
            argument: Type
        ) is
            super.init(
                symbol_table,
                dotnet_type,
                argument
            );
        si

        create(location: LOCATION, symbol: Symbols.Classy, arguments: Collections.List[Type]) -> Types.GENERIC =>
            new Types.REFERENCE(location, symbol, arguments);

        to_string() -> string => Types.REFERENCE.get_short_description(self);
    si    

    class HYBRID_POINTER_TYPE_WRAPPER: HYBRID_GENERIC_TYPE_WRAPPER is
        short_description: string => Types.POINTER.get_short_description(self);

        init(
            symbol_table: SYMBOL_TABLE,
            dotnet_type: TYPE,
            argument: Type
        ) is
            super.init(
                symbol_table,
                dotnet_type,
                argument
            );
        si

        create(location: LOCATION, symbol: Symbols.Classy, arguments: Collections.List[Type]) -> Types.GENERIC =>
            new Types.POINTER(location, symbol, arguments);

        to_string() -> string => Types.POINTER.get_short_description(self);
    si
si
