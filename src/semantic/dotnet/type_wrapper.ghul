namespace Semantic.DotNet is
    @IF.not.v3() use object = System.Object;
    @IF.not.v3() use string = System.String;
    @IF.not.v3() use Std = System.Console;

    @IF.not.v3() use TYPE = System.Type2;

    use Types.Type;

    class TYPE_WRAPPER: Types.NAMED is
        _created: int static;
        _resolved: int static;
        _accessed: int static;

        _symbol_table: SYMBOL_TABLE;
        _dotnet_type: TYPE;

        _symbol: Symbols.Scoped;

        symbol: Symbols.Symbol is
            if !_symbol? then
                _symbol = _symbol_table.get_symbol(_dotnet_type);

                _resolved = _resolved + 1;
            fi

            _accessed = _accessed + 1;

            // Std.error.write_line(".NET type symbol: " + _dotnet_type + " total wrappers: " + _created + " resolved: " + _resolved + " accessed: " + _accessed);
                
            return _symbol;
        si

        init(
            symbol_table: SYMBOL_TABLE,
            dotnet_type: TYPE
        ) is
            super.init(null);

            _created = _created + 1;

            self._symbol_table = symbol_table;
            self._dotnet_type = dotnet_type;
        si
    si

    class GENERIC_TYPE_WRAPPER: Types.GENERIC is
        _symbol_table: SYMBOL_TABLE;
        _type_mapper: TYPE_MAPPER;
        _dotnet_type: TYPE;

        _symbol: Symbols.GENERIC;

        symbol: Symbols.Symbol is
            if !_symbol? then
                let s = _symbol_table.get_symbol(_dotnet_type);

                let unspecialized = cast Symbols.Classy(s);

                let arguments = new Collections.LIST[Types.Type]();

                for a in _dotnet_type.get_generic_arguments() do
                    arguments.add(_type_mapper.get_type(a));
                od
                
                _symbol = new Symbols.GENERIC(Source.LOCATION.dummy, unspecialized, arguments);
            fi

            return _symbol;
        si

        init(
            symbol_table: SYMBOL_TABLE,
            type_mapper: TYPE_MAPPER,
            dotnet_type: TYPE
        ) is
            assert symbol_table? else "symbol table is null";
            assert type_mapper? else "type mapper is null";
            assert dotnet_type? else "dotnet type is null";
            
            self._symbol_table = symbol_table;
            self._type_mapper = type_mapper;
            self._dotnet_type = dotnet_type;
        si

        to_string() -> string is
            if !_symbol? then
                return "(non materialized generic type wrapping " + _dotnet_type.to_string() + ")";
            fi
            
            return super.to_string();
        si
    si
si
