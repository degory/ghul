namespace Semantic.DotNet is
    use IO.Std;

    use TYPE = System.Type2;
    use Collections.LIST;

    use Types.Type;

    class TYPE_WRAPPER: Types.NAMED is
        _created: int static;
        _resolved: int static;
        _accessed: int static;

        _symbol_table: SYMBOL_TABLE;
        _dotnet_type: TYPE;

        _symbol: Symbols.Scoped;

        symbol: Symbols.Symbol is
            if !_symbol? then
                _symbol = _symbol_table.get_symbol(_dotnet_type);

                _resolved = _resolved + 1;
            fi

            _accessed = _accessed + 1;
                
            return _symbol;
        si

        init(
            symbol_table: SYMBOL_TABLE,
            _dotnet_type: TYPE
        ) is
            super.init(null);

            _created = _created + 1;

            self._symbol_table = symbol_table;
            self._dotnet_type = _dotnet_type;
        si
    si

    class GENERIC_TYPE_WRAPPER: Types.GENERIC is
        _symbol_table: SYMBOL_TABLE;
        _type_mapper: TYPE_MAPPER;
        _dotnet_type: TYPE;

        _symbol: Symbols.GENERIC;

        symbol: Symbols.Symbol is
            if !_symbol? then
                materialize();
            fi

            return _symbol;
        si

        init(
            symbol_table: SYMBOL_TABLE,
            type_mapper: TYPE_MAPPER,
            dotnet_type: TYPE
        ) is
            assert symbol_table? else "symbol table is null";
            assert type_mapper? else "type mapper is null";
            assert dotnet_type? else "dotnet type is null";
            
            self._symbol_table = symbol_table;
            self._type_mapper = type_mapper;
            self._dotnet_type = dotnet_type;
        si

        materialize() is
            let s = _symbol_table.get_symbol(_dotnet_type.get_generic_type_definition());

            let unspecialized = cast Symbols.Classy(s);

            let arguments = new LIST[Types.Type]();

            for a in _dotnet_type.get_generic_arguments() do
                arguments.add(_type_mapper.get_type(a));
            od
            
            _symbol = new Symbols.GENERIC(Source.LOCATION.internal, unspecialized, arguments);
        si

        to_string() -> string is
            if !_symbol? then
                materialize();
            fi

            return super.to_string();
        si
    si

    class HYBRID_GENERIC_TYPE_WRAPPER: Types.GENERIC is
        _symbol_table: SYMBOL_TABLE;
        _dotnet_type: TYPE;
        _arguments: LIST[Type];

        _symbol: Symbols.GENERIC;

        symbol: Symbols.Symbol is
            if !_symbol? then
                materialize();
            fi

            return _symbol;
        si

        init(
            symbol_table: SYMBOL_TABLE,
            dotnet_type: TYPE,
            arguments: LIST[Type]
        ) is
            assert symbol_table? else "symbol table is null";
            assert dotnet_type? else "dotnet type is null";
            assert arguments? else "arguments is null";

            _symbol_table = symbol_table;
            _dotnet_type = dotnet_type;
            _arguments = arguments;
        si

        init(
            symbol_table: SYMBOL_TABLE,
            dotnet_type: TYPE,
            argument: Type
        ) is
            assert symbol_table? else "symbol table is null";
            assert dotnet_type? else "dotnet type is null";
            assert arguments? else "arguments is null";
            
            _symbol_table = symbol_table;
            _dotnet_type = dotnet_type;
            _arguments = new LIST[Type]();
            _arguments.add(argument);
        si

        materialize() is
            let s = _symbol_table.get_symbol(_dotnet_type);

            let unspecialized = cast Symbols.Classy(s);
            
            _symbol = new Symbols.GENERIC(Source.LOCATION.internal, unspecialized, _arguments);
        si

        to_string() -> string is
            if !_symbol? then
                materialize();
            fi

            return super.to_string();
        si
    si

    class HYBRID_FUNCTION_TYPE_WRAPPER: HYBRID_GENERIC_TYPE_WRAPPER is
        init(
            symbol_table: SYMBOL_TABLE,
            dotnet_type: TYPE,
            arguments: LIST[Type]
        ) is
            super.init(
                symbol_table,
                dotnet_type,
                arguments
            );
        si

        init(
            symbol_table: SYMBOL_TABLE,
            dotnet_type: TYPE,
            argument: Type
        ) is
            super.init(
                symbol_table,
                dotnet_type,
                argument
            );
        si

        to_string() -> string is
            let result = new System.Text.StringBuilder();

            if arguments.count == 1 then
                result
                    .append("() -> ")
                    .append(arguments[0]);

            elif arguments.count == 2 then
                result
                    .append(arguments[0])
                    .append(" -> ")
                    .append(arguments[1]);
            else
                result.append('(');

                let seen_any = false;

                for i in 0..arguments.count-1 do
                    if seen_any then
                        result.append(',');
                    fi

                    result.append(arguments[i]);

                    seen_any = true;
                od
                
                result
                    .append(") -> ")
                    .append(arguments[arguments.count-1]);
            fi

            return result.to_string();
        si
    si

    class HYBRID_ACTION_TYPE_WRAPPER: HYBRID_GENERIC_TYPE_WRAPPER is
        init(
            symbol_table: SYMBOL_TABLE,
            dotnet_type: TYPE,
            arguments: LIST[Type]
        ) is
            super.init(
                symbol_table,
                dotnet_type,
                arguments
            );
        si

        init(
            symbol_table: SYMBOL_TABLE,
            dotnet_type: TYPE,
            argument: Type
        ) is
            super.init(
                symbol_table,
                dotnet_type,
                argument
            );
        si

        to_string() -> string is
            let result = new System.Text.StringBuilder();

            if arguments.count == 0 then
                result
                    .append("() -> void");

            elif arguments.count == 1 then
                result
                    .append(arguments[0])
                    .append(" -> void");
            else
                result.append('(');

                let seen_any = false;

                for a in arguments do
                    if seen_any then
                        result.append(',');
                    fi

                    result.append(a);

                    seen_any = true;
                od
                
                result
                    .append(") -> void");
            fi

            return result.to_string();
        si
    si
    
    class HYBRID_ARRAY_TYPE_WRAPPER: HYBRID_GENERIC_TYPE_WRAPPER is
        init(
            symbol_table: SYMBOL_TABLE,
            dotnet_type: TYPE,
            argument: Type
        ) is
            super.init(
                symbol_table,
                dotnet_type,
                argument
            );
        si

        to_string() -> string is
            return arguments[0].to_string() + "[]";
        si
    si
    
    class HYBRID_REFERENCE_TYPE_WRAPPER: HYBRID_GENERIC_TYPE_WRAPPER is
        init(
            symbol_table: SYMBOL_TABLE,
            dotnet_type: TYPE,
            argument: Type
        ) is
            super.init(
                symbol_table,
                dotnet_type,
                argument
            );
        si

        to_string() -> string is
            return arguments[0].to_string() + " ref";
        si
    si    

    class HYBRID_POINTER_TYPE_WRAPPER: HYBRID_GENERIC_TYPE_WRAPPER is
        init(
            symbol_table: SYMBOL_TABLE,
            dotnet_type: TYPE,
            argument: Type
        ) is
            super.init(
                symbol_table,
                dotnet_type,
                argument
            );
        si

        to_string() -> string is
            return arguments[0].to_string() + " ptr";
        si
    si
si
