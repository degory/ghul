namespace Semantic.DotNet is
    @IF.not.v3() use object = System.Object;
    @IF.not.v3() use string = System.String;
    @IF.not.v3() use STD = System.Console;

    @IF.not.v3() use TYPE = System.Type2;

    use System.Console;

    class SYMBOL_TABLE is
        _hits: int;
        _misses: int;

        _assemblies: ASSEMBLIES;
        _type_name_map: TYPE_NAME_MAP;
        _symbol_factory: SYMBOL_FACTORY;

        _symbol_cache: SYMBOL_CACHE;

        init(
            assemblies: ASSEMBLIES,
            type_name_map: TYPE_NAME_MAP,
            symbol_factory: SYMBOL_FACTORY
        ) is
            _assemblies = assemblies;
            _type_name_map = type_name_map;
            _symbol_factory = symbol_factory;

            _symbol_cache = new SYMBOL_CACHE();
        si

        get_symbol(ghul_name: string) -> Symbol.Scoped is
            if !_assemblies._is_enabled then
                return null;
            fi

            STD.error.write_line("SSS: get symbol by name: " + ghul_name);

            if ghul_name =~ "System.Object" then
                STD.error.write_line("SSS: from " + new System.Diagnostics.StackTrace());
            fi            
            
            let result = _symbol_cache.get_symbol(ghul_name);

            if result? then
                _hits = _hits + 1;
                STD.error.write_line("SSS: cache hit: " + ghul_name + " hits:" + _hits + " misses: " + _misses);

                return result;
            fi

            let type_details = _type_name_map.get_type_details(ghul_name);

            if type_details? then
                STD.error.write_line("SSS: create symbol from type details: " + type_details);
                _misses = _misses + 1;
                let result = create_symbol(type_details.dotnet_type, ghul_name, type_details.il_name);

                return result;
            fi

            let type: TYPE;
            let assembly_name: string;
            let dotnet_namespace_name: string;
            let namespace_name: string;

            STD.error.write_line("SSS: attempt to create symbol from ghul name: " + ghul_name);

            let type_name = new TYPE_NAME(ghul_name);
            let namespace_details = _type_name_map.get_namespace_details(type_name.namespace_name);

            if namespace_details? then
                assembly_name = namespace_details.assembly_name;
                namespace_name = namespace_details.ghul_name;
                dotnet_namespace_name = namespace_details.dotnet_name;

                STD.error.write_line("SSS: namespace mapped: assembly: " + assembly_name + " ghul namespace name: " + namespace_name + " " + dotnet_namespace_name);
            else
                namespace_name = type_name.namespace_name;
                dotnet_namespace_name = namespace_name;

                STD.error.write_line("SSS: no mapping: namespace name: " + namespace_name);
            fi

            if assembly_name? then
                type = _assemblies.find(assembly_name, namespace_name, dotnet_namespace_name, type_name.name);
            else
                type = _assemblies.find(namespace_name, dotnet_namespace_name, type_name.name);                    
            fi

            if type? then
                _misses = _misses + 1;
                STD.error.write_line("SSS: create symbol from type: " + type);

                return create_symbol(type, ghul_name, null);
            fi

            STD.error.write_line("SSS: no symbol found for ghul name: " + ghul_name);
        si
        
        get_symbol(type: TYPE) -> Symbol.Scoped is
            if !_assemblies._is_enabled then
                return null;
            fi
            
            // STD.error.write_line("get symbol by .NET type " + type);

            let result = _symbol_cache.get_symbol(type);

            // STD.error.write_line("cache search result: " + result);

            if result? then
                // STD.error.write_line("return symbol from cache for name " + type);
                return result;
            fi

            let type_details = _type_name_map.get_type_details(type);

            let ghul_name: string;

            if type_details? then
                ghul_name = type_details.ghul_name;
            fi
            
            if !ghul_name? then
                let namespace_details = _type_name_map.get_namespace_details(type);

                if namespace_details? && namespace_details.ghul_name? then
                    ghul_name = namespace_details.ghul_name + "." + type.name;

                    STD.error.write_line("MMM: ghul name from namespace details: " + type + " -> " + ghul_name);
                fi
                
                if !ghul_name? then
                    ghul_name = type.full_name;

                    STD.error.write_line("MMM: ghul name from .NET type: " + type + " -> " + ghul_name);
                fi
            else
                STD.error.write_line("MMM: ghul name from type details: " + type + " -> " + ghul_name);
            fi

            return create_symbol(type, ghul_name, null);
        si

        create_symbol(type: TYPE, ghul_name: string, il_name: string) -> Symbol.Scoped is
            STD.error.write_line("create symbol for " + type + " with ghul name " + ghul_name);

            let result = _symbol_factory.create_symbol(type, ghul_name, il_name);

            if !result? then
                STD.error.write_line("not something we can handle yet: ignoring: " + type);
                
                return null;
            fi
            
            _symbol_cache.add_symbol(type, ghul_name, result);

            STD.error.write_line("add ancestors for " + type + " with ghul name " + ghul_name);
            _symbol_factory.add_ancestors(result, type);

            _symbol_factory.add_members(result, type);

            return result;
        si
    si
si