namespace Semantic.DotNet is
    use TYPE = System.Type2;
    use IO.Std;

    class SYMBOL_TABLE is
        _type_details_lookup: TYPE_DETAILS_LOOKUP;
        _symbol_factory: SYMBOL_FACTORY;

        _symbol_store: SYMBOL_STORE;

        init(
            type_details_lookup: TYPE_DETAILS_LOOKUP,
            symbol_factory: SYMBOL_FACTORY
        ) is
            _type_details_lookup = type_details_lookup;
            _symbol_factory = symbol_factory;

            _symbol_factory.set_symbol_table(self);
 
            _symbol_store = SYMBOL_STORE();
        si

        find_root_matches(matches: Collections.MutableMap[string, Symbols.Symbol]) is
            let distinct_namespaces = Collections.SET[string]();

            let owner = EMPTY_SCOPE("");

            for ns in _type_details_lookup.find_all_root_namespaces() do
                if !matches.contains_key(ns) then
                    matches.add(ns, STUB_SYMBOL(owner, ns,  Symbols.SYMBOL_KIND.NAMESPACE, Symbols.COMPLETION_KIND.MODULE));
                fi
            od
        si

        find_member_matches(namespace_name: string, matches: Collections.MutableMap[string, Symbols.Symbol]) is
            assert namespace_name? else "namespace name is null";
            assert matches? else "matches is null";

            let owner = EMPTY_SCOPE(namespace_name);
            let distinct_namespaces = Collections.SET[string](_type_details_lookup.find_all_namespaces_under(namespace_name));

            let type_details = _type_details_lookup.get_all_type_details_in_ghul_namespace(namespace_name);

            if !type_details? then
                return;
            fi

            for td in type_details do
                let dotnet_type = td.dotnet_type;
                let ghul_name = td.ghul_type_name;
                let ghul_namespace = td.ghul_namespace;

                if ghul_namespace =~ namespace_name then
                    if !matches.contains_key(ghul_name) then
                        let symbol_kind = Symbols.SYMBOL_KIND.UNDEFINED;
                        let completion_kind = Symbols.COMPLETION_KIND.UNDEFINED;

                        if dotnet_type.is_value_type then
                            symbol_kind = Symbols.SYMBOL_KIND.STRUCT;
                            completion_kind = Symbols.COMPLETION_KIND.STRUCT;
                        elif dotnet_type.is_interface then
                            symbol_kind = Symbols.SYMBOL_KIND.INTERFACE;
                            completion_kind = Symbols.COMPLETION_KIND.INTERFACE;
                        elif dotnet_type.is_class then
                            symbol_kind = Symbols.SYMBOL_KIND.CLASS;
                            completion_kind = Symbols.COMPLETION_KIND.CLASS;
                        fi

                        matches.add(ghul_name, STUB_SYMBOL(owner, ghul_name, symbol_kind, completion_kind));
                    fi
                elif ghul_namespace.starts_with(namespace_name + ".") then
                    let suffix = ghul_namespace.substring(namespace_name.length + 1);
                    let parts = suffix.split(['.']);

                    if parts.count >= 2 then
                        distinct_namespaces.add(parts[0]);
                    fi
                fi
            od

            for ns in distinct_namespaces do
                if !matches.contains_key(ns) then
                    matches.add(ns, STUB_SYMBOL(owner, ns, Symbols.SYMBOL_KIND.NAMESPACE, Symbols.COMPLETION_KIND.MODULE));                        
                fi                    
            od
        si

        get_symbol(ghul_name: string) -> Symbols.Scoped is
            let result: Symbols.Scoped;
            
            if _symbol_store.try_get_symbol(ghul_name, result ref) then
                return result;
            fi

            let type_name = TYPE_NAME(ghul_name);

            let type_details = _type_details_lookup.get_type_details_by_ghul_namespace_and_symbol_name(type_name.namespace_name, type_name.name);

            if type_details? then
                assert type_details.assembly_name? /\ type_details.assembly_name.length > 0 else " invalid assembly name: {type_details}";
                
                return create_symbol(type_details);
            fi
            
            _symbol_store.cache_no_result(ghul_name);
        si
        
        get_symbol(type: TYPE) -> Symbols.Scoped is
            let result = _symbol_store.get_symbol(type);

            if result? then
                return result;
            fi

            let type_details = _type_details_lookup.get_type_details_by_dotnet_type(type);

            if !type_details? then
                Std.error.write_line("warning: no type details for type {type} in assembly {type.assembly.get_name()}");

                // FIXME: nested type name bodge?
                type_details = 
                    TYPE_DETAILS(
                        type, 
                        type.`namespace, 
                        type.name, 
                        null, 
                        type.assembly.get_name().name,
                        type.assembly.get_name().version.to_string().replace('.', ':')
                    );
            fi

            assert type_details.assembly_name? /\ type_details.assembly_name.length > 0 else " invalid assembly name: {type_details}";

            return create_symbol(type_details);
        si

        create_symbol(type_details: TYPE_DETAILS) -> Symbols.Scoped is
            let result = _symbol_factory.create_symbol(type_details);

            if !result? then
                @IF.debug() Std.error.write_line("not something we can handle yet: ignoring: {type}");
                
                return null;
            fi

            let dotnet_type = type_details.dotnet_type;
            
            _symbol_store.add_symbol(dotnet_type, "{type_details.ghul_namespace}.{type_details.ghul_type_name}", result);

            _symbol_factory.add_ancestors(result, dotnet_type);

            _symbol_factory.add_members(result, dotnet_type);

            return result;
        si
    si
si