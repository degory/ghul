namespace Semantic.DotNet is
    use TYPE = System.Type2;

    use System.Reflection.PathAssemblyResolver;
    use System.Reflection.MetadataLoadContext;
    use System.Reflection.MetadataAssemblyResolver;
    use System.Reflection.Assembly;

    use IO.Std;

    use Collections.MAP;
    use Collections.SET;
    use Collections.LIST;
    use Collections.Iterable;

    use Logging.TIMERS;

    class ASSEMBLIES: TypeSource is
        _timers: TIMERS;

        _flags: Driver.BUILD_FLAGS;
        _paths: Driver.PATH_CONFIG;
        _type_details_lookup: TYPE_DETAILS_LOOKUP;
        _ghul_symbol_table: Semantic.SYMBOL_TABLE;
        _namespaces: NAMESPACES;
        _type_name_map: TYPE_NAME_MAP;

        _callbacks: LIST[() -> void];

        _metadata_load_context: MetadataLoadContext;

        _assemblies_by_name: MAP[string,Assembly];
        _assemblies_by_ghul_namespace: MAP[string,SET[Assembly]];

        _is_started: bool;
        _default_imports_are_needed: bool;

        // FIXME: does this need to vary with System.Environment.version? What's the Mono equivalent? Can we get it via config?
        _sdk_path: string => "/usr/share/dotnet/packs/Microsoft.NETCore.App.Ref/5.0.0/ref/net5.0/"; 

        blocked_assemblies: SET[string];

        all_assemblies: Iterable[Assembly] => _assemblies_by_name.values;
        
        init(
            timers: TIMERS,
            flags: Driver.BUILD_FLAGS,
            paths: Driver.PATH_CONFIG,
            ghul_symbol_table: Semantic.SYMBOL_TABLE,
            namespaces: NAMESPACES,            
            type_name_map: TYPE_NAME_MAP,
            type_details_lookup: TYPE_DETAILS_LOOKUP
        ) is
            _timers = timers;
            _flags = flags;
            _paths = paths;
            _ghul_symbol_table = ghul_symbol_table;
            _namespaces = namespaces;
            _type_name_map = type_name_map;

            _default_imports_are_needed = true;

            _type_details_lookup = type_details_lookup;

            _callbacks = new LIST[() -> void]();

            _assemblies_by_name = new MAP[string,Assembly]();
            _assemblies_by_ghul_namespace = new MAP[string,SET[Assembly]]();

            blocked_assemblies = new SET[string]();
            block_all_unsupported_assemblies();
        si

        on_start(callback: () -> void) is
            _callbacks.add(callback);
        si

        get_type(type_name: string) -> TYPE =>
            get_type("System.Runtime", type_name);

        get_type(assembly_name: string, type_name: string) -> TYPE is
            if assembly_name == null then
                assembly_name = "System.Runtime";
            fi

            // Std.error.write_line("get type [" + assembly_name + "]" + type_name);

            return _assemblies_by_name[assembly_name].get_type(type_name);
        si        

        get_types(type_names: Iterable[string]) -> Collections.List[TYPE] =>
            type_names | .map(name => get_type(name)).collect();

        get_types(assembly_and_type_names: Iterable[(assembly_name: string, type_name: string)]) -> Collections.List[TYPE] =>
            assembly_and_type_names | .map(names => get_type(names.assembly_name, names.type_name)).collect();
        
        import(assembly_names: Iterable[string]) is
            if _is_started then
                return;
            fi

            _is_started = true;

            @IF.not.release() Std.error.write_line("assemblies starting up...");

            if !assembly_names? \/ assembly_names | .count() == 0 then
                let default_imports = 
                    ["System.Console", "System.Runtime", "System.IO.FileSystem", "System.Collections", "System.Threading"] |
                        .map((name: string) -> string => _sdk_path + name + ".dll")
                        .collect_list();

                if !_flags.exclude_runtime_symbols then
                    default_imports.add(_paths.install_folder + "ghul-runtime.dll");                    
                fi
                
                assembly_names = default_imports;
            fi

            let path_resolver = new PathAssemblyResolver(assembly_names);

            _metadata_load_context = new MetadataLoadContext(path_resolver, null);

            let to_process = new LIST[(assembly: Assembly, name: string, version: string)]();

            for path in assembly_names do
                let name = IO.Path.get_file_name_without_extension(path);

                if _assemblies_by_name.contains_key(name) \/ blocked_assemblies.contains(name) then
                    continue;
                fi                

                let assembly = _metadata_load_context.load_from_assembly_path(path);
                let version = assembly.get_name().version.to_string().replace('.', ':');

                to_process.add((assembly, name, version));

                _assemblies_by_name.add(name, assembly);
            od

            _type_name_map.start(self);

            for c in _callbacks do
                c();
            od

            for a in to_process do
                import(a.assembly, a.name, a.version);
            od
        si

        import(assembly: Assembly, assembly_name: string, assembly_version: string) is
            assert assembly_name? /\ assembly_name.length > 0;

            @IF.debug() Std.error.write_line("start type map...");

            let types_file = _paths.get_library_location("dotnet/refs") + assembly_name + ".types";
        
            let any_succeeded = false;
            let exported_ex: System.Exception;
            let forwarded_ex: System.Exception;

            try
                for type in assembly.get_types() do                        
                    import_type(type, assembly_name, assembly_version);

                    any_succeeded = true;
                od
            catch ex: System.Exception
                exported_ex = exported_ex;
            yrt        

            try
                for type in assembly.get_forwarded_types() do
                    import_type(type, assembly_name, assembly_version);

                    any_succeeded = true;
                od
            catch ex: System.Exception
                forwarded_ex = ex;
            yrt

            if !any_succeeded then
                Std.error.write_line("warning: couldn't enumerate any types in " + assembly);
            fi                
        si

        import_type(type: TYPE, assembly_name: string, assembly_version: string) is
            assert assembly_name? else "attempting to import type " + type + " with no assembly name supplied";

            try
                let type_details = _type_name_map.get_type_details(type);

                if type_details? then
                    type_details.merge_assembly_reference(type, assembly_name, assembly_version);

                    return;
                elif !type.`namespace? \/ !type.full_name? then
                    return;
                else
                    let namespace_details = _type_name_map.get_namespace_details(type);
                    let namespace_name: string;
    
                    if namespace_details? then
                        namespace_name = namespace_details.ghul_name;
                    else
                        namespace_name = type.`namespace;
                    fi

                    let type_name = type.name;

                    if type.is_nested then
                        let parts = type.full_name.split(['.']);
                        
                        type_name = parts[parts.count-1].replace('+', '_');
                    fi
                    
                    type_details = new TYPE_DETAILS(type, namespace_name, type_name, null, assembly_name, assembly_version);
                fi
    
                assert type_details.assembly_name? /\ type_details.assembly_name.length > 0 else "invalid assmbly name before add type " + type_details;

                _type_details_lookup.add_type(type_details);
            catch ex: System.Exception
                Std.error.write_line("failed to import: " + type + " exception: " + ex.to_string().replace('\n', ' '));
            yrt
        si
 
        block_all_unsupported_assemblies() is
            blocked_assemblies.add("netstandard");
            blocked_assemblies.add("mscorlib");
            blocked_assemblies.add("WindowsBase");            
            blocked_assemblies.add("System.Configuration");
            blocked_assemblies.add("System.Core");
            blocked_assemblies.add("System.Data");
            blocked_assemblies.add("System");
            blocked_assemblies.add("System.Drawing");
            blocked_assemblies.add("System.Net");
            blocked_assemblies.add("System.Private.CoreLib");
            blocked_assemblies.add("System.Security");
            blocked_assemblies.add("System.ServiceModel.Web");
            blocked_assemblies.add("System.ServiceProcess");
            blocked_assemblies.add("System.Transactions");
            blocked_assemblies.add("System.Configuration.ConfigurationManager");
        si
    si
si