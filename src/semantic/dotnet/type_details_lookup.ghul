namespace Semantic.DotNet is
    use TYPE = System.Type2;    use IO.Std;

    use Collections.Iterable;

    use Collections.MutableList;
    use Collections.LIST;

    use Collections.MutableMap;
    use Collections.MAP;

    use Collections.SET;

    class TYPE_DETAILS_LOOKUP is
        // lookups from .NET types will use this route which maps 1:1
        _type_details_by_dotnet_type: MutableMap[TYPE, TYPE_DETAILS];

        // lookups from ghÅ«l - requires a linear seach but:
        // 1) we will often want all the names in a namespace, for completion suggestsions
        // 2) the result of other look-ups wll be cached  
        _type_details_by_ghul_namespace: MutableMap[string, MutableList[TYPE_DETAILS]];

        ghul_namespaces: Iterable[string] => _type_details_by_ghul_namespace.keys;

        init() is
            _type_details_by_dotnet_type = new MAP[TYPE, TYPE_DETAILS]();
            _type_details_by_ghul_namespace = new MAP[string, MutableList[TYPE_DETAILS]]();
        si

        find_all_root_namespaces() -> Iterable[string] is
            let result = new SET[string]();

            for ns in _type_details_by_ghul_namespace.keys do
                let parts = ns.split(['.']);

                result.add(parts[0]);
            od
            
            return result;
        si

        find_all_namespaces_under(prefix: string) -> Iterable[string] is
            let result = new SET[string]();

            let search_for = prefix + ".";
            let prefix_length = search_for.length;

            for ns in _type_details_by_ghul_namespace.keys do
                if ns.starts_with(prefix) then
                    if ns.length > prefix_length then
                        let parts = ns.substring(prefix_length).split(['.']);

                        assert parts[0]?;

                        result.add(parts[0]);
                    fi
                fi                
            od
            
            return result;
        si
    
        contains_type(type: TYPE) -> bool => _type_details_by_dotnet_type.contains_key(type);

        add_type(type_details: TYPE_DETAILS) is
            // assert type_details.is_complete else "incomplete type details: {type_details}";

            let dotnet_type = type_details.dotnet_type;

            if _type_details_by_dotnet_type.contains_key(dotnet_type) then                
                return;
            fi
            
            _type_details_by_dotnet_type.add(dotnet_type, type_details);

            let ghul_namespace = type_details.ghul_namespace;

            let list: MutableList[TYPE_DETAILS];

            if !_type_details_by_ghul_namespace.try_get_value(ghul_namespace, list ref) then
                list = new LIST[TYPE_DETAILS]();

                _type_details_by_ghul_namespace.add(ghul_namespace, list);
            fi

            let is_found = false;
            for d in list do
                if d.dotnet_type == dotnet_type then
                    is_found = true;
                    break;
                fi
            od
            
            if !is_found then
                list.add(type_details);
            fi
        si
        
        get_type_details_by_dotnet_type(type: TYPE) -> TYPE_DETAILS is
            let result: TYPE_DETAILS;

            _type_details_by_dotnet_type.try_get_value(type, result ref);

            return result;
        si

        get_all_type_details_in_ghul_namespace(namespace_name: string) -> Iterable[TYPE_DETAILS] is
            let result: MutableList[TYPE_DETAILS];

            _type_details_by_ghul_namespace.try_get_value(namespace_name, result ref);

            return result;
        si

        get_type_details_by_ghul_namespace_and_symbol_name(namespace_name: string, name: string) -> TYPE_DETAILS is
            let search_list = get_all_type_details_in_ghul_namespace(namespace_name);

            if !search_list? then
                return null;
            fi

            for details in search_list do
                if details.matches(namespace_name, name) then
                    return details;
                fi                
            od
        si
    si
si
