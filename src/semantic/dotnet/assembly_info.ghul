namespace Semantic.DotNet is
    use Collections;

    class ASSEMBLY_INFO is
        _context: IR.CONTEXT;
        attributes: MutableList[AssemblyInfoAttribute];

        init(context: IR.CONTEXT) is
            _context = context;
            attributes = LIST[AssemblyInfoAttribute]();
        si
        
        add_attribute(name: string, value: string) is
            attributes.add(STRING_ASSEMBLY_INFO_ATTRIBUTE(name, value));
        si
        
        gen() is
            for a in attributes do
                a.gen(_context);
            od            
        si        
    si
   
    class AssemblyInfoAttribute is
        name: string;
        value: string;

        init(name: string, value: string) is
            self.name = name;
            self.value = value;
        si        

        gen(context: IR.CONTEXT) is
            gen_attribute(context);
            gen_value(context);
        si

        gen_attribute(context: IR.CONTEXT) is
            context.write(".custom instance void [System.Runtime]{name}::.ctor(string) = ");
        si

        gen_value(context: IR.CONTEXT);        
    si

    class STRING_ASSEMBLY_INFO_ATTRIBUTE: AssemblyInfoAttribute is
        init(name: string, value: string) is
            super.init(name, value);
        si

        // TODO: this is the standard way to marshal IL metadata string values
        // and should probably be factored out:
        gen_value(context: IR.CONTEXT) is
            let buffer = System.Text.StringBuilder();

            let bytes = 
                System.Text.Encoding.utf8.get_bytes(value);

            let length = bytes.count;

            // metadata header:
            buffer.append("( 01 00 ");

            // 1 to 3 bytes representing the number of UTF-8 bytes (not clear if this should actually be the number of chars?):
            if length < 0x7F then
                buffer
                    .append(cast uint(length).to_string("X02"))
                    .append(' ');                    
            elif length < 0x3FFF then
                buffer
                    .append((0x80u ∪ (cast uint(length) >> 8u)).to_string("X02"))
                    .append(' ')
                    .append((0xFFu ∩ cast uint(length)).to_string("X02"))
                    .append(' ');
                    
            elif length < 0x1FFFFFFF then 
                buffer
                    .append((0xC0u ∪ (cast uint(length) >> 24u)).to_string("X02"))
                    .append(' ')
                    .append((0xFFu ∩ (cast uint(length) >> 16u)).to_string("X02"))
                    .append(' ')
                    .append((0xFFu ∩ (cast uint(length) >> 8u)).to_string("X02"))
                    .append(' ')
                    .append((0xFFu ∩ cast uint(length)).to_string("X02"))
                    .append(' ');

            else
                assert false else "cannot handle metadata string with length >= 0x1FFFFFFF UTF-8 bytes";
            fi

            // bytes representing string value in UTF-8:
            for b in bytes do
                buffer
                    .append(cast uint(b).to_string("X02"))
                    .append(' ');
            od

            buffer.append(")");

            context.write_line(buffer.to_string());
        si
    si    
si
