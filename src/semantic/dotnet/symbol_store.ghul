namespace Semantic.DotNet is
    use TYPE = System.Type2;

    use IO.Std;

    use Collections.MAP;

    class SYMBOL_STORE is
        _symbols_by_dotnet_type: MAP[TYPE,Symbols.Scoped];
        _symbols_by_ghul_name: MAP[string,Symbols.Scoped];

        count: int is
            return _symbols_by_ghul_name.count;
        si

        init() is
            _symbols_by_dotnet_type = new MAP[TYPE,Symbols.Scoped]();
            _symbols_by_ghul_name = new MAP[string,Symbols.Scoped]();
        si

        get_symbol(dotnet_type: TYPE) -> Symbols.Scoped is
            assert dotnet_type? else "get symbol .NET type is null";

            let result: Symbols.Scoped;

            _symbols_by_dotnet_type.try_get_value(dotnet_type, result ref);

            return result;
        si

        try_get_symbol(ghul_name: string, result: Symbols.Scoped ref) -> bool =>
            _symbols_by_ghul_name.try_get_value(ghul_name, result);

        get_symbol(ghul_name: string) -> Symbols.Scoped is
            assert ghul_name? else "get symbol ghul name is null";

            let result: Symbols.Scoped;

            _symbols_by_ghul_name.try_get_value(ghul_name, result ref);

            return result;
        si

        cache_no_result(ghul_name: string) is
            _symbols_by_ghul_name.add(ghul_name, null);
        si

        add_symbol(type: TYPE, ghul_name: string, symbol: Symbols.Scoped) is
            assert type? else "type is null";
            assert ghul_name? else "ghul name is null";
            assert symbol? else "symbol is null";

            assert !_symbols_by_ghul_name.contains_key(ghul_name);
            // assert !_symbols_by_dotnet_type.contains_key(type);

            if _symbols_by_dotnet_type.contains_key(type) then
                Std.error.write_line("add symbol: symbol already exists for type: " + type + " " + _symbols_by_dotnet_type[type]);
            fi            

            _symbols_by_dotnet_type.add(type, symbol);
            _symbols_by_ghul_name.add(ghul_name, symbol);
        si        
    si
si