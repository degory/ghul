namespace Semantic.DotNet is
    use IO.Std;

    use TYPE = System.Type2;
    use Collections.List;

    use Source.LOCATION;

    use Types.Type;
    
    class FUNCTION_TYPE_WRAPPER: GENERIC_TYPE_WRAPPER is
        is_function: bool => true;

        short_description: string => Types.FUNCTION.get_short_description(self);

        init(
            symbol_table: SYMBOL_TABLE,
            type_mapper: TYPE_MAPPER,
            dotnet_type: TYPE
        ) is
            super.init(
                symbol_table,
                type_mapper,
                dotnet_type
            );
        si

        get_argument_type_variance(index: int) -> Types.TYPE_VARIANCE is
            IO.Std.error.write_line("???? is this ever called: function check variance: " + self + " arg: " + index);

            if index == arguments.count - 1 then
                return Types.TYPE_VARIANCE.COVARIANT;
            else
                return Types.TYPE_VARIANCE.CONTRAVARIANT;
            fi
        si
        
        create(
            location: LOCATION,
            symbol: Symbols.Classy,
            arguments: Collections.List[Type]
        ) -> Types.GENERIC =>
            new Types.FUNCTION(location, symbol, arguments);
            
        to_string() -> string => Types.FUNCTION.get_short_description(self);
    si

    class HYBRID_FUNCTION_TYPE_WRAPPER: HYBRID_GENERIC_TYPE_WRAPPER is
        is_function: bool => true;

        short_description: string => Types.FUNCTION.get_short_description(self);
        
        init(
            symbol_table: SYMBOL_TABLE,
            dotnet_type: TYPE,
            arguments: List[Type]
        ) is
            super.init(
                symbol_table,
                dotnet_type,
                arguments
            );
        si

        init(
            symbol_table: SYMBOL_TABLE,
            dotnet_type: TYPE,
            argument: Type
        ) is
            super.init(
                symbol_table,
                dotnet_type,
                argument
            );
        si

        get_argument_type_variance(index: int) -> Types.TYPE_VARIANCE is
            if index == arguments.count - 1 then
                return Types.TYPE_VARIANCE.COVARIANT;
            else
                return Types.TYPE_VARIANCE.CONTRAVARIANT;
            fi
        si
        
        create(
            location: LOCATION,
            symbol: Symbols.Classy,
            arguments: Collections.List[Type]
        ) -> Types.GENERIC =>
            new Types.FUNCTION(location, symbol, arguments);

        to_string() -> string => Types.FUNCTION.get_short_description(self);
    si
si
