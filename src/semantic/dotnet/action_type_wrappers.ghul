namespace Semantic.DotNet is
    use IO.Std;

    use TYPE = System.Type2;
    use Collections.LIST;

    use Source.LOCATION;

    use Types.Type;

    class ACTION_0_TYPE_WRAPPER: TYPE_WRAPPER is
        is_function: bool => true;

        short_description: string  => "() -> void";

        init(
            symbol_table: SYMBOL_TABLE,
            dotnet_type: TYPE
        ) is
            super.init(
                symbol_table,
                dotnet_type
            );
        si

        to_string() -> string => short_description;
    si

    class ACTION_TYPE_WRAPPER: GENERIC_TYPE_WRAPPER is
        is_function: bool => true;

        short_description: string => Types.ACTION.get_short_description(self);

        init(
            symbol_table: SYMBOL_TABLE,
            type_mapper: TYPE_MAPPER,
            dotnet_type: TYPE
        ) is
            super.init(
                symbol_table,
                type_mapper,
                dotnet_type
            );
        si

        create(
            location: LOCATION,
            symbol: Symbols.Classy,
            arguments: Collections.LIST[Type]
        ) -> Types.GENERIC
        is
            let result = new Types.ACTION(location, symbol, arguments);
           
            return result;
        si

        to_string() -> string => Types.ACTION.get_short_description(self);
    si

    class HYBRID_ACTION_TYPE_WRAPPER: HYBRID_GENERIC_TYPE_WRAPPER is
        short_description: string => Types.ACTION.get_short_description(self);

        init(
            symbol_table: SYMBOL_TABLE,
            dotnet_type: TYPE,
            arguments: LIST[Type]
        ) is
            super.init(
                symbol_table,
                dotnet_type,
                arguments
            );
        si

        init(
            symbol_table: SYMBOL_TABLE,
            dotnet_type: TYPE,
            argument: Type
        ) is
            super.init(
                symbol_table,
                dotnet_type,
                argument
            );
        si

        to_string() -> string => Types.ACTION.get_short_description(self);
    si
si
