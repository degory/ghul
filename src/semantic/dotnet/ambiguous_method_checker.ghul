namespace Semantic.DotNet is
    use IO.Std;

    use Collections.Iterable;
    use Collections.Iterator;

    use Collections.SET;
    use Collections.LIST;
    use Collections.MAP;

    use Pair = Collections.KeyValuePair`2;

    use System.Reflection.MethodInfo;

    use Symbols.Symbol;
    use Symbols.Scope;
    use Symbols.Function;
    use Symbols.FUNCTION_GROUP;
    use Symbols.TYPE;

    use Types.Type;
    
    class AMBIGUOUS_METHOD_CHECKER is
        _logger: Logging.Logger;

        init(logger: Logging.Logger) is
            _logger = logger;
        si

        check(functions: Iterable[(function: Function, method_info: MethodInfo)]) is
            let map = new MAP[(name: string, number_of_arguments: int), LIST[(function: Function, method_info: MethodInfo)]]();

            for f_mi in functions do
                let list: LIST[(function: Function, method_info: MethodInfo)];

                let name = f_mi.function.name;
                let number_of_arguments = f_mi.function.argument_names.count;

                if !map.try_get_value((f_mi.method_info.name, f_mi.method_info.get_parameters().count), list ref) then
                    list = new LIST[(Function, MethodInfo)]();
                    map[(name, number_of_arguments)] = list;
                fi

                list.add(f_mi);
            od

            for kv in map do
                if kv.value.count == 0 then
                    continue;
                fi

                check(kv.key.name, kv.value | .map(f_mi => f_mi.function) .filter(f => f.is_instance /\ !f.is_internal), "ambiguous methods in reflected type");
                check(kv.key.name, kv.value | .map(f_mi => f_mi.function) .filter(f => !f.is_instance /\ !f.is_internal), "ambiguous methods in reflected type");
            od
        si
        
        check(name: string, functions: Iterable[Function], message: string) is
            let map = new METHOD_OVERRIDE_MAP(name);

            map.add(functions);

            for s in map do
                if s.count > 1 then
                    for function in s.iterable | .filter(s => !s.is_internal) do
                        _logger.error(function.location, message);
                    od
                else
                    IO.Std.error.write_line("OK: " + s.get_overrider());                      
                fi
            od
        si
    si
si
