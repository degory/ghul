namespace Semantic.DotNet is
    use TYPE = System.Type2;

    use System.Reflection.Assembly;
    use System.Reflection.ConstructorInfo;
    use System.Reflection.MethodInfo;
    use System.Reflection.FieldInfo;
    use System.Reflection.PropertyInfo;
    use System.Reflection.MemberInfo;
    use System.Reflection.ParameterInfo;

    use System.Reflection.BindingFlags;
    use System.Reflection.MemberTypes;

    use System.Reflection.GenericParameterAttributes;

    use Collections.List;
    use Collections.MutableList;
    use Collections.LIST;
    use Collections.SET;
    use Collections.MAP;

    use Types.Type;

    use Logging;
    
    class SYMBOL_FACTORY is
        _namespaces: NAMESPACES;
        _type_name_map: TYPE_NAME_MAP;
        _type_mapper: TYPE_MAPPER;
        _assembly_names: MAP[Assembly,string];

        _symbol_table: SYMBOL_TABLE;

        _referenced_assemblies: REFERENCED_ASSEMBLIES;

        _non_generic_get_enumerator: MethodInfo;

        _void_type: TYPE;
        _object_type: TYPE;
        _tuple_types: List[TYPE];

        _type_source: TypeSource;

        _ambiguous_method_checker: AMBIGUOUS_METHOD_CHECKER;

        init(
            namespaces: NAMESPACES,
            type_name_map: TYPE_NAME_MAP,
            type_mapper: TYPE_MAPPER,
            referenced_assemblies: REFERENCED_ASSEMBLIES,
            type_source: TypeSource,
            logger: Logging.Logger
        ) is
            _namespaces = namespaces;
            _type_name_map = type_name_map;
            _type_mapper = type_mapper;
            _assembly_names = MAP[Assembly,string]();
            _referenced_assemblies = referenced_assemblies;

            _type_source = type_source;

            _ambiguous_method_checker = AMBIGUOUS_METHOD_CHECKER(logger);

            _type_source.on_start(() -> void is start(); si);
        si

        start() is
            let mnt = _type_source.get_type("System.Collections.IEnumerator");
            _non_generic_get_enumerator = mnt.get_method("GetEnumerator");

            _void_type = _type_source.get_type("System.Void");
            _object_type = _type_source.get_type("System.Object");

            _tuple_types = _type_source.get_types([
                "System.ValueTuple`1",
                "System.ValueTuple`2",
                "System.ValueTuple`3",
                "System.ValueTuple`4",
                "System.ValueTuple`5",
                "System.ValueTuple`6",
                "System.ValueTuple`7"
            ]);

            // TODO handle more than 7-tuple types by
            // nesting them
        si

        set_symbol_table(symbol_table: SYMBOL_TABLE) is
            _symbol_table = symbol_table;
        si

        create_symbol(type_details: TYPE_DETAILS) -> Symbols.Scoped is
            try
                let dotnet_type = type_details.dotnet_type;

                if dotnet_type.is_class \/ dotnet_type.is_value_type \/ dotnet_type.is_interface \/ dotnet_type.is_enum then
                    return create_class(type_details);
                fi
            catch ex: System.Exception
                debug_always("create symbol failed: {type_details} exception: {ex}");

                throw ex;
            yrt
            
        si

        create_class(type_details: TYPE_DETAILS) -> Symbols.Scoped is
            let dotnet_type = type_details.dotnet_type;
            let ghul_type_name = type_details.ghul_type_name;
            let assembly_name = type_details.assembly_name;
            let il_name = type_details.il_name;

            let owner = EMPTY_SCOPE(type_details.ghul_namespace);

            let arguments = LIST[string]();

            if dotnet_type.is_generic_type /\ dotnet_type.contains_generic_parameters then
                let argument_types = dotnet_type.get_generic_arguments();

                for a in argument_types do
                    if a.is_generic_type_parameter then
                        arguments.add(a.name);
                    fi
                od
            fi

            let result: Symbols.Classy;

            if dotnet_type.is_enum then
                result = Symbols.ENUM_STRUCT(Source.LOCATION.reflected, Source.LOCATION.reflected, owner, ghul_type_name, true, owner);
                result.mark_overrides_resolved();
            elif dotnet_type.is_class then
                let result_class = Symbols.CLASS(Source.LOCATION.reflected, Source.LOCATION.reflected, owner, ghul_type_name, arguments, true, owner);

                if dotnet_type == _object_type then
                    result_class.mark_is_object();
                fi

                result = result_class;
                result.mark_overrides_resolved();
            elif dotnet_type.is_value_type then
                if dotnet_type == _void_type then
                    result = Symbols.VOID_STRUCT(Source.LOCATION.reflected, Source.LOCATION.reflected, owner, ghul_type_name, arguments, true, owner);
                    result.il_is_primitive_type = true;
                else
                    result = Symbols.STRUCT(Source.LOCATION.reflected, Source.LOCATION.reflected, owner, ghul_type_name, arguments, true, owner);                    
                    result.il_is_primitive_type = dotnet_type.is_primitive \/ dotnet_type == _void_type;
                fi

                result.mark_overrides_resolved();
            elif dotnet_type.is_interface then
                result = Symbols.TRAIT(Source.LOCATION.reflected, Source.LOCATION.reflected, owner, ghul_type_name, arguments, true, owner);
            fi

            _referenced_assemblies.add(type_details.assembly_name, type_details.version_number);

            result.il_assembly_name = assembly_name;

            if !il_name? then
                il_name = get_il_name(dotnet_type);
            fi

            result.il_name_override = il_name;
                                    
            return result;
        si

        add_ancestors(symbol: Symbols.Scoped, type: TYPE) is
            if !isa Symbols.Classy(symbol) then
                return;
            fi

            let result = cast Symbols.Classy(symbol);

            if type.base_type? then
                result.add_ancestor(_type_mapper.get_type(type.base_type));
            elif type.is_interface then
                result.add_ancestor(_type_mapper.get_type(_type_source.get_type("System.Object")));
            fi
            
            for i in type.get_interfaces() do
                result.add_ancestor(_type_mapper.get_type(i));
            od

            check_constraints_for_type(result, type);

            // FIXME: why is this needed if we've already marked overrides resolved?
            IoC.CONTAINER.instance.symbol_table.enter_scope(result);
            result.pull_down_super_symbols();
            IoC.CONTAINER.instance.symbol_table.leave_scope(result);
        si

        check_constraints_for_type(symbol: Symbols.Scoped, type: TYPE) is
            if 
                type.is_generic_type /\ 
                type.contains_generic_parameters /\
                type.get_generic_arguments() | 
                    .any(t => 
                        t.is_generic_type_parameter /\
                        !are_generic_parameter_constraints_safe(t)
                    )
            then
                symbol.is_unsafe_constraints = true;
            fi
        si

        check_constraints_for_method(owner: Symbols.Symbol, symbol: Symbols.Scoped, generic_arguments: Collections.Iterable[TYPE]) is
            if generic_arguments | .any(t => !are_generic_parameter_constraints_safe(t)) then
                symbol.is_unsafe_constraints = true;
            fi
        si

        mask_gpa(a: GenericParameterAttributes, b: GenericParameterAttributes) -> GenericParameterAttributes =>
            cast GenericParameterAttributes(cast int(a) âˆ© cast int(b));

        are_generic_parameter_constraints_safe(t: TYPE) -> bool is
            let constraint_attributes = mask_gpa(t.generic_parameter_attributes, GenericParameterAttributes.SPECIAL_CONSTRAINT_MASK);

            if constraint_attributes != GenericParameterAttributes.NONE then
                // we can't handle this constraint so the type or method is unsafe
                return false;
            fi

            return t.get_generic_parameter_constraints().count == 0;
        si     
        
        add_members(result: Symbols.Scoped, type: TYPE) is
            let properties = MAP[System.Reflection.MethodInfo,PROPERTY_DETAILS]();
            let indexers = SET[System.Reflection.MethodInfo]();
            let methods = LIST[(symbol: Symbols.Function, method_info: MethodInfo)]();

            for p in type.get_properties() do
                add_property(result, type, properties, indexers, p);
            od

            for t in type.get_members(cast BindingFlags(64 + 4 + 32 + 16 + 8)) do
                add_member(result, type, properties, indexers, methods, t);                    
            od

            if methods.count > 0 then
                _ambiguous_method_checker.check(result, methods);

                for m in methods do
                    result.add_member(m.symbol);
                od
            fi
        si

        add_member(
            owner: Symbols.Scoped, 
            type: TYPE, 
            properties: MAP[System.Reflection.MethodInfo,PROPERTY_DETAILS], 
            indexers: SET[System.Reflection.MethodInfo],
            methods: LIST[(symbol: Symbols.Function, method_info: MethodInfo)],
            member: MemberInfo
        ) -> Symbols.Symbol
        is
            let member_type = member.member_type;

            if member_type == MemberTypes.CONSTRUCTOR then
                add_constructor(owner, cast ConstructorInfo(member));                
            elif member_type == MemberTypes.FIELD then
                add_field(owner, type, cast FieldInfo(member));
            elif member_type == MemberTypes.METHOD then
                add_method(owner, type, properties, indexers, methods, cast MethodInfo(member));
            fi            
        si

        add_constructor(owner: Symbols.Scoped, method: ConstructorInfo) is
            let result: Symbols.Function;
            let location = Source.LOCATION.reflected;

            if !method.is_public then
                return;
            fi

            if method.is_static then
                result = Symbols.STATIC_METHOD(location, location, owner, "init", owner);
            elif owner.is_value_type then                
                result = Symbols.STRUCT_METHOD(location, location, owner, "init", owner);
            elif method.is_abstract then
                result = Symbols.ABSTRACT_METHOD(location, location, owner, "init", owner);
            else
                result = Symbols.INSTANCE_METHOD(location, location, owner, "init", owner);
            fi

            result.il_name_override = method.name;

            let argument_names = LIST[string]();
            let argument_types = LIST[Type]();
 
            for a in method.get_parameters() do
                argument_names.add(a.name);
                argument_types.add(_type_mapper.get_type(a.parameter_type));
            od

            result.argument_names = argument_names;
            result.arguments = argument_types;

            result.return_type = _type_mapper.get_type(_void_type);
            
            owner.add_member(result);
        si

        add_field(owner: Symbols.Scoped, type: TYPE, `field: FieldInfo) is
            if !`field.is_public then
                return;
            fi

            if type.is_enum /\ !`field.is_special_name then
                let enum_member = 
                    Symbols.ENUM_STRUCT_MEMBER(
                        Source.LOCATION.reflected, 
                        cast Symbols.ENUM_STRUCT(owner),
                        _type_name_map.get_constant_name(owner.qualified_name, `field.name, false),
                        `field.get_raw_constant_value().to_string()
                    );
                    
                owner.add_member(enum_member);

                return;
            fi
            
            let result: Symbols.Field;
            let location = Source.LOCATION.reflected;

            let field_name = `field.name;

            let name: string;

            if field_name.length == 5 /\ `field.name.starts_with("Item") /\ type.is_generic_type then
                let unspecialized_type = type.get_generic_type_definition();

                let is_tuple = false;

                for t in _tuple_types do
                    if unspecialized_type == t then
                        is_tuple = true;
                        break;
                    fi
                od
                
                if is_tuple then
                    name = "`{(cast int(field_name.get_chars(field_name.length-1)) - 49)}"; 
                fi
            fi

            if !name? then
                name = _type_name_map.get_member_name(owner.qualified_name, `field.name, false, false);
            fi

            if `field.is_static then
                result = Symbols.STATIC_FIELD(location, owner, name);
            elif type.is_value_type then
                result = Symbols.STRUCT_FIELD(location, owner, name);
            else 
                result = Symbols.INSTANCE_FIELD(location, owner, name);
            fi

            result.il_name_override = `field.name;

            result.set_type(_type_mapper.get_type(`field.field_type));

            owner.add_member(result);
        si

        add_property(
            owner: Symbols.Scoped, 
            type: TYPE, 
            properties: MAP[System.Reflection.MethodInfo,PROPERTY_DETAILS],
            indexers: SET[System.Reflection.MethodInfo],
            property: PropertyInfo
        ) is
            let index_parameters = property.get_index_parameters();

            if index_parameters? /\ index_parameters.count > 0 then
                if property.get_get_method()? then
                    indexers.add(property.get_get_method());
                fi

                if property.get_set_method()? then
                    indexers.add(property.get_set_method());
                fi

                return;
            fi

            if property.name =~ "Current" then
                if property.declaring_type == _type_source.get_type("System.Collections.IEnumerator") then
                    return;
                fi
            fi            

            let result: Symbols.Property;
            let name = _type_name_map.get_member_name(owner.qualified_name, property.name, false, property.is_special_name);

            let getter = property.get_method;
            let setter = property.set_method;

            if setter? /\ !getter? then
                return;
            fi
            
            let is_static = false;

            if getter? /\ getter.is_static then
                is_static = true;
            elif setter? /\ setter.is_static then
                is_static = true;
            fi

            if is_static then
                result = Symbols.STATIC_PROPERTY(Source.LOCATION.reflected, Source.LOCATION.reflected, owner, name, setter?, false);
            else
                result = Symbols.INSTANCE_PROPERTY(Source.LOCATION.reflected, Source.LOCATION.reflected, owner, name, setter?, false);
            fi

            result.set_type(_type_mapper.get_type(property.property_type));
            result.il_name_override = property.name;

            owner.add_member(result);

            let property_details = PROPERTY_DETAILS(result, property.get_get_method(), property.get_set_method());

            if getter? then
                properties[getter] = property_details;
            fi

            if setter? then
                properties[setter] = property_details;
            fi
        si

        add_method(
            owner: Symbols.Scoped, 
            type: TYPE, 
            properties: MAP[System.Reflection.MethodInfo,PROPERTY_DETAILS], 
            indexers: SET[System.Reflection.MethodInfo],
            methods: LIST[(symbol: Symbols.Function, method_info: MethodInfo)],
            method: MethodInfo
        ) is
            if method.is_private then
                return;
            fi

            let result: Symbols.Function;
            let location = Source.LOCATION.reflected;

            let name: string;

            let property_details: PROPERTY_DETAILS;

            if properties.try_get_value(method, property_details ref) then
                name = _type_name_map.get_member_name(owner.qualified_name, method.name, method.is_private, true);
            elif method.name =~ "get_Item" \/ method.name =~ "set_Item" then
                name = method.name;
            elif method.name =~ "get_Current" /\ method.declaring_type == _type_source.get_type("System.Collections.IEnumerator") then
                return;
            elif method.name =~ "GetEnumerator" then
                if method.declaring_type == _type_source.get_type("System.Collections.IEnumerable") then
                    return;
                fi

                name = "$get_iterator";

                let iterator_property = Symbols.INSTANCE_PROPERTY(Source.LOCATION.reflected, Source.LOCATION.reflected, owner, "iterator", false, false);
                iterator_property.set_type(_type_mapper.get_type(method.return_type));

                owner.add_member(iterator_property);

                property_details = PROPERTY_DETAILS(iterator_property, method, null);
            else
                name = _type_name_map.get_member_name(owner.qualified_name, method.name, method.is_private, method.is_special_name /\ !indexers.contains(method));
            fi

            let declaring_symbol: Symbols.Symbol = owner;

            if method.declaring_type != type then
                let dt = _type_mapper.get_type(method.declaring_type);

                declaring_symbol = dt.symbol;
            fi

            if method.is_static then
                result = Symbols.STATIC_METHOD(location, location, declaring_symbol, name, owner);
            elif method.declaring_type.is_value_type then
                result = Symbols.STRUCT_METHOD(location, location, declaring_symbol, name, owner);
            elif method.is_abstract then
                result = Symbols.ABSTRACT_METHOD(location, location, declaring_symbol, name, owner);
            elif method.is_virtual then
                result = Symbols.INSTANCE_METHOD(location, location, declaring_symbol, name, owner);
            else
                result = Symbols.INSTANCE_METHOD(location, location, declaring_symbol, name, owner);
            fi

            if method.is_generic_method then
                result.is_generic = true;

                let generic_argument_names = LIST[string]();
                let generic_arguments = LIST[Type]();

                let ga = method.get_generic_arguments();

                for p in ga do
                    generic_argument_names.add(p.name);
                    generic_arguments.add(_type_mapper.get_type(p));
                od

                check_constraints_for_method(owner, result, ga);
                
                result.generic_argument_names = generic_argument_names;
                result.generic_arguments = generic_arguments;
            fi
            
            result.il_name_override = method.name;
            
            let argument_names = LIST[string]();
            let argument_types = LIST[Type]();

            for a in method.get_parameters() do
                argument_names.add(a.name);
                argument_types.add(_type_mapper.get_type(a.parameter_type));
            od

            result.argument_names = argument_names;
            result.arguments = argument_types;

            result.return_type = _type_mapper.get_type(method.return_type);

            if property_details? then
                let accessor_method_name = method.name;

                if method.equals(property_details.dotnet_get_method) then
                    property_details.ghul_property.read_function = result;
                    property_details.ghul_property.read_function_il_name_override = method.name;
                elif method.equals(property_details.dotnet_set_method) then
                    property_details.ghul_property.assign_function = result;
                    property_details.ghul_property.assign_function_il_name_override = method.name;
                fi
            fi
            
            methods.add((result, method));
        si

        get_assembly_name(type: TYPE) -> string is
            let assembly = type.assembly;

            let result: string;

            if _assembly_names.try_get_value(assembly, result ref) then
                return result;
            fi

            result = assembly.get_name().name;

            _assembly_names.add(assembly, result);

            return result;
        si
        
        get_il_name(type: TYPE) -> string is
            let buffer = System.Text.StringBuilder();

            assert type? else "get il name type is null";
            assert type.full_name? else "get il name type has no full name: {type}";

            let seen_any = false;
            for name in type.full_name.split(['.']) do
                if seen_any then
                    buffer.append('.');
                fi

                if name.contains('+') then

                let inner_seen_any = false;
                for inner_name in name.split(['+']) do
                    if inner_seen_any then
                        buffer.append('/');
                    fi
                    
                    buffer
                        .append('\'')
                        .append(inner_name)
                        .append('\'');

                    inner_seen_any = true;
                od

                else
                    buffer
                        .append('\'')
                        .append(name)
                        .append('\'');
                fi

                seen_any = true;
            od
            
            return buffer.to_string();
        si
    si
si