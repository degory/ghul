namespace Semantic is
    use System;
    
    use Logging;
    use Source;

    use Syntax.Tree;

    // This class manages entering and leaving namespace scopes: it merges all lexical
    // namespace blocks that reference the same namespace into a single aggregated
    // namespace symbol, so that symbols defined within one lexical namespace are visible
    // across all references to that namespace

    class NAMESPACES  is
        _logger: Logger;
        _symbol_table: SYMBOL_TABLE;
        _namespaces: Collections.MAP[String,Symbol.NAMESPACE];
        _prefixes: Collections.STACK[String];
        current_prefix: String => _prefixes.peek();

        get_qualified_name(name: String) -> String is
            return current_prefix + '.' + name;
        si

        init(logger: Logger, symbol_table: SYMBOL_TABLE) is
            _logger = logger;
            _symbol_table = symbol_table;

            clear();
        si

        dump_counts() is
            System.Console.error.write_line("namespaces: " + _namespaces.count);
            System.Console.error.write_line("prefixes: " + _prefixes.count);
        si        

        clear() is
            _namespaces = new Collections.MAP[String,Symbol.NAMESPACE](65521);
            _prefixes = new Collections.STACK[String]();

            _prefixes.push("");
        si

        mark_namespace_stack() -> int is
            return _prefixes.count;
        si

        release_namepace_stack(mark: int) is
            assert mark <= _prefixes.count;

            while _prefixes.count > mark do
                _prefixes.pop();
            od
        si
        
        declare_and_enter_namespace(
            location: LOCATION, 
            name: String, 
            symbol_definition_listener: Semantic.SymbolDefinitionListener
        ) -> Symbol.NAMESPACE
        is
            var qualified_name = get_qualified_name(name);
            var ns = find_or_add_namespace(name, qualified_name);

            var existing = _symbol_table.current_scope.find_direct(name);

            if existing == null then
                _symbol_table.current_namespace_context.declare_namespace(location, name, ns, symbol_definition_listener);
            else
                if existing != ns then
                    _logger.error(location, "redefining symbol " + name + " as a namespace, originally defined at " + existing.location);
                    _logger.error(existing.location, "symbol " + name + " is redefined as namespace at " + location);
                fi
            fi

            _prefixes.push(qualified_name);

            return ns;
        si

        pop_all_namespaces() is
            // leave global namespace on top
            while _prefixes.count > 1 do
                _prefixes.pop();
            od            
        si

        enter_namespace(location: LOCATION, name: String) -> Symbol.NAMESPACE is
            var qualified_name = get_qualified_name(name);
            var ns = find_namespace(qualified_name);

            assert ns? else "No pre-existing aggregate namespace found";

            _prefixes.push(qualified_name);

            return ns;
        si

        leave_namespace(location: LOCATION, name: String) is
            var ns = find_namespace(current_prefix);

            assert ns? else "could not find aggregate namespace";
            _prefixes.pop();
        si

        find_or_add_namespace(name: String, qualified_name: String) -> Symbol.NAMESPACE is
            if _namespaces.contains_key(qualified_name) then
                return _namespaces[qualified_name];
            else

                let result = new Symbol.NAMESPACE(LOCATION.dummy, name, _symbol_table.current_scope, qualified_name);
                _namespaces[qualified_name] = result;
                return result;
            fi
        si

        find_namespace(qualified_name: String) -> Symbol.NAMESPACE is
            assert _namespaces.contains_key(qualified_name) else "aggregate namespace should already exist";

            return _namespaces[qualified_name];
        si
    si
si
