namespace Semantic is
    use IO.Std;
        
    use Logging;
    use Source;

    use Syntax.Trees;

    // This class manages entering and leaving namespace scopes: it merges all lexical
    // namespace blocks that reference the same namespace into a single aggregated
    // namespace symbol, so that symbols defined within any lexical namespace are visible
    // across all references to that namespace

    class NAMESPACES: Collections.Iterable[Symbols.NAMESPACE] is
        _logger: Logger;
        _symbol_table: SYMBOL_TABLE;
        _namespaces: Collections.MAP[string,Symbols.NAMESPACE];
        _prefixes: Collections.STACK[string];
        _current_prefix: string => _prefixes.peek();

        iterator: Collections.Iterator[Symbols.NAMESPACE] => _namespaces.values.iterator;

        get_qualified_name(name: string) -> string is
            return _current_prefix + '.' + name;
        si

        init(logger: Logger, symbol_table: SYMBOL_TABLE) is
            _logger = logger;
            _symbol_table = symbol_table;

            clear();
        si

        dump_counts() is
            Std.error.write_line("namespaces: {_namespaces.count}");
            Std.error.write_line("prefixes: {_prefixes.count}");
        si        

        clear() is
            _namespaces = new Collections.MAP[string,Symbols.NAMESPACE](65521);
            _prefixes = new Collections.STACK[string]();

            _prefixes.push("");
        si

        mark_namespace_stack() -> int is
            return _prefixes.count;
        si

        release_namepace_stack(mark: int) is
            assert mark <= _prefixes.count;

            while _prefixes.count > mark do
                _prefixes.pop();
            od
        si
        
        find_root_matches(results: Collections.MutableMap[string,Symbols.Symbol]) is
            for ns in _namespaces do
                let parts = ns.key.split(['.']);

                if parts.count == 2 then
                    let name = parts[1];
 
                    if !results.contains_key(name) then
                        results.add(name, ns.value);
                    fi                    
                fi                
            od
        si

        find_namespace_matches(namespace_name: string, results: Collections.MutableMap[string,Symbols.Symbol]) is
            let prefix = ".{namespace_name}.";
            
            for ns in _namespaces do
                if ns.key.starts_with(prefix) then
                    let suffix = ns.key.substring(prefix.length);

                    if !suffix.contains('.') /\ !results.contains_key(suffix) then
                        results.add(suffix, ns.value);
                    fi                    
                fi                
            od
        si
        
        declare_and_enter_namespace(
            location: LOCATION, 
            name: string, 
            symbol_definition_listener: Semantic.SymbolDefinitionListener
        ) -> Symbols.NAMESPACE
        is
            let qualified_name = get_qualified_name(name);
            let ns = find_or_add_namespace(name, qualified_name);
            let existing = _symbol_table.current_scope.find_direct(name);

            if existing == null then
                assert name?;
                assert ns?;

                _symbol_table.current_namespace_context.declare_namespace(location, name, ns, symbol_definition_listener);
            elif existing != ns then
                _logger.error(location, "redefining symbol {name} as a namespace, originally defined at {existing.location}");
                _logger.error(existing.location, "symbol {name} is redefined as namespace at {location}");
            fi

            _prefixes.push(qualified_name);                

            return ns;
        si


        pop_all_namespaces() is
            // leave global namespace on top
            while _prefixes.count > 1 do
                _prefixes.pop();
            od            
        si

        enter_namespace(location: LOCATION, name: string) -> Symbols.NAMESPACE is
            let qualified_name = get_qualified_name(name);
            let ns = find_namespace(qualified_name);

            assert ns? else "No pre-existing aggregate namespace found";

            _prefixes.push(qualified_name);

            return ns;
        si

        leave_namespace(location: LOCATION, name: string) is
            let ns = find_namespace(_current_prefix);

            assert ns? else "could not find aggregate namespace";
            
            _prefixes.pop();
        si

        find_or_add_namespace(name: string, qualified_name: string) -> Symbols.NAMESPACE is
            assert name? else "namespace name is null";
            assert qualified_name? else "namespace qualified name is null";

            if _namespaces.contains_key(qualified_name) then
                return _namespaces[qualified_name];
            else

                let result = new Symbols.NAMESPACE(LOCATION.internal, name, _symbol_table.current_scope, qualified_name);
                _namespaces[qualified_name] = result;
                return result;
            fi
        si

        find_namespace(qualified_name: string) -> Symbols.NAMESPACE is
            assert _namespaces.contains_key(qualified_name) else "aggregate namespace {qualified_name} should already exist";

            return _namespaces[qualified_name];
        si
    si
si
