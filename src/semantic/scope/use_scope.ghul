namespace Semantic is
    use System;
    use Generic;

    use IoC;
    use Logging;
    use Source;

    class USE_SCOPE: Object, Scope  is
        _enclosing: Scope;
        _used_symbols: SYMBOL_MAP;
        _used_scopes: Collections.MutableList[Scope];

        type: Type.BASE => Type.NONE.instance;

        unspecialized_symbol: Symbol.BASE => null;

        name: String => "[use]";
        qualified_name: String => _enclosing.qualified_name + "." + name; 

        // FIXME:
        symbols: Collections.Iterable[Symbol.BASE] => new Collections.LIST[Symbol.BASE]();

        is_trait: bool => false;

        init(enclosing: Scope) is
            _enclosing = enclosing;
            _used_symbols = new SYMBOL_MAP();
            _used_scopes = new Collections.LIST[Scope]();
        si

        qualify(name: String) -> String => _enclosing.qualify(name);

        _find_direct(name: String) -> Symbol.BASE is
            var result = _used_symbols[name];

            if result? then
                return result;
            fi

            for scope in _used_scopes do
                result = scope.find_direct(name);
                if result? then
                    return result;
                fi
            od

            return null;
        si

        find_direct(name: String) -> Symbol.BASE is
            var result = _find_direct(name);

            if result == null && _enclosing? then
                result = _enclosing.find_direct(name);
            fi

            return result;
        si

        find_direct_matches(prefix: String, matches: Collections.MAP[String,Symbol.BASE]) is
            _used_symbols.find_matches(prefix, matches);
        
            for scope in _used_scopes do
                scope.find_direct_matches(prefix, matches);
            od
        si        

        find_member(name: String) -> Symbol.BASE is
            throw new NotImplementedException("cannot search for member " + name + " in use scope");
        si

        find_member_matches(prefix: String, results: Collections.MAP[String,Symbol.BASE]) is
            throw new NotImplementedException("cannot search for members matching " + prefix + " in use scope");
        si        

        find_enclosing(name: String) -> Symbol.BASE is
            var result = _find_direct(name);

            if result == null && _enclosing? then
                result = _enclosing.find_enclosing(name);
            fi

            return result;
        si

        find_enclosing_matches(prefix: String, matches: Collections.MAP[String,Symbol.BASE]) is
            _used_symbols.find_matches(prefix, matches);

            for scope in _used_scopes do
                scope.find_enclosing_matches(prefix, matches);
            od
        si        

        add_scope(scope: Scope) is
            _used_scopes.add(scope);
        si

        add_symbol(symbol: Symbol.BASE) is
            _used_symbols[symbol.name] = symbol;
        si

        to_string() -> String =>
            Shim.OBJ.type_name(self) + _used_symbols + "\n" + _used_scopes;

        @IF.legacy()
        to_string() -> String => toString();
    si
si