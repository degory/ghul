namespace Semantic is
    use System.NotImplementedException;
    
    use IoC;
    use Logging;
    use Source;

    use Types.Type;
    use Symbols.Symbol;

    class BLOCK_SCOPE: Scope, DeclarationContext  is
        _enclosing: Scope;
        _symbols: Semantic.SYMBOL_STORE;

        name: string => "[block]";
        qualified_name: string => _enclosing.qualified_name + ".[block]";

        symbols: Collections.Iterable[Symbols.Symbol] => _symbols.values;

        type: Type => Types.NONE.instance;

        unspecialized_symbol: Symbols.Symbol => null;

        is_trait: bool => false;
        is_capture_context: bool => false;
        is_closure: bool => false;
        is_namespace: bool => false;
        is_classy: bool => false;

        init() is
            init(null);
        si

        init(enclosing: Scope) is
            _enclosing = enclosing;
            _symbols = new Semantic.SYMBOL_STORE();
        si

        qualify(name: string) -> string => _enclosing.qualify(name);

        find_direct(name: string) -> Symbols.Symbol =>
            _symbols[name];

        find_direct_matches(prefix: string, matches: Collections.MutableMap[string,Semantic.Symbols.Symbol]) is
            _symbols.find_matches(prefix, matches);
        si            

        find_member(name: string) -> Symbols.Symbol is
            throw new NotImplementedException("cannot search for member {name} in block scope");
        si

        find_member_matches(prefix: string, matches: Collections.MutableMap[string,Semantic.Symbols.Symbol]) is
            throw new NotImplementedException("cannot search for member matches {prefix} in block scope");
        si        

        find_enclosing(name: string) -> Symbols.Symbol is
            let result = find_direct(name);

            if result? then
                return result;
            elif _enclosing? then
                return _enclosing.find_enclosing(name);
            else
                return null;
            fi
        si

        find_enclosing_matches(prefix: string, matches: Collections.MutableMap[string,Semantic.Symbols.Symbol]) is
            find_direct_matches(prefix, matches);

            _enclosing.find_enclosing_matches(prefix, matches);
        si

        declare_undefined(location: LOCATION, kind: string, name: string) -> Semantic.Symbols.Symbol is
            CONTAINER.instance.logger.error(location, "cannot declare {kind} here");

            return new Symbols.UNDEFINED(location, self, name);
        si

        declare_stable(symbol: Symbols.Symbol) is
            declare_undefined(Source.LOCATION.internal, "internal", symbol.name);
        si
        
        declare_class(location: LOCATION, span: LOCATION, name: string, arguments: Collections.List[string], is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "class", name);

        declare_trait(location: LOCATION, span: LOCATION, name: string, arguments: Collections.List[string], is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "trait", name);

        declare_struct(location: LOCATION, span: LOCATION, name: string, arguments: Collections.List[string], is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "struct", name);   
            
        declare_union(location: LOCATION, span: LOCATION, name: string, arguments: Collections.List[string], is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "union", name);

        declare_variant(location: LOCATION, span: LOCATION, name: string, is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "variant", name);

        declare_type(location: LOCATION, name: string, index: int, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "type", name);

        declare_enum(location: LOCATION, span: LOCATION, name: string, is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "enum", name);

        declare_enum_member(location: LOCATION, name: string, value: string, symbol_definition_listener: SymbolDefinitionListener) is
            declare_undefined(location, "enum member", name);
        si

        declare_innate(location: LOCATION, name: string, innate_name: string, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "innate", name);

        declare_function(location: LOCATION, span: LOCATION, name: string, is_static: bool, is_private: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "function", name);

        declare_namespace(location: LOCATION, name: string, `namespace: Symbols.NAMESPACE, symbol_definition_listener: SymbolDefinitionListener) is
            declare_undefined(location, "namespace", name);
        si

        declare_label(location: LOCATION, name: string, symbol_definition_listener: SymbolDefinitionListener) is
            let label = new Symbols.LABEL(location, self, name);
            declare(location, label, symbol_definition_listener);
        si

        declare_variable(location: LOCATION, name: string, is_static: bool, symbol_definition_listener: SymbolDefinitionListener) -> Symbol is
            // FIXME: IoC
            let owner = IoC.CONTAINER.instance.symbol_table.current_capture_context;

            let variable = new Symbols.LOCAL_VARIABLE(location, owner, name);
            declare(location, variable, symbol_definition_listener);
            return variable;
        si

        declare_closure(location: LOCATION, name: string, owner: Scope, enclosing: Scope, is_recursive: bool, symbol_definition_listener: SymbolDefinitionListener) -> Symbol is
            return declare_undefined(location, "anonymous function", name);
        si        

        declare_property(location: LOCATION, span: LOCATION, name: string, is_static: bool, is_private: bool, is_assignable: bool, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            declare_undefined(location, "property", name);

        declare(location: LOCATION, symbol: Symbols.Symbol, symbol_definition_listener: SymbolDefinitionListener) is
            let name = symbol.name;
            let existing = find_direct(symbol.name);
            
            if existing? then
                CONTAINER.instance.logger.error(location, "redefining symbol {symbol.name} originally defined at {existing.location}");
                CONTAINER.instance.logger.error(existing.location, "symbol {symbol.name} is redefined at {location}");
            fi

            if symbol_definition_listener? then
                symbol_definition_listener.add_symbol_definition(location, symbol);
            fi
            
            _symbols[name] = symbol;
        si

        gen_dotted_name(buffer: System.Text.StringBuilder, want_trailing_dot: bool) is            
        si

        gen_type_spec(buffer: System.Text.StringBuilder) is
            throw new System.NotImplementedException("not implemented by {get_type()}");
        si
        
        gen_class_name(buffer: System.Text.StringBuilder) is
            throw new System.NotImplementedException("not implemented by {get_type()}");
        si
        
        gen_reference(buffer: System.Text.StringBuilder) is
            throw new System.NotImplementedException("not implemented by {get_type()}");
        si

        gen_type(buffer: System.Text.StringBuilder) is
            throw new System.NotImplementedException("not implemented by {get_type()}");
        si

        to_string() -> string =>
            "{get_type()} {_symbols}";
    si
si