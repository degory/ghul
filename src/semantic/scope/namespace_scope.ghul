namespace Semantic is
    use IO.Std;

    use IoC;
    use Logging;
    use Source;

    use Semantic.Symbols.NAMESPACE;

    use Types.Type;
    use Symbols.Symbol;

    /*
        a namespace block with associated uses of other namespaces + symbols
        declaration of symbols is forwarded to the aggregate namespace symbol
        symbol search needs to be done in a specific order:
          1) symbols declared directly within the namespace
          2) symbols imported into this namespace block by uses
          3) symbols declared directly in namespaces imported into this namespace block by uses
          4) symbols declared in aggregate namespaces that enclose this one
    */

    class NAMESPACE_SCOPE: Scope, NamespaceContext, DeclarationContext, ClosureContext is
        _namespace: Symbols.NAMESPACE;

        _symbols: Collections.MAP[string,Symbol];
        _used_symbols: Collections.MAP[string,Symbol];
        _used_namespaces: Collections.LIST[Symbols.NAMESPACE];
        _closures: Collections.SET[Symbols.Closure];

        type: Type => Types.NONE.instance;

        unspecialized_symbol: Symbol => null;

        name: string => _namespace.name;
        qualified_name: string => _namespace.qualified_name;
        symbols: Collections.Iterable[Symbol] => _namespace.symbols;

        is_trait: bool => false;
        is_capture_context: bool => true;
        is_instance_context: bool => false;
        is_closure: bool => false;
        is_namespace: bool => true;
        is_classy: bool => false;

        init(`namespace: Symbols.NAMESPACE) is
            _namespace = `namespace;
            _symbols = new Collections.MAP[string,Symbol]();
            _used_symbols = new Collections.MAP[string,Symbol]();
            _used_namespaces = new Collections.LIST[Symbols.NAMESPACE]();
        si

        add_closure(closure: Symbols.Closure) is
            if !_closures? then
                _closures = new Collections.SET[Symbols.Closure]();
            fi

            if !_closures.contains(closure) then
                _closures.add(closure);                
            fi
        si

        get_closures() -> Collections.Iterable[Symbols.Closure] => _closures;

        qualify(name: string) -> string => _namespace.qualify(name);

        find_direct(name: string) -> Symbol => _namespace.find_direct(name);

        find_direct_matches(prefix: string, matches: Collections.MutableMap[string,Symbol]) is
            _namespace.find_direct_matches(prefix, matches);
        si        

        find_member_matches(prefix: string, results: Collections.MutableMap[string,Symbol]) is
            _namespace.find_member_matches(prefix, results);
        si        

        cache_result(search: NAMESPACE_SEARCH) -> Symbol is
            let result = search.get_result();

            if result? then
                _symbols[search.name] = result;
            fi

            return result;
        si

        find_member(name: string) -> Symbol is
            return find_enclosing(name);            
        si
        
        find_enclosing(name: string) -> Symbol is
            let ns_location = _namespace.location;

            if _symbols.contains_key(name) then
                return _symbols[name];
            fi

            let search = new NAMESPACE_SEARCH(_namespace, name);

            let symbol = find_direct(name);
            
            if search.add(ns_location, symbol, false) then    
                return cache_result(search);
            fi

            if _used_symbols.contains_key(name) then
                symbol = _used_symbols[name];
                
                if search.add(ns_location, symbol, true) then
                    return cache_result(search);
                fi                    
            fi

            for ns in _used_namespaces do
                symbol = ns.find_direct(name);
                
                if search.add(ns_location, symbol, false) then    
                    return cache_result(search);                    
                fi
            od

            if _namespace.enclosing_scope? then
                symbol = _namespace.enclosing_scope.find_enclosing(name);

                if search.add(ns_location, symbol, false) then
                    
                    return cache_result(search);
                fi                    
            fi

            return cache_result(search);
        si

        find_enclosing_matches(prefix: string, matches: Collections.MutableMap[string,Symbol]) is
            _namespace.find_enclosing_matches(prefix, matches);

            for n in _used_namespaces do
                n.find_member_matches(prefix, matches);
            od

            for s in _used_symbols do
                Semantic.SYMBOL_STORE.add_match(s.key, s.value, matches);
            od
        si
        
        declare_stable(symbol: Symbol) is
            _namespace.declare_stable(symbol);
        si

        declare_class(location: LOCATION, span: LOCATION, name: string, arguments: Collections.List[string], is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            _namespace.declare_class(location, span, name, arguments, is_stub, enclosing, symbol_definition_listener);
        
        declare_trait(location: LOCATION, span: LOCATION, name: string, arguments: Collections.List[string], is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            _namespace.declare_trait(location, span, name, arguments, is_stub, enclosing, symbol_definition_listener);
        
        declare_struct(location: LOCATION, span: LOCATION, name: string, arguments: Collections.List[string], is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            _namespace.declare_struct(location, span, name, arguments, is_stub, enclosing, symbol_definition_listener);

        declare_union(location: LOCATION, span: LOCATION, name: string, arguments: Collections.List[string], is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            _namespace.declare_union(location, span, name, arguments, is_stub, enclosing, symbol_definition_listener);

        declare_variant(location: LOCATION, span: LOCATION, name: string, is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            _namespace.declare_variant(location, span, name, is_stub, enclosing, symbol_definition_listener);
        
        declare_type(location: LOCATION, name: string, index: int, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            _namespace.declare_type(location, name, index, symbol_definition_listener);

        declare_enum(location: LOCATION, span: LOCATION, name: string, is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            _namespace.declare_enum(location, span, name, is_stub, enclosing, symbol_definition_listener);
        
        declare_enum_member(location: LOCATION, name: string, value: string, symbol_definition_listener: SymbolDefinitionListener) is
            _namespace.declare_enum_member(location, name, value, symbol_definition_listener);           
        si
        
        declare_closure(location: LOCATION, name: string, owner: Scope, enclosing: Scope, is_recursive: bool, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            _namespace.declare_closure(location, name, owner, enclosing, is_recursive, symbol_definition_listener);

        declare_innate(location: LOCATION, name: string, innate_name: string, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            _namespace.declare_innate(location, name, innate_name, enclosing, symbol_definition_listener);

        declare_function(location: LOCATION, span: LOCATION, name: string, is_static: bool, is_private: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            _namespace.declare_function(location, span, name, is_static, is_private, enclosing, symbol_definition_listener);

        declare_variable(location: LOCATION, name: string, is_static: bool, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            _namespace.declare_variable(location, name, is_static, symbol_definition_listener);           
        
        declare_property(location: LOCATION, span: LOCATION, name: string, is_static: bool, is_private: bool, is_assignable: bool, symbol_definition_listener: SymbolDefinitionListener) -> Symbol =>
            _namespace.declare_property(location, span, name, is_static, is_private, is_assignable, symbol_definition_listener);

        declare_label(location: LOCATION, name: string, symbol_definition_listener: SymbolDefinitionListener) is
            _namespace.declare_label(location, name, symbol_definition_listener);
        si
        
        declare_namespace(location: LOCATION, name: string, `namespace: Symbols.NAMESPACE, symbol_definition_listener: SymbolDefinitionListener) is
            _namespace.declare_namespace(location, name, `namespace, symbol_definition_listener);
        si

        add(`namespace: Symbols.NAMESPACE) is
            _used_namespaces.add(`namespace);
        si

        add(name: string, symbol: Symbol) is
            _used_symbols[name] = symbol;
        si

        contains_used_symbol(name: string) -> bool => _used_symbols.contains_key(name);
        
        get_used_symbol(name: string) -> Symbol is
            let result: Symbol;

            _used_symbols.try_get_value(name, result ref);

            return result;
        si

        get_dot() -> string => ".";
        
        gen_dotted_name(buffer: System.Text.StringBuilder, qualifying: Scope) is
            _namespace.gen_dotted_name(buffer, qualifying);
        si
        
        gen_type_spec(buffer: System.Text.StringBuilder) is
            throw new System.NotImplementedException("not implemented by {get_type()}");
        si

        gen_class_name(buffer: System.Text.StringBuilder) is
            throw new System.NotImplementedException("not implemented by {get_type()}");
        si

        gen_reference(buffer: System.Text.StringBuilder) is
            _namespace.gen_reference(buffer);
        si

        gen_type(buffer: System.Text.StringBuilder) is
            throw new System.NotImplementedException("not implemented by {get_type()}");
        si

        to_string() -> string => "namespace scope for: {_namespace.name}";
    si
si