namespace Semantic is
    use System;
    use Generic;

    use IoC;
    use Logging;
    use Source;

    /*
        a namespace block with associated uses of other namespaces + symbols
        declaration of symbols is forwarded to the aggregate namespace symbol
        symbol search needs to be done in a specific order:
          1) symbols declared directly within the namespace
          2) symbols imported into this namespace block by uses
          3) symbols declared directly in namespaces imported into this namespace block by uses
          4) symbols declared in aggregate namespaces that enclose this one
    */

    class NAMESPACE_SCOPE: Object, Scope, NamespaceContext, DeclarationContext  is
        _namespace: Symbol.NAMESPACE;

        _used_symbols: Collections.MAP[String,Symbol.BASE];
        _used_namespaces: Collections.LIST[Symbol.NAMESPACE];

        type: Type.BASE => Type.NONE.instance;

        unspecialized_symbol: Symbol.BASE => null;

        init(namespace_: Symbol.NAMESPACE) is
            _namespace = namespace_;
            _used_symbols = new Collections.MAP[String,Symbol.BASE]();
            _used_namespaces = new Collections.LIST[Symbol.NAMESPACE]();
        si

        qualify(name: String) -> String => _namespace.qualify(name);

        find_direct(name: String) -> Symbol.BASE => _namespace.find_direct(name);

        find_direct_matches(prefix: String, matches: Collections.MAP[System.String,Semantic.Symbol.BASE]) is
            _namespace.find_direct_matches(prefix, matches);
        si        

        find_member(name: String) -> Symbol.BASE => _namespace.find_member(name);

        find_member_matches(prefix: String, results: Collections.MAP[System.String,Semantic.Symbol.BASE]) is
            _namespace.find_member_matches(prefix, results);
        si        

        find_enclosing(name: String) -> Symbol.BASE is
            var result = find_direct(name);

            if result? then
                return result;
            fi
            
            for n in _used_namespaces do
                result = n.find_direct(name);
                if result? then
                    return result;
                fi                
            od

            result = _used_symbols[name];

            if result? then
                return result;
            fi
                        
            return _namespace.find_enclosing_only(name);
        si

        find_enclosing_matches(prefix: String, matches: Collections.MAP[System.String,Semantic.Symbol.BASE]) is
            _namespace.find_enclosing_matches(prefix, matches);

            for n in _used_namespaces do
                _namespace.find_direct_matches(prefix, matches);
            od

            for s in _used_symbols.values do
                if Shim.STR.starts_with(s.name, prefix) then
                    Semantic.SYMBOL_MAP.add_match(s.name, s, matches);
                fi
            od
        si
        
        declare_class(location: LOCATION, name: String, arguments: Collections.LIST[String], enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Scope =>
            _namespace.declare_class(location, name, arguments, enclosing, symbol_definition_listener);
        
        declare_trait(location: LOCATION, name: String, arguments: Collections.LIST[String], enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Scope =>
            _namespace.declare_trait(location, name, arguments, enclosing, symbol_definition_listener);
        
        declare_struct(location: LOCATION, name: String, arguments: Collections.LIST[String], enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Scope =>
            _namespace.declare_struct(location, name, arguments, enclosing, symbol_definition_listener);
        
        declare_type(location: LOCATION, name: String, index: int, symbol_definition_listener: SymbolDefinitionListener) -> Scope =>
            _namespace.declare_type(location, name, index, symbol_definition_listener);

        declare_enum(location: LOCATION, name: String, symbol_definition_listener: SymbolDefinitionListener) -> Scope =>
            _namespace.declare_enum(location, name, symbol_definition_listener);
        
        declare_enum_member(location: LOCATION, name: String, symbol_definition_listener: SymbolDefinitionListener) is
            _namespace.declare_enum_member(location, name, symbol_definition_listener);           
        si
        
        declare_closure(location: LOCATION, name: String, owner: Scope, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Scope =>
            _namespace.declare_closure(location, name, owner, enclosing, symbol_definition_listener);

        declare_innate(location: LOCATION, name: String, innate_name: String, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Scope =>
            _namespace.declare_innate(location, name, innate_name, enclosing, symbol_definition_listener);

        declare_function(location: LOCATION, name: String, is_static: bool, is_private: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Scope =>
            _namespace.declare_function(location, name, is_static, is_private, enclosing, symbol_definition_listener);

        declare_variable(location: LOCATION, name: String, is_static: bool, symbol_definition_listener: SymbolDefinitionListener) is
            _namespace.declare_variable(location, name, is_static, symbol_definition_listener);           
        si
        
        declare_property(location: LOCATION, name: String, is_static: bool, is_private: bool, is_assignable: bool, symbol_definition_listener: SymbolDefinitionListener) -> Scope =>
            _namespace.declare_property(location, name, is_static, is_private, is_assignable, symbol_definition_listener);

        declare_label(location: LOCATION, name: String, symbol_definition_listener: SymbolDefinitionListener) is
            _namespace.declare_label(location, name, symbol_definition_listener);
        si
        
        declare_namespace(location: LOCATION, name: String, namespace_: Symbol.NAMESPACE, symbol_definition_listener: SymbolDefinitionListener) is
            _namespace.declare_namespace(location, name, namespace_, symbol_definition_listener);
        si

        add(namespace_: Symbol.NAMESPACE) is
            _used_namespaces.add(namespace_);
        si

        add(symbol: Symbol.BASE) is
            _used_symbols[symbol.name] = symbol;
        si        

        toString() -> String => "namespace scope for: " + _namespace.name;
    si
si