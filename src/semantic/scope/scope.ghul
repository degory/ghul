namespace Semantic is
    use IO.Std;

    use System.Text.StringBuilder;
    
    use IoC;
    use Logging;
    use Source;

    use Types.Type;
    use Symbols.Symbol;

    trait Scope is
        name: string;
        qualified_name: string;

        symbols: Collections.Iterable[Symbols.Symbol];

        type: Type;

        unspecialized_symbol: Symbols.Symbol;

        is_trait: bool;
        is_closure: bool;
        is_capture_context: bool;
        is_namespace: bool;
        
        qualify(name: string) -> string;
        find_direct(name: string) -> Symbols.Symbol;
        find_member(name: string) -> Symbols.Symbol;
        find_enclosing(name: string) -> Symbols.Symbol;

        find_direct_matches(prefix: string, matches: Collections.MAP[string,Symbols.Symbol]);
        find_member_matches(prefix: string, matches: Collections.MAP[string,Symbols.Symbol]);
        find_enclosing_matches(prefix: string, matches: Collections.MAP[string,Symbols.Symbol]);

        gen_dotted_name(buffer: StringBuilder, want_trailing_dot: bool);

        gen_reference(buffer: StringBuilder);
        gen_type(buffer: StringBuilder);
    si

    trait DeclarationContext is
        declare_stable(symbol: Semantic.Symbols.Symbol);
        declare_class(location: LOCATION, span: LOCATION, name: string, arguments: Collections.List[string], is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol;
        declare_trait(location: LOCATION, span: LOCATION, name: string, arguments: Collections.List[string], is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol;
        declare_struct(location: LOCATION, span: LOCATION, name: string, arguments: Collections.List[string], is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol;
        declare_type(location: LOCATION, name: string, index: int, symbol_definition_listener: SymbolDefinitionListener) -> Symbol;
        declare_enum(location: LOCATION, span: LOCATION, name: string, is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol;
        declare_enum_member(location: LOCATION, name: string, value: string, symbol_definition_listener: SymbolDefinitionListener);
        declare_closure(location: LOCATION, name: string, owner: Scope, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol;
        declare_innate(location: LOCATION, name: string, innate_name: string, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol;

        declare_function(location: LOCATION, span: LOCATION, name: string, is_static: bool, is_private: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Symbol;
        declare_variable(location: LOCATION, name: string, is_static: bool, symbol_definition_listener: SymbolDefinitionListener) -> Symbol;
        declare_property(location: LOCATION, span: LOCATION, name: string, is_static: bool, is_private: bool, is_assignable: bool, symbol_definition_listener: SymbolDefinitionListener) -> Symbol;
        declare_label(location: LOCATION, name: string, symbol_definition_listener: SymbolDefinitionListener);
    si

    trait NamespaceContext is
        declare_namespace(location: LOCATION, name: string, `namespace: Symbols.NAMESPACE, symbol_definition_listener: SymbolDefinitionListener);
    si

    trait ClosureContext is
        add_closure(closure: Symbols.Closure);

        get_closures() -> Collections.Iterable[Symbols.Closure];
    si
    
si
