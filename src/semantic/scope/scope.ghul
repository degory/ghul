namespace Semantic is
    use System;
    use Generic;

    use IoC;
    use Logging;
    use Source;

    trait Scope is
        name: String;
        qualified_name: String;

        symbols: Collections.Iterable[Symbol.BASE];

        type: Type.BASE;

        unspecialized_symbol: Symbol.BASE;

        is_trait: bool;
        
        qualify(name: String) -> String;
        find_direct(name: String) -> Symbol.BASE;
        find_member(name: String) -> Symbol.BASE;
        find_enclosing(name: String) -> Symbol.BASE;

        find_direct_matches(prefix: System.String, matches: Collections.MAP[String,Symbol.BASE]);
        find_member_matches(prefix: System.String, matches: Collections.MAP[String,Symbol.BASE]);
        find_enclosing_matches(prefix: System.String, matches: Collections.MAP[String,Symbol.BASE]);
    si

    trait DeclarationContext is
        declare_class(location: LOCATION, name: String, arguments: Collections.LIST[String], is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Scope;
        declare_trait(location: LOCATION, name: String, arguments: Collections.LIST[String], is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Scope;
        declare_struct(location: LOCATION, name: String, arguments: Collections.LIST[String], is_stub: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Scope;
        declare_type(location: LOCATION, name: String, index: int, symbol_definition_listener: SymbolDefinitionListener) -> Scope;
        declare_enum(location: LOCATION, name: String, symbol_definition_listener: SymbolDefinitionListener) -> Scope;
        declare_enum_member(location: LOCATION, name: String, symbol_definition_listener: SymbolDefinitionListener);
        declare_closure(location: LOCATION, name: String, owner: Scope, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Scope;
        declare_innate(location: LOCATION, name: String, innate_name: String, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Scope;

        declare_function(location: LOCATION, name: String, is_static: bool, is_private: bool, enclosing: Scope, symbol_definition_listener: SymbolDefinitionListener) -> Scope;
        declare_variable(location: LOCATION, name: String, is_static: bool, symbol_definition_listener: SymbolDefinitionListener);
        declare_property(location: LOCATION, name: String, is_static: bool, is_private: bool, is_assignable: bool, symbol_definition_listener: SymbolDefinitionListener) -> Scope;
        declare_label(location: LOCATION, name: String, symbol_definition_listener: SymbolDefinitionListener);
    si

    trait NamespaceContext is
        declare_namespace(location: LOCATION, name: String, namespace_: Symbol.NAMESPACE, symbol_definition_listener: SymbolDefinitionListener);
    si
si
