namespace Semantic is   
    use IO.Std;

    use Symbols.Function;
    use Symbols.FUNCTION_GROUP;

    class NAMESPACE_SEARCH is
        _logger: Logging.Logger;

        name: string;

        owner: Scope;
        functions: METHOD_OVERRIDE_MAP;
        other_symbol: Symbols.Symbol;

        init(owner: Symbols.Symbol, name: string) is
            _logger = IoC.CONTAINER.instance.logger;
            
            self.owner = owner;
            self.name = name;
        si

        get_result() -> Symbols.Symbol is
            if other_symbol? then
                return other_symbol;
            fi

            if !functions? \/ !functions.contains_any_methods then
                return null;
            fi

            let result = new FUNCTION_GROUP(Source.LOCATION.unknown, owner, name);

            for s in functions do
                let seen_any = false;

                for f in s.iterable do
                    assert !seen_any else "oops: multiple functions with same signature pulled into namespace scope: " + s;

                    result.add(f);
                    
                    seen_any = true;                
                od
            od

            return result;
        si
        
        add_function(function: Function) is
            assert function.name =~ name else "expected functions to have same names: " + function + " vs " + name;

            if !functions? then
                functions = new METHOD_OVERRIDE_MAP(name);
            fi

            if !functions.contains(function.override_class) then
                functions.add(function);
            fi
        si

        add_function_group(group: FUNCTION_GROUP) is
            for f in group.functions do
                add_function(f);
            od
        si

        add_other(symbol: Symbols.Symbol) is
            assert !other_symbol?;

            other_symbol = symbol;
        si

        add(location: Source.LOCATION, symbol: Symbols.Symbol, is_used_symbol: bool) -> bool is
            if !symbol? then
                return false;
            fi

            if other_symbol? then
                // if we already found a non-function symbol, then it doesn't matter what kind of symbol
                // we've now found in an outer scope, it must be hidden by other_symbol:
                if is_used_symbol then
                    _logger.warn(location, "used symbol " + symbol + " is hidden by " + other_symbol);
                fi

                // we should stop searching, as this non-function symbol hides all symbols with the same name
                // in any outer scopes
                return true;
            elif isa Symbols.Function(symbol) then
                // we've not found any non-method symbol, yet, and we've just found a function. We need to
                // merge this function into the override map we're building:

                let function = cast Symbols.Function(symbol);
                
                add_function(function);

                // continue searching, as there could be other overloads with the same name in outer scopes:
                return false;
            elif isa Symbols.FUNCTION_GROUP(symbol) then
                // we've not found any non-method symbol, yet, and we've just found a function group. We need to
                // merge every function in this group into the override map we're building:

                let fg = cast Symbols.FUNCTION_GROUP(symbol);

                add_function_group(fg);

                // continue searching, as there could be other overloads with the same name in outer scopes:
                return false;
            elif !functions? \/ !functions.contains_any_methods then
                // We've just found a non-function symbol, and we've not already accumulated at least one function for
                // our function group, so this symbol will become our result and all other matches should be ignored

                add_other(symbol);

                // we can stop searching, there can be no further matches
                return true;
            fi

            // not a function symbol so stop search:
            return true;
        si
    si
si
