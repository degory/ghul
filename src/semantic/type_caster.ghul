namespace Semantic is
    use IO.Std;

    use Logging;

    use Types.Type;

    use IR.Values;

    use IR.TEMP;
    use IR.BRANCH;

    class TYPE_CASTER is
        _brancher: IR.BRANCHER;
        _block_context: IR.BlockContext;
        _value_boxer: IR.VALUE_BOXER;
        _value_converter: IR.VALUE_CONVERTER;
        _innate_symbol_lookup: Lookups.InnateSymbolLookup;
        _logger: Logger;

        init(
            brancher: IR.BRANCHER,
            block_context: IR.BlockContext,
            value_boxer: IR.VALUE_BOXER,
            value_converter: IR.VALUE_CONVERTER,
            innate_symbol_lookup: Lookups.InnateSymbolLookup,
            logger: Logger
        )
        is
            super.init();

            _brancher = brancher;
            _block_context = block_context;
            _value_boxer = value_boxer;
            _value_converter = value_converter;
            _innate_symbol_lookup = innate_symbol_lookup;
            _logger = logger;
        si

        check_cast_is_valid(location: Source.LOCATION, source_type: Type, target_type: Type) -> bool is
            if source_type.is_type_variable /\ target_type.is_type_variable then
                _logger.error(location, "cannot convert {source_type} to {target_type}");

                return false;
            fi

            if source_type.is_type_variable \/ target_type.is_type_variable then
                return true;
            fi

            if source_type.is_value_type /\ target_type.is_value_type then
                let instruction = _value_converter.get_instruction(target_type);

                if !instruction? then
                    let enum_type = _innate_symbol_lookup.get_enum_type();

                    if 
                        !enum_type.is_assignable_from(source_type) /\
                        !enum_type.is_assignable_from(target_type)
                    then
                        _logger.error(location, "cannot convert {source_type} to {target_type}");
                        return false;
                    fi
                fi
            fi
            
            return true;
        si

        cast_value(
            location: Source.LOCATION, 
            value: IR.Values.Value, 
            target_type: Type,
            quiet: bool
        ) -> IR.Values.Value is
            let need_conditional_unbox = false;

            if value.type.is_type_variable /\ target_type.is_type_variable then
                if !quiet then
                    _logger.error(location, "cannot convert {value.type} to {target_type}");
                fi

                return
                    DUMMY(
                        target_type,
                        location
                    );
            fi

            if value.type.is_type_variable \/ target_type.is_type_variable then
                let result: IR.Values.Value =
                    CAST(
                        target_type,
                        value
                    );

                if target_type.is_value_type then
                    result = _conditionally_unbox(result, target_type);                    
                fi

                return result;
            fi

            if value.type.is_value_type /\ target_type.is_value_type  then
                let instruction = _value_converter.get_instruction(target_type);

                if !instruction? then
                    let enum_type = _innate_symbol_lookup.get_enum_type();

                    if 
                        !enum_type.is_assignable_from(value.type) /\
                        !enum_type.is_assignable_from(target_type)
                    then
                        if !quiet then
                            _logger.error(location, "cannot convert {value.type} to {target_type}");
                        fi

                        return
                            DUMMY(
                                target_type,
                                location
                            );    
                    fi
                    
                    return
                        CONVERT(
                            target_type,
                            value,
                            "conv.i4"
                        );
               else
                    return
                        CONVERT(
                            target_type,
                            value,
                            instruction
                        );
                fi
            fi

            let result: Value =
                CAST(
                    target_type,
                    value
                );

            if !value.type.is_value_type /\ target_type.is_value_type then
                result = _conditionally_unbox(result, target_type);
            fi

            return result;    
        si

        _conditionally_unbox(
            value: IR.Values.Value, 
            target_type: Types.Type
        ) -> IR.Values.Value
        is
            let block = _block_context.enter_block(target_type);
            let brancher = _brancher.get_for(block);

            // value is already a the result of a cast instruction ('isinsnt'), but we
            // need to check if the result is not null before we attempt to unbox:
            let temp = TEMP(block, "cast", TYPE_WRAPPER(_innate_symbol_lookup.get_object_type(), value));
            let `null = IR.LABEL();
            let done = IR.LABEL();

            brancher.branch(BRANCH.Z, temp.load(), `null);

            // `isinst` result is not null, so safe to unbox:
            block.add(
                UNBOX(
                    TYPE_WRAPPER(target_type, temp.load())
                )
            );

            brancher.branch(done);

            brancher.label(`null);

            // 'isinst' result is null, so attempting unbox would throw
            // NullReferenceException. return default value instead:
            block.add(IR.Values.DEFAULT(target_type));

            brancher.label(done);

            _block_context.leave_block();

            return block;
        si
    si
si