namespace Semantic is
    use System;
        use Logging;
    use Source;

    use Syntax.Tree;

    // the symbol table helps keeps track of what scope the compiler is currently working in. it does not
    // manage searching for symbols within or across scopes: that's handled by the scopes themselves

    class SYMBOL_TABLE is
        _logger: Logger;
        _scopes: Collections.MAP[NODE,Scope];
        _stack: Collections.LIST[Scope];

        current_scope: Scope is
            if _stack.count > 0 then
                return _stack[_stack.count-1];
            else
                return null;
            fi
        si

        global_scope: Scope => _stack[0];

        current_namespace_context: NamespaceContext is
            for scope in new Collections.LIST_REVERSE_ITERATOR[Scope](_stack) do
                if isa NamespaceContext(scope) then
                    return cast NamespaceContext(scope);
                fi
            od
            
            assert false else "no current namespace";
        si

        current_declaration_context: DeclarationContext is
            for scope in new Collections.LIST_REVERSE_ITERATOR[Scope](_stack) do
                if isa DeclarationContext(scope) then
                    return cast DeclarationContext(scope);
                fi
            od
        si

        current_instance_context: Symbol.Classy is
            for scope in new Collections.LIST_REVERSE_ITERATOR[Scope](_stack) do
                if isa Symbol.CLASS(scope) || isa Symbol.TRAIT(scope) || isa Symbol.STRUCT(scope) then
                    return cast Symbol.Classy(scope);
                fi
            od
        si
        
        current_function: Symbol.Function is
            for scope in new Collections.LIST_REVERSE_ITERATOR[Scope](_stack) do
                if isa Symbol.Function(scope) then
                    return cast Symbol.Function(scope);
                fi
            od
        si

        current_function_group: Symbol.FUNCTION_GROUP is
            for scope in new Collections.LIST_REVERSE_ITERATOR[Scope](_stack) do
                if isa Symbol.FUNCTION_GROUP(scope) then
                    return cast Symbol.FUNCTION_GROUP(scope);
                fi
            od
        si

        current_property: Symbol.Property is
            for scope in new Collections.LIST_REVERSE_ITERATOR[Scope](_stack) do
                if isa Symbol.Property(scope) then
                    return cast Symbol.Property(scope);
                fi
            od
        si

        all_classes: Collections.Iterable[Symbol.Classy] is
            let result = new Collections.LIST[Symbol.Classy]();
            
            for scope in _scopes.values do
                if isa Symbol.Classy(scope) then
                    result.add(cast Symbol.Classy(scope));
                fi
                
            od

            return result;
        si
        
        init(logger: Logger) is
            _logger = logger;

            clear();
        si

        dump_counts() is
            System.Console.error.write_line("scopes map: " + _scopes.count);
        si        

        clear() is
            _stack = new Collections.LIST[Scope](50);
            _scopes = new Collections.MAP[NODE,Scope](65521);

            enter_scope(new Symbol.NAMESPACE(LOCATION.dummy, "", null, ""));
        si

        scope_for(node: NODE) -> Scope is
            if _scopes.contains_key(node) then
                return _scopes[node];
            fi
        si

        associate_node_with_scope(node: NODE, scope: Scope) is
            _scopes[node] = scope;

            if isa USE_SCOPE(scope) then
                throw new System.Exception("attempting to associate use scope");
            fi            
        si

        mark_scope_stack() -> int is
            return _stack.count;
        si

        release_scope_stack(mark: int) is
            assert mark <= _stack.count;

            while _stack.count > mark do
                _stack.remove_at(_stack.count - 1);
            od
        si

        enter_scope(node: Syntax.Tree.NODE) is
            if !_scopes.contains_key(node) then
                _logger.error(node.location, "no scope found for " + node);
                return;
            fi

            let scope = _scopes[node];

            enter_scope(scope);
        si

        enter_scope(scope: Scope) is
            _stack.add(scope);

            if isa USE_SCOPE(scope) then
                throw new System.Exception("attempting to enter use scope");
            fi
        si

        leave_scope(node: Syntax.Tree.NODE) is
            var scope = _scopes[node];
            if scope == null then
                _logger.error(node.location, "no scope found for node");
                return;
            fi

            leave_scope(scope);
        si

        leave_scope(scope: Scope) is
            if isa USE_SCOPE(scope) then
                throw new System.Exception("attempting to leave use scope");
            fi

            assert current_scope == scope else "scope stack corrupt";
            
            _stack.remove_at(_stack.count - 1);
        si

        to_string() -> String is
            var result = new System.Text.StringBuilder();

            result.append("symbol table:\n");

            for scope in new Collections.LIST_REVERSE_ITERATOR[Semantic.Scope](_stack) do
                result
                    .append(scope)
                    .append("\n");
            od

            result.append("\n");

            return result.to_string();
        si
    si
si
