namespace Semantic.Type is
    use System;
    use Generic;

    use Source;

    trait SettableTyped: Typed is
        type: BASE public
            = value;
    si

    trait Typed is
        type: BASE;
    si

    enum MATCH is
        SAME = 0,
        ASSIGNABLE = 1,
        CONVERTABLE = 2,
        DIFFERENT = 100000
    si

    class BASE: Object, Typed is
        scope: Scope => null;

        symbol: Symbol.BASE is
            if scope? && isa Symbol.BASE(scope) then
                return cast Symbol.BASE(scope);
            else
                return Symbol.NONE.instance;
            fi
        si

        unspecialized_symbol: Symbol.BASE is
            let s = scope;

            if s? then
                return s.unspecialized_symbol;
            fi
        si        

        type: BASE => self;

        arguments: Collections.LIST[BASE] => new Collections.LIST[BASE](0);

        short_description: String => Shim.OBJ.to_string(self);

        // FIXME: better than isa XXXX, but still should not need these:
        is_type_variable: bool => false;
        is_value_type: bool => false;
        is_inheritable: bool => false;
        is_class: bool => false;
        is_trait: bool => false;

        init() is
        si

        =~(other: BASE) -> bool => false;

        is_assignable_from(other: BASE) -> bool
            => compare(other) <= MATCH.ASSIGNABLE;

        compare(other: BASE) -> MATCH
            => MATCH.DIFFERENT;

        find_member(name: String) -> Symbol.BASE
            => null;

        find_ancestor(type: Type.BASE) -> Type.BASE => null;        

        specialize(type_map: Collections.MAP[String,Type.BASE]) -> BASE is
            throw new System.NotImplementedException("specialize " + Shim.OBJ.type_name(self));
        si

        il_type_name: String => "unknown";
    si

    class NONE: BASE is
        _instance: NONE static;

        instance: NONE static is
            if !_instance? then
                _instance = new NONE();
            fi

            return _instance;
        si
        
        init() is
            super.init();
        si

        =~(other: BASE) -> bool
            => false;

        compare(other: BASE) -> Type.MATCH
            => MATCH.DIFFERENT;

        il_type_name: String => "none";

        toString() -> String => "!!!";
    si

    class ANY: BASE is
        init() is
            super.init();
        si

        =~(other: BASE) -> bool
            => true;

        compare(other: BASE) -> Type.MATCH
            => MATCH.ASSIGNABLE;

        il_type_name: String => "any";

        toString() -> String => "***";
    si

    class NAMED: BASE is
        name: String => symbol.name;

        scope: Scope => symbol;

        symbol: Symbol.BASE;

        arguments: Collections.LIST[BASE] => new Collections.LIST[BASE](0);

        short_description: String is
            if symbol? then
                return symbol.name;
            else
                return "(undefined)";
            fi
        si

        is_type_variable: bool =>
            isa Symbol.TYPE(symbol);

        is_value_type: bool => symbol? && symbol.is_value_type;
        is_trait: bool => symbol? && symbol.is_trait;
        is_inheritable: bool => symbol? && symbol.is_inheritable;
        is_class: bool => symbol? && symbol.is_class;

        il_type_name: String => symbol.il_type_name;

        init(symbol: Symbol.BASE) is
            super.init();
            
            self.symbol = symbol;
        si

        specialize(type_map: Collections.MAP[String,BASE]) -> Type.BASE is
            let result = type_map[name];

            if result? then
                return result;
            else
                return self;
            fi
        si

        =~(other: BASE) -> bool is
            if isa NAMED(other) then
                let other_symbol = cast NAMED(other);
                return symbol == other_symbol.symbol;
            fi
        si

        compare_tuple(other: GENERIC) -> Type.MATCH is

        si

        compare(other: BASE) -> Type.MATCH is
            if isa ANY(other) then
                return Type.MATCH.ASSIGNABLE;
            fi

            if symbol == null || other == null then
                return Type.MATCH.DIFFERENT;
            elif isa NAMED(other) then
                let other_named = cast NAMED(other);
              
                if symbol == other_named.symbol then
                    return Type.MATCH.SAME;
                fi

                for a in other_named.symbol.ancestors do
                    let match = self.compare(a);

                    if match <= Type.MATCH.ASSIGNABLE then
                        return Type.MATCH.ASSIGNABLE;
                    elif match == Type.MATCH.CONVERTABLE then
                        return Type.MATCH.CONVERTABLE;
                    fi
                od
            fi

            return Type.MATCH.DIFFERENT;
        si

        find_member(name: String) -> Symbol.BASE is
            if symbol? then
                return symbol.find_member(name);
            fi
        si

        find_ancestor(type: Type.BASE) -> Type.BASE is
            if symbol? then
                return symbol.find_ancestor(type);
            fi            
        si

        hash() -> int => Shim.OBJ.hash(symbol);

        toString() -> String is
            if symbol? then
                return symbol.qualified_name;
            else
                return "(null symbol) " + name;
            fi
        si
    si

    class GENERIC: NAMED is
        arguments: Collections.LIST[BASE] => cast Symbol.GENERIC(symbol).arguments;
        ancestors: Collections.LIST[BASE] => cast Symbol.GENERIC(symbol).ancestors;

        short_description: String is
            assert(self?, "self is null");
            assert(symbol?, "symbol is null");
            assert(symbol.name?, "symbol.name is null");
            assert(arguments?, "arguments is null");

            let result = new System.Text.StringBuilder();

            result
                .append(symbol.name)
                .append('[');

            var seen_any = false;

            for a in arguments do
                assert(a?, "argument is null");

                if seen_any then
                    result.append(',');
                fi

                if a? then
                    result.append(a.short_description);
                fi

                seen_any = true;
            od

            result.append(']');

            return result.to_string();
        si

        init(
            symbol: Symbol.GENERIC
        ) is
            super.init(symbol);
        si
        
        init(
            location: LOCATION,
            symbol: Symbol.Classy,
            arguments: Collections.LIST[BASE]
        ) is
            super.init(new Symbol.GENERIC(location, symbol, arguments));
        si

        create(
            location: LOCATION,
            symbol: Symbol.Classy,
            arguments: Collections.LIST[BASE]
        ) -> GENERIC
        is
            let result = new GENERIC(location, symbol, arguments);
            
            return result;
        si

        specialize(type_map: Collections.MAP[String,BASE]) -> Type.GENERIC is
            let context = IoC.CONTAINER.instance.symbol_table.current_instance_context;

            let we_are_generic = context.arguments.count > 0;
            
            var seen_any_new = false;

            let generic_symbol = cast Symbol.GENERIC(symbol);

            let new_arguments = new Collections.LIST[BASE](generic_symbol.arguments.count);

            for i in 0..arguments.count do
                let argument_name
                    = generic_symbol.symbol.argument_names[i];

                let mapped_type: Type.BASE; // = type_map[argument_name];

                // FIXME: this seems to fix #118 but don't think this is the correct place to put this check:
                if we_are_generic then
                    mapped_type = type_map[argument_name];
                fi
                
                if mapped_type? then
                    new_arguments[i] = mapped_type;

                    seen_any_new = true;
                else
                    let oa = generic_symbol.arguments[i];
                    let na = oa.specialize(type_map);
                    new_arguments[i] = na;

                    if oa != na then
                        seen_any_new = true;
                    fi
                fi
            od

            if seen_any_new then
                let result = create(symbol.location, generic_symbol.symbol, new_arguments);

                return result;
            else
                return self;
            fi
        si

        =~(other: BASE) -> bool is
            if !isa GENERIC(other) then
                return false;
            fi

            let generic_other = cast GENERIC(other);

            if symbol == generic_other.symbol then
                return true;
            fi

            let generic_symbol = cast Symbol.GENERIC(symbol);
            let generic_other_symbol = cast Symbol.GENERIC(generic_other.symbol);

            if generic_symbol.symbol != generic_other_symbol.symbol then
                return false;
            fi

            if generic_symbol.arguments.count != generic_other_symbol.arguments.count then
                return false;
            fi

            for i in 0..generic_symbol.arguments.count do
                // TODO: implement type variance here:
                if generic_symbol.arguments[i] !~ generic_other_symbol.arguments[i] then
                    return false;
                fi
            od

            return true;
        si

        compare(other: BASE) -> Type.MATCH is
            if isa ANY(other) then
                return Type.MATCH.ASSIGNABLE;
            elif symbol == null || other == null then
                return Type.MATCH.DIFFERENT;
            /*
            elif isa GENERIC(other) then
                let other_generic = cast GENERIC(other);
            */
            elif isa NAMED(other) then
                let other_named = cast NAMED(other);

                if self =~ other then
                    return Type.MATCH.SAME;
                fi

                for i in 0..other_named.symbol.ancestors.count do
                    let a = other_named.symbol.get_ancestor(i);

                    let match = self.compare(a);

                    if match <= Type.MATCH.ASSIGNABLE then
                        return Type.MATCH.ASSIGNABLE;
                    elif match == Type.MATCH.CONVERTABLE then
                        return Type.MATCH.CONVERTABLE;
                    fi
                od

                /*
                if other_named.name =~ "TUPLE_1" then
                    System.Console.error.write_line("possible tuple match: " + self + " vs " + other);

                    let match = self.compare(other_named.arguments[0]);

                    System.Console.error.write_line("tuple match score: " + self + " vs " + other_named.arguments[0] + " = " + match);

                    if match <= Type.MATCH.ASSIGNABLE then
                        return Type.MATCH.ASSIGNABLE;
                    elif match == Type.MATCH.CONVERTABLE then
                        return Type.MATCH.CONVERTABLE;
                    fi
                fi
                */
            fi

            return Type.MATCH.DIFFERENT;
        si

        @IF.legacy()
        hash() -> int => symbol.hash();

        @IF.dotnet()
        get_hash_code() -> int => symbol.get_hash_code();

        @IF.legacy()
        toString() -> String is
            return symbol.toString();
        si

        @IF.dotnet()
        to_string() -> String is
            return symbol.to_string();
        si
    si

    class ACTION_0: NAMED is
        init(
            // location: LOCATION,
            symbol: Symbol.Classy
        ) is
            super.init(symbol);
        si

        create(
            location: LOCATION,
            symbol: Symbol.Classy
            // FIXME: this ACTION_0 should be in scope here:
        ) -> Semantic.Type.ACTION_0 is
            return new Semantic.Type.ACTION_0(symbol);
        si

        toString() -> String is
            return "() -> void";
        si
    si

    class FUNCTION: GENERIC is
        init(
            location: LOCATION,
            symbol: Symbol.Classy,
            arguments: Collections.LIST[BASE]
        ) is
            super.init(location, symbol, arguments);
        si

        create(
            location: LOCATION,
            symbol: Symbol.Classy,
            arguments: Collections.LIST[BASE]
        ) -> FUNCTION is
            return new FUNCTION(location, symbol, arguments);
        si

        toString() -> String is
            let result = new System.Text.StringBuilder();

            if arguments.count == 2 then
                result
                    .append(arguments[0])
                    .append(" -> ")
                    .append(arguments[1]);
            elif arguments.count == 1 then
                result
                    .append("() -> ")
                    .append(arguments[0]);
            else
                result.append('(');

                for i in 0..arguments.count do
                    result.append(arguments[i]);

                    if i == arguments.count - 2 then
                        result.append(") -> ");
                    elif i != arguments.count - 1 then
                        result.append(',');
                    fi
                od
            fi

            return result.to_string();
        si
    si

    class TUPLE: GENERIC is
        init(
            location: LOCATION,
            symbol: Symbol.Classy,
            arguments: Collections.LIST[BASE]
        ) is
            super.init(location, symbol, arguments);
        si

        create(
            location: LOCATION,
            symbol: Symbol.Classy,
            arguments: Collections.LIST[BASE]
        ) -> TUPLE is
            return new TUPLE(location, symbol, arguments);
        si

        toString() -> String =>
            "(" + new Shim.JOIN[Type.BASE](arguments) + ")";
    si

    class ARRAY: GENERIC is
        init(
            location: LOCATION,
            symbol: Symbol.Classy,
            arguments: Collections.LIST[BASE]
        ) is
            super.init(new Symbol.ARRAY(location, symbol, arguments[0]));
        si

        create(
            location: LOCATION,
            symbol: Symbol.Classy,
            arguments: Collections.LIST[BASE]
        ) -> Type.ARRAY is
            return new Type.ARRAY(location, symbol, arguments);
        si

        @IF.legacy()
        toString() -> String =>
            arguments[0].toString() + "[]";

        @IF.dotnet()
        to_string() -> String =>
            arguments[0].to_string() + "[]";
    si

    class POINTER: GENERIC is
        init(
            location: LOCATION,
            symbol: Symbol.Classy,
            arguments: Collections.LIST[BASE]
        ) is
            super.init(location, symbol, arguments);
        si

        create(
            location: LOCATION,
            symbol: Symbol.Classy,
            arguments: Collections.LIST[BASE]
        ) -> Type.POINTER is
            return new Type.POINTER(location, symbol, arguments);
        si

        @IF.legacy()
        toString() -> String =>
            arguments[0].toString() + " ptr";

        @IF.dotnet()
        to_string() -> String =>
            arguments[0].to_string() + " ptr";
    
    si

    class REFERENCE: GENERIC is
        init(
            location: LOCATION,
            symbol: Symbol.Classy,
            arguments: Collections.LIST[BASE]
        ) is
            super.init(location, symbol, arguments);
        si

        create(
            location: LOCATION,
            symbol: Symbol.Classy,
            arguments: Collections.LIST[BASE]
        ) -> Type.REFERENCE is
            return new Type.REFERENCE(location, symbol, arguments);
        si

        @IF.legacy()
        toString() -> String =>
            arguments[0].toString() + " ref";

        @IF.dotnet()
        to_string() -> String =>
            arguments[0].to_string() + " ref";
    si

    class ENUM: GENERIC is
        init(
            location: LOCATION,
            symbol: Symbol.Classy,
            arguments: Collections.LIST[BASE]
        ) is
            super.init(location, symbol, arguments);
        si

        create(
            location: LOCATION,
            symbol: Symbol.Classy,
            arguments: Collections.LIST[BASE]
        ) -> Type.ENUM is
            return new Type.ENUM(location, symbol, arguments);
        si


        @IF.legacy()
        toString() -> String =>
            arguments[0].toString();

        @IF.dotnet()
        to_string() -> String =>
            arguments[0].to_string();
    si

    class INTEGER: NAMED is
        signed: bool => true;

        bits: int is
            throw new System.NotImplementedException();
        si

        init(symbol: Semantic.Symbol.BASE) is
            super.init(symbol);
        si
    si

    class BOOL: NAMED is
        init(symbol: Semantic.Symbol.BASE) is
            super.init(symbol);
        si
    si

    class CHAR: INTEGER is
        bits: int => 8;

        init(symbol: Semantic.Symbol.BASE) is
            super.init(symbol);
        si
    si

    class BYTE: INTEGER is
        bits: int => 8;

        init(symbol: Semantic.Symbol.BASE) is
            super.init(symbol);
        si
    si

    class UBYTE: INTEGER is
        signed: bool => false;
        bits: int => 8;

        init(symbol: Semantic.Symbol.BASE) is
            super.init(symbol);
        si
    si

    class SHORT: INTEGER is
        bits: int => 16;

        init(symbol: Semantic.Symbol.BASE) is
            super.init(symbol);
        si
    si

    class USHORT: INTEGER is
        signed: bool => false;
        bits: int => 16;

        init(symbol: Semantic.Symbol.BASE) is
            super.init(symbol);
        si
    si

    class INT: INTEGER is
        bits: int => 32;

        init(symbol: Semantic.Symbol.BASE) is
            super.init(symbol);
        si
    si

    class UINT: INTEGER is
        signed: bool => false;
        bits: int => 32;

        init(symbol: Semantic.Symbol.BASE) is
            super.init(symbol);
        si
    si

    class LONG: INTEGER is
        bits: int => 64;

        init(symbol: Semantic.Symbol.BASE) is
            super.init(symbol);
        si
    si

    class ULONG: INTEGER is
        signed: bool => false;
        bits: int => 64;

        init(symbol: Semantic.Symbol.BASE) is
            super.init(symbol);
        si
    si

    class FUNCTION_GROUP: BASE is
        name: String;

        function_group: Symbol.FUNCTION_GROUP;

        init(name: String, function_group: Symbol.FUNCTION_GROUP) is
            super.init();

            self.name = name;
            self.function_group = function_group;
        si

        =~(other: BASE) -> bool is
            if isa FUNCTION_GROUP(other) then
                let other_function_group = cast FUNCTION_GROUP(other);
                return function_group == other_function_group.function_group;
            fi
        si

        specialize(generic_cache: GENERIC_CACHE, arguments: Collections.MAP[String,Type.BASE]) -> FUNCTION_GROUP is
            assert(false, "specializing function group sets owner to null");

            let result = new FUNCTION_GROUP(
                name,
                function_group.specialize(arguments, null)
            );

            return result;
        si

        @IF.legacy()
        toString() -> String =>
            name + "(...)";

        @IF.dotnet()
        to_string() -> String =>
            name + "(...)";
    si
si