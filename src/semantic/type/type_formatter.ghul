namespace Semantic.Types is
    @IF.not.v3() use object = System.Object;
    @IF.not.v3() use string = System.String;
    @IF.not.v3() use Std = System.Console;

    use System.Text.StringBuilder;

    class TypeFormatter is
        format(type: Type) -> string is
            let result = new StringBuilder();

            format(type, result);

            return result.to_string();
        si

        format(type: Type, buffer: StringBuilder);
    si

    class ARRAY_FORMATTER: TypeFormatter is
        format(type: Type, result: StringBuilder) is
            type.arguments[0].format(result);

            result.append("[]");
        si
    si
    
    class REFERENCE_FORMATTER: TypeFormatter is
        format(type: Type, result: StringBuilder) is
            type.arguments[0].format(result);

            result.append(" ref");
        si
    si

    class POINTER_FORMATTER: TypeFormatter is
        format(type: Type, result: StringBuilder) is
            type.arguments[0].format(result);

            result.append(" ptr");
        si
    si

    class FUNCTION_FORMATTER: TypeFormatter is
        format(type: Type, result: StringBuilder) is
            let arguments = type.arguments;
            let count = arguments.count;

            if count == 1 then
                result.append("() -> ");
            elif count == 2 then
                arguments[0].format(result);
                result.append(" -> ");
            else
                result.append("(");

                let seen_any = false;

                for a in arguments do
                    if seen_any then
                        result.append(",");
                    fi
                    
                    a.format(result);

                    seen_any = true;
                od
                
                result.append(") -> ");                
            fi

            arguments[count-1].format(result);
        si
    si

    class ACTION_FORMATTER: TypeFormatter is
        format(type: Type, result: StringBuilder) is
            let arguments = type.arguments;
            let count = arguments.count;

            if count == 0 then
                result.append("() -> void");
            elif count == 1 then
                arguments[0].format(result);
                result.append(" -> void");
            else
                result.append("(");

                let seen_any = false;

                for a in arguments do
                    if seen_any then
                        result.append(",");
                    fi
                    
                    a.format(result);

                    seen_any = true;
                od
                
                result.append(") -> void");                
            fi
        si
    si

    class TUPLE_FORMATTER: TypeFormatter is
        format(type: Type, result: StringBuilder) is
            result.append("(");

            let seen_any = false;

            for a in type.arguments do
                if seen_any then
                    result.append(",");
                fi
                
                a.format(result);

                seen_any = true;
            od
            
            result.append(")");                
        si
    si
si
