namespace Lexical is
    use System.Exception;
    
    use Logging;
    use Source;

    class TOKEN_BUFFER  is
        _values: Collections.Queue`1[TOKEN_PAIR];

        init() is
            _values = new Collections.Queue`1[TOKEN_PAIR](10);
        si

        reset() is
            init();
        si

        avail: bool => _values.count > 0;

        write(t: TOKEN_PAIR) is
            _values.enqueue(t);
        si

        write(tokens: Collections.Iterable[TOKEN_PAIR]) is
            for t in tokens do
                _values.enqueue(t);                
            od
        si

        read() -> TOKEN_PAIR is
            return _values.dequeue();
        si
    si

    class TOKENIZER_EXCEPTION: Exception is
        init(s: string) is
            super.init(s);
        si
    si

    class TOKEN_MAP is
        _map: Collections.MAP[string,TOKEN];

        init() is
            super.init();
            _map = new Collections.MAP[string,TOKEN](223);
        si

        [s: string]: TOKEN public
            is
                if _map.contains_key(s) then
                    let t = _map[s];

                    return t;
                    // return cast TOKEN(t);
                else
                    return TOKEN.IDENTIFIER;
                fi
            si,
            = t is
                _map[s] = t;
            si

    si

    class TOKEN_PAIR  is
        token: TOKEN;
        location: LOCATION;
        value_string: string;

        name: string => TOKEN_NAMES[token];

        to_string() -> string => 
            "" + location + ": " + TOKEN_NAMES[token] + ": " + value_string;
    
        init(token: TOKEN, location: LOCATION, value: string) is
            super.init();
            self.token = token;
            self.location = location;
            self.value_string = value;
        si
    si

    class TOKENIZER is
        _prev_count: int;

        _logger: Logger;
        _token_pair: TOKEN_PAIR;
        _symbol_tokens: TOKEN_MAP static;
        _operator_chars: Collections.SET[char] static;
        _operator_tokens: Collections.MAP[string,TOKEN] static;
        _buffer: TOKEN_BUFFER;
        _input: IO.TextReader;
        _end_of_file: bool;
        _prev_char: char;
        _cursor: LOCATION_CURSOR;
        _token_name: string[];

        _interpolation_depth: int;

        static_init() static is 
            if _symbol_tokens == null then
                _operator_chars = new Collections.SET[char]([
                    '!', '$', '%', '^', '&', '*', '-', '+', '=', '|', ':', '@', '~', '#', '\\', '<', '>', '.', '?', '/'
                ]: char );

                _operator_tokens = new Collections.MAP[string,TOKEN]();
                _operator_tokens["="] = TOKEN.ASSIGN;
                _operator_tokens[":"] = TOKEN.COLON;
                _operator_tokens["."] = TOKEN.DOT;
                _operator_tokens["->"] = TOKEN.ARROW_THIN;
                _operator_tokens["=>"] = TOKEN.ARROW_FAT;
                _operator_tokens["?"] = TOKEN.QUESTION;
                _operator_tokens["@"] = TOKEN.AT;
                _symbol_tokens = new TOKEN_MAP();
                _symbol_tokens["namespace"] = TOKEN.NAMESPACE;
                _symbol_tokens["class"] = TOKEN.CLASS;
                _symbol_tokens["struct"] = TOKEN.STRUCT;
                _symbol_tokens["enum"] = TOKEN.ENUM;
                _symbol_tokens["public"] = TOKEN.PUBLIC;
                _symbol_tokens["protected"] = TOKEN.PROTECTED;
                _symbol_tokens["private"] = TOKEN.PRIVATE;
                _symbol_tokens["const"] = TOKEN.CONST;
                _symbol_tokens["static"] = TOKEN.STATIC;
                _symbol_tokens["innate"] = TOKEN.INNATE;
                _symbol_tokens["if"] = TOKEN.IF;
                _symbol_tokens["else"] = TOKEN.ELSE;
                _symbol_tokens["while"] = TOKEN.WHILE;
                _symbol_tokens["do"] = TOKEN.DO;
                _symbol_tokens["for"] = TOKEN.FOR;
                _symbol_tokens["in"] = TOKEN.IN;
                _symbol_tokens["case"] = TOKEN.CASE;
                _symbol_tokens["when"] = TOKEN.WHEN;
                _symbol_tokens["default"] = TOKEN.DEFAULT;
                _symbol_tokens["break"] = TOKEN.BREAK;
                _symbol_tokens["continue"] = TOKEN.CONTINUE;
                _symbol_tokens["ref"] = TOKEN.REF;
                _symbol_tokens["ptr"] = TOKEN.PTR;
                _symbol_tokens["new"] = TOKEN.NEW;
                _symbol_tokens["throw"] = TOKEN.THROW;
                _symbol_tokens["return"] = TOKEN.RETURN;
                _symbol_tokens["cast"] = TOKEN.CAST;
                _symbol_tokens["var"] = TOKEN.VAR;
                _symbol_tokens["try"] = TOKEN.TRY;
                _symbol_tokens["let"] = TOKEN.LET;
                _symbol_tokens["catch"] = TOKEN.CATCH;
                _symbol_tokens["finally"] = TOKEN.FINALLY;
                _symbol_tokens["self"] = TOKEN.SELF;
                _symbol_tokens["super"] = TOKEN.SUPER;
                _symbol_tokens["null"] = TOKEN.NULL;
                _symbol_tokens["use"] = TOKEN.USE;
                _symbol_tokens["trait"] = TOKEN.TRAIT;
                _symbol_tokens["isa"] = TOKEN.ISA;
                _symbol_tokens["typeof"] = TOKEN.TYPEOF;
                // _symbol_tokens["operator"] = TOKEN.OPERATOR;
                _symbol_tokens["is"] = TOKEN.IS;
                _symbol_tokens["si"] = TOKEN.SI;
                _symbol_tokens["then"] = TOKEN.THEN;
                _symbol_tokens["elif"] = TOKEN.ELIF;
                _symbol_tokens["fi"] = TOKEN.FI;
                _symbol_tokens["esac"] = TOKEN.ESAC;
                _symbol_tokens["od"] = TOKEN.OD;
                _symbol_tokens["yrt"] = TOKEN.YRT;
                _symbol_tokens["true"] = TOKEN.TRUE;
                _symbol_tokens["false"] = TOKEN.FALSE;
                _symbol_tokens["assert"] = TOKEN.ASSERT;
            fi
        si

        init(logger: Logger, file_name: string, i: IO.TextReader, is_internal_file: bool) is            
            super.init();

            _logger = logger;

            _buffer = new TOKEN_BUFFER();
            _end_of_file = false;
            _input = i;

            static_init();

            if is_internal_file then
                _cursor = new INTERNAL_LOCATION_CURSOR();
            else
                _cursor = new LOCATION_CURSOR(file_name);
            fi
            
            _token_pair = new TOKEN_PAIR(TOKEN.UNKNOWN, location, null);
        si

        is_end_of_file: bool => _end_of_file;

        location: LOCATION => _cursor.location;

        advance_cursor(c: char) is
            if c == cast char(13) then
                return;
            fi

            _cursor.next_column();

            if c == '\n' then
                _cursor.next_line();
            fi
        si

        next_char() -> char is
            let c: char;

            if _prev_char != cast char(0) then
                c = _prev_char;
                advance_cursor(c);
                _prev_char = cast char(0);
                return c;
            fi

            if _end_of_file then
                return ' ';
            fi
            
            let c0: int = _input.read();

            if c0 == 13 then
                c0 = 32;
            fi

            if c0 == -1 \/ c0 == 12 then
                _end_of_file = true;
                return ' ';
            fi

            c = cast char(c0);

            _cursor.save();
            advance_cursor(c);

            return c;
        si

        prev_char(c: char) is
            _cursor.restore();
            _prev_char = c;
        si

        current_string: string is
            return _token_pair.value_string;
        si

        read_escape() -> char is
            let c: char = next_char();
            let result: int = 0;
            if c == 't' then
                return cast char(9);
            elif c == 'n' then
                return '\n';
            elif c == 'r' then
                return cast char(13);
            elif c == '\\' then
                return '\\';
            elif c>='0' /\ c<='7' then
                while c >= '0' /\ c <= '7' do
                    result = 8 * result + cast int(c - '0');
                    c = next_char();
                od

                prev_char(c);
                return cast char(result);
            else
                return c;
            fi
        si

        current: TOKEN_PAIR => _token_pair;

        next() -> bool is
            _token_pair = read_token();
            return current.token != TOKEN.END_OF_INPUT;
        si

        skip_white_space() -> char is
            let c: char;
            do
                c = next_char();

                let is_white_space = (c==' ' \/ c==cast char(9) \/ c=='\n');

                let should_break = is_end_of_file \/ !is_white_space;

                if is_end_of_file \/ !is_white_space then
                    break;
                fi
            od
            return c;
        si

        write_token(token: TOKEN_PAIR) is
            _buffer.write(token);
        si

        write_tokens(tokens: Collections.Iterable[TOKEN_PAIR]) is
            _buffer.write(tokens);
        si

        read_token() -> TOKEN_PAIR is
            if _buffer.avail then
                return _buffer.read();
            fi

            let result = read_token_2();

            return result;
        si

        read_operator(c: char) -> TOKEN_PAIR is
            let _buffer = new System.Text.StringBuilder();

            while _operator_chars.contains(c) \/ (cast int(c) > 0x7E /\ char.is_symbol(c)) do
                _buffer.append(c);
                c = next_char();
            od

            prev_char(c);

            if _buffer.length < 1 then
                return new TOKEN_PAIR(TOKEN.FIRST, location, null);
            fi

            let s = _buffer.to_string();

            let r = TOKEN.OPERATOR;
            
            if _operator_tokens.contains_key(s) then
                r = _operator_tokens[s];
            fi

            return new TOKEN_PAIR(r, location, s);
        si

        read_token_2() -> TOKEN_PAIR is
            let r: TOKEN;

            let c = skip_white_space();

            if _end_of_file then
                return new TOKEN_PAIR(TOKEN.END_OF_INPUT, location, null);
            fi

            _cursor.start();

            let _buffer: System.Text.StringBuilder = null;

            if c >= '0' /\ c <= '9' then
                let is_float = false;

                _buffer = new System.Text.StringBuilder();
                _buffer.append(c);
                c = next_char();

                if c=='x' \/ c=='X' then
                    _buffer.append(c);
                    c = next_char();
                    while
                        (c>='0'/\c<='9') \/ (c>='A'/\c<='F') \/ (c>='a'/\c<='f') \/ c == '_'
                    do
                        if c != '_' then
                            _buffer.append(c);
                        fi
                        c = next_char();                                
                    od
                else
                    let seen_dot = false;
                    let pc: char;

                    while 
                        (c >= '0' /\ c <= '9') \/ c == '.' \/ c == '_'
                    do                        
                        if c == '.' then
                            if pc == '.' then
                                is_float = false;

                                // bodge: can only push back one char, so use Unicode '‥' to signal we actually want to push back '..'
                                c = '‥';
                                break;
                            elif seen_dot then
                                break;
                            else
                                is_float = true;
                                seen_dot = true;
                            fi
                        else
                            if pc == '.' then
                                _buffer.append('.');
                            fi
                            
                            if c != '_' then
                                _buffer.append(c);
                            fi
                        fi

                        pc = c;
                        c = next_char();
                    od
                fi

                if is_float then
                    if c == 'e' \/ c == 'E' then
                        _buffer.append(c);
                        c = next_char();

                        if c == '-' then
                            _buffer.append(c);                                
                            c = next_char();
                        fi
                        
                        if c >= '0' \/ c <= '9' \/ c == '_' then
                            while (c >= '0' /\ c <= '9') \/ c == '_' do
                                if c != '_' then
                                    _buffer.append(c);
                                fi
                                
                                c = next_char();
                            od
                        else
                            _logger.error(location, "expected exponent in float literal");
                        fi
                    fi

                    if c == 's' \/ c == 'S' \/ c == 'd' \/ c == 'D' then
                        _buffer.append(c);
                        c = next_char();
                    else
                        _buffer.append('S');
                    fi
                else
                    if c == 's' \/ c == 'S' \/ c == 'u' \/ c == 'U' then
                        _buffer.append(c);
                        c = next_char();
                    fi

                    if "bBcCsSiIlLwW".contains(c) then
                        _buffer.append(c);
                        c = next_char();
                    fi
                fi

                prev_char(c);

                if is_float then
                    return new TOKEN_PAIR(TOKEN.FLOAT_LITERAL, location, _buffer.to_string());
                else
                    return new TOKEN_PAIR(TOKEN.INT_LITERAL, location, _buffer.to_string());
                fi
                
            elif (c>='a'/\c<='z') \/ (c>='A'/\c<='Z') \/ c=='_' \/ c == '`' then
                if c == '`' then
                    c = next_char();

                    if c == '[' then
                        return new TOKEN_PAIR(TOKEN.SQUARE_OPEN_TICK, location, null);
                    elif _operator_chars.contains(c) \/ (cast int(c) > 0x7E /\ char.is_symbol(c)) then
                        let o = read_operator(c);
                        return new TOKEN_PAIR(TOKEN.IDENTIFIER, o.location, o.value_string);
                    else
                        prev_char(c);
                        
                        c = '`';
                    fi
                fi

                _buffer = new System.Text.StringBuilder();

                let prev_c: char;

                while (c>='a'/\c<='z') \/ (c>='A'/\c<='Z') \/ (c>='0'/\c<='9') \/ c=='_' \/ c == '`' do
                    _buffer.append(c);

                    prev_c = c;
                    c = next_char();
                od

                if prev_c == '`' /\ c == '[' then
                    _buffer.remove(_buffer.length - 1, 1);
                    c = '⟦';
                fi
                
                prev_char(c);
                let s = _buffer.to_string();
                r = _symbol_tokens[s];
                return new TOKEN_PAIR(r, location, s);
            elif c == '/' then
                c = next_char();
                if c == '/' then
                    _buffer = new System.Text.StringBuilder("//");
                    do
                        c = next_char();
                        if c != '\n' then
                            _buffer.append(c);
                        fi
                        
                        if !(!_end_of_file/\c!='\n') then
                            break;
                        fi
                    od

                    return read_token_2();
                elif c == '*' then
                    _buffer = new System.Text.StringBuilder("/*");
                    do
                        c = next_char();

                        if c == '*' then
                            c = next_char();
                            if c == '/' then
                                break;
                            fi

                            _buffer.append('*');
                        fi

                        _buffer.append(c);

                        if _end_of_file then
                            break;
                        fi
                    od

                    return read_token_2();
                else
                    prev_char(c);
                    return read_operator('/');
                fi
            elif _interpolation_depth > 0 /\ c == ':' then
                return interpolation_exit(c);
            elif _operator_chars.contains(c) \/ (cast int(c) > 0x7E /\ char.is_symbol(c)) then
                return read_operator(c);
            fi

            case c
                
            when cast char(39):
                _buffer = new System.Text.StringBuilder();

                c = next_char();
                while c != cast char(39) do
                    if c == cast char(92) then
                        c = read_escape();
                        _buffer.append(c);
                        c = next_char();
                    else
                        _buffer.append(c);
                        c = next_char();
                    fi

                    if _end_of_file then
                        _logger.error(location, "end of file in character literal");
                        break;
                    fi
                od

                if _buffer.length < 1 then
                    _logger.error(location, "zero length character literal");
                elif _buffer.length > 1 then
                    _logger.error(location, "character literal is too long");
                fi
                return new TOKEN_PAIR(TOKEN.CHAR_LITERAL, location, _buffer.to_string());

            when '(':
                return new TOKEN_PAIR(TOKEN.PAREN_OPEN, location, null);

            when ')':
                return new TOKEN_PAIR(TOKEN.PAREN_CLOSE, location, null);

            when '[':
                c = next_char();
                if _end_of_file then
                    return new TOKEN_PAIR(TOKEN.SQUARE_OPEN, location, null);
                elif c == ']' then
                    return new TOKEN_PAIR(TOKEN.ARRAY_DEF, location, null);
                else
                    prev_char(c);
                    return new TOKEN_PAIR(TOKEN.SQUARE_OPEN, location, null);
                fi

            when ']':
                return new TOKEN_PAIR(TOKEN.SQUARE_CLOSE, location, null);

            when ',':
                return new TOKEN_PAIR(TOKEN.COMMA, location, null);

            when ';':
                return new TOKEN_PAIR(TOKEN.SEMICOLON, location, null);

            when '‥':
                return new TOKEN_PAIR(TOKEN.OPERATOR, location, "..");

            when '⟦':
                return new TOKEN_PAIR(TOKEN.SQUARE_OPEN_TICK, location, null);

            when '"':
                return string_enter();

            when '}':
                return interpolation_exit('}');
            
            esac
            
            return new TOKEN_PAIR(TOKEN.UNKNOWN, location, "" + c);
        si

        read_string_fragment() -> (fragment: string, c: char) is
            let fragment = new System.Text.StringBuilder();

            let c = next_char();

            while c != '\n' /\ c != '"' do
                if c == cast char(92) then
                    c = read_escape();
                    fragment.append(c);
                    c = next_char();
                elif c == '{' then
                    c = next_char();

                    if c == '{' then
                        fragment.append(c);
                        c = next_char();
                    else
                        prev_char(c);
                        c = '{';

                        break;
                    fi
                elif c == '}' then
                    c = next_char();

                    if c == '}' then
                        fragment.append(c);
                        c = next_char();
                    else
                        prev_char(c);
                        c = '}';
                        break;
                    fi                
                else
                    fragment.append(c);
                    c = next_char();
                fi
            od

            if c == '\n' then
                _logger.error(location, "newline in string literal");                
            fi

            return (fragment.to_string(), c);
        si

        read_format_string() -> (format: string, c: char) is
            let format = new System.Text.StringBuilder();

            let c = next_char();

            while c != '\n' /\ c != '}' /\ c != '"' do
                if c == cast char(92) then
                    c = read_escape();
                    format.append(c);
                    c = next_char();
                else
                    format.append(c);
                    c = next_char();
                fi
            od

            if c == '\n' then
                _logger.error(location, "newline in interpolation format string");
            elif c == '"' then
                _logger.error(location, "expected '}}' after format string");
            fi

            return (format.to_string(), c);
        si

        string_enter() -> TOKEN_PAIR is
            let fragment_c = read_string_fragment();

            let fragment = fragment_c.fragment;
            let c = fragment_c.c;

            if c == '\n' then
                _interpolation_depth = 0;

                return new TOKEN_PAIR(TOKEN.CANCEL_STRING, location, fragment);
            elif c == '"' then
                return new TOKEN_PAIR(TOKEN.STRING_LITERAL, location, fragment);
            elif c == '{' then
                _interpolation_depth = _interpolation_depth + 1;

                return new TOKEN_PAIR(TOKEN.ENTER_STRING, location, fragment);
            else
                _logger.error(location, "unexpected character '" + c + "' in string interpolation");

                return new TOKEN_PAIR(TOKEN.STRING_LITERAL, location, fragment);
            fi
        si

        interpolation_exit(c: char) -> TOKEN_PAIR is
            if _interpolation_depth == 0 then
                _logger.error(location, "unmatched '\"'");
                next_char();
                return read_token_2();
            fi

            let format: string = null;

            if c == ':' then
                let start = location;
                let format_c = read_format_string();
                format = format_c.format;

                _logger.warn(start::location, "format string '" + format + "' ignored");
                c = format_c.c;
            fi

            let fragment = "";

            if c == '}' then
                let fragment_c = read_string_fragment();

                fragment = fragment_c.fragment;
                c = fragment_c.c;
            fi

            if c == '\n' then
                _interpolation_depth = 0;
                return new TOKEN_PAIR(TOKEN.CANCEL_STRING, location, fragment);
            elif c == '"' then
                _interpolation_depth = _interpolation_depth - 1;

                return new TOKEN_PAIR(TOKEN.EXIT_STRING, location, fragment);
            elif c == '{' then
                return new TOKEN_PAIR(TOKEN.CONTINUE_STRING, location, fragment);
            else
                _logger.error(location, "unexpected character '" + c + "' in string interpolation");

                return new TOKEN_PAIR(TOKEN.STRING_LITERAL, location, fragment);
             fi
        si
    si
si
