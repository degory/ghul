namespace Lexical is
    use Collections;

    use Logging;

    class TOKEN_QUEUE is
        _buffer: LIST[TOKEN_PAIR];
        _speculate_index: int;
        _read_index: int;
        _write_index: int;
        _size: int;

        count: int => (_write_index - _read_index + _size) ∩ (_size - 1);

        avail: bool => count > 0;

        _peek_offset(index: int) -> int =>
            (_read_index + index) ∩ (_size - 1);

        _next_index(index: int) -> int =>
            (index + 1) ∩ (_size - 1);

        _prev_index(index: int) -> int =>
            (index - 1) ∩ (_size - 1);

        init() is
            _speculate_index = -1;
            _size = 512;
            _buffer = new LIST[TOKEN_PAIR](_size);

            // .NET can be very annoying sometimes...

            for i in 0.._size do
                _buffer.add(null);
            od
        si

        speculate_enter() is
            _speculate_index = _read_index;
        si

        speculate_exit() is
            _speculate_index = -1;
        si

        mark() -> int is
            return _read_index;
        si

        release(index: int) is
            _read_index = index;
        si

        peek() -> TOKEN_PAIR is
            assert _read_index != _write_index else "token queue underflow";

            return _buffer[_read_index];
        si

        enqueue(token: TOKEN_PAIR) is
            _buffer[_write_index] = token;

            _write_index = _next_index(_write_index);

            assert _write_index != _read_index /\ _write_index != _speculate_index else "token queue overflow";
        si

        dequeue() -> TOKEN_PAIR is
            assert _read_index != _write_index else "token queue underflow";

            let result = _buffer[_read_index];

            _read_index = _next_index(_read_index);
            
            return result;
        si
    si
si