namespace Lexical is
    use IO.Std;

    
    class TOKEN_NAMES  is
        _names: Collections.MAP[TOKEN,string];

        _instance: TOKEN_NAMES static;

        init() is
            _names = new Collections.MAP[TOKEN,string]();

            _names[TOKEN.ARRAY_DEF] = "[]";
            _names[TOKEN.ARROW_FAT] = "=>";
            _names[TOKEN.ARROW_THIN] = "->";
            _names[TOKEN.ASSERT] = "assert";
            _names[TOKEN.ASSIGN] = "=";
            _names[TOKEN.AT] = "@";
            _names[TOKEN.BREAK] = "break";
            _names[TOKEN.CASE] = "case";
            _names[TOKEN.CAST] = "cast";
            _names[TOKEN.CATCH] = "catch";
            _names[TOKEN.CHAR_LITERAL] = "char literal";
            _names[TOKEN.CLASS] = "class";
            _names[TOKEN.COLON] = ":";
            _names[TOKEN.COMMA] = ",";
            _names[TOKEN.CONST] = "const";
            _names[TOKEN.CONTINUE] = "continue";
            _names[TOKEN.DEFAULT] = "default";
            _names[TOKEN.DO] = "do";
            _names[TOKEN.DOT] = ".";
            _names[TOKEN.DOUBLE_LITERAL] = "double literal";
            _names[TOKEN.ELIF] = "elif";
            _names[TOKEN.ELSE] = "else";
            _names[TOKEN.END_OF_INPUT] = "end of input";
            _names[TOKEN.ENUM] = "enum";
            _names[TOKEN.ESAC] = "esac";
            _names[TOKEN.FALSE] = "false";
            _names[TOKEN.FI] = "fi";
            _names[TOKEN.FIELD] = "field";
            _names[TOKEN.FINALLY] = "finally";
            _names[TOKEN.FLOAT_LITERAL] = "float literal";
            _names[TOKEN.FOR] = "for";
            _names[TOKEN.IDENTIFIER] = "identifier";
            _names[TOKEN.IF] = "if";
            _names[TOKEN.IN] = "in";
            _names[TOKEN.INNATE] = "innate";
            _names[TOKEN.INT_LITERAL] = "int literal";
            _names[TOKEN.IS] = "is";
            _names[TOKEN.ISA] = "isa";
            _names[TOKEN.LE] = "<=";
            _names[TOKEN.LET] = "let";
            _names[TOKEN.NAMESPACE] = "namespace";
            _names[TOKEN.NEW] = "new";
            _names[TOKEN.NULL] = "null";
            _names[TOKEN.OD] = "od";
            _names[TOKEN.OPERATOR] = "operator";
            _names[TOKEN.PAREN_CLOSE] = ")";
            _names[TOKEN.PAREN_OPEN] = "(";
            _names[TOKEN.PRIVATE] = "private";
            _names[TOKEN.PROTECTED] = "protected";
            _names[TOKEN.PTR] = "ptr";
            _names[TOKEN.PUBLIC] = "public";
            _names[TOKEN.QUESTION] = "?";
            _names[TOKEN.RANGE] = "..";
            _names[TOKEN.REF] = "ref";
            _names[TOKEN.RETURN] = "return";
            _names[TOKEN.SEMICOLON] = ";";
            _names[TOKEN.SHIFT_LEFT] = "<<";
            _names[TOKEN.SHIFT_RIGHT] = ">>";
            _names[TOKEN.SI] = "si";
            _names[TOKEN.SQUARE_CLOSE] = "]";
            _names[TOKEN.SQUARE_OPEN] = "[";
            _names[TOKEN.STATIC] = "static";
            _names[TOKEN.STRING_LITERAL] = "string literal";
            _names[TOKEN.STRUCT] = "struct";
            _names[TOKEN.MINUS] = "-";
            _names[TOKEN.SELF] = "self";
            _names[TOKEN.SUPER] = "super";
            _names[TOKEN.THEN] = "then";
            _names[TOKEN.THROW] = "throw";
            _names[TOKEN.TRAIT] = "trait";            
            _names[TOKEN.TRUE] = "true";
            _names[TOKEN.TRY] = "try";
            _names[TOKEN.TYPEOF] = "typeof";
            _names[TOKEN.UNKNOWN] = "unknown";
            _names[TOKEN.UNTIL] = "until";
            _names[TOKEN.USE] = "use";
            _names[TOKEN.VECTOR] = "vector";
            _names[TOKEN.WHEN] = "when";
            _names[TOKEN.WHILE] = "while";
            _names[TOKEN.YRT] = "yrt";
            _names[TOKEN.ENTER_STRING] = "{{";
            _names[TOKEN.EXIT_STRING] = "}}";
            _names[TOKEN.CONTINUE_STRING] = "string fragment";
            _names[TOKEN.CANCEL_STRING] = "cancel string";
            _names[TOKEN.FORMAT_STRING] = ":";
        si

        instance: TOKEN_NAMES private static is
            if _instance == null then
                _instance = new TOKEN_NAMES();
            fi

            return _instance;
        si

        [token: Lexical.TOKEN]: string static is
            let n = instance._names;

            if n.contains_key(token) then
                return instance._names[token];
            else
                return "(unknown token {cast int(token)})";
            fi
        si

        [tokens: Collections.Iterable[Lexical.TOKEN]]: string static is
            let sorted_tokens = new Collections.LIST[string]();

            for t in tokens do
                sorted_tokens.add(TOKEN_NAMES[t]);
            od

            sorted_tokens.sort();
            
            let buffer = new System.Text.StringBuilder();
            let seen_any = false;

            for s in sorted_tokens do
                if seen_any then
                    buffer.append(", ");
                fi
                buffer.append(s);
                seen_any = true;
            od

            let result = buffer.to_string();

            let i = result.last_index_of(',');

            if i >= 0 then
                let left = result.substring(0, i);
                let right = result.substring(i + 2);
                result = "{left} or {right}";
            fi

            return result;
        si
    si
si
