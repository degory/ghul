namespace Source is
    use System.IndexOutOfRangeException;

    class LOCATION is
        _internal: LOCATION static;
        _unknown: LOCATION static;
        _reflected: LOCATION static;

        internal: LOCATION static => _internal;
        unknown: LOCATION static => _unknown;
        reflected: LOCATION static => _reflected;

        init_static() static is
            _internal = new LOCATION("internal", 1, 1, 1, 1);
            _unknown = new LOCATION("unknown", 1, 1, 1, 1);
            _reflected = new LOCATION("reflected", 1, 1, 1, 1);
        si

        file_name: string;

        // line << 12 + column - easier to compare
        start: int;
        end: int;

        length: int => end - start;

        is_internal: bool => self == internal;
        is_reflected: bool => self == reflected;

        init(
            file_name: string,

            start_line: int,
            start_column: int,

            end_line: int,
            end_column: int
        )
        is
            self.file_name = file_name;

            if
                start_line <= 0 \/ start_column < 0 \/
                end_line < 0 \/ end_column < 0
            then
                throw new IndexOutOfRangeException(
                    string.format("invalid location {0},{0}..{0},{0}", [start_line, start_column, end_line, end_column]: object)
                );
            fi

            start = pair(start_line, start_column);
            end = pair(end_line, end_column);

            if end == 0 then
                end = start;
            elif end < start then
                var t = end;
                end = start;
                start = t;
            fi
        si

        init(
            file_name: string,
            start: int,
            end: int
        )
        is
            self.file_name = file_name;
            self.start = start;
            self.end = end;
        si
        
        start_line: int => line_of(start);

        start_column: int => column_of(start);

        end_line: int => line_of(end);

        end_column: int => column_of(end);

        =~(other: LOCATION) -> bool is
            if self == other then
                return true;
            else
                return self.start == other.start /\ self.end == other.end /\ self.file_name =~ other.file_name;
            fi
        si

        pair(line: int, column: int) -> int static => (line << 12) | column;

        line_of(line_column: int) -> int static => line_column >> 12;

        column_of(line_column: int) -> int static => line_column & 0xFFF;

        // FIXME: probably also broken
        contains(line_column: int) -> bool =>
            self.start <= line_column /\
            self.end >= line_column;

        contains(line: int, column: int) -> bool =>
            (self.start_line < line \/ (self.start_line == line /\ self.start_column <= column)) /\
            (self.end_line > line \/ (self.end_line == line /\ self.end_column >= column));

        contains(l: LOCATION) -> bool =>
            self.file_name =~ l.file_name /\
            self.contains(l.start) /\
            self.contains(l.end);

        overlaps(l: LOCATION) -> bool =>
            self.file_name == l.file_name /\
                (self.contains(l.start) \/
                self.contains(l.end));

        @IL.name("ToString")
        to_string() -> string =>
            string.format("{0} {1},{2}..{3},{4}", [file_name, start_line, start_column, end_line, end_column]);

        ::(with: LOCATION) -> LOCATION is
            var new_start: int;
            var new_end: int;

            if start < with.start then
                new_start = start;
            else
                new_start = with.start;
            fi

            if end > with.end then
                new_end = end;
            else
                new_end = with.end;
            fi

            return new LOCATION(file_name, new_start, new_end);
        si

        ..(with: LOCATION) -> LOCATION is
            var new_start: int;
            var new_end: int;

            if start < with.start then
                new_start = start;
            else
                new_start = with.start;
            fi

            if end > with.start then
                new_end = end;
            else
                new_end = with.start;
            fi

            if column_of(new_end) > 1 then
                new_end = pair(column_of(new_end)-1, line_of(new_end));
            fi

            return new LOCATION(file_name, new_start, new_end);
        si
    si

    class LOCATION_CURSOR is
        _file_name: string;

        _previous_line: int;
        _previous_column: int;

        _start_line: int;
        _start_column: int;

        _current_line: int;
        _current_column: int;

        init(file_name: string) is
            _file_name = file_name;

            _previous_line = 1;
            _previous_column = 0;

            _start_line = 1;
            _start_column = 0;

            _current_line = 1;
            _current_column = 0;
        si

        jump(line: int, column: int) is
            _start_line = line;
            _start_column = column;

            _current_line = line;
            _current_column = column;
        si

        save() is
            _previous_line = _current_line;
            _previous_column = _current_column;
        si

        restore() is
            _current_line = _previous_line;
            _current_column = _previous_column;
        si

        start() is
            _start_line = _current_line;
            _start_column = _current_column;
        si

        next_column() is
            _current_column = _current_column + 1;
        si

        next_line() is
            _current_column = 0;
            _current_line = _current_line + 1;
        si

        location: LOCATION =>
            new LOCATION(
                _file_name,

                _start_line,
                _start_column,

                _current_line,
                _current_column
            );
    si
si
