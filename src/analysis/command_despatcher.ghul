namespace Analysis is
    use System.Exception;
    use IO.Std;

    use Collections.Iterable;

    use Pair = Collections.KeyValuePair`2;

    use IoC;
    use Logging;
    use Source;
    use Compiler;

    class COMMAND_DESPATCHER is
        _timers: TIMERS;
        _log: IO.TextWriter;
        _watchdog: WATCHDOG;
        _reader: IO.TextReader;
        _writer: IO.TextWriter;
        _command_map: Collections.MAP[string,CommandHandler];

        _listening: bool;

        init(
            reader: IO.TextReader, 
            writer: IO.TextWriter, 
            timers: TIMERS,
            log: IO.TextWriter,
            watchdog: WATCHDOG
        ) is
            _reader = reader;
            _writer = writer;
            _timers = timers;
            _log = log;
            _watchdog = watchdog;

            _command_map = new Collections.MAP[string,CommandHandler]();
        si

        add_handler(command_name: string, command_handler: CommandHandler) is
            assert !_command_map.contains_key(command_name) else "replacing command handler for " + command_name;

            _command_map[command_name] = command_handler;
        si

        poll() -> bool is
            if !_listening then
                _writer.write_line("LISTEN");
                _writer.write("" + cast char(12));
                _writer.flush();

                _listening = true;
            fi

            let command = read_command();

            if command? then
                if _command_map.contains_key(command) then
                    let handler = _command_map[command];

                    if _watchdog.want_restart /\ command !~ "EDIT" /\ command !~ "ANALYSE" then
                        _log.write_line("poisoned: should ignore non-edit command: " + command);
                    fi

                    // @IF.not.release()
                    _timers.start(command);

                    handler.handle(_reader, _writer);

                    // @IF.not.release()
                    _timers.finish(command);
                    
                    // @IF.not.release()
                    _log.write_line(_timers[command]);

                    _watchdog.increment(_writer);

                    return true;
                else
                    _log.write_line("gh큰l: no handler found for command: '" + command + "' in " + _command_map);

                    _watchdog.request_restart();

                    return true;
                fi
            else
                _log.write_line("gh큰l: reader is at end");
            fi

            _log.flush();

            return false;
        si

        read_command() -> string is
            let desynchronized = false;

            do
                let command = _reader.read_line();

                if !command? then
                    break;
                fi
                
                while command.starts_with('\014') do
                    command = command.substring(1);
                od

                if 
                    command.length >= 3 /\ 
                    command.starts_with('#') /\ 
                    command.ends_with('#')
                then
                    if desynchronized then
                        _log.write_line("gh큰l: well-formed command received: resynchronized");
                    fi

                    return command.substring(1, command.length - 2);
                fi

                if !desynchronized then
                    let length = command.length;

                    if length > 20 then
                        length = 20;
                    fi
                    
                    _log.write_line("gh큰l: garbled command: attempting to resynchronize: " + command.substring(0, length));

                    desynchronized = true;
                fi
            od

            return null;
        si
                
        restart(writer: IO.TextWriter) is
            throw new System.NotImplementedException("restart");
        si
    si
si