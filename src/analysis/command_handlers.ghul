namespace Analysis is
    use System.Exception;
    use IO.Std;

    use Collections.Iterable;

    use Pair = Collections.KeyValuePair`2;

    use IoC;
    use Logging;
    use Source;
    use Compiler;

    class HOVER_HANDLER: CommandHandler is
        _watchdog: WATCHDOG;
        _symbol_use_locations: Semantic.SYMBOL_USE_LOCATIONS;
        _full_compiler: FULL_COMPILER;

        init(
            watchdog: WATCHDOG,
            symbol_use_locations: Semantic.SYMBOL_USE_LOCATIONS,
            full_compiler: FULL_COMPILER
        )
        is
            _watchdog = watchdog;
            _symbol_use_locations = symbol_use_locations;
            _full_compiler = full_compiler;
        si

        handle(reader: IO.TextReader, writer: IO.TextWriter) is
            IoC.CONTAINER.instance.want_tab_delimited_logger(writer);

            let path = reader.read_line();
            let line = System.Convert.to_int32(reader.read_line());
            let column = System.Convert.to_int32(reader.read_line()) + 1;

            let written_header = false;
            
            try
                if !_watchdog.want_restart then
                    let symbol = _symbol_use_locations.find_definition_from_use(path, line, column);

                    if !symbol? then
                        _full_compiler.compile_all(writer);

                        symbol = _symbol_use_locations.find_definition_from_use(path, line, column);
                    fi

                    writer.write_line("HOVER");
                    written_header = true;                    
    
                    if symbol? then                        
                        writer.write_line(symbol.collapse_group_if_single_member().description);
                    fi
                fi
            catch e: Exception
                Std.error.write_line("HOVER: {e.get_type()} {e.message}");

                _watchdog.request_restart();

                if !written_header then
                    writer.write_line("HOVER");                    
                fi
            yrt

            Std.error.flush();

            writer.write("{cast char(12)}");
            writer.flush();
        si
    si

    class DEFINITION_HANDLER: SymbolLocationHandler is
        _watchdog: WATCHDOG;
        _symbol_use_locations: Semantic.SYMBOL_USE_LOCATIONS;
        _full_compiler: FULL_COMPILER;

        init(
            watchdog: WATCHDOG,
            symbol_use_locations: Semantic.SYMBOL_USE_LOCATIONS,
            full_compiler: FULL_COMPILER
        )
        is
            _watchdog = watchdog;
            _symbol_use_locations = symbol_use_locations;
            _full_compiler = full_compiler;
        si

        handle(reader: IO.TextReader, writer: IO.TextWriter) is
            IoC.CONTAINER.instance.want_tab_delimited_logger(writer);

            let path = reader.read_line();
            let line = System.Convert.to_int32(reader.read_line());
            let column = System.Convert.to_int32(reader.read_line());

            let written_header = false;

            try
                if !_watchdog.want_restart then
                    let symbol = _symbol_use_locations.find_definition_from_use(path, line, column);

                    if !symbol? then
                        _full_compiler.compile_all(writer);

                        symbol = _symbol_use_locations.find_definition_from_use(path, line, column);
                    fi
                    
                    writer.write_line("DEFINITION");
                    written_header = true;
                                            
                    if symbol? /\ !symbol.is_internal /\ !symbol.is_reflected then
                        write_location_list(writer, [symbol.location]);
                    fi
                fi
            catch e: Exception
                Std.error.write_line("DEFINITION: {e.get_type()}: {e.message}");
                _watchdog.request_restart();

                if !written_header then
                    writer.write_line("DEFINITION");                    
                fi                
            yrt

            Std.error.flush();

            writer.write("{cast char(12)}");
            writer.flush();
        si
    si

    class DECLARATION_HANDLER: SymbolLocationHandler is
        _full_compiler: FULL_COMPILER;

        init(
            watchdog: WATCHDOG,
            symbol_use_locations: Semantic.SYMBOL_USE_LOCATIONS,
            full_compiler: FULL_COMPILER
        )
        is
            super.init(watchdog, symbol_use_locations);

            _full_compiler = full_compiler;
        si

        handle(reader: IO.TextReader, writer: IO.TextWriter) is
            IoC.CONTAINER.instance.want_tab_delimited_logger(writer);

            let written_header = false;

            try
                let path = reader.read_line();
                let line = System.Convert.to_int32(reader.read_line());
                let column = System.Convert.to_int32(reader.read_line());

                if !_watchdog.want_restart then
                    let symbol = _symbol_use_locations.find_definition_from_use(path, line, column);

                    if !symbol? then
                        _full_compiler.compile_all(writer);

                        symbol = _symbol_use_locations.find_definition_from_use(path, line, column);
                    fi

                    writer.write_line("DECLARATION");
                    written_header = true;
    
                    if symbol? then
                        let locations = _symbol_use_locations.find_declarations_of_symbol(symbol);

                        write_location_list(writer, locations);
                    fi
                fi

            catch e: Exception
                Std.error.write_line("DECLARATION: {e.get_type()}: {e.message}");

                if !written_header then
                    writer.write_line("DECLARATION");
                fi
            yrt

            Std.error.flush();

            writer.write("{cast char(12)}");
            writer.flush();
        si
    si

    class FULL_COMPILER is
        _watchdog: WATCHDOG;
        _compiler: COMPILER;
        _source_files: Iterable[SOURCE_FILE];
        _timers: TIMERS;

        init(
            watchdog: WATCHDOG, 
            compiler: COMPILER, 
            source_files: Iterable[SOURCE_FILE],
            timers: TIMERS
        ) is
            _watchdog = watchdog;
            _compiler = compiler;
            _source_files = source_files;
            _timers = timers;
        si

        compile_all(writer: IO.TextWriter) is
            try
                _timers.start("compile-all");

                writer.write_line("DIAGNOSTICS");

                Semantic.Types.NAMED.clear_cache();

                if !_watchdog.want_restart then
                    for i in _source_files do
                        IoC.CONTAINER.instance.logger.clear(i.file_name, true);
                        i.build_flags.want_compile_up_to_expressions = true;
                        i.build_flags.want_compile_expressions = true;
                    od

                    IoC.CONTAINER.instance.logger.start_analysis();

                    _compiler.clear_symbols();

                    _compiler.queue(_source_files);

                    _compiler.build();

                    IoC.CONTAINER.instance.logger.write_all_diagnostics(writer, IoC.CONTAINER.instance.logger_formatter);        
                fi
 
                _watchdog.enable();

            catch e: Exception
                Std.error.write_line("FULL_COMPILER: {e.get_type()}: {e.message}");

                _watchdog.request_restart();
            finally
                // Semantic.Types.NAMED.dump_stats();

                IoC.CONTAINER.instance.logger.end_analysis();

                _compiler.clear_queue(); 

                writer.write("{cast char(12)}");
                writer.flush();

                _timers.finish("compile-all");
                @IF.not.release()
                IO.Std.error.write_line(_timers["compile-all"]);                
            yrt
        si
    si

    // this does a full compile of the files that have been edited, plus a partial
    // compile (up to but not including expressions) of all other files
    class FILE_EDITED_HANDLER: CommandHandler, SourceFileLookup, Iterable[SOURCE_FILE] is
        _watchdog: WATCHDOG;
        _compiler: COMPILER;
        _build_flags: BUILD_FLAGS;
        _library_files: Iterable[string];
        _symbol_table: Semantic.SYMBOL_TABLE;
        
        _source_files_by_path: Collections.MutableMap[string,SOURCE_FILE];

        file_names: Iterable[string] => _source_files_by_path.keys;

        iterator: Collections.Iterator[SOURCE_FILE]
            => _source_files_by_path.values.iterator;

        init(
            watchdog: WATCHDOG,
            compiler: COMPILER,
            build_flags: BUILD_FLAGS,
            library_files: Iterable[string],
            symbol_table: Semantic.SYMBOL_TABLE
        ) is
            _watchdog = watchdog;
            _compiler = compiler;
            _build_flags = build_flags;
            _library_files = library_files;
            _symbol_table = symbol_table;

            _source_files_by_path = new Collections.MAP[string,SOURCE_FILE]();
        si

        find_source_file(path: string) -> SOURCE_FILE is
            if _source_files_by_path.contains_key(path) then
                return _source_files_by_path[path];
            fi
        si

        parse_and_add_file(path: string, writer: IO.TextWriter, reader: IO.TextReader, is_internal_file: bool) is
            IoC.CONTAINER.instance.logger.clear(path, false);

            let source_file = _compiler.parse(path, reader, _build_flags, is_internal_file);
            _source_files_by_path[path] = source_file;

            _compiler.post_parse([source_file]);

            source_file.build_flags.want_compile_expressions = true;
        si
        
        handle(reader: IO.TextReader, writer: IO.TextWriter) is
            IoC.CONTAINER.instance.want_tab_delimited_logger(writer);

            for i in _source_files_by_path.values do
                i.build_flags.want_compile_expressions = false;
            od

            let paths = new Collections.LIST[string]();

            do
                let path = reader.read_line();

                if string.is_null_or_white_space(path) then
                    break;
                fi

                paths.add(path);
            od

            if _library_files? then
                for library_file_path in _library_files do
                    parse_and_add_file(library_file_path, writer, IO.File.open_text(library_file_path), true);
                od 

                _library_files = null;                    
            fi

            try
                for path in paths do
                    parse_and_add_file(path, writer, reader, false);
                od
            catch e: Exception
                Std.error.write_line("PARSE: caught exception {e}");
            yrt

            try
                writer.write_line("DIAGNOSTICS");

                Semantic.Types.NAMED.clear_cache();

                if !_watchdog.want_restart then
                    for i in _source_files_by_path.values do
                        i.build_flags.want_compile_up_to_expressions = true;
                    od

                    IoC.CONTAINER.instance.logger.start_analysis();

                    _compiler.clear_symbols();
                    _compiler.queue(self);
                    _compiler.build();

                    IoC.CONTAINER.instance.logger.write_all_diagnostics(writer, IoC.CONTAINER.instance.logger_formatter);        
                fi

                _watchdog.enable();

            catch e: Exception
                Std.error.write_line("ANALYSE: {e.get_type()}: {e}");

                _watchdog.request_restart();
            finally
                _compiler.clear_queue(); 

                IoC.CONTAINER.instance.logger.end_analysis();

                writer.write("{cast char(12)}");
                writer.write_line("PARTIAL DONE");
                writer.write("{cast char(12)}");
                writer.flush();
            yrt
        si
    si

    // This does a full compile of all files
    class FULL_COMPILE_HANDLER: CommandHandler is
        _watchdog: WATCHDOG;
        _compiler: COMPILER;
        _source_files: Iterable[SOURCE_FILE];
        _build_flags: BUILD_FLAGS;

        init(
            watchdog: WATCHDOG,
            compiler: COMPILER,
            source_files: Iterable[SOURCE_FILE],
            build_flags: BUILD_FLAGS
        ) is
            _watchdog = watchdog;
            _compiler = compiler;
            _source_files = source_files;
            _build_flags = build_flags;
        si

        handle(
            reader: IO.TextReader,
            writer: IO.TextWriter
        ) is
            try
                if !_watchdog.want_restart then
                    writer.write_line("DIAGNOSTICS");

                    Semantic.Types.NAMED.clear_cache();
    
                    for i in _source_files do
                        IoC.CONTAINER.instance.logger.clear(i.file_name, true);

                        i.build_flags.want_compile_up_to_expressions = true;
                        i.build_flags.want_compile_expressions = true;
                    od

                    IoC.CONTAINER.instance.logger.start_analysis();
                    
                    _compiler.clear_symbols();

                    _compiler.queue(_source_files);

                    _compiler.build();

                    IoC.CONTAINER.instance.logger.write_all_diagnostics(writer, IoC.CONTAINER.instance.logger_formatter);        
                fi
 
                _watchdog.enable();

            catch e: Exception
                Std.error.write_line("FULL COMPILE: {e.get_type()}: {e.message}");

                _watchdog.request_restart();
            finally
                IoC.CONTAINER.instance.logger.end_analysis();

                _compiler.clear_queue(); 

                writer.write("{cast char(12)}");
                writer.write_line("FULL DONE");
                writer.write("{cast char(12)}");
                writer.flush();
            yrt

        si
    si

    class COMPLETION_HANDLER: CommandHandler is
        _watchdog: WATCHDOG;
        _completer: Syntax.Process.COMPLETER;
        _source_file_lookup: SourceFileLookup;
        _full_compiler: FULL_COMPILER;

        init(
            watchdog: WATCHDOG,
            completer: Syntax.Process.COMPLETER,
            source_file_lookup: SourceFileLookup,
            full_compiler: FULL_COMPILER
        )
        is
            _watchdog = watchdog;
            _completer = completer;
            _source_file_lookup = source_file_lookup;
            _full_compiler = full_compiler;
        si

        handle(reader: IO.TextReader, writer: IO.TextWriter) is
            let written_header = false;

            // TODO if we're completing a member expression, this is not required:
            _full_compiler.compile_all(writer);

            try
                let path = reader.read_line();
                let target_line = System.Convert.to_int32(reader.read_line());
                let target_column = System.Convert.to_int32(reader.read_line());

                writer.write_line("COMPLETION");
                written_header = true;

                if !_watchdog.want_restart then
                    let results = find_completions(path, target_line, target_column);

                    if results? then
                        for pair in results do
                            writer.write_line("{{0}}\t{{1}}\t{{2}}", [pair.key, cast int(pair.value.completion_kind), pair.value.description]);
                        od
                    fi
                fi
            catch e: Exception
                Std.error.write_line("COMPLETION: {e.get_type()}: {e.message}");

                _watchdog.request_restart();

                if !written_header then
                    writer.write_line("COMPLETION");
                fi
            yrt

            Std.error.flush();

            writer.write("{cast char(12)}");
            writer.flush();
        si

        find_completions(path: string, target_line: int, target_column: int) -> Iterable[Pair[string,Semantic.Symbols.Symbol]] is
            let i = _source_file_lookup.find_source_file(path);

            return _completer.find_completions(i.definition, target_line, target_column);
        si
    si

    class SIGNATURE_HANDLER: CommandHandler is
        _watchdog: WATCHDOG;
        _signature_help: Syntax.Process.SIGNATURE_HELP;
        _source_file_lookup: SourceFileLookup;

        init(
            watchdog: WATCHDOG,
            signature_help: Syntax.Process.SIGNATURE_HELP,
            source_file_lookup: SourceFileLookup
        )
        is
            _watchdog = watchdog;
            _signature_help = signature_help;
            _source_file_lookup = source_file_lookup;
        si

        handle(reader: IO.TextReader, writer: IO.TextWriter) is
            let written_header = false;

            try
                let path = reader.read_line();
                let target_line = System.Convert.to_int32(reader.read_line());
                let target_column = System.Convert.to_int32(reader.read_line());

                if !_watchdog.want_restart then
                    writer.write_line("SIGNATURE");
                    written_header = true;

                    let results = find_signatures(path, target_line, target_column);                    

                    if results? then
                        writer.write_line("{results.best_result_index}");
                        writer.write_line("{results.current_parameter_index}");
                        for symbol in results.results do
                            let line = get_function_doc_for(symbol);
                            writer.write_line(line);
                        od
                    fi
                fi
            catch e: Exception
                Std.error.write_line("SIGNATURE: {e.get_type()}: {e.message}");

                _watchdog.request_restart();

                if !written_header then
                    writer.write_line("SIGNATURE");
                fi
            yrt

            Std.error.flush();

            writer.write("{cast char(12)}");
            writer.flush();
        si

        get_function_doc_for(function: Semantic.Symbols.Function) -> string is
            let result = new System.Text.StringBuilder();

            result
                .append(function.short_description);

            for i in 0..function.arguments.count do
                result
                    .append('\t')
                    .append(function.get_short_argument_description(i));
            od



            return result.to_string();
        si

        find_signatures(path: string, target_line: int, target_column: int) -> Semantic.OVERLOAD_MATCHES_RESULT is
            let i = _source_file_lookup.find_source_file(path);

            return _signature_help.find_signatures(i.definition, target_line, target_column);
        si
    si

    class SYMBOLS_HANDLER: CommandHandler is
        _watchdog: WATCHDOG;
        _symbol_definition_locations: Semantic.SYMBOL_DEFINITION_LOCATIONS;
        _source_file_lookup: SourceFileLookup;
        _full_compiler: FULL_COMPILER;

        init(
            watchdog: WATCHDOG,
            symbol_definition_locations: Semantic.SYMBOL_DEFINITION_LOCATIONS,
            source_file_lookup: SourceFileLookup,
            full_compiler: FULL_COMPILER
        )
        is
            _watchdog = watchdog;
            _symbol_definition_locations = symbol_definition_locations;
            _source_file_lookup = source_file_lookup;
            _full_compiler = full_compiler;
        si

        handle(reader: IO.TextReader, writer: IO.TextWriter) is
            let written_header = false;

            try
                let path = reader.read_line();

                if !_watchdog.want_restart then
                    if path? /\ path.length > 0 then
                        writer.write_line("SYMBOLS");
                        written_header = true;        

                        write_symbol_list_for_file(writer, path, _symbol_definition_locations.find_definitions_from_file(path, false));
                    else
                        _full_compiler.compile_all(writer);

                        writer.write_line("SYMBOLS");
                        written_header = true;        

                        for i in _source_file_lookup.file_names do
                            if i? /\ i.length > 0 then
                                write_symbol_list_for_file(writer, i, _symbol_definition_locations.find_definitions_from_file(i, true));
                            fi
                        od
                    fi
                fi
            catch e: Exception
                Std.error.write_line("SYMBOLS: {e.get_type()}: {e.message} {e.to_string()}");

                _watchdog.request_restart();

                if !written_header then
                    writer.write_line("SYMBOLS");
                fi
            yrt

            Std.error.flush();

            writer.write("{cast char(12)}");
            writer.flush();
        si

        write_symbol_list_for_file(writer: IO.TextWriter, path: string, symbols: Iterable[Semantic.Symbols.Symbol]) is
            writer.write_line(path);            

            if symbols? then
                for symbol in symbols | .filter(s => s? /\ !s.is_internal) do
                    try
                        writer.write_line(
                            get_symbol_info_for(symbol)
                        );
    
                    catch ex: Exception
                        // log?
                    yrt
                od
            fi
        si

        get_symbol_info_for(symbol: Semantic.Symbols.Symbol) -> string is
            let result = new System.Text.StringBuilder();
            let qualified_name = symbol.qualified_name;

            let qualifier = qualified_name.substring(0, qualified_name.length - symbol.name.length - 1);

            result
                .append(symbol.search_description)
                .append('\t')
                .append(cast int(symbol.symbol_kind))
                .append('\t')
                .append(symbol.span.start_line)
                .append('\t')
                .append(symbol.span.start_column)
                .append('\t')
                .append(symbol.span.end_line)
                .append('\t')
                .append(symbol.span.end_column)
                .append('\t')
                .append(qualifier);

            return result.to_string();
        si
    si

    class SymbolLocationHandler: CommandHandler is
        _watchdog: WATCHDOG;
        _symbol_use_locations: Semantic.SYMBOL_USE_LOCATIONS;

        init(
            watchdog: WATCHDOG,
            symbol_use_locations: Semantic.SYMBOL_USE_LOCATIONS
        )
        is
            _watchdog = watchdog;
            _symbol_use_locations = symbol_use_locations;
        si

        handle(reader: IO.TextReader, writer: IO.TextWriter);

        write_location_list(writer: IO.TextWriter, locations: Iterable[LOCATION]) is
            for location in locations do
                writer.write_line(
                    format_location(location)
                );
            od
        si

        format_location(location: LOCATION) -> string is
            let result = new System.Text.StringBuilder();

            result
                .append(location.file_name)
                .append('\t')
                .append(location.start_line)
                .append('\t')
                .append(location.start_column)
                .append('\t')
                .append(location.end_line)
                .append('\t')
                .append(location.end_column);

            return result.to_string();
        si        
    si

    class REFERENCES_HANDLER: SymbolLocationHandler is
        _full_compiler: FULL_COMPILER;

        init(
            watchdog: WATCHDOG,
            symbol_use_locations: Semantic.SYMBOL_USE_LOCATIONS,
            full_compiler: FULL_COMPILER
        )
        is
            super.init(watchdog, symbol_use_locations);

            _full_compiler = full_compiler;
        si

        handle(reader: IO.TextReader, writer: IO.TextWriter) is
            IoC.CONTAINER.instance.want_tab_delimited_logger(writer);

            let written_header = false;

            try
                let path = reader.read_line();
                let line = System.Convert.to_int32(reader.read_line());
                let column = System.Convert.to_int32(reader.read_line());

                if !_watchdog.want_restart then
                    let symbol = _symbol_use_locations.find_definition_from_use(path, line, column);

                    if !symbol? then
                        _full_compiler.compile_all(writer);
                    fi
                    
                    if !symbol? then
                        symbol = _symbol_use_locations.find_definition_from_use(path, line, column);
                    fi

                    writer.write_line("REFERENCES");
                    written_header = true;    

                    if symbol? then
                        let locations = _symbol_use_locations.find_references_to_symbol(symbol);

                        write_location_list(writer, locations);
                    fi
                fi

            catch e: Exception
                Std.error.write_line("REFERENCES: {e.get_type()}: {e.message}");

                if !written_header then
                    writer.write_line("REFERENCES");
                fi
            yrt

            Std.error.flush();

            writer.write("{cast char(12)}");
            writer.flush();
        si
    si

    class IMPLEMENTATION_HANDLER: SymbolLocationHandler is
        _full_compiler: FULL_COMPILER;

        init(
            watchdog: WATCHDOG,
            symbol_use_locations: Semantic.SYMBOL_USE_LOCATIONS,
            full_compiler: FULL_COMPILER
        )
        is
            super.init(watchdog, symbol_use_locations);

            _full_compiler = full_compiler;
        si

        handle(reader: IO.TextReader, writer: IO.TextWriter) is
            IoC.CONTAINER.instance.want_tab_delimited_logger(writer);

            _full_compiler.compile_all(writer);

            let written_header = false;

            try
                let path = reader.read_line();
                let line = System.Convert.to_int32(reader.read_line());
                let column = System.Convert.to_int32(reader.read_line());

                writer.write_line("IMPLEMENTATION");
                written_header = true;

                if !_watchdog.want_restart then
                    let symbol = _symbol_use_locations.find_definition_from_use(path, line, column);

                    if symbol? then
                        let locations = _symbol_use_locations.find_implementations_of_symbol(symbol);

                        write_location_list(writer, locations);
                    fi
                fi

            catch e: Exception
                Std.error.write_line("IMPLEMENTATION: {e.get_type()} {e.message}");

                if !written_header then
                    writer.write_line("IMPLEMENTATION");
                fi
            yrt

            Std.error.flush();

            writer.write("{cast char(12)}");
            writer.flush();
        si
    si

    class RENAME_REQUEST_HANDLER: CommandHandler is
        _watchdog: WATCHDOG;
        _symbol_use_locations: Semantic.SYMBOL_USE_LOCATIONS;
        _full_compiler: FULL_COMPILER;

        init(
            watchdog: WATCHDOG,
            symbol_use_locations: Semantic.SYMBOL_USE_LOCATIONS,
            full_compiler: FULL_COMPILER
        )
        is
            _watchdog = watchdog;
            _symbol_use_locations = symbol_use_locations;
            _full_compiler = full_compiler;
        si

        handle(reader: IO.TextReader, writer: IO.TextWriter) is
            IoC.CONTAINER.instance.want_tab_delimited_logger(writer);

            // TODO check scope of symbol - if it can't be referenced outside the current file
            // i.e. if it's a local variable - then this is not required:
            _full_compiler.compile_all(writer);

            let written_header = false;

            try
                let path = reader.read_line();
                let line = System.Convert.to_int32(reader.read_line());
                let column = System.Convert.to_int32(reader.read_line());
                let new_name = reader.read_line();

                writer.write_line("RENAMEREQUEST");
                written_header = true; 

                if !_watchdog.want_restart then
                    let symbol = _symbol_use_locations.find_definition_from_use(path, line, column);

                    if symbol? then
                        let locations = _symbol_use_locations.find_references_to_symbol_for_rename(symbol);

                        write_edit_list(writer, locations, new_name);
                    fi
                fi

            catch e: Exception
                Std.error.write_line("RENAMEREQUEST: {e.get_type()}: {e.message}");

                if !written_header then
                    writer.write_line("RENAMEREQUEST");
                fi
            yrt

            Std.error.flush();

            writer.write("{cast char(12)}");
            writer.flush();
        si

        write_edit_list(writer: IO.TextWriter, locations: Iterable[LOCATION], new_name: string) is
            let lines = new Collections.LIST[string]();

            let files = new Collections.SET[string]();

            for location in locations do
                writer.write_line(
                    format_edit(location, new_name)
                );

                files.add(location.file_name);
            od
        si

        format_edit(location: LOCATION, new_name: string) -> string is
            let result = new System.Text.StringBuilder();

            result
                .append(location.file_name)
                .append('\t')
                .append(location.start_line)
                .append('\t')
                .append(location.start_column)
                .append('\t')
                .append(location.end_line)
                .append('\t')
                .append(location.end_column)
                .append('\t')
                .append(new_name);

            return result.to_string();
        si        
    si    

    class RESTART_HANDLER: CommandHandler is
        init() is si

        handle(reader: IO.TextReader, writer: IO.TextWriter) is
            IoC.CONTAINER.instance.want_tab_delimited_logger(writer);

            writer.write("{cast char(12)}");
            writer.close();

            System.Environment.exit(1);
        si
    si
si