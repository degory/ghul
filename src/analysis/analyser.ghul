namespace Analysis is
    use System.Exception;
    use IO.Std;

    use Collections.Iterable;

    use Pair = Collections.KeyValuePair`2;

    use IoC;
    use Logging;
    use Source;
    use Compiler;

    trait CommandHandler is
        handle(reader: IO.TextReader, writer: IO.TextWriter);
    si

    trait SourceFileLookup is
        file_names: Iterable[string];
        find_source_file(file_name: string) -> SOURCE_FILE;
    si

    class ANALYSER is
        _log: IO.TextWriter;
        _symbol_table: Semantic.SYMBOL_TABLE;
        _compiler: COMPILER;
        _timers: TIMERS;

        _command_map: Collections.MAP[string,CommandHandler];
        _despatcher: COMMAND_DESPATCHER;

        init(
            compiler: COMPILER,
            timers: TIMERS,
            symbol_table: Semantic.SYMBOL_TABLE,
            symbol_use_locations: Semantic.SYMBOL_USE_LOCATIONS,
            symbol_definition_locations: Semantic.SYMBOL_DEFINITION_LOCATIONS,
            completer: Syntax.Process.COMPLETER,
            signature_help: Syntax.Process.SIGNATURE_HELP,
            reader: IO.TextReader,
            writer: IO.TextWriter,
            library_files: Iterable[string],
            build_flags: BUILD_FLAGS
        ) is
            _log = Std.error;
            _timers = timers;
            _symbol_table = symbol_table;

            _command_map = new Collections.MAP[string,CommandHandler]();

            let watchdog = new WATCHDOG();

            _despatcher = new COMMAND_DESPATCHER(reader, writer, _timers, _log, watchdog);

            build_flags.want_compile_expressions = true;

            let file_edited_handler = new FILE_EDITED_HANDLER(watchdog, compiler, build_flags, library_files, symbol_table);
            let hover_handler = new HOVER_HANDLER(watchdog, symbol_use_locations);
            let definition_handler = new DEFINITION_HANDLER(watchdog, symbol_use_locations);
            let declaration_handler = new DECLARATION_HANDLER(watchdog, symbol_use_locations);
            let completion_handler = new COMPLETION_HANDLER(watchdog, completer, file_edited_handler);
            let signature_handler = new SIGNATURE_HANDLER(watchdog, signature_help, file_edited_handler);
            let symbols_handler = new SYMBOLS_HANDLER(watchdog, symbol_definition_locations, file_edited_handler);
            let references_handler = new REFERENCES_HANDLER(watchdog, symbol_use_locations);
            let implementation_handler = new IMPLEMENTATION_HANDLER(watchdog, symbol_use_locations);
            let rename_request_handler = new RENAME_REQUEST_HANDLER(watchdog, symbol_use_locations);
            let format_handler = new FORMAT_HANDLER(watchdog, file_edited_handler);
            let restart_handler = new RESTART_HANDLER();

            _despatcher.add_handler(
                "EDIT", file_edited_handler
            );

            _despatcher.add_handler(
                "HOVER", hover_handler
            );

            _despatcher.add_handler(
                "DEFINITION", definition_handler
            );

            _despatcher.add_handler(
                "DECLARATION", declaration_handler
            );

            _despatcher.add_handler(
                "COMPLETE", completion_handler
            );

            _despatcher.add_handler(
                "SIGNATURE", signature_handler
            );

            _despatcher.add_handler(
                "SYMBOLS", symbols_handler
            );

            _despatcher.add_handler(
                "REFERENCES", references_handler
            );

            _despatcher.add_handler(
                "IMPLEMENTATION", implementation_handler
            );

            _despatcher.add_handler(
                "RENAMEREQUEST", rename_request_handler
            );

            _despatcher.add_handler(
                "FORMAT", format_handler
            );

            _despatcher.add_handler(
                "RESTART", restart_handler
            );
        si

        run() is
            do
                if !_despatcher.poll() then
                    _log.write_line("ghÅ«l: exiting");
                    return;
                fi
            od
        si
    si
si