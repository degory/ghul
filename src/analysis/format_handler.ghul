namespace Analysis is
    use System.Exception;
    use IO.Std;

    use Collections.Iterable;

    use Pair = Collections.KeyValuePair`2;

    use IoC;
    use Logging;
    use Source;
    use Compiler;

    class FORMAT_HANDLER: CommandHandler is
        _watchdog: WATCHDOG;
        _source_file_lookup: SourceFileLookup;

        init(
            watchdog: WATCHDOG,
            source_file_lookup: SourceFileLookup
        ) is
            _watchdog = watchdog;
            _source_file_lookup = source_file_lookup;
        si

        handle(reader: IO.TextReader, writer: IO.TextWriter) is
            IoC.CONTAINER.instance.want_tab_delimited_logger(writer);

            let written_header = false;

            try
                let path = reader.read_line();
                let from_line = System.Convert.to_int32(reader.read_line());
                let from_column = System.Convert.to_int32(reader.read_line());
                let to_line = System.Convert.to_int32(reader.read_line());
                let to_column = System.Convert.to_int32(reader.read_line());

                Std.error.write_line("format: " + path + " " + from_line + "," + from_column + "," + to_line + "," + to_column);

                writer.write_line("FORMAT");
                written_header = true;

                if !_watchdog.want_restart then
                    format(path, from_line, from_column, to_line, to_column);
                fi

            catch e: Exception
                if !written_header then
                    writer.write_line("FORMAT");
                fi
            yrt

            Std.error.flush();

            writer.write("" + cast char(12));
            writer.flush();
        si

        format(uri: string, from_line: int, from_column: int, to_line: int, to_column: int) is
            let formatter = 
                new Syntax.Process.FORMATTER(
                    new LOCATION(uri, from_line, from_column, to_line, to_column)
                );

            let source_file = _source_file_lookup.find_source_file(uri);

            let root_node = source_file.definition;

            root_node.walk(formatter);
        si

        write_edit_list(writer: IO.TextWriter, locations: Iterable[LOCATION], new_name: string) is
            let lines = new Collections.LIST[string]();

            let files = new Collections.SET[string]();

            for location in locations do
                writer.write_line(
                    format_edit(location, new_name)
                );

                files.add(location.file_name);
            od
        si

        format_edit(location: LOCATION, new_name: string) -> string is
            let result = new System.Text.StringBuilder();

            result
                .append(location.file_name)
                .append('\t')
                .append(location.start_line)
                .append('\t')
                .append(location.start_column)
                .append('\t')
                .append(location.end_line)
                .append('\t')
                .append(location.end_column)
                .append('\t')
                .append(new_name);

            return result.to_string();
        si        
    si    
si