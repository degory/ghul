namespace IR is
    use Logging.Logger;
    use Semantic.Symbols;
    use Semantic.Types.Type;
    use Values.Value;

    trait SymbolLoader is
        find_symbol: (string) -> Symbol public;
        
        load_self(location: Source.LOCATION) -> Value;

        load_outer_self(location: Source.LOCATION) -> Value;

        load_namespace(symbol: Namespace) -> Value;

        load_class(symbol: Symbol) -> Value;

        load_trait(symbol: Symbol) -> Value;

        load_struct(symbol: Symbol) -> Value;

        load_enum_struct_member(symbol: Symbol) -> Value;

        load_instance_anonymous_function(symbol: Symbol, func_type: Type) -> Value;

        load_static_anonymous_function(symbol: Symbol, func_type: Type) -> Value;

        load_global_anonymous_function(symbol: Symbol, func_type: Type) -> Value;

        load_closure(symbol: Closure, frame: Value, func_type: Type) -> Value;
        
        load_function_group(from: Value, symbol: Symbol) -> Value;

        load_global_function(symbol: Symbol) -> Value;

        load_instance_method(location: Source.LOCATION, from: Value, symbol: Symbol);

        load_struct_method(location: Source.LOCATION, from: Value, symbol: Symbol);

        // FIXME: this needs to create a pointer to the function:
        load_static_method(symbol: Symbol) -> Value;

        load_local_variable(location: Source.LOCATION, symbol: Variable) -> Value;

        load_outer_local_variable(location: Source.LOCATION, symbol: Variable) -> Value;

        store_local_variable(location: Source.LOCATION, symbol: Variable, value: Value, is_initialize: bool) -> Value;

        load_local_argument(location: Source.LOCATION, symbol: Variable) -> Value;

        load_outer_local_argument(location: Source.LOCATION, symbol: Variable) -> Value;
        
        store_local_argument(location: Source.LOCATION, symbol: Variable, value: Value, is_initialize: bool) -> Value;

        load_global_variable(symbol: Variable) -> Value;

        store_global_variable(symbol: Variable, value: Value) -> Value;
            
        load_instance_variable(location: Source.LOCATION, from: Value, symbol: Variable) -> Value;

        store_instance_variable(location: Source.LOCATION, from: Value, symbol: Variable, value: Value) -> Value;

        load_static_field(symbol: Variable) -> Value;

        store_static_field(symbol: Variable, value: Value) -> Value;

        load_instance_property(location: Source.LOCATION, from: Value, symbol: Property) -> Value;
        load_static_property(location: Source.LOCATION, symbol: Property) -> Value;
        load_global_property(location: Source.LOCATION, symbol: Property) -> Value;

        load_property(location: Source.LOCATION, from: Value, symbol: Property, is_static: bool) -> Value;

        store_instance_property(location: Source.LOCATION, from: Value, symbol: Property, value: Value) -> Value;
        store_static_property(location: Source.LOCATION, symbol: Property, value: Value) -> Value;
        store_global_property(location: Source.LOCATION, symbol: Property, value: Value) -> Value;

        store_property(location: Source.LOCATION, from: Value, symbol: Property, value: Value, is_static: bool) -> Value;
    si    
si
