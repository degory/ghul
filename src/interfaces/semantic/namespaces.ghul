namespace Semantic is
    use IO.Std;
        
    use Logging;
    use Source;

    use Syntax.Trees;

    // This trait manages entering and leaving namespace scopes: it merges all lexical
    // namespace blocks that reference the same namespace into a single aggregated
    // namespace symbol, so that symbols defined within any lexical namespace are visible
    // across all references to that namespace

    trait Namespaces: Collections.Iterable[Symbols.Namespace] is
        get_qualified_name(name: string) -> string;

        dump_counts();

        clear();

        mark_namespace_stack() -> int;

        release_namepace_stack(mark: int);
        
        find_root_matches(results: Collections.MutableMap[string,Symbols.Symbol]);

        find_namespace_matches(namespace_name: string, results: Collections.MutableMap[string,Symbols.Symbol]);
        
        declare_and_enter_namespace(
            location: LOCATION, 
            name: string, 
            symbol_definition_listener: Semantic.SymbolDefinitionListener
        ) -> Symbols.Namespace;

        pop_all_namespaces();

        enter_namespace(location: LOCATION, name: string) -> Symbols.Namespace;

        leave_namespace(location: LOCATION, name: string);

        find_or_add_namespace(name: string, qualified_name: string) -> Symbols.Namespace;

        find_namespace(qualified_name: string) -> Symbols.Namespace;
    si
si
