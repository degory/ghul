namespace Semantic is
    use IO.Std;

    use Logging;
    use Source;

    use Syntax.Trees.Node;

    // the symbol table helps keeps track of what scope the compiler is currently working in. it does not
    // manage searching for symbols within or across scopes: that's handled by the scopes themselves

    trait SymbolTable is
        stack: Collections.List[Scope];

        current_scope: Scope;

        global_scope: Scope;

        current_namespace_context: NamespaceContext;

        current_declaration_context: DeclarationContext;

        current_instance_context: Symbols.Classy;
        
        current_function: Symbols.Function;

        current_closure_context: ClosureContext;

        current_capture_context: Symbols.Symbol;

        current_function_group: Symbols.FunctionGroup;

        current_property: Symbols.Property;

        all_classes: Collections.Iterable[Symbols.Classy];

        all_namespaces: Collections.Iterable[Symbols.Namespace];
                    
        clear();

        scope_for(node: Node) -> Scope;

        associate_node_with_scope(node: Node, scope: Scope);

        mark_scope_stack() -> int;

        release_scope_stack(mark: int);

        enter_scope(node: Syntax.Trees.Node);

        enter_scope(scope: Scope);

        leave_scope(node: Syntax.Trees.Node);

        leave_scope(scope: Scope);

        leave_scope();
    si
si
